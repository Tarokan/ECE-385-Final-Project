
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000155e4 memsz 0x000155e4 flags r-x
    LOAD off    0x00016604 vaddr 0x10015604 paddr 0x10017100 align 2**12
         filesz 0x00001afc memsz 0x00001afc flags rw-
    LOAD off    0x00018bfc vaddr 0x10018bfc paddr 0x10018bfc align 2**12
         filesz 0x00000000 memsz 0x00000180 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012ca4  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000027a4  10012e60  10012e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001afc  10015604  10017100  00016604  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000180  10018bfc  10018bfc  00018bfc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00018100  2**0
                  CONTENTS
  7 .sdram        00000000  10018d7c  10018d7c  00018100  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00018100  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d88  00000000  00000000  00018128  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024699  00000000  00000000  00018eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009391  00000000  00000000  0003d549  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b710  00000000  00000000  000468da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002660  00000000  00000000  00051fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003540  00000000  00000000  0005464c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016ea9  00000000  00000000  00057b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006ea38  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013a8  00000000  00000000  0006ea78  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000736fc  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000736ff  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007370b  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007370c  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007370d  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00073711  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00073715  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00073719  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00073724  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0007372f  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0007373a  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  00073745  2**0
                  CONTENTS, READONLY
 30 .jdi          000042ea  00000000  00000000  0007376b  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00072a82  00000000  00000000  00077a55  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10012e60 l    d  .rodata	00000000 .rodata
10015604 l    d  .rwdata	00000000 .rwdata
10018bfc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10018d7c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10018bfc l     O .bss	00000002 ctl_reg.3342
10018bfe l     O .bss	00000002 no_device.3343
00000000 l    df *ABS*	00000000 movement.c
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
10003b30 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001534a l     O .rodata	00000010 zeroes.4181
1001535a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1000611c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10007cc4 l     F .text	00000008 __fp_lock
10007ccc l     F .text	00000008 __fp_unlock
10007ce0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10015604 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10015a48 l     O .rwdata	00000020 lc_ctype_charset
10015a28 l     O .rwdata	00000020 lc_message_charset
10015a68 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
1001538c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
1000b210 l     F .text	000000fc __sprint_r.part.0
100154c0 l     O .rodata	00000010 blanks.4125
100154b0 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1001061c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10010744 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10010770 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10010878 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10010974 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10010a58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10010c3c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100170f0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10010ef0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10011040 l     F .text	00000038 alt_dev_reg
10016050 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1001131c l     F .text	00000204 altera_avalon_jtag_uart_irq
10011520 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10011df4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1001228c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100123e4 l     F .text	00000050 alt_get_errno
10012434 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
1000a850 g     F .text	00000074 _mprec_log10
1000a93c g     F .text	0000008c __any_on
1000cc3c g     F .text	00000054 _isatty_r
10015398 g     O .rodata	00000028 __mprec_tinytens
10010b84 g     F .text	00000078 alt_main
10003cec g     F .text	000000b8 _puts_r
10018c7c g     O .bss	00000100 alt_irq
1000cc90 g     F .text	0000005c _lseek_r
100170b0 g     O .rwdata	00000004 AVL_PTR
10018c14 g     O .bss	00000002 x_coord
10017100 g       *ABS*	00000000 __flash_rwdata_start
10013a60 g     O .rodata	000004b0 map2
10014870 g     O .rodata	000004b0 map5
1000f03c g     F .text	00000084 .hidden __eqdf2
10018d7c g       *ABS*	00000000 __alt_heap_start
10003cb0 g     F .text	0000003c printf
1000ceb8 g     F .text	0000009c _wcrtomb_r
1000b108 g     F .text	0000005c __sseek
10008028 g     F .text	00000010 __sinit
1000cd48 g     F .text	00000154 __swbuf_r
10008aa0 g     F .text	0000007c _setlocale_r
10007e80 g     F .text	00000078 __sfmoreglue
10010c1c g     F .text	00000020 __malloc_unlock
10003a34 g     F .text	00000080 UsbGetRetryCnt
10001b90 g     F .text	000001cc isGrass
10002950 g     F .text	0000009c encounter
10009700 g     F .text	0000015c memmove
100001f8 g     F .text	00000050 IO_init
10008010 g     F .text	00000018 _cleanup
10009980 g     F .text	000000a8 _Balloc
1000f0c0 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10018c16 g     O .bss	00000002 player_direction
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000cbe4 g     F .text	00000058 _fstat_r
10018c38 g     O .bss	00000004 errno
1000b084 g     F .text	00000008 __seofread
10001d5c g     F .text	00000280 isMapChange
10018c40 g     O .bss	00000004 alt_argv
1001f0b0 g       *ABS*	00000000 _gp
10010ec0 g     F .text	00000030 usleep
100024e4 g     F .text	000000dc setEncounter
10015ed0 g     O .rwdata	00000180 alt_fd_list
10012844 g     F .text	00000090 alt_find_dev
100095c8 g     F .text	00000138 memcpy
10002640 g     F .text	00000020 isEncounter
10007cd4 g     F .text	0000000c _cleanup_r
10010444 g     F .text	000000d0 .hidden __floatsidf
1001236c g     F .text	00000078 alt_io_redirect
1000f1a0 g     F .text	000000e0 .hidden __ltdf2
10012e60 g       *ABS*	00000000 __DTOR_END__
10003da4 g     F .text	00000014 puts
10018c12 g     O .bss	00000002 finish
1000af68 g     F .text	00000074 __fpclassifyd
1000a7ac g     F .text	000000a4 __ratio
100170b4 g     O .rwdata	00000002 allyID
1000c748 g     F .text	00000024 __vfiprintf_internal
1001171c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10003c84 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10003c4c g     F .text	00000008 .hidden __udivsi3
100108c8 g     F .text	000000ac isatty
100153e8 g     O .rodata	000000c8 __mprec_tens
10008b1c g     F .text	0000000c __locale_charset
10018c34 g     O .bss	00000004 __malloc_top_pad
10001458 g     F .text	00000264 moveDown
100030d4 g     F .text	00000264 UsbGetConfigDesc2
100170c8 g     O .rwdata	00000004 __mb_cur_max
10008b4c g     F .text	0000000c _localeconv_r
10009da8 g     F .text	0000003c __i2b
1000848c g     F .text	000004a4 __sfvwrite_r
1001359e g     O .rodata	00000012 default_dir
1000afdc g     F .text	00000054 _sbrk_r
100027f8 g     F .text	000000fc menuEnter
1000ccec g     F .text	0000005c _read_r
10002660 g     F .text	000000d4 attack
100170e8 g     O .rwdata	00000004 alt_max_fd
1000c8f4 g     F .text	00000100 _fclose_r
10007c94 g     F .text	00000030 fflush
10018c30 g     O .bss	00000004 __malloc_max_sbrked_mem
1000de20 g     F .text	0000089c .hidden __adddf3
1000a554 g     F .text	0000011c __b2d
1000d804 g     F .text	0000061c .hidden __umoddi3
10010aa8 g     F .text	000000dc lseek
100170c0 g     O .rwdata	00000004 _global_impure_ptr
1000a9c8 g     F .text	000005a0 _realloc_r
10018d7c g       *ABS*	00000000 __bss_end
1001219c g     F .text	000000f0 alt_iic_isr_register
10012720 g     F .text	00000104 alt_tick
1000d1c4 g     F .text	00000640 .hidden __udivdi3
1000ca08 g     F .text	00000184 _fputwc_r
100153c0 g     O .rodata	00000028 __mprec_bigtens
10009b8c g     F .text	00000104 __s2b
10001fdc g     F .text	00000180 getMapChange
10010514 g     F .text	000000a4 .hidden __floatunsidf
1000a2fc g     F .text	00000060 __mcmp
10002b34 g     F .text	000000fc UsbSetAddress
10008048 g     F .text	00000018 __fp_lock_all
10012150 g     F .text	0000004c alt_ic_irq_enabled
10012688 g     F .text	00000098 alt_alarm_stop
10002734 g     F .text	000000c4 menuSelect
10018c48 g     O .bss	00000004 alt_irq_active
10013f10 g     O .rodata	000004b0 map3
100170b6 g     O .rwdata	00000002 allyHP
100000ec g     F .exceptions	000000d0 alt_irq_handler
10015ea8 g     O .rwdata	00000028 alt_dev_null
10011dd8 g     F .text	0000001c alt_dcache_flush_all
10009c90 g     F .text	00000068 __hi0bits
100002b4 g     F .text	00000084 IO_read
100103bc g     F .text	00000088 .hidden __fixdfsi
10017100 g       *ABS*	00000000 __ram_rwdata_end
100170e0 g     O .rwdata	00000008 alt_dev_list
10010f40 g     F .text	00000100 write
10015604 g       *ABS*	00000000 __ram_rodata_end
100107c0 g     F .text	000000b8 fstat
10018c18 g     O .bss	00000002 enemyID
1000f1a0 g     F .text	000000e0 .hidden __ledf2
100170bc g     O .rwdata	00000002 potionNUM
10003ab4 g     F .text	0000007c UsbPrintMem
1000a074 g     F .text	00000140 __pow5mult
10014d20 g     O .rodata	000004b0 gameOver
1000b324 g     F .text	00001424 ___vfiprintf_internal_r
10018c28 g     O .bss	00000004 __nlocale_changed
10003c54 g     F .text	00000008 .hidden __umodsi3
10018d7c g       *ABS*	00000000 end
10018c04 g     O .bss	00000002 redraw
10018c08 g     O .bss	00000002 is_encounter
10011258 g     F .text	000000c4 altera_avalon_jtag_uart_init
10012e60 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100105b8 g     F .text	00000064 .hidden __clzsi2
10018c06 g     O .bss	00000002 map_id
10011928 g     F .text	00000218 altera_avalon_jtag_uart_write
10008038 g     F .text	00000004 __sfp_lock_acquire
100094e0 g     F .text	000000e8 memchr
10003ecc g     F .text	000020fc ___vfprintf_internal_r
10003434 g     F .text	000000fc UsbClassRequest
1000819c g     F .text	000002f0 _free_r
10008b28 g     F .text	00000010 __locale_mb_cur_max
10012c98 g     F .text	00000194 __call_exitprocs
10018c24 g     O .bss	00000004 __mlocale_changed
100170cc g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
10018c4c g     O .bss	00000004 _alt_tick_rate
10003dd0 g     F .text	00000064 rand
100170ba g     O .rwdata	00000002 pokeballNUM
1000a1b4 g     F .text	00000148 __lshift
10018c50 g     O .bss	00000004 _alt_nticks
10010c8c g     F .text	00000104 read
100110ac g     F .text	00000048 alt_sys_init
10012b84 g     F .text	00000114 __register_exitproc
10009de4 g     F .text	00000290 __multiply
100115c8 g     F .text	00000068 altera_avalon_jtag_uart_close
10003c5c g     F .text	00000028 .hidden __mulsi3
10015604 g       *ABS*	00000000 __ram_rwdata_start
10012e60 g       *ABS*	00000000 __ram_rodata_start
10018c54 g     O .bss	00000028 __malloc_current_mallinfo
1000a670 g     F .text	0000013c __d2b
100028f4 g     F .text	0000005c enemyTurn
10002c30 g     F .text	00000144 UsbGetDeviceDesc1
100110f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
100129e8 g     F .text	000000d4 alt_get_fd
10011c80 g     F .text	00000158 alt_busy_sleep
1000c7c8 g     F .text	00000054 _close_r
10012b08 g     F .text	0000007c memcmp
100111b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10018d7c g       *ABS*	00000000 __alt_stack_base
10011204 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10005fec g     F .text	00000130 __swsetup_r
10018c00 g     O .bss	00000004 init
1000e6bc g     F .text	00000980 .hidden __divdf3
100016bc g     F .text	0000026c moveRight
10007ef8 g     F .text	00000118 __sfp
1000a8c4 g     F .text	00000078 __copybits
10015aa0 g     O .rwdata	00000408 __malloc_av_
10008044 g     F .text	00000004 __sinit_lock_release
1000f280 g     F .text	0000086c .hidden __muldf3
1000b030 g     F .text	00000054 __sread
100039b0 g     F .text	00000084 UsbWaitTDListDone
100128d4 g     F .text	00000114 alt_find_file
10011e44 g     F .text	000000a4 alt_dev_llist_insert
10010bfc g     F .text	00000020 __malloc_lock
10010e10 g     F .text	000000b0 sbrk
10007a6c g     F .text	00000228 _fflush_r
1000c81c g     F .text	000000d8 _calloc_r
10001094 g     F .text	0000015c setCoordinates
10018c1a g     O .bss	00000002 y_coord
10018bfc g       *ABS*	00000000 __bss_start
1000215c g     F .text	000000a4 changeMap
1000985c g     F .text	00000124 memset
10000338 g     F .text	00000d5c main
10018c44 g     O .bss	00000004 alt_envp
10018c2c g     O .bss	00000004 __malloc_max_total_mem
10011154 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10018c1c g     O .bss	00000002 enemyLVL
10003338 g     F .text	000000fc UsbSetConfig
1000ce9c g     F .text	0000001c __swbuf
10003db8 g     F .text	00000018 srand
10018c0c g     O .bss	00000004 last_time
1000b164 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000c9f4 g     F .text	00000014 fclose
10006344 g     F .text	00001728 _dtoa_r
10008d38 g     F .text	000007a8 _malloc_r
1000d02c g     F .text	00000030 __ascii_wctomb
100170ec g     O .rwdata	00000004 alt_errno
10008930 g     F .text	000000b8 _fwalk
10003b9c g     F .text	00000054 .hidden __divsi3
10008078 g     F .text	00000124 _malloc_trim_r
10003530 g     F .text	00000144 UsbGetHidDesc
10012e60 g       *ABS*	00000000 __CTOR_END__
1000b16c g     F .text	000000a4 strcmp
10012e60 g       *ABS*	00000000 __flash_rodata_start
100143c0 g     O .rodata	000004b0 map4
10012e60 g       *ABS*	00000000 __DTOR_LIST__
10013568 g     O .rodata	00000012 maps
100025c0 g     F .text	00000080 finishEncounter
1000f03c g     F .text	00000084 .hidden __nedf2
10002a40 g     F .text	00000044 UsbRead
10011078 g     F .text	00000034 alt_irq_init
10010d90 g     F .text	00000080 alt_release_fd
100154d0 g     O .rodata	00000100 .hidden __clz_tab
10018c1e g     O .bss	00000002 enemyHP
10018c20 g     O .bss	00000004 _PathLocale
10012abc g     F .text	00000014 atexit
1000c76c g     F .text	0000005c _write_r
10008b58 g     F .text	0000001c setlocale
100170c4 g     O .rwdata	00000004 _impure_ptr
10018c3c g     O .bss	00000004 alt_argc
10011f44 g     F .text	0000005c _do_dtors
10008b44 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
1000a4f4 g     F .text	00000060 __ulp
10008060 g     F .text	00000018 __fp_unlock_all
100170d8 g     O .rwdata	00000008 alt_fs_list
100170b8 g     O .rwdata	00000002 allyLVL
10001928 g     F .text	00000268 moveUp
10003674 g     F .text	0000033c UsbGetReportDesc
100011f0 g     F .text	00000268 moveLeft
10000020 g       *ABS*	00000000 __ram_exceptions_start
10008b74 g     F .text	0000000c localeconv
100135b0 g     O .rodata	000004b0 map1
10011fbc g     F .text	00000050 alt_ic_isr_register
10017100 g       *ABS*	00000000 _edata
10018d7c g       *ABS*	00000000 _end
100029ec g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
10011630 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
100120ac g     F .text	000000a4 alt_ic_irq_disable
1000b08c g     F .text	0000007c __swrite
100170d0 g     O .rwdata	00000004 __malloc_trim_threshold
10012824 g     F .text	00000020 altera_nios2_qsys_irq_init
10008b38 g     F .text	0000000c __locale_msgcharset
10012ad0 g     F .text	00000038 exit
100089e8 g     F .text	000000b8 _fwalk_reent
1000a35c g     F .text	00000198 __mdiff
10003bf0 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000803c g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000248 g     F .text	0000006c IO_write
10002200 g     F .text	00000090 unsetRedraw
10018c10 g     O .bss	00000002 menuSelection
1001358c g     O .rodata	00000012 default_y
10012e2c g     F .text	00000034 _exit
10011b40 g     F .text	00000140 alt_alarm_start
1000d0b8 g     F .text	0000010c .hidden __muldi3
10008b80 g     F .text	000001b8 __smakebuf_r
10003e34 g     F .text	00000098 strlen
10012528 g     F .text	00000160 open
1000f0c0 g     F .text	000000e0 .hidden __gedf2
100170d4 g     O .rwdata	00000004 __wctomb
1000b30c g     F .text	00000018 __sprint_r
10011fa0 g     F .text	0000001c alt_icache_flush_all
100170f4 g     O .rwdata	00000004 alt_priority_mask
1001200c g     F .text	000000a0 alt_ic_irq_enable
10005fc8 g     F .text	00000024 __vfprintf_internal
1000d05c g     F .text	0000005c _wctomb_r
1000faec g     F .text	000008d0 .hidden __subdf3
10009cf8 g     F .text	000000b0 __lo0bits
10002f48 g     F .text	0000018c UsbGetConfigDesc1
100170f8 g     O .rwdata	00000008 alt_alarm_list
10011ee8 g     F .text	0000005c _do_ctors
10002a84 g     F .text	000000b0 UsbSoftReset
1000cf54 g     F .text	000000d8 wcrtomb
1001066c g     F .text	000000d8 close
10002d74 g     F .text	000001d4 UsbGetDeviceDesc2
100109d8 g     F .text	00000080 alt_load
1001357a g     O .rodata	00000012 default_x
1000cb8c g     F .text	00000058 fputwc
10002290 g     F .text	00000254 keyStroke
00000000  w      *UND*	00000000 free
10008040 g     F .text	00000004 __sinit_lock_acquire
10009a50 g     F .text	0000013c __multadd
10009a28 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	008400b4 	movhi	r2,4098
10000130:	10a31f04 	addi	r2,r2,-29572
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	008400b4 	movhi	r2,4098
10000148:	10a31f04 	addi	r2,r2,-29572
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6bc2c14 	ori	gp,gp,61616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	10a2ff14 	ori	r2,r2,35836

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18e35f14 	ori	r3,r3,36220

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	00109d80 	call	100109d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	0010b840 	call	10010b84 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001f8:	deffff04 	addi	sp,sp,-4
100001fc:	df000015 	stw	fp,0(sp)
10000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000204:	00802004 	movi	r2,128
10000208:	00c00044 	movi	r3,1
1000020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000210:	00801404 	movi	r2,80
10000214:	00c00044 	movi	r3,1
10000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000021c:	00801004 	movi	r2,64
10000220:	00c00044 	movi	r3,1
10000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000228:	00801c04 	movi	r2,112
1000022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000230:	00801804 	movi	r2,96
10000234:	10000015 	stw	zero,0(r2)
}
10000238:	e037883a 	mov	sp,fp
1000023c:	df000017 	ldw	fp,0(sp)
10000240:	dec00104 	addi	sp,sp,4
10000244:	f800283a 	ret

10000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000248:	defffd04 	addi	sp,sp,-12
1000024c:	df000215 	stw	fp,8(sp)
10000250:	df000204 	addi	fp,sp,8
10000254:	2007883a 	mov	r3,r4
10000258:	2805883a 	mov	r2,r5
1000025c:	e0fffe05 	stb	r3,-8(fp)
10000260:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10000264:	00801c04 	movi	r2,112
10000268:	e0fffe03 	ldbu	r3,-8(fp)
1000026c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000270:	00802004 	movi	r2,128
10000274:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000278:	00801004 	movi	r2,64
1000027c:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
10000280:	00801804 	movi	r2,96
10000284:	e0ffff0b 	ldhu	r3,-4(fp)
10000288:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
1000028c:	00801004 	movi	r2,64
10000290:	00c00044 	movi	r3,1
10000294:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000298:	00802004 	movi	r2,128
1000029c:	00c00044 	movi	r3,1
100002a0:	10c00005 	stb	r3,0(r2)
}
100002a4:	e037883a 	mov	sp,fp
100002a8:	df000017 	ldw	fp,0(sp)
100002ac:	dec00104 	addi	sp,sp,4
100002b0:	f800283a 	ret

100002b4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002b4:	defffc04 	addi	sp,sp,-16
100002b8:	dfc00315 	stw	ra,12(sp)
100002bc:	df000215 	stw	fp,8(sp)
100002c0:	df000204 	addi	fp,sp,8
100002c4:	2005883a 	mov	r2,r4
100002c8:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;

	*otg_hpi_address = Address;
100002cc:	00801c04 	movi	r2,112
100002d0:	e0ffff03 	ldbu	r3,-4(fp)
100002d4:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
100002d8:	00802004 	movi	r2,128
100002dc:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100002e0:	00801404 	movi	r2,80
100002e4:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
100002e8:	00801804 	movi	r2,96
100002ec:	10800017 	ldw	r2,0(r2)
100002f0:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
100002f4:	00801404 	movi	r2,80
100002f8:	00c00044 	movi	r3,1
100002fc:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000300:	00802004 	movi	r2,128
10000304:	00c00044 	movi	r3,1
10000308:	10c00005 	stb	r3,0(r2)

	printf("%x\n",temp);
1000030c:	e0bffe0b 	ldhu	r2,-8(fp)
10000310:	01040074 	movhi	r4,4097
10000314:	210b9804 	addi	r4,r4,11872
10000318:	100b883a 	mov	r5,r2
1000031c:	0003cb00 	call	10003cb0 <printf>
	return temp;
10000320:	e0bffe0b 	ldhu	r2,-8(fp)
}
10000324:	e037883a 	mov	sp,fp
10000328:	dfc00117 	ldw	ra,4(sp)
1000032c:	df000017 	ldw	fp,0(sp)
10000330:	dec00204 	addi	sp,sp,8
10000334:	f800283a 	ret

10000338 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
10000338:	defff904 	addi	sp,sp,-28
1000033c:	dfc00615 	stw	ra,24(sp)
10000340:	df000515 	stw	fp,20(sp)
10000344:	df000504 	addi	fp,sp,20
	IO_init();
10000348:	00001f80 	call	100001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
1000034c:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
10000350:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
10000354:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
10000358:	01040074 	movhi	r4,4097
1000035c:	210b9904 	addi	r4,r4,11876
10000360:	0003da40 	call	10003da4 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10000364:	0002a840 	call	10002a84 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10000368:	01005104 	movi	r4,324
1000036c:	000b883a 	mov	r5,zero
10000370:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000374:	01302414 	movui	r4,49296
10000378:	017fffd4 	movui	r5,65535
1000037c:	00029ec0 	call	100029ec <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000380:	01006d04 	movi	r4,436
10000384:	01409604 	movi	r5,600
10000388:	00029ec0 	call	100029ec <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
1000038c:	00811004 	movi	r2,1088
10000390:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000394:	e0bffb0b 	ldhu	r2,-20(fp)
10000398:	01005084 	movi	r4,322
1000039c:	100b883a 	mov	r5,r2
100003a0:	00029ec0 	call	100029ec <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
100003a4:	00808404 	movi	r2,528
100003a8:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
100003ac:	e0bffe0b 	ldhu	r2,-8(fp)
100003b0:	01302314 	movui	r4,49292
100003b4:	100b883a 	mov	r5,r2
100003b8:	00029ec0 	call	100029ec <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100003bc:	01007104 	movi	r4,452
100003c0:	000b883a 	mov	r5,zero
100003c4:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100003c8:	01007184 	movi	r4,454
100003cc:	000b883a 	mov	r5,zero
100003d0:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100003d4:	01007204 	movi	r4,456
100003d8:	000b883a 	mov	r5,zero
100003dc:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100003e0:	01007284 	movi	r4,458
100003e4:	000b883a 	mov	r5,zero
100003e8:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100003ec:	01007304 	movi	r4,460
100003f0:	000b883a 	mov	r5,zero
100003f4:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100003f8:	01007384 	movi	r4,462
100003fc:	000b883a 	mov	r5,zero
10000400:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000404:	01007404 	movi	r4,464
10000408:	000b883a 	mov	r5,zero
1000040c:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000410:	01007484 	movi	r4,466
10000414:	000b883a 	mov	r5,zero
10000418:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
1000041c:	01007504 	movi	r4,468
10000420:	000b883a 	mov	r5,zero
10000424:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000428:	01007584 	movi	r4,470
1000042c:	000b883a 	mov	r5,zero
10000430:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000434:	01007604 	movi	r4,472
10000438:	000b883a 	mov	r5,zero
1000043c:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000440:	01007684 	movi	r4,474
10000444:	000b883a 	mov	r5,zero
10000448:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
1000044c:	01007704 	movi	r4,476
10000450:	000b883a 	mov	r5,zero
10000454:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000458:	01007784 	movi	r4,478
1000045c:	000b883a 	mov	r5,zero
10000460:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000464:	01007084 	movi	r4,450
10000468:	01401c84 	movi	r5,114
1000046c:	00029ec0 	call	100029ec <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000470:	01000044 	movi	r4,1
10000474:	01738054 	movui	r5,52737
10000478:	00002480 	call	10000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
1000047c:	0001883a 	nop
10000480:	010000c4 	movi	r4,3
10000484:	00002b40 	call	100002b4 <IO_read>
10000488:	10bfffcc 	andi	r2,r2,65535
1000048c:	103ffc26 	beq	r2,zero,10000480 <__alt_data_end+0xf8000480>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000490:	0001883a 	nop
10000494:	01000044 	movi	r4,1
10000498:	00002b40 	call	100002b4 <IO_read>
1000049c:	10bfffcc 	andi	r2,r2,65535
100004a0:	1083fb58 	cmpnei	r2,r2,4077
100004a4:	10000826 	beq	r2,zero,100004c8 <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100004a8:	01000044 	movi	r4,1
100004ac:	00002b40 	call	100002b4 <IO_read>
100004b0:	10bfffcc 	andi	r2,r2,65535
100004b4:	01040074 	movhi	r4,4097
100004b8:	210b9f04 	addi	r4,r4,11900
100004bc:	100b883a 	mov	r5,r2
100004c0:	0003cb00 	call	10003cb0 <printf>
		goto USB_HOT_PLUG;
100004c4:	003fa706 	br	10000364 <__alt_data_end+0xf8000364>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100004c8:	01040074 	movhi	r4,4097
100004cc:	210ba804 	addi	r4,r4,11936
100004d0:	0003cb00 	call	10003cb0 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100004d4:	01007084 	movi	r4,450
100004d8:	01401d04 	movi	r5,116
100004dc:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100004e0:	01007104 	movi	r4,452
100004e4:	01400f04 	movi	r5,60
100004e8:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004ec:	01007184 	movi	r4,454
100004f0:	000b883a 	mov	r5,zero
100004f4:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100004f8:	01007204 	movi	r4,456
100004fc:	000b883a 	mov	r5,zero
10000500:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000504:	01007284 	movi	r4,458
10000508:	000b883a 	mov	r5,zero
1000050c:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000510:	01007304 	movi	r4,460
10000514:	000b883a 	mov	r5,zero
10000518:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
1000051c:	01007384 	movi	r4,462
10000520:	000b883a 	mov	r5,zero
10000524:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000528:	01007404 	movi	r4,464
1000052c:	000b883a 	mov	r5,zero
10000530:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000534:	01007484 	movi	r4,466
10000538:	000b883a 	mov	r5,zero
1000053c:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000540:	01007504 	movi	r4,468
10000544:	000b883a 	mov	r5,zero
10000548:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
1000054c:	01007584 	movi	r4,470
10000550:	000b883a 	mov	r5,zero
10000554:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000558:	01007604 	movi	r4,472
1000055c:	000b883a 	mov	r5,zero
10000560:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000564:	01007684 	movi	r4,474
10000568:	000b883a 	mov	r5,zero
1000056c:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000570:	01007704 	movi	r4,476
10000574:	000b883a 	mov	r5,zero
10000578:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000057c:	01007784 	movi	r4,478
10000580:	000b883a 	mov	r5,zero
10000584:	00029ec0 	call	100029ec <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000588:	01000044 	movi	r4,1
1000058c:	01738054 	movui	r5,52737
10000590:	00002480 	call	10000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000594:	0001883a 	nop
10000598:	01000044 	movi	r4,1
1000059c:	00002b40 	call	100002b4 <IO_read>
100005a0:	10bfffcc 	andi	r2,r2,65535
100005a4:	1083fb58 	cmpnei	r2,r2,4077
100005a8:	10000826 	beq	r2,zero,100005cc <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
100005ac:	01000044 	movi	r4,1
100005b0:	00002b40 	call	100002b4 <IO_read>
100005b4:	10bfffcc 	andi	r2,r2,65535
100005b8:	01040074 	movhi	r4,4097
100005bc:	210b9f04 	addi	r4,r4,11900
100005c0:	100b883a 	mov	r5,r2
100005c4:	0003cb00 	call	10003cb0 <printf>
		goto USB_HOT_PLUG;
100005c8:	003f6606 	br	10000364 <__alt_data_end+0xf8000364>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100005cc:	00b02284 	movi	r2,-16246
100005d0:	d0a6d30d 	sth	r2,-25780(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100005d4:	008c0004 	movi	r2,12288
100005d8:	d0a6d38d 	sth	r2,-25778(gp)
	fs_device = A_DP_STAT;
100005dc:	00880004 	movi	r2,8192
100005e0:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100005e4:	d0a6d30b 	ldhu	r2,-25780(gp)
100005e8:	10bfffcc 	andi	r2,r2,65535
100005ec:	1009883a 	mov	r4,r2
100005f0:	0002a400 	call	10002a40 <UsbRead>
100005f4:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
100005f8:	d0a6d38b 	ldhu	r2,-25778(gp)
100005fc:	e0fffb0b 	ldhu	r3,-20(fp)
10000600:	1884703a 	and	r2,r3,r2
10000604:	10bfffcc 	andi	r2,r2,65535
10000608:	1000341e 	bne	r2,zero,100006dc <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
1000060c:	e03ffbc5 	stb	zero,-17(fp)
10000610:	00001006 	br	10000654 <main+0x31c>
		{
			usleep(5*1000);
10000614:	0104e204 	movi	r4,5000
10000618:	0010ec00 	call	10010ec0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000061c:	d0a6d30b 	ldhu	r2,-25780(gp)
10000620:	10bfffcc 	andi	r2,r2,65535
10000624:	1009883a 	mov	r4,r2
10000628:	0002a400 	call	10002a40 <UsbRead>
1000062c:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
10000630:	d0a6d38b 	ldhu	r2,-25778(gp)
10000634:	e0fffb0b 	ldhu	r3,-20(fp)
10000638:	1884703a 	and	r2,r3,r2
1000063c:	10bfffcc 	andi	r2,r2,65535
10000640:	10000126 	beq	r2,zero,10000648 <main+0x310>
10000644:	00000606 	br	10000660 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000648:	e0bffbc3 	ldbu	r2,-17(fp)
1000064c:	10800044 	addi	r2,r2,1
10000650:	e0bffbc5 	stb	r2,-17(fp)
10000654:	e0bffbc3 	ldbu	r2,-17(fp)
10000658:	10800170 	cmpltui	r2,r2,5
1000065c:	103fed1e 	bne	r2,zero,10000614 <__alt_data_end+0xf8000614>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
10000660:	d0a6d38b 	ldhu	r2,-25778(gp)
10000664:	e0fffb0b 	ldhu	r3,-20(fp)
10000668:	1884703a 	and	r2,r3,r2
1000066c:	10bfffcc 	andi	r2,r2,65535
10000670:	1000261e 	bne	r2,zero,1000070c <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000674:	01040074 	movhi	r4,4097
10000678:	210bac04 	addi	r4,r4,11952
1000067c:	0003da40 	call	10003da4 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000680:	01040074 	movhi	r4,4097
10000684:	210bb604 	addi	r4,r4,11992
10000688:	0003da40 	call	10003da4 <puts>
			while (!(usb_ctl_val & no_device))
1000068c:	00000d06 	br	100006c4 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000690:	d0a6d30b 	ldhu	r2,-25780(gp)
10000694:	10bfffcc 	andi	r2,r2,65535
10000698:	1009883a 	mov	r4,r2
1000069c:	0002a400 	call	10002a40 <UsbRead>
100006a0:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
100006a4:	d0a6d38b 	ldhu	r2,-25778(gp)
100006a8:	e0fffb0b 	ldhu	r3,-20(fp)
100006ac:	1884703a 	and	r2,r3,r2
100006b0:	10bfffcc 	andi	r2,r2,65535
100006b4:	10000126 	beq	r2,zero,100006bc <main+0x384>
					goto USB_HOT_PLUG;
100006b8:	003f2a06 	br	10000364 <__alt_data_end+0xf8000364>

				usleep(2000);
100006bc:	0101f404 	movi	r4,2000
100006c0:	0010ec00 	call	10010ec0 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100006c4:	d0a6d38b 	ldhu	r2,-25778(gp)
100006c8:	e0fffb0b 	ldhu	r3,-20(fp)
100006cc:	1884703a 	and	r2,r3,r2
100006d0:	10bfffcc 	andi	r2,r2,65535
100006d4:	103fee26 	beq	r2,zero,10000690 <__alt_data_end+0xf8000690>
100006d8:	00000c06 	br	1000070c <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100006dc:	e0fffb0b 	ldhu	r3,-20(fp)
100006e0:	e0bffc0b 	ldhu	r2,-16(fp)
100006e4:	1884703a 	and	r2,r3,r2
100006e8:	10bfffcc 	andi	r2,r2,65535
100006ec:	10000426 	beq	r2,zero,10000700 <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
100006f0:	01040074 	movhi	r4,4097
100006f4:	210bc204 	addi	r4,r4,12040
100006f8:	0003da40 	call	10003da4 <puts>
100006fc:	00000306 	br	1000070c <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000700:	01040074 	movhi	r4,4097
10000704:	210bc904 	addi	r4,r4,12068
10000708:	0003da40 	call	10003da4 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
1000070c:	0002b340 	call	10002b34 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000710:	00000306 	br	10000720 <main+0x3e8>
	{
		UsbSetAddress();
10000714:	0002b340 	call	10002b34 <UsbSetAddress>
		usleep(10*1000);
10000718:	0109c404 	movi	r4,10000
1000071c:	0010ec00 	call	10010ec0 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000720:	010000c4 	movi	r4,3
10000724:	00002b40 	call	100002b4 <IO_read>
10000728:	10bfffcc 	andi	r2,r2,65535
1000072c:	1080040c 	andi	r2,r2,16
10000730:	103ff826 	beq	r2,zero,10000714 <__alt_data_end+0xf8000714>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000734:	00039b00 	call	100039b0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
10000738:	01000084 	movi	r4,2
1000073c:	01414184 	movi	r5,1286
10000740:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000744:	0009883a 	mov	r4,zero
10000748:	00002b40 	call	100002b4 <IO_read>
1000074c:	10bfffcc 	andi	r2,r2,65535
10000750:	01040074 	movhi	r4,4097
10000754:	210bd004 	addi	r4,r4,12096
10000758:	100b883a 	mov	r5,r2
1000075c:	0003cb00 	call	10003cb0 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000760:	01000084 	movi	r4,2
10000764:	01414204 	movi	r5,1288
10000768:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000076c:	0009883a 	mov	r4,zero
10000770:	00002b40 	call	100002b4 <IO_read>
10000774:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
10000778:	e0bffb0b 	ldhu	r2,-20(fp)
1000077c:	01040074 	movhi	r4,4097
10000780:	210bdb04 	addi	r4,r4,12140
10000784:	100b883a 	mov	r5,r2
10000788:	0003cb00 	call	10003cb0 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
1000078c:	e0bffb0b 	ldhu	r2,-20(fp)
10000790:	108000e0 	cmpeqi	r2,r2,3
10000794:	1000031e 	bne	r2,zero,100007a4 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000798:	0003a340 	call	10003a34 <UsbGetRetryCnt>
1000079c:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
100007a0:	003ef006 	br	10000364 <__alt_data_end+0xf8000364>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
100007a4:	01040074 	movhi	r4,4097
100007a8:	210be704 	addi	r4,r4,12188
100007ac:	0003da40 	call	10003da4 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
100007b0:	0002c300 	call	10002c30 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007b4:	00000306 	br	100007c4 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
100007b8:	0002c300 	call	10002c30 <UsbGetDeviceDesc1>
		usleep(10*1000);
100007bc:	0109c404 	movi	r4,10000
100007c0:	0010ec00 	call	10010ec0 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007c4:	010000c4 	movi	r4,3
100007c8:	00002b40 	call	100002b4 <IO_read>
100007cc:	10bfffcc 	andi	r2,r2,65535
100007d0:	1080040c 	andi	r2,r2,16
100007d4:	103ff826 	beq	r2,zero,100007b8 <__alt_data_end+0xf80007b8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007d8:	00039b00 	call	100039b0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100007dc:	01000084 	movi	r4,2
100007e0:	01414184 	movi	r5,1286
100007e4:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007e8:	0009883a 	mov	r4,zero
100007ec:	00002b40 	call	100002b4 <IO_read>
100007f0:	10bfffcc 	andi	r2,r2,65535
100007f4:	01040074 	movhi	r4,4097
100007f8:	210bf604 	addi	r4,r4,12248
100007fc:	100b883a 	mov	r5,r2
10000800:	0003cb00 	call	10003cb0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000804:	01000084 	movi	r4,2
10000808:	01414204 	movi	r5,1288
1000080c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000810:	0009883a 	mov	r4,zero
10000814:	00002b40 	call	100002b4 <IO_read>
10000818:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
1000081c:	e0bffb0b 	ldhu	r2,-20(fp)
10000820:	01040074 	movhi	r4,4097
10000824:	210c0104 	addi	r4,r4,12292
10000828:	100b883a 	mov	r5,r2
1000082c:	0003cb00 	call	10003cb0 <printf>
	while (usb_ctl_val != 0x03)
10000830:	00000206 	br	1000083c <main+0x504>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000834:	0003a340 	call	10003a34 <UsbGetRetryCnt>
10000838:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000083c:	e0bffb0b 	ldhu	r2,-20(fp)
10000840:	108000d8 	cmpnei	r2,r2,3
10000844:	103ffb1e 	bne	r2,zero,10000834 <__alt_data_end+0xf8000834>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
10000848:	01040074 	movhi	r4,4097
1000084c:	210c0d04 	addi	r4,r4,12340
10000850:	0003da40 	call	10003da4 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10000854:	0002d740 	call	10002d74 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000858:	00000306 	br	10000868 <main+0x530>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
1000085c:	0002d740 	call	10002d74 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000860:	0109c404 	movi	r4,10000
10000864:	0010ec00 	call	10010ec0 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000868:	010000c4 	movi	r4,3
1000086c:	00002b40 	call	100002b4 <IO_read>
10000870:	10bfffcc 	andi	r2,r2,65535
10000874:	1080040c 	andi	r2,r2,16
10000878:	103ff826 	beq	r2,zero,1000085c <__alt_data_end+0xf800085c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000087c:	00039b00 	call	100039b0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000880:	01000084 	movi	r4,2
10000884:	01414184 	movi	r5,1286
10000888:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000088c:	0009883a 	mov	r4,zero
10000890:	00002b40 	call	100002b4 <IO_read>
10000894:	10bfffcc 	andi	r2,r2,65535
10000898:	01040074 	movhi	r4,4097
1000089c:	210bf604 	addi	r4,r4,12248
100008a0:	100b883a 	mov	r5,r2
100008a4:	0003cb00 	call	10003cb0 <printf>

	IO_write(HPI_ADDR,0x0508);
100008a8:	01000084 	movi	r4,2
100008ac:	01414204 	movi	r5,1288
100008b0:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008b4:	0009883a 	mov	r4,zero
100008b8:	00002b40 	call	100002b4 <IO_read>
100008bc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008c0:	e0bffb0b 	ldhu	r2,-20(fp)
100008c4:	01040074 	movhi	r4,4097
100008c8:	210c0104 	addi	r4,r4,12292
100008cc:	100b883a 	mov	r5,r2
100008d0:	0003cb00 	call	10003cb0 <printf>
	while (usb_ctl_val != 0x03)
100008d4:	00000206 	br	100008e0 <main+0x5a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008d8:	0003a340 	call	10003a34 <UsbGetRetryCnt>
100008dc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008e0:	e0bffb0b 	ldhu	r2,-20(fp)
100008e4:	108000d8 	cmpnei	r2,r2,3
100008e8:	103ffb1e 	bne	r2,zero,100008d8 <__alt_data_end+0xf80008d8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100008ec:	01040074 	movhi	r4,4097
100008f0:	210c2104 	addi	r4,r4,12420
100008f4:	0003da40 	call	10003da4 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100008f8:	0002f480 	call	10002f48 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008fc:	00000306 	br	1000090c <main+0x5d4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
10000900:	0002f480 	call	10002f48 <UsbGetConfigDesc1>
		usleep(10*1000);
10000904:	0109c404 	movi	r4,10000
10000908:	0010ec00 	call	10010ec0 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000090c:	010000c4 	movi	r4,3
10000910:	00002b40 	call	100002b4 <IO_read>
10000914:	10bfffcc 	andi	r2,r2,65535
10000918:	1080040c 	andi	r2,r2,16
1000091c:	103ff826 	beq	r2,zero,10000900 <__alt_data_end+0xf8000900>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000920:	00039b00 	call	100039b0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000924:	01000084 	movi	r4,2
10000928:	01414184 	movi	r5,1286
1000092c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000930:	0009883a 	mov	r4,zero
10000934:	00002b40 	call	100002b4 <IO_read>
10000938:	10bfffcc 	andi	r2,r2,65535
1000093c:	01040074 	movhi	r4,4097
10000940:	210c3304 	addi	r4,r4,12492
10000944:	100b883a 	mov	r5,r2
10000948:	0003cb00 	call	10003cb0 <printf>

	IO_write(HPI_ADDR,0x0508);
1000094c:	01000084 	movi	r4,2
10000950:	01414204 	movi	r5,1288
10000954:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000958:	0009883a 	mov	r4,zero
1000095c:	00002b40 	call	100002b4 <IO_read>
10000960:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000964:	e0bffb0b 	ldhu	r2,-20(fp)
10000968:	01040074 	movhi	r4,4097
1000096c:	210c3e04 	addi	r4,r4,12536
10000970:	100b883a 	mov	r5,r2
10000974:	0003cb00 	call	10003cb0 <printf>
	while (usb_ctl_val != 0x03)
10000978:	00000206 	br	10000984 <main+0x64c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000097c:	0003a340 	call	10003a34 <UsbGetRetryCnt>
10000980:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000984:	e0bffb0b 	ldhu	r2,-20(fp)
10000988:	108000d8 	cmpnei	r2,r2,3
1000098c:	103ffb1e 	bne	r2,zero,1000097c <__alt_data_end+0xf800097c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000990:	01040074 	movhi	r4,4097
10000994:	210c4a04 	addi	r4,r4,12584
10000998:	0003da40 	call	10003da4 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
1000099c:	00030d40 	call	100030d4 <UsbGetConfigDesc2>

	usleep(100*1000);
100009a0:	010000b4 	movhi	r4,2
100009a4:	2121a804 	addi	r4,r4,-31072
100009a8:	0010ec00 	call	10010ec0 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009ac:	00000306 	br	100009bc <main+0x684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
100009b0:	00030d40 	call	100030d4 <UsbGetConfigDesc2>
		usleep(10*1000);
100009b4:	0109c404 	movi	r4,10000
100009b8:	0010ec00 	call	10010ec0 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009bc:	010000c4 	movi	r4,3
100009c0:	00002b40 	call	100002b4 <IO_read>
100009c4:	10bfffcc 	andi	r2,r2,65535
100009c8:	1080040c 	andi	r2,r2,16
100009cc:	103ff826 	beq	r2,zero,100009b0 <__alt_data_end+0xf80009b0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009d0:	00039b00 	call	100039b0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009d4:	01000084 	movi	r4,2
100009d8:	01414184 	movi	r5,1286
100009dc:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009e0:	0009883a 	mov	r4,zero
100009e4:	00002b40 	call	100002b4 <IO_read>
100009e8:	10bfffcc 	andi	r2,r2,65535
100009ec:	01040074 	movhi	r4,4097
100009f0:	210c5d04 	addi	r4,r4,12660
100009f4:	100b883a 	mov	r5,r2
100009f8:	0003cb00 	call	10003cb0 <printf>

	IO_write(HPI_ADDR,0x0508);
100009fc:	01000084 	movi	r4,2
10000a00:	01414204 	movi	r5,1288
10000a04:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a08:	0009883a 	mov	r4,zero
10000a0c:	00002b40 	call	100002b4 <IO_read>
10000a10:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000a14:	e0bffb0b 	ldhu	r2,-20(fp)
10000a18:	01040074 	movhi	r4,4097
10000a1c:	210c6804 	addi	r4,r4,12704
10000a20:	100b883a 	mov	r5,r2
10000a24:	0003cb00 	call	10003cb0 <printf>
	while (usb_ctl_val != 0x03)
10000a28:	00000206 	br	10000a34 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a2c:	0003a340 	call	10003a34 <UsbGetRetryCnt>
10000a30:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a34:	e0bffb0b 	ldhu	r2,-20(fp)
10000a38:	108000d8 	cmpnei	r2,r2,3
10000a3c:	103ffb1e 	bne	r2,zero,10000a2c <__alt_data_end+0xf8000a2c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a40:	01040074 	movhi	r4,4097
10000a44:	210c7404 	addi	r4,r4,12752
10000a48:	0003da40 	call	10003da4 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a4c:	01000084 	movi	r4,2
10000a50:	01415b04 	movi	r5,1388
10000a54:	00002480 	call	10000248 <IO_write>
	code = IO_read(HPI_DATA);
10000a58:	0009883a 	mov	r4,zero
10000a5c:	00002b40 	call	100002b4 <IO_read>
10000a60:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000a64:	e0bffe8b 	ldhu	r2,-6(fp)
10000a68:	108000cc 	andi	r2,r2,3
10000a6c:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000a70:	e0bffe8b 	ldhu	r2,-6(fp)
10000a74:	01040074 	movhi	r4,4097
10000a78:	210c8704 	addi	r4,r4,12828
10000a7c:	100b883a 	mov	r5,r2
10000a80:	0003cb00 	call	10003cb0 <printf>

	if (code == 0x01)
10000a84:	e0bffe8b 	ldhu	r2,-6(fp)
10000a88:	10800058 	cmpnei	r2,r2,1
10000a8c:	1000041e 	bne	r2,zero,10000aa0 <main+0x768>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000a90:	01040074 	movhi	r4,4097
10000a94:	210c8a04 	addi	r4,r4,12840
10000a98:	0003da40 	call	10003da4 <puts>
10000a9c:	00000306 	br	10000aac <main+0x774>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000aa0:	01040074 	movhi	r4,4097
10000aa4:	210c9904 	addi	r4,r4,12900
10000aa8:	0003da40 	call	10003da4 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000aac:	01000084 	movi	r4,2
10000ab0:	01415d84 	movi	r5,1398
10000ab4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000ab8:	0009883a 	mov	r4,zero
10000abc:	0141cfc4 	movi	r5,1855
10000ac0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000ac4:	0009883a 	mov	r4,zero
10000ac8:	01604154 	movui	r5,33029
10000acc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000ad0:	0009883a 	mov	r4,zero
10000ad4:	014000c4 	movi	r5,3
10000ad8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000adc:	0009883a 	mov	r4,zero
10000ae0:	01400204 	movi	r5,8
10000ae4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000ae8:	0009883a 	mov	r4,zero
10000aec:	016b0294 	movui	r5,44042
10000af0:	00002480 	call	10000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000af4:	01006c04 	movi	r4,432
10000af8:	01415d84 	movi	r5,1398
10000afc:	00029ec0 	call	100029ec <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b00:	01000084 	movi	r4,2
10000b04:	01415f04 	movi	r5,1404
10000b08:	00002480 	call	10000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b0c:	0009883a 	mov	r4,zero
10000b10:	00002b40 	call	100002b4 <IO_read>
10000b14:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000b18:	e0bfff03 	ldbu	r2,-4(fp)
10000b1c:	01040074 	movhi	r4,4097
10000b20:	210ca204 	addi	r4,r4,12936
10000b24:	100b883a 	mov	r5,r2
10000b28:	0003cb00 	call	10003cb0 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b2c:	00033380 	call	10003338 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b30:	00000306 	br	10000b40 <main+0x808>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b34:	00033380 	call	10003338 <UsbSetConfig>
		usleep(10*1000);
10000b38:	0109c404 	movi	r4,10000
10000b3c:	0010ec00 	call	10010ec0 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b40:	010000c4 	movi	r4,3
10000b44:	00002b40 	call	100002b4 <IO_read>
10000b48:	10bfffcc 	andi	r2,r2,65535
10000b4c:	1080040c 	andi	r2,r2,16
10000b50:	103ff826 	beq	r2,zero,10000b34 <__alt_data_end+0xf8000b34>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b54:	00039b00 	call	100039b0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b58:	01000084 	movi	r4,2
10000b5c:	01414184 	movi	r5,1286
10000b60:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b64:	0009883a 	mov	r4,zero
10000b68:	00002b40 	call	100002b4 <IO_read>
10000b6c:	10bfffcc 	andi	r2,r2,65535
10000b70:	01040074 	movhi	r4,4097
10000b74:	210cac04 	addi	r4,r4,12976
10000b78:	100b883a 	mov	r5,r2
10000b7c:	0003cb00 	call	10003cb0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b80:	01000084 	movi	r4,2
10000b84:	01414204 	movi	r5,1288
10000b88:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b8c:	0009883a 	mov	r4,zero
10000b90:	00002b40 	call	100002b4 <IO_read>
10000b94:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000b98:	e0bffb0b 	ldhu	r2,-20(fp)
10000b9c:	01040074 	movhi	r4,4097
10000ba0:	210cb704 	addi	r4,r4,13020
10000ba4:	100b883a 	mov	r5,r2
10000ba8:	0003cb00 	call	10003cb0 <printf>
	while (usb_ctl_val != 0x03)
10000bac:	00000206 	br	10000bb8 <main+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000bb0:	0003a340 	call	10003a34 <UsbGetRetryCnt>
10000bb4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000bb8:	e0bffb0b 	ldhu	r2,-20(fp)
10000bbc:	108000d8 	cmpnei	r2,r2,3
10000bc0:	103ffb1e 	bne	r2,zero,10000bb0 <__alt_data_end+0xf8000bb0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000bc4:	01040074 	movhi	r4,4097
10000bc8:	210cc304 	addi	r4,r4,13068
10000bcc:	0003da40 	call	10003da4 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000bd0:	00034340 	call	10003434 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bd4:	00000306 	br	10000be4 <main+0x8ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000bd8:	00034340 	call	10003434 <UsbClassRequest>
		usleep(10*1000);
10000bdc:	0109c404 	movi	r4,10000
10000be0:	0010ec00 	call	10010ec0 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000be4:	010000c4 	movi	r4,3
10000be8:	00002b40 	call	100002b4 <IO_read>
10000bec:	10bfffcc 	andi	r2,r2,65535
10000bf0:	1080040c 	andi	r2,r2,16
10000bf4:	103ff826 	beq	r2,zero,10000bd8 <__alt_data_end+0xf8000bd8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000bf8:	00039b00 	call	100039b0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000bfc:	01000084 	movi	r4,2
10000c00:	01414184 	movi	r5,1286
10000c04:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c08:	0009883a 	mov	r4,zero
10000c0c:	00002b40 	call	100002b4 <IO_read>
10000c10:	10bfffcc 	andi	r2,r2,65535
10000c14:	01040074 	movhi	r4,4097
10000c18:	210cd504 	addi	r4,r4,13140
10000c1c:	100b883a 	mov	r5,r2
10000c20:	0003cb00 	call	10003cb0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c24:	01000084 	movi	r4,2
10000c28:	01414204 	movi	r5,1288
10000c2c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c30:	0009883a 	mov	r4,zero
10000c34:	00002b40 	call	100002b4 <IO_read>
10000c38:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c3c:	e0bffb0b 	ldhu	r2,-20(fp)
10000c40:	01040074 	movhi	r4,4097
10000c44:	210ce004 	addi	r4,r4,13184
10000c48:	100b883a 	mov	r5,r2
10000c4c:	0003cb00 	call	10003cb0 <printf>
	while (usb_ctl_val != 0x03)
10000c50:	00000206 	br	10000c5c <main+0x924>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c54:	0003a340 	call	10003a34 <UsbGetRetryCnt>
10000c58:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c5c:	e0bffb0b 	ldhu	r2,-20(fp)
10000c60:	108000d8 	cmpnei	r2,r2,3
10000c64:	103ffb1e 	bne	r2,zero,10000c54 <__alt_data_end+0xf8000c54>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000c68:	01040074 	movhi	r4,4097
10000c6c:	210cec04 	addi	r4,r4,13232
10000c70:	0003da40 	call	10003da4 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000c74:	00035300 	call	10003530 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c78:	00000306 	br	10000c88 <main+0x950>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000c7c:	00035300 	call	10003530 <UsbGetHidDesc>
		usleep(10*1000);
10000c80:	0109c404 	movi	r4,10000
10000c84:	0010ec00 	call	10010ec0 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c88:	010000c4 	movi	r4,3
10000c8c:	00002b40 	call	100002b4 <IO_read>
10000c90:	10bfffcc 	andi	r2,r2,65535
10000c94:	1080040c 	andi	r2,r2,16
10000c98:	103ff826 	beq	r2,zero,10000c7c <__alt_data_end+0xf8000c7c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c9c:	00039b00 	call	100039b0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ca0:	01000084 	movi	r4,2
10000ca4:	01414184 	movi	r5,1286
10000ca8:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cac:	0009883a 	mov	r4,zero
10000cb0:	00002b40 	call	100002b4 <IO_read>
10000cb4:	10bfffcc 	andi	r2,r2,65535
10000cb8:	01040074 	movhi	r4,4097
10000cbc:	210cd504 	addi	r4,r4,13140
10000cc0:	100b883a 	mov	r5,r2
10000cc4:	0003cb00 	call	10003cb0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cc8:	01000084 	movi	r4,2
10000ccc:	01414204 	movi	r5,1288
10000cd0:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cd4:	0009883a 	mov	r4,zero
10000cd8:	00002b40 	call	100002b4 <IO_read>
10000cdc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000ce0:	e0bffb0b 	ldhu	r2,-20(fp)
10000ce4:	01040074 	movhi	r4,4097
10000ce8:	210ce004 	addi	r4,r4,13184
10000cec:	100b883a 	mov	r5,r2
10000cf0:	0003cb00 	call	10003cb0 <printf>
	while (usb_ctl_val != 0x03)
10000cf4:	00000206 	br	10000d00 <main+0x9c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000cf8:	0003a340 	call	10003a34 <UsbGetRetryCnt>
10000cfc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d00:	e0bffb0b 	ldhu	r2,-20(fp)
10000d04:	108000d8 	cmpnei	r2,r2,3
10000d08:	103ffb1e 	bne	r2,zero,10000cf8 <__alt_data_end+0xf8000cf8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d0c:	01040074 	movhi	r4,4097
10000d10:	210cfe04 	addi	r4,r4,13304
10000d14:	0003da40 	call	10003da4 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000d18:	00036740 	call	10003674 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d1c:	00000306 	br	10000d2c <main+0x9f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d20:	00036740 	call	10003674 <UsbGetReportDesc>
		usleep(10*1000);
10000d24:	0109c404 	movi	r4,10000
10000d28:	0010ec00 	call	10010ec0 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d2c:	010000c4 	movi	r4,3
10000d30:	00002b40 	call	100002b4 <IO_read>
10000d34:	10bfffcc 	andi	r2,r2,65535
10000d38:	1080040c 	andi	r2,r2,16
10000d3c:	103ff826 	beq	r2,zero,10000d20 <__alt_data_end+0xf8000d20>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d40:	00039b00 	call	100039b0 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d44:	01000084 	movi	r4,2
10000d48:	01414184 	movi	r5,1286
10000d4c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d50:	0009883a 	mov	r4,zero
10000d54:	00002b40 	call	100002b4 <IO_read>
10000d58:	10bfffcc 	andi	r2,r2,65535
10000d5c:	01040074 	movhi	r4,4097
10000d60:	210d1204 	addi	r4,r4,13384
10000d64:	100b883a 	mov	r5,r2
10000d68:	0003cb00 	call	10003cb0 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d6c:	01000084 	movi	r4,2
10000d70:	01414204 	movi	r5,1288
10000d74:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d78:	0009883a 	mov	r4,zero
10000d7c:	00002b40 	call	100002b4 <IO_read>
10000d80:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000d84:	e0bffb0b 	ldhu	r2,-20(fp)
10000d88:	01040074 	movhi	r4,4097
10000d8c:	210d1e04 	addi	r4,r4,13432
10000d90:	100b883a 	mov	r5,r2
10000d94:	0003cb00 	call	10003cb0 <printf>
	while (usb_ctl_val != 0x03)
10000d98:	00000206 	br	10000da4 <main+0xa6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d9c:	0003a340 	call	10003a34 <UsbGetRetryCnt>
10000da0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000da4:	e0bffb0b 	ldhu	r2,-20(fp)
10000da8:	108000d8 	cmpnei	r2,r2,3
10000dac:	103ffb1e 	bne	r2,zero,10000d9c <__alt_data_end+0xf8000d9c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000db0:	01040074 	movhi	r4,4097
10000db4:	210d2a04 	addi	r4,r4,13480
10000db8:	0003da40 	call	10003da4 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000dbc:	0109c404 	movi	r4,10000
10000dc0:	0010ec00 	call	10010ec0 <usleep>
	while(1)
	{
		toggle++;
10000dc4:	e0bffb83 	ldbu	r2,-18(fp)
10000dc8:	10800044 	addi	r2,r2,1
10000dcc:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000dd0:	01000084 	movi	r4,2
10000dd4:	01414004 	movi	r5,1280
10000dd8:	00002480 	call	10000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000ddc:	0009883a 	mov	r4,zero
10000de0:	01414704 	movi	r5,1308
10000de4:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000de8:	e0bfff03 	ldbu	r2,-4(fp)
10000dec:	108003cc 	andi	r2,r2,15
10000df0:	0009883a 	mov	r4,zero
10000df4:	100b883a 	mov	r5,r2
10000df8:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000dfc:	0009883a 	mov	r4,zero
10000e00:	0140a444 	movi	r5,657
10000e04:	00002480 	call	10000248 <IO_write>
		if(toggle%2)
10000e08:	e0bffb83 	ldbu	r2,-18(fp)
10000e0c:	1080004c 	andi	r2,r2,1
10000e10:	10803fcc 	andi	r2,r2,255
10000e14:	10000426 	beq	r2,zero,10000e28 <main+0xaf0>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000e18:	0009883a 	mov	r4,zero
10000e1c:	01400044 	movi	r5,1
10000e20:	00002480 	call	10000248 <IO_write>
10000e24:	00000306 	br	10000e34 <main+0xafc>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000e28:	0009883a 	mov	r4,zero
10000e2c:	01401044 	movi	r5,65
10000e30:	00002480 	call	10000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000e34:	0009883a 	mov	r4,zero
10000e38:	014004c4 	movi	r5,19
10000e3c:	00002480 	call	10000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000e40:	0009883a 	mov	r4,zero
10000e44:	000b883a 	mov	r5,zero
10000e48:	00002480 	call	10000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000e4c:	01006c04 	movi	r4,432
10000e50:	01414004 	movi	r5,1280
10000e54:	00029ec0 	call	100029ec <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e58:	00002406 	br	10000eec <main+0xbb4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000e5c:	01000084 	movi	r4,2
10000e60:	01414004 	movi	r5,1280
10000e64:	00002480 	call	10000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000e68:	0009883a 	mov	r4,zero
10000e6c:	01414704 	movi	r5,1308
10000e70:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e74:	e0bfff03 	ldbu	r2,-4(fp)
10000e78:	108003cc 	andi	r2,r2,15
10000e7c:	0009883a 	mov	r4,zero
10000e80:	100b883a 	mov	r5,r2
10000e84:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000e88:	0009883a 	mov	r4,zero
10000e8c:	0140a444 	movi	r5,657
10000e90:	00002480 	call	10000248 <IO_write>
			if(toggle%2)
10000e94:	e0bffb83 	ldbu	r2,-18(fp)
10000e98:	1080004c 	andi	r2,r2,1
10000e9c:	10803fcc 	andi	r2,r2,255
10000ea0:	10000426 	beq	r2,zero,10000eb4 <main+0xb7c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000ea4:	0009883a 	mov	r4,zero
10000ea8:	01400044 	movi	r5,1
10000eac:	00002480 	call	10000248 <IO_write>
10000eb0:	00000306 	br	10000ec0 <main+0xb88>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000eb4:	0009883a 	mov	r4,zero
10000eb8:	01401044 	movi	r5,65
10000ebc:	00002480 	call	10000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000ec0:	0009883a 	mov	r4,zero
10000ec4:	014004c4 	movi	r5,19
10000ec8:	00002480 	call	10000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000ecc:	0009883a 	mov	r4,zero
10000ed0:	000b883a 	mov	r5,zero
10000ed4:	00002480 	call	10000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ed8:	01006c04 	movi	r4,432
10000edc:	01414004 	movi	r5,1280
10000ee0:	00029ec0 	call	100029ec <UsbWrite>
			usleep(10*1000);
10000ee4:	0109c404 	movi	r4,10000
10000ee8:	0010ec00 	call	10010ec0 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000eec:	010000c4 	movi	r4,3
10000ef0:	00002b40 	call	100002b4 <IO_read>
10000ef4:	10bfffcc 	andi	r2,r2,65535
10000ef8:	1080040c 	andi	r2,r2,16
10000efc:	103fd726 	beq	r2,zero,10000e5c <__alt_data_end+0xf8000e5c>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
10000f00:	00039b00 	call	100039b0 <UsbWaitTDListDone>
10000f04:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10000f08:	01000084 	movi	r4,2
10000f0c:	01414784 	movi	r5,1310
10000f10:	00002480 	call	10000248 <IO_write>
		keycode = IO_read(HPI_DATA);
10000f14:	0009883a 	mov	r4,zero
10000f18:	00002b40 	call	100002b4 <IO_read>
10000f1c:	10bfffcc 	andi	r2,r2,65535
10000f20:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10000f24:	01040074 	movhi	r4,4097
10000f28:	210d3e04 	addi	r4,r4,13560
10000f2c:	e17ffd17 	ldw	r5,-12(fp)
10000f30:	0003cb00 	call	10003cb0 <printf>
		keyStroke(keycode & 0x00FF); // MAYBE?
10000f34:	e0bffd17 	ldw	r2,-12(fp)
10000f38:	10803fcc 	andi	r2,r2,255
10000f3c:	1009883a 	mov	r4,r2
10000f40:	00022900 	call	10002290 <keyStroke>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
10000f44:	e0bffd17 	ldw	r2,-12(fp)
10000f48:	10c03fcc 	andi	r3,r2,255
10000f4c:	00802404 	movi	r2,144
10000f50:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
10000f54:	01003204 	movi	r4,200
10000f58:	0010ec00 	call	10010ec0 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000f5c:	d0a6d30b 	ldhu	r2,-25780(gp)
10000f60:	10bfffcc 	andi	r2,r2,65535
10000f64:	1009883a 	mov	r4,r2
10000f68:	0002a400 	call	10002a40 <UsbRead>
10000f6c:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
10000f70:	d0a6d38b 	ldhu	r2,-25778(gp)
10000f74:	e0fffb0b 	ldhu	r3,-20(fp)
10000f78:	1884703a 	and	r2,r3,r2
10000f7c:	10bfffcc 	andi	r2,r2,65535
10000f80:	1000201e 	bne	r2,zero,10001004 <main+0xccc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000f84:	e03ffbc5 	stb	zero,-17(fp)
10000f88:	00001006 	br	10000fcc <main+0xc94>
			{
				usleep(5*1000);
10000f8c:	0104e204 	movi	r4,5000
10000f90:	0010ec00 	call	10010ec0 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10000f94:	d0a6d30b 	ldhu	r2,-25780(gp)
10000f98:	10bfffcc 	andi	r2,r2,65535
10000f9c:	1009883a 	mov	r4,r2
10000fa0:	0002a400 	call	10002a40 <UsbRead>
10000fa4:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
10000fa8:	d0a6d38b 	ldhu	r2,-25778(gp)
10000fac:	e0fffb0b 	ldhu	r3,-20(fp)
10000fb0:	1884703a 	and	r2,r3,r2
10000fb4:	10bfffcc 	andi	r2,r2,65535
10000fb8:	10000126 	beq	r2,zero,10000fc0 <main+0xc88>
10000fbc:	00000606 	br	10000fd8 <main+0xca0>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000fc0:	e0bffbc3 	ldbu	r2,-17(fp)
10000fc4:	10800044 	addi	r2,r2,1
10000fc8:	e0bffbc5 	stb	r2,-17(fp)
10000fcc:	e0bffbc3 	ldbu	r2,-17(fp)
10000fd0:	108001f0 	cmpltui	r2,r2,7
10000fd4:	103fed1e 	bne	r2,zero,10000f8c <__alt_data_end+0xf8000f8c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
10000fd8:	d0a6d38b 	ldhu	r2,-25778(gp)
10000fdc:	e0fffb0b 	ldhu	r3,-20(fp)
10000fe0:	1884703a 	and	r2,r3,r2
10000fe4:	10bfffcc 	andi	r2,r2,65535
10000fe8:	1000061e 	bne	r2,zero,10001004 <main+0xccc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10000fec:	01040074 	movhi	r4,4097
10000ff0:	210d4704 	addi	r4,r4,13596
10000ff4:	0003da40 	call	10003da4 <puts>
				printf("[INFO]: please insert again!!! \n");
10000ff8:	01040074 	movhi	r4,4097
10000ffc:	210d5204 	addi	r4,r4,13640
10001000:	0003da40 	call	10003da4 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001004:	00001d06 	br	1000107c <main+0xd44>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001008:	d0a6d30b 	ldhu	r2,-25780(gp)
1000100c:	10bfffcc 	andi	r2,r2,65535
10001010:	1009883a 	mov	r4,r2
10001014:	0002a400 	call	10002a40 <UsbRead>
10001018:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
1000101c:	0104e204 	movi	r4,5000
10001020:	0010ec00 	call	10010ec0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001024:	d0a6d30b 	ldhu	r2,-25780(gp)
10001028:	10bfffcc 	andi	r2,r2,65535
1000102c:	1009883a 	mov	r4,r2
10001030:	0002a400 	call	10002a40 <UsbRead>
10001034:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001038:	0104e204 	movi	r4,5000
1000103c:	0010ec00 	call	10010ec0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001040:	d0a6d30b 	ldhu	r2,-25780(gp)
10001044:	10bfffcc 	andi	r2,r2,65535
10001048:	1009883a 	mov	r4,r2
1000104c:	0002a400 	call	10002a40 <UsbRead>
10001050:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001054:	0104e204 	movi	r4,5000
10001058:	0010ec00 	call	10010ec0 <usleep>

			if(usb_ctl_val & no_device)
1000105c:	d0a6d38b 	ldhu	r2,-25778(gp)
10001060:	e0fffb0b 	ldhu	r3,-20(fp)
10001064:	1884703a 	and	r2,r3,r2
10001068:	10bfffcc 	andi	r2,r2,65535
1000106c:	10000126 	beq	r2,zero,10001074 <main+0xd3c>
				goto USB_HOT_PLUG;
10001070:	003cbc06 	br	10000364 <__alt_data_end+0xf8000364>

			usleep(200);
10001074:	01003204 	movi	r4,200
10001078:	0010ec00 	call	10010ec0 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
1000107c:	d0a6d38b 	ldhu	r2,-25778(gp)
10001080:	e0fffb0b 	ldhu	r3,-20(fp)
10001084:	1884703a 	and	r2,r3,r2
10001088:	10bfffcc 	andi	r2,r2,65535
1000108c:	103fde26 	beq	r2,zero,10001008 <__alt_data_end+0xf8001008>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
10001090:	003f4c06 	br	10000dc4 <__alt_data_end+0xf8000dc4>

10001094 <setCoordinates>:
unsigned short potionNUM = 20;
// 0 = tackle, 1 = pound, 2 = ball, 3 = potion, 4 = flee, 5 = leer, 6-9 empty
unsigned short menuSelection = 0;
unsigned short finish = 0;

void setCoordinates() { // more like set player info
10001094:	defffc04 	addi	sp,sp,-16
10001098:	dfc00315 	stw	ra,12(sp)
1000109c:	df000215 	stw	fp,8(sp)
100010a0:	df000204 	addi	fp,sp,8
    unsigned short coords = ((x_coord & 0x00FF) << 8)  + (y_coord & 0x00FF);
100010a4:	d0a6d90b 	ldhu	r2,-25756(gp)
100010a8:	10bfffcc 	andi	r2,r2,65535
100010ac:	1004923a 	slli	r2,r2,8
100010b0:	1007883a 	mov	r3,r2
100010b4:	d0a6da8b 	ldhu	r2,-25750(gp)
100010b8:	10803fcc 	andi	r2,r2,255
100010bc:	1885883a 	add	r2,r3,r2
100010c0:	e0bffe0d 	sth	r2,-8(fp)
    AVL_PTR[0] = coords;
100010c4:	d0a00017 	ldw	r2,-32768(gp)
100010c8:	e0fffe0b 	ldhu	r3,-8(fp)
100010cc:	10c0000d 	sth	r3,0(r2)
    unsigned short c = AVL_PTR[0];
100010d0:	d0a00017 	ldw	r2,-32768(gp)
100010d4:	1080000b 	ldhu	r2,0(r2)
100010d8:	e0bffe8d 	sth	r2,-6(fp)
    printf("+++++++++++++++++++++++++++\n");
100010dc:	01040074 	movhi	r4,4097
100010e0:	21147404 	addi	r4,r4,20944
100010e4:	0003da40 	call	10003da4 <puts>
    printf("SET COORDINATES TO %d, %d\n", x_coord, y_coord);
100010e8:	d0a6d90b 	ldhu	r2,-25756(gp)
100010ec:	10ffffcc 	andi	r3,r2,65535
100010f0:	d0a6da8b 	ldhu	r2,-25750(gp)
100010f4:	10bfffcc 	andi	r2,r2,65535
100010f8:	01040074 	movhi	r4,4097
100010fc:	21147b04 	addi	r4,r4,20972
10001100:	180b883a 	mov	r5,r3
10001104:	100d883a 	mov	r6,r2
10001108:	0003cb00 	call	10003cb0 <printf>
    printf("+++++++++++++++++++++++++++\n");
1000110c:	01040074 	movhi	r4,4097
10001110:	21147404 	addi	r4,r4,20944
10001114:	0003da40 	call	10003da4 <puts>

    redraw = 1;
10001118:	00800044 	movi	r2,1
1000111c:	d0a6d50d 	sth	r2,-25772(gp)
    unsigned short info = ((map_id & 0x000F) << 4) + ((is_encounter & 0x000F) << 3) + ((redraw & 0x000F) << 2) + (player_direction & 0x000F);
10001120:	d0a6d58b 	ldhu	r2,-25770(gp)
10001124:	10bfffcc 	andi	r2,r2,65535
10001128:	1004913a 	slli	r2,r2,4
1000112c:	10803fcc 	andi	r2,r2,255
10001130:	1007883a 	mov	r3,r2
10001134:	d0a6d60b 	ldhu	r2,-25768(gp)
10001138:	108003cc 	andi	r2,r2,15
1000113c:	100490fa 	slli	r2,r2,3
10001140:	1885883a 	add	r2,r3,r2
10001144:	1007883a 	mov	r3,r2
10001148:	d0a6d50b 	ldhu	r2,-25772(gp)
1000114c:	108003cc 	andi	r2,r2,15
10001150:	1085883a 	add	r2,r2,r2
10001154:	1085883a 	add	r2,r2,r2
10001158:	1885883a 	add	r2,r3,r2
1000115c:	1007883a 	mov	r3,r2
10001160:	d0a6d98b 	ldhu	r2,-25754(gp)
10001164:	108003cc 	andi	r2,r2,15
10001168:	1885883a 	add	r2,r3,r2
1000116c:	e0bfff0d 	sth	r2,-4(fp)
    AVL_PTR[2] = info;
10001170:	d0a00017 	ldw	r2,-32768(gp)
10001174:	10800104 	addi	r2,r2,4
10001178:	e0ffff0b 	ldhu	r3,-4(fp)
1000117c:	10c0000d 	sth	r3,0(r2)
    unsigned short i = AVL_PTR[2];
10001180:	d0a00017 	ldw	r2,-32768(gp)
10001184:	1080010b 	ldhu	r2,4(r2)
10001188:	e0bfff8d 	sth	r2,-2(fp)
    printf("+++++++++++++++++++++++++++@\n");
1000118c:	01040074 	movhi	r4,4097
10001190:	21148204 	addi	r4,r4,21000
10001194:	0003da40 	call	10003da4 <puts>
    printf("PLAYER DIR: %d, REDRAW: %d\n", player_direction, redraw);
10001198:	d0a6d98b 	ldhu	r2,-25754(gp)
1000119c:	10ffffcc 	andi	r3,r2,65535
100011a0:	d0a6d50b 	ldhu	r2,-25772(gp)
100011a4:	10bfffcc 	andi	r2,r2,65535
100011a8:	01040074 	movhi	r4,4097
100011ac:	21148a04 	addi	r4,r4,21032
100011b0:	180b883a 	mov	r5,r3
100011b4:	100d883a 	mov	r6,r2
100011b8:	0003cb00 	call	10003cb0 <printf>
    printf("PLAYER INFO: %d\n", info);
100011bc:	e0bfff0b 	ldhu	r2,-4(fp)
100011c0:	01040074 	movhi	r4,4097
100011c4:	21149104 	addi	r4,r4,21060
100011c8:	100b883a 	mov	r5,r2
100011cc:	0003cb00 	call	10003cb0 <printf>
    printf("+++++++++++++++++++++++++++\n");
100011d0:	01040074 	movhi	r4,4097
100011d4:	21147404 	addi	r4,r4,20944
100011d8:	0003da40 	call	10003da4 <puts>
}
100011dc:	e037883a 	mov	sp,fp
100011e0:	dfc00117 	ldw	ra,4(sp)
100011e4:	df000017 	ldw	fp,0(sp)
100011e8:	dec00204 	addi	sp,sp,8
100011ec:	f800283a 	ret

100011f0 <moveLeft>:

void moveLeft() {
100011f0:	defffe04 	addi	sp,sp,-8
100011f4:	dfc00115 	stw	ra,4(sp)
100011f8:	df000015 	stw	fp,0(sp)
100011fc:	d839883a 	mov	fp,sp
    if(x_coord == 0) {
10001200:	d0a6d90b 	ldhu	r2,-25756(gp)
10001204:	10bfffcc 	andi	r2,r2,65535
10001208:	1000011e 	bne	r2,zero,10001210 <moveLeft+0x20>
        return;
1000120c:	00008d06 	br	10001444 <moveLeft+0x254>
    }
    if(map_id == 1) {
10001210:	d0a6d58b 	ldhu	r2,-25770(gp)
10001214:	10bfffcc 	andi	r2,r2,65535
10001218:	10800058 	cmpnei	r2,r2,1
1000121c:	1000121e 	bne	r2,zero,10001268 <moveLeft+0x78>
      if(map1[y_coord * MAP_WIDTH + x_coord - 1] == 0x2) {
10001220:	d0a6da8b 	ldhu	r2,-25750(gp)
10001224:	10bfffcc 	andi	r2,r2,65535
10001228:	1009883a 	mov	r4,r2
1000122c:	01400a04 	movi	r5,40
10001230:	0003c5c0 	call	10003c5c <__mulsi3>
10001234:	1007883a 	mov	r3,r2
10001238:	d0a6d90b 	ldhu	r2,-25756(gp)
1000123c:	10bfffcc 	andi	r2,r2,65535
10001240:	1885883a 	add	r2,r3,r2
10001244:	10ffffc4 	addi	r3,r2,-1
10001248:	00840074 	movhi	r2,4097
1000124c:	108d6c04 	addi	r2,r2,13744
10001250:	10c5883a 	add	r2,r2,r3
10001254:	10800003 	ldbu	r2,0(r2)
10001258:	10803fcc 	andi	r2,r2,255
1000125c:	10800098 	cmpnei	r2,r2,2
10001260:	10006f1e 	bne	r2,zero,10001420 <moveLeft+0x230>
          return;
10001264:	00007706 	br	10001444 <moveLeft+0x254>
      }
    } else if(map_id == 2) {
10001268:	d0a6d58b 	ldhu	r2,-25770(gp)
1000126c:	10bfffcc 	andi	r2,r2,65535
10001270:	10800098 	cmpnei	r2,r2,2
10001274:	1000121e 	bne	r2,zero,100012c0 <moveLeft+0xd0>
      if(map2[y_coord * MAP_WIDTH + x_coord - 1] == 0x2) {
10001278:	d0a6da8b 	ldhu	r2,-25750(gp)
1000127c:	10bfffcc 	andi	r2,r2,65535
10001280:	1009883a 	mov	r4,r2
10001284:	01400a04 	movi	r5,40
10001288:	0003c5c0 	call	10003c5c <__mulsi3>
1000128c:	1007883a 	mov	r3,r2
10001290:	d0a6d90b 	ldhu	r2,-25756(gp)
10001294:	10bfffcc 	andi	r2,r2,65535
10001298:	1885883a 	add	r2,r3,r2
1000129c:	10ffffc4 	addi	r3,r2,-1
100012a0:	00840074 	movhi	r2,4097
100012a4:	108e9804 	addi	r2,r2,14944
100012a8:	10c5883a 	add	r2,r2,r3
100012ac:	10800003 	ldbu	r2,0(r2)
100012b0:	10803fcc 	andi	r2,r2,255
100012b4:	10800098 	cmpnei	r2,r2,2
100012b8:	1000591e 	bne	r2,zero,10001420 <moveLeft+0x230>
          return;
100012bc:	00006106 	br	10001444 <moveLeft+0x254>
      }
    } else if(map_id == 3) {
100012c0:	d0a6d58b 	ldhu	r2,-25770(gp)
100012c4:	10bfffcc 	andi	r2,r2,65535
100012c8:	108000d8 	cmpnei	r2,r2,3
100012cc:	1000121e 	bne	r2,zero,10001318 <moveLeft+0x128>
      if(map3[y_coord * MAP_WIDTH + x_coord - 1] == 0x2) {
100012d0:	d0a6da8b 	ldhu	r2,-25750(gp)
100012d4:	10bfffcc 	andi	r2,r2,65535
100012d8:	1009883a 	mov	r4,r2
100012dc:	01400a04 	movi	r5,40
100012e0:	0003c5c0 	call	10003c5c <__mulsi3>
100012e4:	1007883a 	mov	r3,r2
100012e8:	d0a6d90b 	ldhu	r2,-25756(gp)
100012ec:	10bfffcc 	andi	r2,r2,65535
100012f0:	1885883a 	add	r2,r3,r2
100012f4:	10ffffc4 	addi	r3,r2,-1
100012f8:	00840074 	movhi	r2,4097
100012fc:	108fc404 	addi	r2,r2,16144
10001300:	10c5883a 	add	r2,r2,r3
10001304:	10800003 	ldbu	r2,0(r2)
10001308:	10803fcc 	andi	r2,r2,255
1000130c:	10800098 	cmpnei	r2,r2,2
10001310:	1000431e 	bne	r2,zero,10001420 <moveLeft+0x230>
          return;
10001314:	00004b06 	br	10001444 <moveLeft+0x254>
      }
    } else if(map_id == 4) {
10001318:	d0a6d58b 	ldhu	r2,-25770(gp)
1000131c:	10bfffcc 	andi	r2,r2,65535
10001320:	10800118 	cmpnei	r2,r2,4
10001324:	1000121e 	bne	r2,zero,10001370 <moveLeft+0x180>
      if(map4[y_coord * MAP_WIDTH + x_coord - 1] == 0x2) {
10001328:	d0a6da8b 	ldhu	r2,-25750(gp)
1000132c:	10bfffcc 	andi	r2,r2,65535
10001330:	1009883a 	mov	r4,r2
10001334:	01400a04 	movi	r5,40
10001338:	0003c5c0 	call	10003c5c <__mulsi3>
1000133c:	1007883a 	mov	r3,r2
10001340:	d0a6d90b 	ldhu	r2,-25756(gp)
10001344:	10bfffcc 	andi	r2,r2,65535
10001348:	1885883a 	add	r2,r3,r2
1000134c:	10ffffc4 	addi	r3,r2,-1
10001350:	00840074 	movhi	r2,4097
10001354:	1090f004 	addi	r2,r2,17344
10001358:	10c5883a 	add	r2,r2,r3
1000135c:	10800003 	ldbu	r2,0(r2)
10001360:	10803fcc 	andi	r2,r2,255
10001364:	10800098 	cmpnei	r2,r2,2
10001368:	10002d1e 	bne	r2,zero,10001420 <moveLeft+0x230>
          return;
1000136c:	00003506 	br	10001444 <moveLeft+0x254>
      }
    } else if(map_id == 5) {
10001370:	d0a6d58b 	ldhu	r2,-25770(gp)
10001374:	10bfffcc 	andi	r2,r2,65535
10001378:	10800158 	cmpnei	r2,r2,5
1000137c:	1000121e 	bne	r2,zero,100013c8 <moveLeft+0x1d8>
      if(map5[y_coord * MAP_WIDTH + x_coord - 1] == 0x2) {
10001380:	d0a6da8b 	ldhu	r2,-25750(gp)
10001384:	10bfffcc 	andi	r2,r2,65535
10001388:	1009883a 	mov	r4,r2
1000138c:	01400a04 	movi	r5,40
10001390:	0003c5c0 	call	10003c5c <__mulsi3>
10001394:	1007883a 	mov	r3,r2
10001398:	d0a6d90b 	ldhu	r2,-25756(gp)
1000139c:	10bfffcc 	andi	r2,r2,65535
100013a0:	1885883a 	add	r2,r3,r2
100013a4:	10ffffc4 	addi	r3,r2,-1
100013a8:	00840074 	movhi	r2,4097
100013ac:	10921c04 	addi	r2,r2,18544
100013b0:	10c5883a 	add	r2,r2,r3
100013b4:	10800003 	ldbu	r2,0(r2)
100013b8:	10803fcc 	andi	r2,r2,255
100013bc:	10800098 	cmpnei	r2,r2,2
100013c0:	1000171e 	bne	r2,zero,10001420 <moveLeft+0x230>
          return;
100013c4:	00001f06 	br	10001444 <moveLeft+0x254>
      }
    } else if(map_id == 6) {
100013c8:	d0a6d58b 	ldhu	r2,-25770(gp)
100013cc:	10bfffcc 	andi	r2,r2,65535
100013d0:	10800198 	cmpnei	r2,r2,6
100013d4:	1000121e 	bne	r2,zero,10001420 <moveLeft+0x230>
        if(gameOver[y_coord * MAP_WIDTH + x_coord - 1] == 0x2) {
100013d8:	d0a6da8b 	ldhu	r2,-25750(gp)
100013dc:	10bfffcc 	andi	r2,r2,65535
100013e0:	1009883a 	mov	r4,r2
100013e4:	01400a04 	movi	r5,40
100013e8:	0003c5c0 	call	10003c5c <__mulsi3>
100013ec:	1007883a 	mov	r3,r2
100013f0:	d0a6d90b 	ldhu	r2,-25756(gp)
100013f4:	10bfffcc 	andi	r2,r2,65535
100013f8:	1885883a 	add	r2,r3,r2
100013fc:	10ffffc4 	addi	r3,r2,-1
10001400:	00840074 	movhi	r2,4097
10001404:	10934804 	addi	r2,r2,19744
10001408:	10c5883a 	add	r2,r2,r3
1000140c:	10800003 	ldbu	r2,0(r2)
10001410:	10803fcc 	andi	r2,r2,255
10001414:	10800098 	cmpnei	r2,r2,2
10001418:	1000011e 	bne	r2,zero,10001420 <moveLeft+0x230>
            return;
1000141c:	00000906 	br	10001444 <moveLeft+0x254>
        }
    }
    x_coord -= 1;
10001420:	d0a6d90b 	ldhu	r2,-25756(gp)
10001424:	10bfffc4 	addi	r2,r2,-1
10001428:	d0a6d90d 	sth	r2,-25756(gp)
    if(player_direction != 3) {
1000142c:	d0a6d98b 	ldhu	r2,-25754(gp)
10001430:	10bfffcc 	andi	r2,r2,65535
10001434:	108000e0 	cmpeqi	r2,r2,3
10001438:	1000021e 	bne	r2,zero,10001444 <moveLeft+0x254>
    	player_direction = 3;
1000143c:	008000c4 	movi	r2,3
10001440:	d0a6d98d 	sth	r2,-25754(gp)
    }
}
10001444:	e037883a 	mov	sp,fp
10001448:	dfc00117 	ldw	ra,4(sp)
1000144c:	df000017 	ldw	fp,0(sp)
10001450:	dec00204 	addi	sp,sp,8
10001454:	f800283a 	ret

10001458 <moveDown>:
void moveDown() {
10001458:	defffe04 	addi	sp,sp,-8
1000145c:	dfc00115 	stw	ra,4(sp)
10001460:	df000015 	stw	fp,0(sp)
10001464:	d839883a 	mov	fp,sp
    if(y_coord == MAP_HEIGHT - 1) {
10001468:	d0a6da8b 	ldhu	r2,-25750(gp)
1000146c:	10bfffcc 	andi	r2,r2,65535
10001470:	10800758 	cmpnei	r2,r2,29
10001474:	1000011e 	bne	r2,zero,1000147c <moveDown+0x24>
        return;
10001478:	00008b06 	br	100016a8 <moveDown+0x250>
    }
    if(map_id == 1) {
1000147c:	d0a6d58b 	ldhu	r2,-25770(gp)
10001480:	10bfffcc 	andi	r2,r2,65535
10001484:	10800058 	cmpnei	r2,r2,1
10001488:	1000121e 	bne	r2,zero,100014d4 <moveDown+0x7c>
      if(map1[(y_coord + 1) * MAP_WIDTH + x_coord] == 0x2) {
1000148c:	d0a6da8b 	ldhu	r2,-25750(gp)
10001490:	10bfffcc 	andi	r2,r2,65535
10001494:	10800044 	addi	r2,r2,1
10001498:	1009883a 	mov	r4,r2
1000149c:	01400a04 	movi	r5,40
100014a0:	0003c5c0 	call	10003c5c <__mulsi3>
100014a4:	1007883a 	mov	r3,r2
100014a8:	d0a6d90b 	ldhu	r2,-25756(gp)
100014ac:	10bfffcc 	andi	r2,r2,65535
100014b0:	1887883a 	add	r3,r3,r2
100014b4:	00840074 	movhi	r2,4097
100014b8:	108d6c04 	addi	r2,r2,13744
100014bc:	10c5883a 	add	r2,r2,r3
100014c0:	10800003 	ldbu	r2,0(r2)
100014c4:	10803fcc 	andi	r2,r2,255
100014c8:	10800098 	cmpnei	r2,r2,2
100014cc:	10006f1e 	bne	r2,zero,1000168c <moveDown+0x234>
          return;
100014d0:	00007506 	br	100016a8 <moveDown+0x250>
      }
    } else if(map_id == 2) {
100014d4:	d0a6d58b 	ldhu	r2,-25770(gp)
100014d8:	10bfffcc 	andi	r2,r2,65535
100014dc:	10800098 	cmpnei	r2,r2,2
100014e0:	1000121e 	bne	r2,zero,1000152c <moveDown+0xd4>
      if(map2[(y_coord + 1) * MAP_WIDTH + x_coord] == 0x2) {
100014e4:	d0a6da8b 	ldhu	r2,-25750(gp)
100014e8:	10bfffcc 	andi	r2,r2,65535
100014ec:	10800044 	addi	r2,r2,1
100014f0:	1009883a 	mov	r4,r2
100014f4:	01400a04 	movi	r5,40
100014f8:	0003c5c0 	call	10003c5c <__mulsi3>
100014fc:	1007883a 	mov	r3,r2
10001500:	d0a6d90b 	ldhu	r2,-25756(gp)
10001504:	10bfffcc 	andi	r2,r2,65535
10001508:	1887883a 	add	r3,r3,r2
1000150c:	00840074 	movhi	r2,4097
10001510:	108e9804 	addi	r2,r2,14944
10001514:	10c5883a 	add	r2,r2,r3
10001518:	10800003 	ldbu	r2,0(r2)
1000151c:	10803fcc 	andi	r2,r2,255
10001520:	10800098 	cmpnei	r2,r2,2
10001524:	1000591e 	bne	r2,zero,1000168c <moveDown+0x234>
          return;
10001528:	00005f06 	br	100016a8 <moveDown+0x250>
      }
    } else if(map_id == 3) {
1000152c:	d0a6d58b 	ldhu	r2,-25770(gp)
10001530:	10bfffcc 	andi	r2,r2,65535
10001534:	108000d8 	cmpnei	r2,r2,3
10001538:	1000121e 	bne	r2,zero,10001584 <moveDown+0x12c>
      if(map3[(y_coord + 1) * MAP_WIDTH + x_coord] == 0x2) {
1000153c:	d0a6da8b 	ldhu	r2,-25750(gp)
10001540:	10bfffcc 	andi	r2,r2,65535
10001544:	10800044 	addi	r2,r2,1
10001548:	1009883a 	mov	r4,r2
1000154c:	01400a04 	movi	r5,40
10001550:	0003c5c0 	call	10003c5c <__mulsi3>
10001554:	1007883a 	mov	r3,r2
10001558:	d0a6d90b 	ldhu	r2,-25756(gp)
1000155c:	10bfffcc 	andi	r2,r2,65535
10001560:	1887883a 	add	r3,r3,r2
10001564:	00840074 	movhi	r2,4097
10001568:	108fc404 	addi	r2,r2,16144
1000156c:	10c5883a 	add	r2,r2,r3
10001570:	10800003 	ldbu	r2,0(r2)
10001574:	10803fcc 	andi	r2,r2,255
10001578:	10800098 	cmpnei	r2,r2,2
1000157c:	1000431e 	bne	r2,zero,1000168c <moveDown+0x234>
          return;
10001580:	00004906 	br	100016a8 <moveDown+0x250>
      }
    } else if(map_id == 4) {
10001584:	d0a6d58b 	ldhu	r2,-25770(gp)
10001588:	10bfffcc 	andi	r2,r2,65535
1000158c:	10800118 	cmpnei	r2,r2,4
10001590:	1000121e 	bne	r2,zero,100015dc <moveDown+0x184>
      if(map4[(y_coord + 1) * MAP_WIDTH + x_coord] == 0x2) {
10001594:	d0a6da8b 	ldhu	r2,-25750(gp)
10001598:	10bfffcc 	andi	r2,r2,65535
1000159c:	10800044 	addi	r2,r2,1
100015a0:	1009883a 	mov	r4,r2
100015a4:	01400a04 	movi	r5,40
100015a8:	0003c5c0 	call	10003c5c <__mulsi3>
100015ac:	1007883a 	mov	r3,r2
100015b0:	d0a6d90b 	ldhu	r2,-25756(gp)
100015b4:	10bfffcc 	andi	r2,r2,65535
100015b8:	1887883a 	add	r3,r3,r2
100015bc:	00840074 	movhi	r2,4097
100015c0:	1090f004 	addi	r2,r2,17344
100015c4:	10c5883a 	add	r2,r2,r3
100015c8:	10800003 	ldbu	r2,0(r2)
100015cc:	10803fcc 	andi	r2,r2,255
100015d0:	10800098 	cmpnei	r2,r2,2
100015d4:	10002d1e 	bne	r2,zero,1000168c <moveDown+0x234>
          return;
100015d8:	00003306 	br	100016a8 <moveDown+0x250>
      }
    } else if(map_id == 5) {
100015dc:	d0a6d58b 	ldhu	r2,-25770(gp)
100015e0:	10bfffcc 	andi	r2,r2,65535
100015e4:	10800158 	cmpnei	r2,r2,5
100015e8:	1000121e 	bne	r2,zero,10001634 <moveDown+0x1dc>
      if(map5[(y_coord + 1) * MAP_WIDTH + x_coord] == 0x2) {
100015ec:	d0a6da8b 	ldhu	r2,-25750(gp)
100015f0:	10bfffcc 	andi	r2,r2,65535
100015f4:	10800044 	addi	r2,r2,1
100015f8:	1009883a 	mov	r4,r2
100015fc:	01400a04 	movi	r5,40
10001600:	0003c5c0 	call	10003c5c <__mulsi3>
10001604:	1007883a 	mov	r3,r2
10001608:	d0a6d90b 	ldhu	r2,-25756(gp)
1000160c:	10bfffcc 	andi	r2,r2,65535
10001610:	1887883a 	add	r3,r3,r2
10001614:	00840074 	movhi	r2,4097
10001618:	10921c04 	addi	r2,r2,18544
1000161c:	10c5883a 	add	r2,r2,r3
10001620:	10800003 	ldbu	r2,0(r2)
10001624:	10803fcc 	andi	r2,r2,255
10001628:	10800098 	cmpnei	r2,r2,2
1000162c:	1000171e 	bne	r2,zero,1000168c <moveDown+0x234>
          return;
10001630:	00001d06 	br	100016a8 <moveDown+0x250>
      }
    } else if(map_id == 6) {
10001634:	d0a6d58b 	ldhu	r2,-25770(gp)
10001638:	10bfffcc 	andi	r2,r2,65535
1000163c:	10800198 	cmpnei	r2,r2,6
10001640:	1000121e 	bne	r2,zero,1000168c <moveDown+0x234>
        if(gameOver[(y_coord + 1) * MAP_WIDTH + x_coord] == 0x2) {
10001644:	d0a6da8b 	ldhu	r2,-25750(gp)
10001648:	10bfffcc 	andi	r2,r2,65535
1000164c:	10800044 	addi	r2,r2,1
10001650:	1009883a 	mov	r4,r2
10001654:	01400a04 	movi	r5,40
10001658:	0003c5c0 	call	10003c5c <__mulsi3>
1000165c:	1007883a 	mov	r3,r2
10001660:	d0a6d90b 	ldhu	r2,-25756(gp)
10001664:	10bfffcc 	andi	r2,r2,65535
10001668:	1887883a 	add	r3,r3,r2
1000166c:	00840074 	movhi	r2,4097
10001670:	10934804 	addi	r2,r2,19744
10001674:	10c5883a 	add	r2,r2,r3
10001678:	10800003 	ldbu	r2,0(r2)
1000167c:	10803fcc 	andi	r2,r2,255
10001680:	10800098 	cmpnei	r2,r2,2
10001684:	1000011e 	bne	r2,zero,1000168c <moveDown+0x234>
            return;
10001688:	00000706 	br	100016a8 <moveDown+0x250>
        }
      }
    y_coord += 1;
1000168c:	d0a6da8b 	ldhu	r2,-25750(gp)
10001690:	10800044 	addi	r2,r2,1
10001694:	d0a6da8d 	sth	r2,-25750(gp)
    if(player_direction != 0) {
10001698:	d0a6d98b 	ldhu	r2,-25754(gp)
1000169c:	10bfffcc 	andi	r2,r2,65535
100016a0:	10000126 	beq	r2,zero,100016a8 <moveDown+0x250>
    	player_direction = 0;
100016a4:	d026d98d 	sth	zero,-25754(gp)
    }
}
100016a8:	e037883a 	mov	sp,fp
100016ac:	dfc00117 	ldw	ra,4(sp)
100016b0:	df000017 	ldw	fp,0(sp)
100016b4:	dec00204 	addi	sp,sp,8
100016b8:	f800283a 	ret

100016bc <moveRight>:
void moveRight() {
100016bc:	defffe04 	addi	sp,sp,-8
100016c0:	dfc00115 	stw	ra,4(sp)
100016c4:	df000015 	stw	fp,0(sp)
100016c8:	d839883a 	mov	fp,sp
    if(x_coord == MAP_WIDTH - 1) {
100016cc:	d0a6d90b 	ldhu	r2,-25756(gp)
100016d0:	10bfffcc 	andi	r2,r2,65535
100016d4:	108009d8 	cmpnei	r2,r2,39
100016d8:	1000011e 	bne	r2,zero,100016e0 <moveRight+0x24>
        return;
100016dc:	00008d06 	br	10001914 <moveRight+0x258>
    }
    if(map_id == 1) {
100016e0:	d0a6d58b 	ldhu	r2,-25770(gp)
100016e4:	10bfffcc 	andi	r2,r2,65535
100016e8:	10800058 	cmpnei	r2,r2,1
100016ec:	1000121e 	bne	r2,zero,10001738 <moveRight+0x7c>
      if(map1[y_coord * MAP_WIDTH + x_coord + 1] == 0x2) {
100016f0:	d0a6da8b 	ldhu	r2,-25750(gp)
100016f4:	10bfffcc 	andi	r2,r2,65535
100016f8:	1009883a 	mov	r4,r2
100016fc:	01400a04 	movi	r5,40
10001700:	0003c5c0 	call	10003c5c <__mulsi3>
10001704:	1007883a 	mov	r3,r2
10001708:	d0a6d90b 	ldhu	r2,-25756(gp)
1000170c:	10bfffcc 	andi	r2,r2,65535
10001710:	1885883a 	add	r2,r3,r2
10001714:	10c00044 	addi	r3,r2,1
10001718:	00840074 	movhi	r2,4097
1000171c:	108d6c04 	addi	r2,r2,13744
10001720:	10c5883a 	add	r2,r2,r3
10001724:	10800003 	ldbu	r2,0(r2)
10001728:	10803fcc 	andi	r2,r2,255
1000172c:	10800098 	cmpnei	r2,r2,2
10001730:	10006f1e 	bne	r2,zero,100018f0 <moveRight+0x234>
          return;
10001734:	00007706 	br	10001914 <moveRight+0x258>
      }
    } else if(map_id == 2) {
10001738:	d0a6d58b 	ldhu	r2,-25770(gp)
1000173c:	10bfffcc 	andi	r2,r2,65535
10001740:	10800098 	cmpnei	r2,r2,2
10001744:	1000121e 	bne	r2,zero,10001790 <moveRight+0xd4>
      if(map2[y_coord * MAP_WIDTH + x_coord + 1] == 0x2) {
10001748:	d0a6da8b 	ldhu	r2,-25750(gp)
1000174c:	10bfffcc 	andi	r2,r2,65535
10001750:	1009883a 	mov	r4,r2
10001754:	01400a04 	movi	r5,40
10001758:	0003c5c0 	call	10003c5c <__mulsi3>
1000175c:	1007883a 	mov	r3,r2
10001760:	d0a6d90b 	ldhu	r2,-25756(gp)
10001764:	10bfffcc 	andi	r2,r2,65535
10001768:	1885883a 	add	r2,r3,r2
1000176c:	10c00044 	addi	r3,r2,1
10001770:	00840074 	movhi	r2,4097
10001774:	108e9804 	addi	r2,r2,14944
10001778:	10c5883a 	add	r2,r2,r3
1000177c:	10800003 	ldbu	r2,0(r2)
10001780:	10803fcc 	andi	r2,r2,255
10001784:	10800098 	cmpnei	r2,r2,2
10001788:	1000591e 	bne	r2,zero,100018f0 <moveRight+0x234>
          return;
1000178c:	00006106 	br	10001914 <moveRight+0x258>
      }
    } else if(map_id == 3) {
10001790:	d0a6d58b 	ldhu	r2,-25770(gp)
10001794:	10bfffcc 	andi	r2,r2,65535
10001798:	108000d8 	cmpnei	r2,r2,3
1000179c:	1000121e 	bne	r2,zero,100017e8 <moveRight+0x12c>
      if(map3[y_coord * MAP_WIDTH + x_coord + 1] == 0x2) {
100017a0:	d0a6da8b 	ldhu	r2,-25750(gp)
100017a4:	10bfffcc 	andi	r2,r2,65535
100017a8:	1009883a 	mov	r4,r2
100017ac:	01400a04 	movi	r5,40
100017b0:	0003c5c0 	call	10003c5c <__mulsi3>
100017b4:	1007883a 	mov	r3,r2
100017b8:	d0a6d90b 	ldhu	r2,-25756(gp)
100017bc:	10bfffcc 	andi	r2,r2,65535
100017c0:	1885883a 	add	r2,r3,r2
100017c4:	10c00044 	addi	r3,r2,1
100017c8:	00840074 	movhi	r2,4097
100017cc:	108fc404 	addi	r2,r2,16144
100017d0:	10c5883a 	add	r2,r2,r3
100017d4:	10800003 	ldbu	r2,0(r2)
100017d8:	10803fcc 	andi	r2,r2,255
100017dc:	10800098 	cmpnei	r2,r2,2
100017e0:	1000431e 	bne	r2,zero,100018f0 <moveRight+0x234>
          return;
100017e4:	00004b06 	br	10001914 <moveRight+0x258>
      }
    } else if(map_id == 4) {
100017e8:	d0a6d58b 	ldhu	r2,-25770(gp)
100017ec:	10bfffcc 	andi	r2,r2,65535
100017f0:	10800118 	cmpnei	r2,r2,4
100017f4:	1000121e 	bne	r2,zero,10001840 <moveRight+0x184>
      if(map4[y_coord * MAP_WIDTH + x_coord + 1] == 0x2) {
100017f8:	d0a6da8b 	ldhu	r2,-25750(gp)
100017fc:	10bfffcc 	andi	r2,r2,65535
10001800:	1009883a 	mov	r4,r2
10001804:	01400a04 	movi	r5,40
10001808:	0003c5c0 	call	10003c5c <__mulsi3>
1000180c:	1007883a 	mov	r3,r2
10001810:	d0a6d90b 	ldhu	r2,-25756(gp)
10001814:	10bfffcc 	andi	r2,r2,65535
10001818:	1885883a 	add	r2,r3,r2
1000181c:	10c00044 	addi	r3,r2,1
10001820:	00840074 	movhi	r2,4097
10001824:	1090f004 	addi	r2,r2,17344
10001828:	10c5883a 	add	r2,r2,r3
1000182c:	10800003 	ldbu	r2,0(r2)
10001830:	10803fcc 	andi	r2,r2,255
10001834:	10800098 	cmpnei	r2,r2,2
10001838:	10002d1e 	bne	r2,zero,100018f0 <moveRight+0x234>
          return;
1000183c:	00003506 	br	10001914 <moveRight+0x258>
      }
    } else if(map_id == 5) {
10001840:	d0a6d58b 	ldhu	r2,-25770(gp)
10001844:	10bfffcc 	andi	r2,r2,65535
10001848:	10800158 	cmpnei	r2,r2,5
1000184c:	1000121e 	bne	r2,zero,10001898 <moveRight+0x1dc>
      if(map5[y_coord * MAP_WIDTH + x_coord + 1] == 0x2) {
10001850:	d0a6da8b 	ldhu	r2,-25750(gp)
10001854:	10bfffcc 	andi	r2,r2,65535
10001858:	1009883a 	mov	r4,r2
1000185c:	01400a04 	movi	r5,40
10001860:	0003c5c0 	call	10003c5c <__mulsi3>
10001864:	1007883a 	mov	r3,r2
10001868:	d0a6d90b 	ldhu	r2,-25756(gp)
1000186c:	10bfffcc 	andi	r2,r2,65535
10001870:	1885883a 	add	r2,r3,r2
10001874:	10c00044 	addi	r3,r2,1
10001878:	00840074 	movhi	r2,4097
1000187c:	10921c04 	addi	r2,r2,18544
10001880:	10c5883a 	add	r2,r2,r3
10001884:	10800003 	ldbu	r2,0(r2)
10001888:	10803fcc 	andi	r2,r2,255
1000188c:	10800098 	cmpnei	r2,r2,2
10001890:	1000171e 	bne	r2,zero,100018f0 <moveRight+0x234>
          return;
10001894:	00001f06 	br	10001914 <moveRight+0x258>
      }
    } else if(map_id == 6) {
10001898:	d0a6d58b 	ldhu	r2,-25770(gp)
1000189c:	10bfffcc 	andi	r2,r2,65535
100018a0:	10800198 	cmpnei	r2,r2,6
100018a4:	1000121e 	bne	r2,zero,100018f0 <moveRight+0x234>
        if(gameOver[y_coord * MAP_WIDTH + x_coord + 1] == 0x2) {
100018a8:	d0a6da8b 	ldhu	r2,-25750(gp)
100018ac:	10bfffcc 	andi	r2,r2,65535
100018b0:	1009883a 	mov	r4,r2
100018b4:	01400a04 	movi	r5,40
100018b8:	0003c5c0 	call	10003c5c <__mulsi3>
100018bc:	1007883a 	mov	r3,r2
100018c0:	d0a6d90b 	ldhu	r2,-25756(gp)
100018c4:	10bfffcc 	andi	r2,r2,65535
100018c8:	1885883a 	add	r2,r3,r2
100018cc:	10c00044 	addi	r3,r2,1
100018d0:	00840074 	movhi	r2,4097
100018d4:	10934804 	addi	r2,r2,19744
100018d8:	10c5883a 	add	r2,r2,r3
100018dc:	10800003 	ldbu	r2,0(r2)
100018e0:	10803fcc 	andi	r2,r2,255
100018e4:	10800098 	cmpnei	r2,r2,2
100018e8:	1000011e 	bne	r2,zero,100018f0 <moveRight+0x234>
            return;
100018ec:	00000906 	br	10001914 <moveRight+0x258>
        }
      }
    x_coord += 1;
100018f0:	d0a6d90b 	ldhu	r2,-25756(gp)
100018f4:	10800044 	addi	r2,r2,1
100018f8:	d0a6d90d 	sth	r2,-25756(gp)
    if(player_direction != 1) {
100018fc:	d0a6d98b 	ldhu	r2,-25754(gp)
10001900:	10bfffcc 	andi	r2,r2,65535
10001904:	10800060 	cmpeqi	r2,r2,1
10001908:	1000021e 	bne	r2,zero,10001914 <moveRight+0x258>
    	player_direction = 1;
1000190c:	00800044 	movi	r2,1
10001910:	d0a6d98d 	sth	r2,-25754(gp)
    }
}
10001914:	e037883a 	mov	sp,fp
10001918:	dfc00117 	ldw	ra,4(sp)
1000191c:	df000017 	ldw	fp,0(sp)
10001920:	dec00204 	addi	sp,sp,8
10001924:	f800283a 	ret

10001928 <moveUp>:
void moveUp() {
10001928:	defffe04 	addi	sp,sp,-8
1000192c:	dfc00115 	stw	ra,4(sp)
10001930:	df000015 	stw	fp,0(sp)
10001934:	d839883a 	mov	fp,sp
    if(y_coord == 0) {
10001938:	d0a6da8b 	ldhu	r2,-25750(gp)
1000193c:	10bfffcc 	andi	r2,r2,65535
10001940:	1000011e 	bne	r2,zero,10001948 <moveUp+0x20>
        return;
10001944:	00008d06 	br	10001b7c <moveUp+0x254>
    }
    if(map_id == 1) {
10001948:	d0a6d58b 	ldhu	r2,-25770(gp)
1000194c:	10bfffcc 	andi	r2,r2,65535
10001950:	10800058 	cmpnei	r2,r2,1
10001954:	1000121e 	bne	r2,zero,100019a0 <moveUp+0x78>
      if(map1[(y_coord - 1) * MAP_WIDTH + x_coord] == 0x2) {
10001958:	d0a6da8b 	ldhu	r2,-25750(gp)
1000195c:	10bfffcc 	andi	r2,r2,65535
10001960:	10bfffc4 	addi	r2,r2,-1
10001964:	1009883a 	mov	r4,r2
10001968:	01400a04 	movi	r5,40
1000196c:	0003c5c0 	call	10003c5c <__mulsi3>
10001970:	1007883a 	mov	r3,r2
10001974:	d0a6d90b 	ldhu	r2,-25756(gp)
10001978:	10bfffcc 	andi	r2,r2,65535
1000197c:	1887883a 	add	r3,r3,r2
10001980:	00840074 	movhi	r2,4097
10001984:	108d6c04 	addi	r2,r2,13744
10001988:	10c5883a 	add	r2,r2,r3
1000198c:	10800003 	ldbu	r2,0(r2)
10001990:	10803fcc 	andi	r2,r2,255
10001994:	10800098 	cmpnei	r2,r2,2
10001998:	10006f1e 	bne	r2,zero,10001b58 <moveUp+0x230>
          return;
1000199c:	00007706 	br	10001b7c <moveUp+0x254>
      }
    } else if(map_id == 2) {
100019a0:	d0a6d58b 	ldhu	r2,-25770(gp)
100019a4:	10bfffcc 	andi	r2,r2,65535
100019a8:	10800098 	cmpnei	r2,r2,2
100019ac:	1000121e 	bne	r2,zero,100019f8 <moveUp+0xd0>
      if(map2[(y_coord - 1) * MAP_WIDTH + x_coord] == 0x2) {
100019b0:	d0a6da8b 	ldhu	r2,-25750(gp)
100019b4:	10bfffcc 	andi	r2,r2,65535
100019b8:	10bfffc4 	addi	r2,r2,-1
100019bc:	1009883a 	mov	r4,r2
100019c0:	01400a04 	movi	r5,40
100019c4:	0003c5c0 	call	10003c5c <__mulsi3>
100019c8:	1007883a 	mov	r3,r2
100019cc:	d0a6d90b 	ldhu	r2,-25756(gp)
100019d0:	10bfffcc 	andi	r2,r2,65535
100019d4:	1887883a 	add	r3,r3,r2
100019d8:	00840074 	movhi	r2,4097
100019dc:	108e9804 	addi	r2,r2,14944
100019e0:	10c5883a 	add	r2,r2,r3
100019e4:	10800003 	ldbu	r2,0(r2)
100019e8:	10803fcc 	andi	r2,r2,255
100019ec:	10800098 	cmpnei	r2,r2,2
100019f0:	1000591e 	bne	r2,zero,10001b58 <moveUp+0x230>
          return;
100019f4:	00006106 	br	10001b7c <moveUp+0x254>
      }
    } else if(map_id == 3) {
100019f8:	d0a6d58b 	ldhu	r2,-25770(gp)
100019fc:	10bfffcc 	andi	r2,r2,65535
10001a00:	108000d8 	cmpnei	r2,r2,3
10001a04:	1000121e 	bne	r2,zero,10001a50 <moveUp+0x128>
      if(map3[(y_coord - 1) * MAP_WIDTH + x_coord] == 0x2) {
10001a08:	d0a6da8b 	ldhu	r2,-25750(gp)
10001a0c:	10bfffcc 	andi	r2,r2,65535
10001a10:	10bfffc4 	addi	r2,r2,-1
10001a14:	1009883a 	mov	r4,r2
10001a18:	01400a04 	movi	r5,40
10001a1c:	0003c5c0 	call	10003c5c <__mulsi3>
10001a20:	1007883a 	mov	r3,r2
10001a24:	d0a6d90b 	ldhu	r2,-25756(gp)
10001a28:	10bfffcc 	andi	r2,r2,65535
10001a2c:	1887883a 	add	r3,r3,r2
10001a30:	00840074 	movhi	r2,4097
10001a34:	108fc404 	addi	r2,r2,16144
10001a38:	10c5883a 	add	r2,r2,r3
10001a3c:	10800003 	ldbu	r2,0(r2)
10001a40:	10803fcc 	andi	r2,r2,255
10001a44:	10800098 	cmpnei	r2,r2,2
10001a48:	1000431e 	bne	r2,zero,10001b58 <moveUp+0x230>
          return;
10001a4c:	00004b06 	br	10001b7c <moveUp+0x254>
      }
    } else if(map_id == 4) {
10001a50:	d0a6d58b 	ldhu	r2,-25770(gp)
10001a54:	10bfffcc 	andi	r2,r2,65535
10001a58:	10800118 	cmpnei	r2,r2,4
10001a5c:	1000121e 	bne	r2,zero,10001aa8 <moveUp+0x180>
      if(map4[(y_coord - 1) * MAP_WIDTH + x_coord] == 0x2) {
10001a60:	d0a6da8b 	ldhu	r2,-25750(gp)
10001a64:	10bfffcc 	andi	r2,r2,65535
10001a68:	10bfffc4 	addi	r2,r2,-1
10001a6c:	1009883a 	mov	r4,r2
10001a70:	01400a04 	movi	r5,40
10001a74:	0003c5c0 	call	10003c5c <__mulsi3>
10001a78:	1007883a 	mov	r3,r2
10001a7c:	d0a6d90b 	ldhu	r2,-25756(gp)
10001a80:	10bfffcc 	andi	r2,r2,65535
10001a84:	1887883a 	add	r3,r3,r2
10001a88:	00840074 	movhi	r2,4097
10001a8c:	1090f004 	addi	r2,r2,17344
10001a90:	10c5883a 	add	r2,r2,r3
10001a94:	10800003 	ldbu	r2,0(r2)
10001a98:	10803fcc 	andi	r2,r2,255
10001a9c:	10800098 	cmpnei	r2,r2,2
10001aa0:	10002d1e 	bne	r2,zero,10001b58 <moveUp+0x230>
          return;
10001aa4:	00003506 	br	10001b7c <moveUp+0x254>
      }
    } else if(map_id == 5) {
10001aa8:	d0a6d58b 	ldhu	r2,-25770(gp)
10001aac:	10bfffcc 	andi	r2,r2,65535
10001ab0:	10800158 	cmpnei	r2,r2,5
10001ab4:	1000121e 	bne	r2,zero,10001b00 <moveUp+0x1d8>
      if(map5[(y_coord - 1) * MAP_WIDTH + x_coord] == 0x2) {
10001ab8:	d0a6da8b 	ldhu	r2,-25750(gp)
10001abc:	10bfffcc 	andi	r2,r2,65535
10001ac0:	10bfffc4 	addi	r2,r2,-1
10001ac4:	1009883a 	mov	r4,r2
10001ac8:	01400a04 	movi	r5,40
10001acc:	0003c5c0 	call	10003c5c <__mulsi3>
10001ad0:	1007883a 	mov	r3,r2
10001ad4:	d0a6d90b 	ldhu	r2,-25756(gp)
10001ad8:	10bfffcc 	andi	r2,r2,65535
10001adc:	1887883a 	add	r3,r3,r2
10001ae0:	00840074 	movhi	r2,4097
10001ae4:	10921c04 	addi	r2,r2,18544
10001ae8:	10c5883a 	add	r2,r2,r3
10001aec:	10800003 	ldbu	r2,0(r2)
10001af0:	10803fcc 	andi	r2,r2,255
10001af4:	10800098 	cmpnei	r2,r2,2
10001af8:	1000171e 	bne	r2,zero,10001b58 <moveUp+0x230>
          return;
10001afc:	00001f06 	br	10001b7c <moveUp+0x254>
      }
    } else if(map_id == 6) {
10001b00:	d0a6d58b 	ldhu	r2,-25770(gp)
10001b04:	10bfffcc 	andi	r2,r2,65535
10001b08:	10800198 	cmpnei	r2,r2,6
10001b0c:	1000121e 	bne	r2,zero,10001b58 <moveUp+0x230>
        if(gameOver[(y_coord - 1) * MAP_WIDTH + x_coord] == 0x2) {
10001b10:	d0a6da8b 	ldhu	r2,-25750(gp)
10001b14:	10bfffcc 	andi	r2,r2,65535
10001b18:	10bfffc4 	addi	r2,r2,-1
10001b1c:	1009883a 	mov	r4,r2
10001b20:	01400a04 	movi	r5,40
10001b24:	0003c5c0 	call	10003c5c <__mulsi3>
10001b28:	1007883a 	mov	r3,r2
10001b2c:	d0a6d90b 	ldhu	r2,-25756(gp)
10001b30:	10bfffcc 	andi	r2,r2,65535
10001b34:	1887883a 	add	r3,r3,r2
10001b38:	00840074 	movhi	r2,4097
10001b3c:	10934804 	addi	r2,r2,19744
10001b40:	10c5883a 	add	r2,r2,r3
10001b44:	10800003 	ldbu	r2,0(r2)
10001b48:	10803fcc 	andi	r2,r2,255
10001b4c:	10800098 	cmpnei	r2,r2,2
10001b50:	1000011e 	bne	r2,zero,10001b58 <moveUp+0x230>
            return;
10001b54:	00000906 	br	10001b7c <moveUp+0x254>
        }
      }
    y_coord -= 1;
10001b58:	d0a6da8b 	ldhu	r2,-25750(gp)
10001b5c:	10bfffc4 	addi	r2,r2,-1
10001b60:	d0a6da8d 	sth	r2,-25750(gp)
    if(player_direction != 2) {
10001b64:	d0a6d98b 	ldhu	r2,-25754(gp)
10001b68:	10bfffcc 	andi	r2,r2,65535
10001b6c:	108000a0 	cmpeqi	r2,r2,2
10001b70:	1000021e 	bne	r2,zero,10001b7c <moveUp+0x254>
    	player_direction = 2;
10001b74:	00800084 	movi	r2,2
10001b78:	d0a6d98d 	sth	r2,-25754(gp)
    }
}
10001b7c:	e037883a 	mov	sp,fp
10001b80:	dfc00117 	ldw	ra,4(sp)
10001b84:	df000017 	ldw	fp,0(sp)
10001b88:	dec00204 	addi	sp,sp,8
10001b8c:	f800283a 	ret

10001b90 <isGrass>:

int isGrass() {
10001b90:	defffe04 	addi	sp,sp,-8
10001b94:	dfc00115 	stw	ra,4(sp)
10001b98:	df000015 	stw	fp,0(sp)
10001b9c:	d839883a 	mov	fp,sp
    if(map_id == 1) {
10001ba0:	d0a6d58b 	ldhu	r2,-25770(gp)
10001ba4:	10bfffcc 	andi	r2,r2,65535
10001ba8:	10800058 	cmpnei	r2,r2,1
10001bac:	1000111e 	bne	r2,zero,10001bf4 <isGrass+0x64>
      return (map1[y_coord * MAP_WIDTH + x_coord] == 0x1);
10001bb0:	d0a6da8b 	ldhu	r2,-25750(gp)
10001bb4:	10bfffcc 	andi	r2,r2,65535
10001bb8:	1009883a 	mov	r4,r2
10001bbc:	01400a04 	movi	r5,40
10001bc0:	0003c5c0 	call	10003c5c <__mulsi3>
10001bc4:	1007883a 	mov	r3,r2
10001bc8:	d0a6d90b 	ldhu	r2,-25756(gp)
10001bcc:	10bfffcc 	andi	r2,r2,65535
10001bd0:	1887883a 	add	r3,r3,r2
10001bd4:	00840074 	movhi	r2,4097
10001bd8:	108d6c04 	addi	r2,r2,13744
10001bdc:	10c5883a 	add	r2,r2,r3
10001be0:	10800003 	ldbu	r2,0(r2)
10001be4:	10803fcc 	andi	r2,r2,255
10001be8:	10800060 	cmpeqi	r2,r2,1
10001bec:	10803fcc 	andi	r2,r2,255
10001bf0:	00005506 	br	10001d48 <isGrass+0x1b8>
    } else if(map_id == 2) {
10001bf4:	d0a6d58b 	ldhu	r2,-25770(gp)
10001bf8:	10bfffcc 	andi	r2,r2,65535
10001bfc:	10800098 	cmpnei	r2,r2,2
10001c00:	1000111e 	bne	r2,zero,10001c48 <isGrass+0xb8>
      return (map2[y_coord * MAP_WIDTH + x_coord] == 0x1);
10001c04:	d0a6da8b 	ldhu	r2,-25750(gp)
10001c08:	10bfffcc 	andi	r2,r2,65535
10001c0c:	1009883a 	mov	r4,r2
10001c10:	01400a04 	movi	r5,40
10001c14:	0003c5c0 	call	10003c5c <__mulsi3>
10001c18:	1007883a 	mov	r3,r2
10001c1c:	d0a6d90b 	ldhu	r2,-25756(gp)
10001c20:	10bfffcc 	andi	r2,r2,65535
10001c24:	1887883a 	add	r3,r3,r2
10001c28:	00840074 	movhi	r2,4097
10001c2c:	108e9804 	addi	r2,r2,14944
10001c30:	10c5883a 	add	r2,r2,r3
10001c34:	10800003 	ldbu	r2,0(r2)
10001c38:	10803fcc 	andi	r2,r2,255
10001c3c:	10800060 	cmpeqi	r2,r2,1
10001c40:	10803fcc 	andi	r2,r2,255
10001c44:	00004006 	br	10001d48 <isGrass+0x1b8>
    } else if(map_id == 3) {
10001c48:	d0a6d58b 	ldhu	r2,-25770(gp)
10001c4c:	10bfffcc 	andi	r2,r2,65535
10001c50:	108000d8 	cmpnei	r2,r2,3
10001c54:	1000111e 	bne	r2,zero,10001c9c <isGrass+0x10c>
      return (map3[y_coord * MAP_WIDTH + x_coord] == 0x1);
10001c58:	d0a6da8b 	ldhu	r2,-25750(gp)
10001c5c:	10bfffcc 	andi	r2,r2,65535
10001c60:	1009883a 	mov	r4,r2
10001c64:	01400a04 	movi	r5,40
10001c68:	0003c5c0 	call	10003c5c <__mulsi3>
10001c6c:	1007883a 	mov	r3,r2
10001c70:	d0a6d90b 	ldhu	r2,-25756(gp)
10001c74:	10bfffcc 	andi	r2,r2,65535
10001c78:	1887883a 	add	r3,r3,r2
10001c7c:	00840074 	movhi	r2,4097
10001c80:	108fc404 	addi	r2,r2,16144
10001c84:	10c5883a 	add	r2,r2,r3
10001c88:	10800003 	ldbu	r2,0(r2)
10001c8c:	10803fcc 	andi	r2,r2,255
10001c90:	10800060 	cmpeqi	r2,r2,1
10001c94:	10803fcc 	andi	r2,r2,255
10001c98:	00002b06 	br	10001d48 <isGrass+0x1b8>
    } else if(map_id == 4) {
10001c9c:	d0a6d58b 	ldhu	r2,-25770(gp)
10001ca0:	10bfffcc 	andi	r2,r2,65535
10001ca4:	10800118 	cmpnei	r2,r2,4
10001ca8:	1000111e 	bne	r2,zero,10001cf0 <isGrass+0x160>
      return (map4[y_coord * MAP_WIDTH + x_coord] == 0x1);
10001cac:	d0a6da8b 	ldhu	r2,-25750(gp)
10001cb0:	10bfffcc 	andi	r2,r2,65535
10001cb4:	1009883a 	mov	r4,r2
10001cb8:	01400a04 	movi	r5,40
10001cbc:	0003c5c0 	call	10003c5c <__mulsi3>
10001cc0:	1007883a 	mov	r3,r2
10001cc4:	d0a6d90b 	ldhu	r2,-25756(gp)
10001cc8:	10bfffcc 	andi	r2,r2,65535
10001ccc:	1887883a 	add	r3,r3,r2
10001cd0:	00840074 	movhi	r2,4097
10001cd4:	1090f004 	addi	r2,r2,17344
10001cd8:	10c5883a 	add	r2,r2,r3
10001cdc:	10800003 	ldbu	r2,0(r2)
10001ce0:	10803fcc 	andi	r2,r2,255
10001ce4:	10800060 	cmpeqi	r2,r2,1
10001ce8:	10803fcc 	andi	r2,r2,255
10001cec:	00001606 	br	10001d48 <isGrass+0x1b8>
    } else if(map_id == 5) {
10001cf0:	d0a6d58b 	ldhu	r2,-25770(gp)
10001cf4:	10bfffcc 	andi	r2,r2,65535
10001cf8:	10800158 	cmpnei	r2,r2,5
10001cfc:	1000111e 	bne	r2,zero,10001d44 <isGrass+0x1b4>
      return (map5[y_coord * MAP_WIDTH + x_coord] == 0x1);
10001d00:	d0a6da8b 	ldhu	r2,-25750(gp)
10001d04:	10bfffcc 	andi	r2,r2,65535
10001d08:	1009883a 	mov	r4,r2
10001d0c:	01400a04 	movi	r5,40
10001d10:	0003c5c0 	call	10003c5c <__mulsi3>
10001d14:	1007883a 	mov	r3,r2
10001d18:	d0a6d90b 	ldhu	r2,-25756(gp)
10001d1c:	10bfffcc 	andi	r2,r2,65535
10001d20:	1887883a 	add	r3,r3,r2
10001d24:	00840074 	movhi	r2,4097
10001d28:	10921c04 	addi	r2,r2,18544
10001d2c:	10c5883a 	add	r2,r2,r3
10001d30:	10800003 	ldbu	r2,0(r2)
10001d34:	10803fcc 	andi	r2,r2,255
10001d38:	10800060 	cmpeqi	r2,r2,1
10001d3c:	10803fcc 	andi	r2,r2,255
10001d40:	00000106 	br	10001d48 <isGrass+0x1b8>
    }
    return 0;
10001d44:	0005883a 	mov	r2,zero
}
10001d48:	e037883a 	mov	sp,fp
10001d4c:	dfc00117 	ldw	ra,4(sp)
10001d50:	df000017 	ldw	fp,0(sp)
10001d54:	dec00204 	addi	sp,sp,8
10001d58:	f800283a 	ret

10001d5c <isMapChange>:

int isMapChange() {
10001d5c:	defffc04 	addi	sp,sp,-16
10001d60:	dfc00315 	stw	ra,12(sp)
10001d64:	df000215 	stw	fp,8(sp)
10001d68:	df000204 	addi	fp,sp,8
  if(map_id == 1) {
10001d6c:	d0a6d58b 	ldhu	r2,-25770(gp)
10001d70:	10bfffcc 	andi	r2,r2,65535
10001d74:	10800058 	cmpnei	r2,r2,1
10001d78:	10001a1e 	bne	r2,zero,10001de4 <isMapChange+0x88>
    const unsigned char c = map1[y_coord * MAP_WIDTH + x_coord];
10001d7c:	d0a6da8b 	ldhu	r2,-25750(gp)
10001d80:	10bfffcc 	andi	r2,r2,65535
10001d84:	1009883a 	mov	r4,r2
10001d88:	01400a04 	movi	r5,40
10001d8c:	0003c5c0 	call	10003c5c <__mulsi3>
10001d90:	1007883a 	mov	r3,r2
10001d94:	d0a6d90b 	ldhu	r2,-25756(gp)
10001d98:	10bfffcc 	andi	r2,r2,65535
10001d9c:	1887883a 	add	r3,r3,r2
10001da0:	00840074 	movhi	r2,4097
10001da4:	108d6c04 	addi	r2,r2,13744
10001da8:	10c5883a 	add	r2,r2,r3
10001dac:	10800003 	ldbu	r2,0(r2)
10001db0:	e0bffe05 	stb	r2,-8(fp)
    return (c != 0x0 && c != 0x1 && c != 0x2);
10001db4:	e0bffe03 	ldbu	r2,-8(fp)
10001db8:	10000826 	beq	r2,zero,10001ddc <isMapChange+0x80>
10001dbc:	e0bffe03 	ldbu	r2,-8(fp)
10001dc0:	10800060 	cmpeqi	r2,r2,1
10001dc4:	1000051e 	bne	r2,zero,10001ddc <isMapChange+0x80>
10001dc8:	e0bffe03 	ldbu	r2,-8(fp)
10001dcc:	108000a0 	cmpeqi	r2,r2,2
10001dd0:	1000021e 	bne	r2,zero,10001ddc <isMapChange+0x80>
10001dd4:	00800044 	movi	r2,1
10001dd8:	00007b06 	br	10001fc8 <isMapChange+0x26c>
10001ddc:	0005883a 	mov	r2,zero
10001de0:	00007906 	br	10001fc8 <isMapChange+0x26c>
  } else if(map_id == 2) {
10001de4:	d0a6d58b 	ldhu	r2,-25770(gp)
10001de8:	10bfffcc 	andi	r2,r2,65535
10001dec:	10800098 	cmpnei	r2,r2,2
10001df0:	10001a1e 	bne	r2,zero,10001e5c <isMapChange+0x100>
    const unsigned char c = map2[y_coord * MAP_WIDTH + x_coord];
10001df4:	d0a6da8b 	ldhu	r2,-25750(gp)
10001df8:	10bfffcc 	andi	r2,r2,65535
10001dfc:	1009883a 	mov	r4,r2
10001e00:	01400a04 	movi	r5,40
10001e04:	0003c5c0 	call	10003c5c <__mulsi3>
10001e08:	1007883a 	mov	r3,r2
10001e0c:	d0a6d90b 	ldhu	r2,-25756(gp)
10001e10:	10bfffcc 	andi	r2,r2,65535
10001e14:	1887883a 	add	r3,r3,r2
10001e18:	00840074 	movhi	r2,4097
10001e1c:	108e9804 	addi	r2,r2,14944
10001e20:	10c5883a 	add	r2,r2,r3
10001e24:	10800003 	ldbu	r2,0(r2)
10001e28:	e0bffe45 	stb	r2,-7(fp)
    return (c != 0x0 && c != 0x1 && c != 0x2);
10001e2c:	e0bffe43 	ldbu	r2,-7(fp)
10001e30:	10000826 	beq	r2,zero,10001e54 <isMapChange+0xf8>
10001e34:	e0bffe43 	ldbu	r2,-7(fp)
10001e38:	10800060 	cmpeqi	r2,r2,1
10001e3c:	1000051e 	bne	r2,zero,10001e54 <isMapChange+0xf8>
10001e40:	e0bffe43 	ldbu	r2,-7(fp)
10001e44:	108000a0 	cmpeqi	r2,r2,2
10001e48:	1000021e 	bne	r2,zero,10001e54 <isMapChange+0xf8>
10001e4c:	00800044 	movi	r2,1
10001e50:	00005d06 	br	10001fc8 <isMapChange+0x26c>
10001e54:	0005883a 	mov	r2,zero
10001e58:	00005b06 	br	10001fc8 <isMapChange+0x26c>
  } else if(map_id == 3) {
10001e5c:	d0a6d58b 	ldhu	r2,-25770(gp)
10001e60:	10bfffcc 	andi	r2,r2,65535
10001e64:	108000d8 	cmpnei	r2,r2,3
10001e68:	10001a1e 	bne	r2,zero,10001ed4 <isMapChange+0x178>
    const unsigned char c = map3[y_coord * MAP_WIDTH + x_coord];
10001e6c:	d0a6da8b 	ldhu	r2,-25750(gp)
10001e70:	10bfffcc 	andi	r2,r2,65535
10001e74:	1009883a 	mov	r4,r2
10001e78:	01400a04 	movi	r5,40
10001e7c:	0003c5c0 	call	10003c5c <__mulsi3>
10001e80:	1007883a 	mov	r3,r2
10001e84:	d0a6d90b 	ldhu	r2,-25756(gp)
10001e88:	10bfffcc 	andi	r2,r2,65535
10001e8c:	1887883a 	add	r3,r3,r2
10001e90:	00840074 	movhi	r2,4097
10001e94:	108fc404 	addi	r2,r2,16144
10001e98:	10c5883a 	add	r2,r2,r3
10001e9c:	10800003 	ldbu	r2,0(r2)
10001ea0:	e0bffe85 	stb	r2,-6(fp)
    return (c != 0x0 && c != 0x1 && c != 0x2);
10001ea4:	e0bffe83 	ldbu	r2,-6(fp)
10001ea8:	10000826 	beq	r2,zero,10001ecc <isMapChange+0x170>
10001eac:	e0bffe83 	ldbu	r2,-6(fp)
10001eb0:	10800060 	cmpeqi	r2,r2,1
10001eb4:	1000051e 	bne	r2,zero,10001ecc <isMapChange+0x170>
10001eb8:	e0bffe83 	ldbu	r2,-6(fp)
10001ebc:	108000a0 	cmpeqi	r2,r2,2
10001ec0:	1000021e 	bne	r2,zero,10001ecc <isMapChange+0x170>
10001ec4:	00800044 	movi	r2,1
10001ec8:	00003f06 	br	10001fc8 <isMapChange+0x26c>
10001ecc:	0005883a 	mov	r2,zero
10001ed0:	00003d06 	br	10001fc8 <isMapChange+0x26c>
  } else if(map_id == 4) {
10001ed4:	d0a6d58b 	ldhu	r2,-25770(gp)
10001ed8:	10bfffcc 	andi	r2,r2,65535
10001edc:	10800118 	cmpnei	r2,r2,4
10001ee0:	10001a1e 	bne	r2,zero,10001f4c <isMapChange+0x1f0>
    const unsigned char c = map4[y_coord * MAP_WIDTH + x_coord];
10001ee4:	d0a6da8b 	ldhu	r2,-25750(gp)
10001ee8:	10bfffcc 	andi	r2,r2,65535
10001eec:	1009883a 	mov	r4,r2
10001ef0:	01400a04 	movi	r5,40
10001ef4:	0003c5c0 	call	10003c5c <__mulsi3>
10001ef8:	1007883a 	mov	r3,r2
10001efc:	d0a6d90b 	ldhu	r2,-25756(gp)
10001f00:	10bfffcc 	andi	r2,r2,65535
10001f04:	1887883a 	add	r3,r3,r2
10001f08:	00840074 	movhi	r2,4097
10001f0c:	1090f004 	addi	r2,r2,17344
10001f10:	10c5883a 	add	r2,r2,r3
10001f14:	10800003 	ldbu	r2,0(r2)
10001f18:	e0bffec5 	stb	r2,-5(fp)
    return (c != 0x0 && c != 0x1 && c != 0x2);
10001f1c:	e0bffec3 	ldbu	r2,-5(fp)
10001f20:	10000826 	beq	r2,zero,10001f44 <isMapChange+0x1e8>
10001f24:	e0bffec3 	ldbu	r2,-5(fp)
10001f28:	10800060 	cmpeqi	r2,r2,1
10001f2c:	1000051e 	bne	r2,zero,10001f44 <isMapChange+0x1e8>
10001f30:	e0bffec3 	ldbu	r2,-5(fp)
10001f34:	108000a0 	cmpeqi	r2,r2,2
10001f38:	1000021e 	bne	r2,zero,10001f44 <isMapChange+0x1e8>
10001f3c:	00800044 	movi	r2,1
10001f40:	00002106 	br	10001fc8 <isMapChange+0x26c>
10001f44:	0005883a 	mov	r2,zero
10001f48:	00001f06 	br	10001fc8 <isMapChange+0x26c>
  } else if(map_id == 5) {
10001f4c:	d0a6d58b 	ldhu	r2,-25770(gp)
10001f50:	10bfffcc 	andi	r2,r2,65535
10001f54:	10800158 	cmpnei	r2,r2,5
10001f58:	10001a1e 	bne	r2,zero,10001fc4 <isMapChange+0x268>
    const unsigned char c = map5[y_coord * MAP_WIDTH + x_coord];
10001f5c:	d0a6da8b 	ldhu	r2,-25750(gp)
10001f60:	10bfffcc 	andi	r2,r2,65535
10001f64:	1009883a 	mov	r4,r2
10001f68:	01400a04 	movi	r5,40
10001f6c:	0003c5c0 	call	10003c5c <__mulsi3>
10001f70:	1007883a 	mov	r3,r2
10001f74:	d0a6d90b 	ldhu	r2,-25756(gp)
10001f78:	10bfffcc 	andi	r2,r2,65535
10001f7c:	1887883a 	add	r3,r3,r2
10001f80:	00840074 	movhi	r2,4097
10001f84:	10921c04 	addi	r2,r2,18544
10001f88:	10c5883a 	add	r2,r2,r3
10001f8c:	10800003 	ldbu	r2,0(r2)
10001f90:	e0bfff05 	stb	r2,-4(fp)
    return (c != 0x0 && c != 0x1 && c != 0x2);
10001f94:	e0bfff03 	ldbu	r2,-4(fp)
10001f98:	10000826 	beq	r2,zero,10001fbc <isMapChange+0x260>
10001f9c:	e0bfff03 	ldbu	r2,-4(fp)
10001fa0:	10800060 	cmpeqi	r2,r2,1
10001fa4:	1000051e 	bne	r2,zero,10001fbc <isMapChange+0x260>
10001fa8:	e0bfff03 	ldbu	r2,-4(fp)
10001fac:	108000a0 	cmpeqi	r2,r2,2
10001fb0:	1000021e 	bne	r2,zero,10001fbc <isMapChange+0x260>
10001fb4:	00800044 	movi	r2,1
10001fb8:	00000306 	br	10001fc8 <isMapChange+0x26c>
10001fbc:	0005883a 	mov	r2,zero
10001fc0:	00000106 	br	10001fc8 <isMapChange+0x26c>
  }
  return 0;
10001fc4:	0005883a 	mov	r2,zero
}
10001fc8:	e037883a 	mov	sp,fp
10001fcc:	dfc00117 	ldw	ra,4(sp)
10001fd0:	df000017 	ldw	fp,0(sp)
10001fd4:	dec00204 	addi	sp,sp,8
10001fd8:	f800283a 	ret

10001fdc <getMapChange>:

void getMapChange() {
10001fdc:	defffd04 	addi	sp,sp,-12
10001fe0:	dfc00215 	stw	ra,8(sp)
10001fe4:	df000115 	stw	fp,4(sp)
10001fe8:	df000104 	addi	fp,sp,4
  if(map_id == 1) {
10001fec:	d0a6d58b 	ldhu	r2,-25770(gp)
10001ff0:	10bfffcc 	andi	r2,r2,65535
10001ff4:	10800058 	cmpnei	r2,r2,1
10001ff8:	10001a1e 	bne	r2,zero,10002064 <getMapChange+0x88>
    const unsigned char c = map1[y_coord * MAP_WIDTH + x_coord];
10001ffc:	d0a6da8b 	ldhu	r2,-25750(gp)
10002000:	10bfffcc 	andi	r2,r2,65535
10002004:	1009883a 	mov	r4,r2
10002008:	01400a04 	movi	r5,40
1000200c:	0003c5c0 	call	10003c5c <__mulsi3>
10002010:	1007883a 	mov	r3,r2
10002014:	d0a6d90b 	ldhu	r2,-25756(gp)
10002018:	10bfffcc 	andi	r2,r2,65535
1000201c:	1887883a 	add	r3,r3,r2
10002020:	00840074 	movhi	r2,4097
10002024:	108d6c04 	addi	r2,r2,13744
10002028:	10c5883a 	add	r2,r2,r3
1000202c:	10800003 	ldbu	r2,0(r2)
10002030:	e0bfff05 	stb	r2,-4(fp)
    if(c - 0x2 == 0x2) { // stepped on 0x4, will goto map 2
10002034:	e0bfff03 	ldbu	r2,-4(fp)
10002038:	10800118 	cmpnei	r2,r2,4
1000203c:	1000021e 	bne	r2,zero,10002048 <getMapChange+0x6c>
      changeMap(3);
10002040:	010000c4 	movi	r4,3
10002044:	000215c0 	call	1000215c <changeMap>
    }
    if(c - 0x2 == 0x3) { // stepped on 0x5, will goto map3
10002048:	e0bfff03 	ldbu	r2,-4(fp)
1000204c:	10800158 	cmpnei	r2,r2,5
10002050:	1000031e 	bne	r2,zero,10002060 <getMapChange+0x84>
      changeMap(4);
10002054:	01000104 	movi	r4,4
10002058:	000215c0 	call	1000215c <changeMap>
    }
    return;
1000205c:	00003a06 	br	10002148 <getMapChange+0x16c>
10002060:	00003906 	br	10002148 <getMapChange+0x16c>
  }
  if(map_id == 2) { // only one possibility
10002064:	d0a6d58b 	ldhu	r2,-25770(gp)
10002068:	10bfffcc 	andi	r2,r2,65535
1000206c:	10800098 	cmpnei	r2,r2,2
10002070:	1000031e 	bne	r2,zero,10002080 <getMapChange+0xa4>
    changeMap(1);
10002074:	01000044 	movi	r4,1
10002078:	000215c0 	call	1000215c <changeMap>
    return;
1000207c:	00003206 	br	10002148 <getMapChange+0x16c>
  }
  if(map_id == 3) {
10002080:	d0a6d58b 	ldhu	r2,-25770(gp)
10002084:	10bfffcc 	andi	r2,r2,65535
10002088:	108000d8 	cmpnei	r2,r2,3
1000208c:	10001f1e 	bne	r2,zero,1000210c <getMapChange+0x130>
    const unsigned char c = map3[y_coord * MAP_WIDTH + x_coord];
10002090:	d0a6da8b 	ldhu	r2,-25750(gp)
10002094:	10bfffcc 	andi	r2,r2,65535
10002098:	1009883a 	mov	r4,r2
1000209c:	01400a04 	movi	r5,40
100020a0:	0003c5c0 	call	10003c5c <__mulsi3>
100020a4:	1007883a 	mov	r3,r2
100020a8:	d0a6d90b 	ldhu	r2,-25756(gp)
100020ac:	10bfffcc 	andi	r2,r2,65535
100020b0:	1887883a 	add	r3,r3,r2
100020b4:	00840074 	movhi	r2,4097
100020b8:	108fc404 	addi	r2,r2,16144
100020bc:	10c5883a 	add	r2,r2,r3
100020c0:	10800003 	ldbu	r2,0(r2)
100020c4:	e0bfff45 	stb	r2,-3(fp)
    if(c - 0x2 == 0x1) { // stepped on 0x3, will goto map 1
100020c8:	e0bfff43 	ldbu	r2,-3(fp)
100020cc:	108000d8 	cmpnei	r2,r2,3
100020d0:	1000021e 	bne	r2,zero,100020dc <getMapChange+0x100>
      changeMap(2);
100020d4:	01000084 	movi	r4,2
100020d8:	000215c0 	call	1000215c <changeMap>
    }
    if(c - 0x2 == 0x4) { // stepped on 0x6, will goto map 4
100020dc:	e0bfff43 	ldbu	r2,-3(fp)
100020e0:	10800198 	cmpnei	r2,r2,6
100020e4:	1000021e 	bne	r2,zero,100020f0 <getMapChange+0x114>
      changeMap(7);
100020e8:	010001c4 	movi	r4,7
100020ec:	000215c0 	call	1000215c <changeMap>
    }
    if(c - 0x2 == 0x5) { // stepped on 0x7, will goto map 5
100020f0:	e0bfff43 	ldbu	r2,-3(fp)
100020f4:	108001d8 	cmpnei	r2,r2,7
100020f8:	1000031e 	bne	r2,zero,10002108 <getMapChange+0x12c>
      changeMap(8);
100020fc:	01000204 	movi	r4,8
10002100:	000215c0 	call	1000215c <changeMap>
    }
    return;
10002104:	00001006 	br	10002148 <getMapChange+0x16c>
10002108:	00000f06 	br	10002148 <getMapChange+0x16c>
  }
  if(map_id == 4) { // only one possibility
1000210c:	d0a6d58b 	ldhu	r2,-25770(gp)
10002110:	10bfffcc 	andi	r2,r2,65535
10002114:	10800118 	cmpnei	r2,r2,4
10002118:	1000031e 	bne	r2,zero,10002128 <getMapChange+0x14c>
    changeMap(5);
1000211c:	01000144 	movi	r4,5
10002120:	000215c0 	call	1000215c <changeMap>
    return;
10002124:	00000806 	br	10002148 <getMapChange+0x16c>
  }
  if(map_id == 5) { // only one possibility
10002128:	d0a6d58b 	ldhu	r2,-25770(gp)
1000212c:	10bfffcc 	andi	r2,r2,65535
10002130:	10800158 	cmpnei	r2,r2,5
10002134:	1000031e 	bne	r2,zero,10002144 <getMapChange+0x168>
    changeMap(6);
10002138:	01000184 	movi	r4,6
1000213c:	000215c0 	call	1000215c <changeMap>
    return;
10002140:	00000106 	br	10002148 <getMapChange+0x16c>
  }
  return;
10002144:	0001883a 	nop
}
10002148:	e037883a 	mov	sp,fp
1000214c:	dfc00117 	ldw	ra,4(sp)
10002150:	df000017 	ldw	fp,0(sp)
10002154:	dec00204 	addi	sp,sp,8
10002158:	f800283a 	ret

1000215c <changeMap>:

void changeMap(unsigned short mapIndex) {
1000215c:	defffd04 	addi	sp,sp,-12
10002160:	dfc00215 	stw	ra,8(sp)
10002164:	df000115 	stw	fp,4(sp)
10002168:	df000104 	addi	fp,sp,4
1000216c:	2005883a 	mov	r2,r4
10002170:	e0bfff0d 	sth	r2,-4(fp)
  map_id = maps[mapIndex];
10002174:	e0ffff0b 	ldhu	r3,-4(fp)
10002178:	00840074 	movhi	r2,4097
1000217c:	108d5a04 	addi	r2,r2,13672
10002180:	18c7883a 	add	r3,r3,r3
10002184:	10c5883a 	add	r2,r2,r3
10002188:	1080000b 	ldhu	r2,0(r2)
1000218c:	d0a6d58d 	sth	r2,-25770(gp)
  x_coord = default_x[mapIndex];
10002190:	e0ffff0b 	ldhu	r3,-4(fp)
10002194:	00840074 	movhi	r2,4097
10002198:	108d5e84 	addi	r2,r2,13690
1000219c:	18c7883a 	add	r3,r3,r3
100021a0:	10c5883a 	add	r2,r2,r3
100021a4:	1080000b 	ldhu	r2,0(r2)
100021a8:	d0a6d90d 	sth	r2,-25756(gp)
  y_coord = default_y[mapIndex];
100021ac:	e0ffff0b 	ldhu	r3,-4(fp)
100021b0:	00840074 	movhi	r2,4097
100021b4:	108d6304 	addi	r2,r2,13708
100021b8:	18c7883a 	add	r3,r3,r3
100021bc:	10c5883a 	add	r2,r2,r3
100021c0:	1080000b 	ldhu	r2,0(r2)
100021c4:	d0a6da8d 	sth	r2,-25750(gp)
  player_direction = default_dir[mapIndex];
100021c8:	e0ffff0b 	ldhu	r3,-4(fp)
100021cc:	00840074 	movhi	r2,4097
100021d0:	108d6784 	addi	r2,r2,13726
100021d4:	18c7883a 	add	r3,r3,r3
100021d8:	10c5883a 	add	r2,r2,r3
100021dc:	1080000b 	ldhu	r2,0(r2)
100021e0:	d0a6d98d 	sth	r2,-25754(gp)
  setCoordinates();
100021e4:	00010940 	call	10001094 <setCoordinates>

  // should be enough time to redraw?
  unsetRedraw();
100021e8:	00022000 	call	10002200 <unsetRedraw>
}
100021ec:	e037883a 	mov	sp,fp
100021f0:	dfc00117 	ldw	ra,4(sp)
100021f4:	df000017 	ldw	fp,0(sp)
100021f8:	dec00204 	addi	sp,sp,8
100021fc:	f800283a 	ret

10002200 <unsetRedraw>:

void unsetRedraw() {
10002200:	defffd04 	addi	sp,sp,-12
10002204:	dfc00215 	stw	ra,8(sp)
10002208:	df000115 	stw	fp,4(sp)
1000220c:	df000104 	addi	fp,sp,4
  usleep(20 * 1000); // 5 ms
10002210:	01138804 	movi	r4,20000
10002214:	0010ec00 	call	10010ec0 <usleep>
  redraw = 0;
10002218:	d026d50d 	sth	zero,-25772(gp)
  unsigned short info = ((map_id & 0x000F) << 4) + ((is_encounter & 0x000F) << 3) + ((redraw & 0x000F) << 2) + (player_direction & 0x000F);
1000221c:	d0a6d58b 	ldhu	r2,-25770(gp)
10002220:	10bfffcc 	andi	r2,r2,65535
10002224:	1004913a 	slli	r2,r2,4
10002228:	10803fcc 	andi	r2,r2,255
1000222c:	1007883a 	mov	r3,r2
10002230:	d0a6d60b 	ldhu	r2,-25768(gp)
10002234:	108003cc 	andi	r2,r2,15
10002238:	100490fa 	slli	r2,r2,3
1000223c:	1885883a 	add	r2,r3,r2
10002240:	1007883a 	mov	r3,r2
10002244:	d0a6d50b 	ldhu	r2,-25772(gp)
10002248:	108003cc 	andi	r2,r2,15
1000224c:	1085883a 	add	r2,r2,r2
10002250:	1085883a 	add	r2,r2,r2
10002254:	1885883a 	add	r2,r3,r2
10002258:	1007883a 	mov	r3,r2
1000225c:	d0a6d98b 	ldhu	r2,-25754(gp)
10002260:	108003cc 	andi	r2,r2,15
10002264:	1885883a 	add	r2,r3,r2
10002268:	e0bfff0d 	sth	r2,-4(fp)
  AVL_PTR[2] = info;
1000226c:	d0a00017 	ldw	r2,-32768(gp)
10002270:	10800104 	addi	r2,r2,4
10002274:	e0ffff0b 	ldhu	r3,-4(fp)
10002278:	10c0000d 	sth	r3,0(r2)
}
1000227c:	e037883a 	mov	sp,fp
10002280:	dfc00117 	ldw	ra,4(sp)
10002284:	df000017 	ldw	fp,0(sp)
10002288:	dec00204 	addi	sp,sp,8
1000228c:	f800283a 	ret

10002290 <keyStroke>:

void keyStroke(int keycode) {
10002290:	defffd04 	addi	sp,sp,-12
10002294:	dfc00215 	stw	ra,8(sp)
10002298:	df000115 	stw	fp,4(sp)
1000229c:	df000104 	addi	fp,sp,4
100022a0:	e13fff15 	stw	r4,-4(fp)
  	printf("============================\n");
100022a4:	01040074 	movhi	r4,4097
100022a8:	21149604 	addi	r4,r4,21080
100022ac:	0003da40 	call	10003da4 <puts>
  	printf("Keycode sent: %d\n", keycode);
100022b0:	01040074 	movhi	r4,4097
100022b4:	21149e04 	addi	r4,r4,21112
100022b8:	e17fff17 	ldw	r5,-4(fp)
100022bc:	0003cb00 	call	10003cb0 <printf>
  	printf("%d\n",sizeof(unsigned short));
100022c0:	01040074 	movhi	r4,4097
100022c4:	2114a304 	addi	r4,r4,21132
100022c8:	01400084 	movi	r5,2
100022cc:	0003cb00 	call	10003cb0 <printf>
  	printf("============================\n");
100022d0:	01040074 	movhi	r4,4097
100022d4:	21149604 	addi	r4,r4,21080
100022d8:	0003da40 	call	10003da4 <puts>
    if(init == 0) {
100022dc:	d0a6d417 	ldw	r2,-25776(gp)
100022e0:	1000041e 	bne	r2,zero,100022f4 <keyStroke+0x64>
      changeMap(0);
100022e4:	0009883a 	mov	r4,zero
100022e8:	000215c0 	call	1000215c <changeMap>
      init = 1;
100022ec:	00800044 	movi	r2,1
100022f0:	d0a6d415 	stw	r2,-25776(gp)
    }
    switch (keycode) {
100022f4:	e0bfff17 	ldw	r2,-4(fp)
100022f8:	10bfff04 	addi	r2,r2,-4
100022fc:	10c00968 	cmpgeui	r3,r2,37
10002300:	18006b1e 	bne	r3,zero,100024b0 <keyStroke+0x220>
10002304:	100690ba 	slli	r3,r2,2
10002308:	00840034 	movhi	r2,4096
1000230c:	1088c704 	addi	r2,r2,8988
10002310:	1885883a 	add	r2,r3,r2
10002314:	10800017 	ldw	r2,0(r2)
10002318:	1000683a 	jmp	r2
1000231c:	100023b0 	cmpltui	zero,r2,142
10002320:	100024b0 	cmpltui	zero,r2,146
10002324:	100024b0 	cmpltui	zero,r2,146
10002328:	10002400 	call	11000240 <_gp+0xfe1190>
1000232c:	100024b0 	cmpltui	zero,r2,146
10002330:	100024b0 	cmpltui	zero,r2,146
10002334:	100024b0 	cmpltui	zero,r2,146
10002338:	100024b0 	cmpltui	zero,r2,146
1000233c:	100024b0 	cmpltui	zero,r2,146
10002340:	100024b0 	cmpltui	zero,r2,146
10002344:	100024b0 	cmpltui	zero,r2,146
10002348:	100024b0 	cmpltui	zero,r2,146
1000234c:	100024b0 	cmpltui	zero,r2,146
10002350:	100024b0 	cmpltui	zero,r2,146
10002354:	100024b0 	cmpltui	zero,r2,146
10002358:	100024b0 	cmpltui	zero,r2,146
1000235c:	100024b0 	cmpltui	zero,r2,146
10002360:	100024b0 	cmpltui	zero,r2,146
10002364:	100023d8 	cmpnei	zero,r2,143
10002368:	100024b0 	cmpltui	zero,r2,146
1000236c:	100024b0 	cmpltui	zero,r2,146
10002370:	100024b0 	cmpltui	zero,r2,146
10002374:	10002428 	cmpgeui	zero,r2,144
10002378:	100024b0 	cmpltui	zero,r2,146
1000237c:	100024b0 	cmpltui	zero,r2,146
10002380:	100024b0 	cmpltui	zero,r2,146
10002384:	100024b0 	cmpltui	zero,r2,146
10002388:	100024b0 	cmpltui	zero,r2,146
1000238c:	100024b0 	cmpltui	zero,r2,146
10002390:	100024b0 	cmpltui	zero,r2,146
10002394:	100024b0 	cmpltui	zero,r2,146
10002398:	100024b0 	cmpltui	zero,r2,146
1000239c:	100024b0 	cmpltui	zero,r2,146
100023a0:	100024b0 	cmpltui	zero,r2,146
100023a4:	100024b0 	cmpltui	zero,r2,146
100023a8:	100024b0 	cmpltui	zero,r2,146
100023ac:	10002450 	cmplti	zero,r2,145
        case 4: // a
            if(is_encounter == 0) {
100023b0:	d0a6d60b 	ldhu	r2,-25768(gp)
100023b4:	10bfffcc 	andi	r2,r2,65535
100023b8:	1000061e 	bne	r2,zero,100023d4 <keyStroke+0x144>
              moveLeft();
100023bc:	00011f00 	call	100011f0 <moveLeft>
               if(isGrass()) {
100023c0:	0001b900 	call	10001b90 <isGrass>
100023c4:	10000126 	beq	r2,zero,100023cc <keyStroke+0x13c>
                   encounter();
100023c8:	00029500 	call	10002950 <encounter>
               }
              setCoordinates();
100023cc:	00010940 	call	10001094 <setCoordinates>
            }
//            if(is_encounter == 1) {
//              menuSelect(2);
//            }
            break;
100023d0:	00003706 	br	100024b0 <keyStroke+0x220>
100023d4:	00003606 	br	100024b0 <keyStroke+0x220>
        case 22: // s
            if(is_encounter == 0) {
100023d8:	d0a6d60b 	ldhu	r2,-25768(gp)
100023dc:	10bfffcc 	andi	r2,r2,65535
100023e0:	1000061e 	bne	r2,zero,100023fc <keyStroke+0x16c>
              moveDown();
100023e4:	00014580 	call	10001458 <moveDown>
               if(isGrass()) {
100023e8:	0001b900 	call	10001b90 <isGrass>
100023ec:	10000126 	beq	r2,zero,100023f4 <keyStroke+0x164>
                   encounter();
100023f0:	00029500 	call	10002950 <encounter>
               }
              setCoordinates();
100023f4:	00010940 	call	10001094 <setCoordinates>
            }
//            if(is_encounter == 1) {
//              menuSelect(1);
//            }
            break;
100023f8:	00002d06 	br	100024b0 <keyStroke+0x220>
100023fc:	00002c06 	br	100024b0 <keyStroke+0x220>
        case 7: // d
            if(is_encounter == 0) {
10002400:	d0a6d60b 	ldhu	r2,-25768(gp)
10002404:	10bfffcc 	andi	r2,r2,65535
10002408:	1000061e 	bne	r2,zero,10002424 <keyStroke+0x194>
              moveRight();
1000240c:	00016bc0 	call	100016bc <moveRight>
               if(isGrass()) {
10002410:	0001b900 	call	10001b90 <isGrass>
10002414:	10000126 	beq	r2,zero,1000241c <keyStroke+0x18c>
                   encounter();
10002418:	00029500 	call	10002950 <encounter>
               }
              setCoordinates();
1000241c:	00010940 	call	10001094 <setCoordinates>
            }
//            if(is_encounter == 1) {
//              menuSelect(0);
//            }
            break;
10002420:	00002306 	br	100024b0 <keyStroke+0x220>
10002424:	00002206 	br	100024b0 <keyStroke+0x220>
        case 26: // w
            if(is_encounter == 0) {
10002428:	d0a6d60b 	ldhu	r2,-25768(gp)
1000242c:	10bfffcc 	andi	r2,r2,65535
10002430:	1000061e 	bne	r2,zero,1000244c <keyStroke+0x1bc>
              moveUp();
10002434:	00019280 	call	10001928 <moveUp>
               if(isGrass()) {
10002438:	0001b900 	call	10001b90 <isGrass>
1000243c:	10000126 	beq	r2,zero,10002444 <keyStroke+0x1b4>
                   encounter();
10002440:	00029500 	call	10002950 <encounter>
               }
              setCoordinates();
10002444:	00010940 	call	10001094 <setCoordinates>
            }
//            if(is_encounter == 1) {
//              menuSelect(3);
//            }
            break;
10002448:	00001906 	br	100024b0 <keyStroke+0x220>
1000244c:	00001806 	br	100024b0 <keyStroke+0x220>
         case 40: // enter
             if(is_encounter == 1) {
10002450:	d0a6d60b 	ldhu	r2,-25768(gp)
10002454:	10bfffcc 	andi	r2,r2,65535
10002458:	10800058 	cmpnei	r2,r2,1
1000245c:	1000131e 	bne	r2,zero,100024ac <keyStroke+0x21c>
            	 attack(0,0);
10002460:	0009883a 	mov	r4,zero
10002464:	000b883a 	mov	r5,zero
10002468:	00026600 	call	10002660 <attack>
            	 setEncounter();
1000246c:	00024e40 	call	100024e4 <setEncounter>
            	 usleep(100 * 1000); // 100 ms
10002470:	010000b4 	movhi	r4,2
10002474:	2121a804 	addi	r4,r4,-31072
10002478:	0010ec00 	call	10010ec0 <usleep>
            	 attack(1, 1);
1000247c:	01000044 	movi	r4,1
10002480:	01400044 	movi	r5,1
10002484:	00026600 	call	10002660 <attack>
            	 usleep(100 * 1000);
10002488:	010000b4 	movhi	r4,2
1000248c:	2121a804 	addi	r4,r4,-31072
10002490:	0010ec00 	call	10010ec0 <usleep>
               if(finish == 1) {
10002494:	d0a6d88b 	ldhu	r2,-25758(gp)
10002498:	10bfffcc 	andi	r2,r2,65535
1000249c:	10800058 	cmpnei	r2,r2,1
100024a0:	1000021e 	bne	r2,zero,100024ac <keyStroke+0x21c>
                 finishEncounter();
100024a4:	00025c00 	call	100025c0 <finishEncounter>
               }
             }
             break;
100024a8:	00000006 	br	100024ac <keyStroke+0x21c>
100024ac:	0001883a 	nop
        // case 44: // space, heal
        //     allyID = (allyID + 1) % 5;
        //     break;
    }
    if(redraw == 1) {
100024b0:	d0a6d50b 	ldhu	r2,-25772(gp)
100024b4:	10bfffcc 	andi	r2,r2,65535
100024b8:	10800058 	cmpnei	r2,r2,1
100024bc:	1000011e 	bne	r2,zero,100024c4 <keyStroke+0x234>
      unsetRedraw();
100024c0:	00022000 	call	10002200 <unsetRedraw>
    }
    if(isMapChange()) {
100024c4:	0001d5c0 	call	10001d5c <isMapChange>
100024c8:	10000126 	beq	r2,zero,100024d0 <keyStroke+0x240>
      getMapChange();
100024cc:	0001fdc0 	call	10001fdc <getMapChange>
    }
}
100024d0:	e037883a 	mov	sp,fp
100024d4:	dfc00117 	ldw	ra,4(sp)
100024d8:	df000017 	ldw	fp,0(sp)
100024dc:	dec00204 	addi	sp,sp,8
100024e0:	f800283a 	ret

100024e4 <setEncounter>:

/////////////////////////////////////////////////////////////////


void setEncounter() {
100024e4:	defffd04 	addi	sp,sp,-12
100024e8:	df000215 	stw	fp,8(sp)
100024ec:	df000204 	addi	fp,sp,8
    unsigned short encounter = ((enemyHP & 0x00FF) << 8)  + (enemyID & 0x00FF);
100024f0:	d0a6db8b 	ldhu	r2,-25746(gp)
100024f4:	10bfffcc 	andi	r2,r2,65535
100024f8:	1004923a 	slli	r2,r2,8
100024fc:	1007883a 	mov	r3,r2
10002500:	d0a6da0b 	ldhu	r2,-25752(gp)
10002504:	10803fcc 	andi	r2,r2,255
10002508:	1885883a 	add	r2,r3,r2
1000250c:	e0bffe0d 	sth	r2,-8(fp)
    AVL_PTR[4] = encounter;
10002510:	d0a00017 	ldw	r2,-32768(gp)
10002514:	10800204 	addi	r2,r2,8
10002518:	e0fffe0b 	ldhu	r3,-8(fp)
1000251c:	10c0000d 	sth	r3,0(r2)

    unsigned short ally = ((allyHP & 0x00FF) << 8)  + (allyID & 0x00FF);
10002520:	d0a0018b 	ldhu	r2,-32762(gp)
10002524:	10bfffcc 	andi	r2,r2,65535
10002528:	1004923a 	slli	r2,r2,8
1000252c:	1007883a 	mov	r3,r2
10002530:	d0a0010b 	ldhu	r2,-32764(gp)
10002534:	10803fcc 	andi	r2,r2,255
10002538:	1885883a 	add	r2,r3,r2
1000253c:	e0bffe8d 	sth	r2,-6(fp)
    AVL_PTR[6] = ally;
10002540:	d0a00017 	ldw	r2,-32768(gp)
10002544:	10800304 	addi	r2,r2,12
10002548:	e0fffe8b 	ldhu	r3,-6(fp)
1000254c:	10c0000d 	sth	r3,0(r2)

    // dunno if i should make redraw 1
    unsigned short info = ((map_id & 0x000F) << 4) + ((is_encounter & 0x000F) << 3) + ((redraw & 0x000F) << 2) + (player_direction & 0x000F);
10002550:	d0a6d58b 	ldhu	r2,-25770(gp)
10002554:	10bfffcc 	andi	r2,r2,65535
10002558:	1004913a 	slli	r2,r2,4
1000255c:	10803fcc 	andi	r2,r2,255
10002560:	1007883a 	mov	r3,r2
10002564:	d0a6d60b 	ldhu	r2,-25768(gp)
10002568:	108003cc 	andi	r2,r2,15
1000256c:	100490fa 	slli	r2,r2,3
10002570:	1885883a 	add	r2,r3,r2
10002574:	1007883a 	mov	r3,r2
10002578:	d0a6d50b 	ldhu	r2,-25772(gp)
1000257c:	108003cc 	andi	r2,r2,15
10002580:	1085883a 	add	r2,r2,r2
10002584:	1085883a 	add	r2,r2,r2
10002588:	1885883a 	add	r2,r3,r2
1000258c:	1007883a 	mov	r3,r2
10002590:	d0a6d98b 	ldhu	r2,-25754(gp)
10002594:	108003cc 	andi	r2,r2,15
10002598:	1885883a 	add	r2,r3,r2
1000259c:	e0bfff0d 	sth	r2,-4(fp)
    AVL_PTR[2] = info;
100025a0:	d0a00017 	ldw	r2,-32768(gp)
100025a4:	10800104 	addi	r2,r2,4
100025a8:	e0ffff0b 	ldhu	r3,-4(fp)
100025ac:	10c0000d 	sth	r3,0(r2)
}
100025b0:	e037883a 	mov	sp,fp
100025b4:	df000017 	ldw	fp,0(sp)
100025b8:	dec00104 	addi	sp,sp,4
100025bc:	f800283a 	ret

100025c0 <finishEncounter>:

void finishEncounter() {
100025c0:	defffe04 	addi	sp,sp,-8
100025c4:	df000115 	stw	fp,4(sp)
100025c8:	df000104 	addi	fp,sp,4
    // set the appropriate register to 0
    // dunno if i should change redraw
    is_encounter = 0;
100025cc:	d026d60d 	sth	zero,-25768(gp)
    unsigned short info = ((map_id & 0x000F) << 4) + ((is_encounter & 0x000F) << 3) + ((redraw & 0x000F) << 2) + (player_direction & 0x000F);
100025d0:	d0a6d58b 	ldhu	r2,-25770(gp)
100025d4:	10bfffcc 	andi	r2,r2,65535
100025d8:	1004913a 	slli	r2,r2,4
100025dc:	10803fcc 	andi	r2,r2,255
100025e0:	1007883a 	mov	r3,r2
100025e4:	d0a6d60b 	ldhu	r2,-25768(gp)
100025e8:	108003cc 	andi	r2,r2,15
100025ec:	100490fa 	slli	r2,r2,3
100025f0:	1885883a 	add	r2,r3,r2
100025f4:	1007883a 	mov	r3,r2
100025f8:	d0a6d50b 	ldhu	r2,-25772(gp)
100025fc:	108003cc 	andi	r2,r2,15
10002600:	1085883a 	add	r2,r2,r2
10002604:	1085883a 	add	r2,r2,r2
10002608:	1885883a 	add	r2,r3,r2
1000260c:	1007883a 	mov	r3,r2
10002610:	d0a6d98b 	ldhu	r2,-25754(gp)
10002614:	108003cc 	andi	r2,r2,15
10002618:	1885883a 	add	r2,r3,r2
1000261c:	e0bfff0d 	sth	r2,-4(fp)
    AVL_PTR[2] = info;
10002620:	d0a00017 	ldw	r2,-32768(gp)
10002624:	10800104 	addi	r2,r2,4
10002628:	e0ffff0b 	ldhu	r3,-4(fp)
1000262c:	10c0000d 	sth	r3,0(r2)
}
10002630:	e037883a 	mov	sp,fp
10002634:	df000017 	ldw	fp,0(sp)
10002638:	dec00104 	addi	sp,sp,4
1000263c:	f800283a 	ret

10002640 <isEncounter>:

int isEncounter() {
10002640:	deffff04 	addi	sp,sp,-4
10002644:	df000015 	stw	fp,0(sp)
10002648:	d839883a 	mov	fp,sp
	return 1;
1000264c:	00800044 	movi	r2,1
    //return (rand() % 100 < 50);
}
10002650:	e037883a 	mov	sp,fp
10002654:	df000017 	ldw	fp,0(sp)
10002658:	dec00104 	addi	sp,sp,4
1000265c:	f800283a 	ret

10002660 <attack>:

void attack(int moveID, int who) {
10002660:	defffb04 	addi	sp,sp,-20
10002664:	dfc00415 	stw	ra,16(sp)
10002668:	df000315 	stw	fp,12(sp)
1000266c:	df000304 	addi	fp,sp,12
10002670:	e13ffe15 	stw	r4,-8(fp)
10002674:	e17fff15 	stw	r5,-4(fp)
    // moveID = 0 tackle, moveID = 1 pound
    // who = 0, ally. who = 1, enemy
    unsigned short damage;
    if(moveID == 0) {
10002678:	e0bffe17 	ldw	r2,-8(fp)
1000267c:	1000031e 	bne	r2,zero,1000268c <attack+0x2c>
      damage = 6;
10002680:	00800184 	movi	r2,6
10002684:	e0bffd0d 	sth	r2,-12(fp)
10002688:	00000d06 	br	100026c0 <attack+0x60>
    } else if(moveID == 1) {
1000268c:	e0bffe17 	ldw	r2,-8(fp)
10002690:	10800058 	cmpnei	r2,r2,1
10002694:	10000a1e 	bne	r2,zero,100026c0 <attack+0x60>
      if(rand() % 100 < 85) {
10002698:	0003dd00 	call	10003dd0 <rand>
1000269c:	1009883a 	mov	r4,r2
100026a0:	01401904 	movi	r5,100
100026a4:	0003bf00 	call	10003bf0 <__modsi3>
100026a8:	10801548 	cmpgei	r2,r2,85
100026ac:	1000031e 	bne	r2,zero,100026bc <attack+0x5c>
        damage = 5;
100026b0:	00800144 	movi	r2,5
100026b4:	e0bffd0d 	sth	r2,-12(fp)
100026b8:	00000106 	br	100026c0 <attack+0x60>
      } else {
        damage = 0;
100026bc:	e03ffd0d 	sth	zero,-12(fp)
      }
    }

    if(who == 0) {
100026c0:	e0bfff17 	ldw	r2,-4(fp)
100026c4:	10000a1e 	bne	r2,zero,100026f0 <attack+0x90>
      enemyHP -= damage;
100026c8:	d0e6db8b 	ldhu	r3,-25746(gp)
100026cc:	e0bffd0b 	ldhu	r2,-12(fp)
100026d0:	1885c83a 	sub	r2,r3,r2
100026d4:	d0a6db8d 	sth	r2,-25746(gp)
      if(enemyHP <= 0) {
100026d8:	d0a6db8b 	ldhu	r2,-25746(gp)
100026dc:	10bfffcc 	andi	r2,r2,65535
100026e0:	10000f1e 	bne	r2,zero,10002720 <attack+0xc0>
        finish = 1;
100026e4:	00800044 	movi	r2,1
100026e8:	d0a6d88d 	sth	r2,-25758(gp)
100026ec:	00000c06 	br	10002720 <attack+0xc0>
      }
    } else if(who == 1) {
100026f0:	e0bfff17 	ldw	r2,-4(fp)
100026f4:	10800058 	cmpnei	r2,r2,1
100026f8:	1000091e 	bne	r2,zero,10002720 <attack+0xc0>
      allyHP -= damage;
100026fc:	d0e0018b 	ldhu	r3,-32762(gp)
10002700:	e0bffd0b 	ldhu	r2,-12(fp)
10002704:	1885c83a 	sub	r2,r3,r2
10002708:	d0a0018d 	sth	r2,-32762(gp)
      if(allyHP <= 0) {
1000270c:	d0a0018b 	ldhu	r2,-32762(gp)
10002710:	10bfffcc 	andi	r2,r2,65535
10002714:	1000021e 	bne	r2,zero,10002720 <attack+0xc0>
        finish = 1;
10002718:	00800044 	movi	r2,1
1000271c:	d0a6d88d 	sth	r2,-25758(gp)
      }
    }
}
10002720:	e037883a 	mov	sp,fp
10002724:	dfc00117 	ldw	ra,4(sp)
10002728:	df000017 	ldw	fp,0(sp)
1000272c:	dec00204 	addi	sp,sp,8
10002730:	f800283a 	ret

10002734 <menuSelect>:

// 0 = right, 1 = down, 2 = left, 3 = up
void menuSelect(int key) {
10002734:	defffe04 	addi	sp,sp,-8
10002738:	df000115 	stw	fp,4(sp)
1000273c:	df000104 	addi	fp,sp,4
10002740:	e13fff15 	stw	r4,-4(fp)
    if(key == 0) {
10002744:	e0bfff17 	ldw	r2,-4(fp)
10002748:	1000081e 	bne	r2,zero,1000276c <menuSelect+0x38>
      if(menuSelection != 9) {
1000274c:	d0a6d80b 	ldhu	r2,-25760(gp)
10002750:	10bfffcc 	andi	r2,r2,65535
10002754:	10800260 	cmpeqi	r2,r2,9
10002758:	1000231e 	bne	r2,zero,100027e8 <menuSelect+0xb4>
        menuSelection++;
1000275c:	d0a6d80b 	ldhu	r2,-25760(gp)
10002760:	10800044 	addi	r2,r2,1
10002764:	d0a6d80d 	sth	r2,-25760(gp)
10002768:	00001f06 	br	100027e8 <menuSelect+0xb4>
      }
    } else if(key == 1) {
1000276c:	e0bfff17 	ldw	r2,-4(fp)
10002770:	10800058 	cmpnei	r2,r2,1
10002774:	1000081e 	bne	r2,zero,10002798 <menuSelect+0x64>
      if(menuSelection <= 4) { //
10002778:	d0a6d80b 	ldhu	r2,-25760(gp)
1000277c:	10bfffcc 	andi	r2,r2,65535
10002780:	10800168 	cmpgeui	r2,r2,5
10002784:	1000181e 	bne	r2,zero,100027e8 <menuSelect+0xb4>
        menuSelection += 5;
10002788:	d0a6d80b 	ldhu	r2,-25760(gp)
1000278c:	10800144 	addi	r2,r2,5
10002790:	d0a6d80d 	sth	r2,-25760(gp)
10002794:	00001406 	br	100027e8 <menuSelect+0xb4>
      }
    } else if(key == 2) {
10002798:	e0bfff17 	ldw	r2,-4(fp)
1000279c:	10800098 	cmpnei	r2,r2,2
100027a0:	1000071e 	bne	r2,zero,100027c0 <menuSelect+0x8c>
      if(menuSelection != 0) {
100027a4:	d0a6d80b 	ldhu	r2,-25760(gp)
100027a8:	10bfffcc 	andi	r2,r2,65535
100027ac:	10000e26 	beq	r2,zero,100027e8 <menuSelect+0xb4>
        menuSelection--;
100027b0:	d0a6d80b 	ldhu	r2,-25760(gp)
100027b4:	10bfffc4 	addi	r2,r2,-1
100027b8:	d0a6d80d 	sth	r2,-25760(gp)
100027bc:	00000a06 	br	100027e8 <menuSelect+0xb4>
      }
    } else if(key == 3) {
100027c0:	e0bfff17 	ldw	r2,-4(fp)
100027c4:	108000d8 	cmpnei	r2,r2,3
100027c8:	1000071e 	bne	r2,zero,100027e8 <menuSelect+0xb4>
      if(menuSelection > 4) { //
100027cc:	d0a6d80b 	ldhu	r2,-25760(gp)
100027d0:	10bfffcc 	andi	r2,r2,65535
100027d4:	10800170 	cmpltui	r2,r2,5
100027d8:	1000031e 	bne	r2,zero,100027e8 <menuSelect+0xb4>
        menuSelection -= 5;
100027dc:	d0a6d80b 	ldhu	r2,-25760(gp)
100027e0:	10bffec4 	addi	r2,r2,-5
100027e4:	d0a6d80d 	sth	r2,-25760(gp)
      }
    }
}
100027e8:	e037883a 	mov	sp,fp
100027ec:	df000017 	ldw	fp,0(sp)
100027f0:	dec00104 	addi	sp,sp,4
100027f4:	f800283a 	ret

100027f8 <menuEnter>:

void menuEnter() {
100027f8:	defffe04 	addi	sp,sp,-8
100027fc:	dfc00115 	stw	ra,4(sp)
10002800:	df000015 	stw	fp,0(sp)
10002804:	d839883a 	mov	fp,sp
  // 0 = tackle, 1 = pound, 2 = ball, 3 = potion, 4 = flee, 5 = leer, 6-9 empty
  if(menuSelection == 0) {
10002808:	d0a6d80b 	ldhu	r2,-25760(gp)
1000280c:	10bfffcc 	andi	r2,r2,65535
10002810:	1000041e 	bne	r2,zero,10002824 <menuEnter+0x2c>
    attack(0, 0);
10002814:	0009883a 	mov	r4,zero
10002818:	000b883a 	mov	r5,zero
1000281c:	00026600 	call	10002660 <attack>
10002820:	00002e06 	br	100028dc <menuEnter+0xe4>
  } else if(menuSelection == 1) {
10002824:	d0a6d80b 	ldhu	r2,-25760(gp)
10002828:	10bfffcc 	andi	r2,r2,65535
1000282c:	10800058 	cmpnei	r2,r2,1
10002830:	1000041e 	bne	r2,zero,10002844 <menuEnter+0x4c>
    attack(1,0);
10002834:	01000044 	movi	r4,1
10002838:	000b883a 	mov	r5,zero
1000283c:	00026600 	call	10002660 <attack>
10002840:	00002606 	br	100028dc <menuEnter+0xe4>
  } else if(menuSelection == 2) {
10002844:	d0a6d80b 	ldhu	r2,-25760(gp)
10002848:	10bfffcc 	andi	r2,r2,65535
1000284c:	10800098 	cmpnei	r2,r2,2
10002850:	1000041e 	bne	r2,zero,10002864 <menuEnter+0x6c>
    pokeballNUM -= 1;
10002854:	d0a0028b 	ldhu	r2,-32758(gp)
10002858:	10bfffc4 	addi	r2,r2,-1
1000285c:	d0a0028d 	sth	r2,-32758(gp)
    return;
10002860:	00001f06 	br	100028e0 <menuEnter+0xe8>
  } else if(menuSelection == 3) {
10002864:	d0a6d80b 	ldhu	r2,-25760(gp)
10002868:	10bfffcc 	andi	r2,r2,65535
1000286c:	108000d8 	cmpnei	r2,r2,3
10002870:	1000071e 	bne	r2,zero,10002890 <menuEnter+0x98>
    potionNUM -= 1;
10002874:	d0a0030b 	ldhu	r2,-32756(gp)
10002878:	10bfffc4 	addi	r2,r2,-1
1000287c:	d0a0030d 	sth	r2,-32756(gp)
    allyHP += 10;
10002880:	d0a0018b 	ldhu	r2,-32762(gp)
10002884:	10800284 	addi	r2,r2,10
10002888:	d0a0018d 	sth	r2,-32762(gp)
1000288c:	00001306 	br	100028dc <menuEnter+0xe4>
  } else if(menuSelection == 4) {
10002890:	d0a6d80b 	ldhu	r2,-25760(gp)
10002894:	10bfffcc 	andi	r2,r2,65535
10002898:	10800118 	cmpnei	r2,r2,4
1000289c:	1000031e 	bne	r2,zero,100028ac <menuEnter+0xb4>
    finish = 1;
100028a0:	00800044 	movi	r2,1
100028a4:	d0a6d88d 	sth	r2,-25758(gp)
    return;
100028a8:	00000d06 	br	100028e0 <menuEnter+0xe8>
  } else if(menuSelection == 5) {
100028ac:	d0a6d80b 	ldhu	r2,-25760(gp)
100028b0:	10bfffcc 	andi	r2,r2,65535
100028b4:	10800158 	cmpnei	r2,r2,5
100028b8:	1000071e 	bne	r2,zero,100028d8 <menuEnter+0xe0>
    if(rand() % 100 <= 50) { // 50% chance of skipping enemy turn
100028bc:	0003dd00 	call	10003dd0 <rand>
100028c0:	1009883a 	mov	r4,r2
100028c4:	01401904 	movi	r5,100
100028c8:	0003bf00 	call	10003bf0 <__modsi3>
100028cc:	10800cc8 	cmpgei	r2,r2,51
100028d0:	1000021e 	bne	r2,zero,100028dc <menuEnter+0xe4>
      return;
100028d4:	00000206 	br	100028e0 <menuEnter+0xe8>
    }
  } else {
    return;
100028d8:	00000106 	br	100028e0 <menuEnter+0xe8>
  }
  enemyTurn();
100028dc:	00028f40 	call	100028f4 <enemyTurn>
}
100028e0:	e037883a 	mov	sp,fp
100028e4:	dfc00117 	ldw	ra,4(sp)
100028e8:	df000017 	ldw	fp,0(sp)
100028ec:	dec00204 	addi	sp,sp,8
100028f0:	f800283a 	ret

100028f4 <enemyTurn>:

void enemyTurn() {
100028f4:	defffd04 	addi	sp,sp,-12
100028f8:	dfc00215 	stw	ra,8(sp)
100028fc:	df000115 	stw	fp,4(sp)
10002900:	df000104 	addi	fp,sp,4
  int r = rand() % 2;
10002904:	0003dd00 	call	10003dd0 <rand>
10002908:	1007883a 	mov	r3,r2
1000290c:	00a00034 	movhi	r2,32768
10002910:	10800044 	addi	r2,r2,1
10002914:	1884703a 	and	r2,r3,r2
10002918:	1000040e 	bge	r2,zero,1000292c <enemyTurn+0x38>
1000291c:	10bfffc4 	addi	r2,r2,-1
10002920:	00ffff84 	movi	r3,-2
10002924:	10c4b03a 	or	r2,r2,r3
10002928:	10800044 	addi	r2,r2,1
1000292c:	e0bfff15 	stw	r2,-4(fp)
  attack(r, 1);
10002930:	e13fff17 	ldw	r4,-4(fp)
10002934:	01400044 	movi	r5,1
10002938:	00026600 	call	10002660 <attack>
}
1000293c:	e037883a 	mov	sp,fp
10002940:	dfc00117 	ldw	ra,4(sp)
10002944:	df000017 	ldw	fp,0(sp)
10002948:	dec00204 	addi	sp,sp,8
1000294c:	f800283a 	ret

10002950 <encounter>:

void encounter() {
10002950:	defffe04 	addi	sp,sp,-8
10002954:	dfc00115 	stw	ra,4(sp)
10002958:	df000015 	stw	fp,0(sp)
1000295c:	d839883a 	mov	fp,sp
    if(isEncounter()) {
10002960:	00026400 	call	10002640 <isEncounter>
10002964:	10001c26 	beq	r2,zero,100029d8 <encounter+0x88>
        is_encounter = 1;
10002968:	00800044 	movi	r2,1
1000296c:	d0a6d60d 	sth	r2,-25768(gp)
        enemyID = rand() % 5;
10002970:	0003dd00 	call	10003dd0 <rand>
10002974:	1009883a 	mov	r4,r2
10002978:	01400144 	movi	r5,5
1000297c:	0003bf00 	call	10003bf0 <__modsi3>
10002980:	d0a6da0d 	sth	r2,-25752(gp)
        enemyHP = 10 + (rand() % 6);
10002984:	0003dd00 	call	10003dd0 <rand>
10002988:	1009883a 	mov	r4,r2
1000298c:	01400184 	movi	r5,6
10002990:	0003bf00 	call	10003bf0 <__modsi3>
10002994:	10800284 	addi	r2,r2,10
10002998:	d0a6db8d 	sth	r2,-25746(gp)
        enemyLVL = allyLVL + (rand() % 3) - 2;
1000299c:	0003dd00 	call	10003dd0 <rand>
100029a0:	1009883a 	mov	r4,r2
100029a4:	014000c4 	movi	r5,3
100029a8:	0003bf00 	call	10003bf0 <__modsi3>
100029ac:	1007883a 	mov	r3,r2
100029b0:	d0a0020b 	ldhu	r2,-32760(gp)
100029b4:	1885883a 	add	r2,r3,r2
100029b8:	10bfff84 	addi	r2,r2,-2
100029bc:	d0a6db0d 	sth	r2,-25748(gp)
        if(enemyLVL <= 0) {
100029c0:	d0a6db0b 	ldhu	r2,-25748(gp)
100029c4:	10bfffcc 	andi	r2,r2,65535
100029c8:	1000021e 	bne	r2,zero,100029d4 <encounter+0x84>
          enemyLVL = 1;
100029cc:	00800044 	movi	r2,1
100029d0:	d0a6db0d 	sth	r2,-25748(gp)
        }
        setEncounter();
100029d4:	00024e40 	call	100024e4 <setEncounter>
    }
}
100029d8:	e037883a 	mov	sp,fp
100029dc:	dfc00117 	ldw	ra,4(sp)
100029e0:	df000017 	ldw	fp,0(sp)
100029e4:	dec00204 	addi	sp,sp,8
100029e8:	f800283a 	ret

100029ec <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100029ec:	defffc04 	addi	sp,sp,-16
100029f0:	dfc00315 	stw	ra,12(sp)
100029f4:	df000215 	stw	fp,8(sp)
100029f8:	df000204 	addi	fp,sp,8
100029fc:	2007883a 	mov	r3,r4
10002a00:	2805883a 	mov	r2,r5
10002a04:	e0fffe0d 	sth	r3,-8(fp)
10002a08:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10002a0c:	e0bffe0b 	ldhu	r2,-8(fp)
10002a10:	01000084 	movi	r4,2
10002a14:	100b883a 	mov	r5,r2
10002a18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA, Data);
10002a1c:	e0bfff0b 	ldhu	r2,-4(fp)
10002a20:	0009883a 	mov	r4,zero
10002a24:	100b883a 	mov	r5,r2
10002a28:	00002480 	call	10000248 <IO_write>
}
10002a2c:	e037883a 	mov	sp,fp
10002a30:	dfc00117 	ldw	ra,4(sp)
10002a34:	df000017 	ldw	fp,0(sp)
10002a38:	dec00204 	addi	sp,sp,8
10002a3c:	f800283a 	ret

10002a40 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10002a40:	defffd04 	addi	sp,sp,-12
10002a44:	dfc00215 	stw	ra,8(sp)
10002a48:	df000115 	stw	fp,4(sp)
10002a4c:	df000104 	addi	fp,sp,4
10002a50:	2005883a 	mov	r2,r4
10002a54:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10002a58:	e0bfff0b 	ldhu	r2,-4(fp)
10002a5c:	01000084 	movi	r4,2
10002a60:	100b883a 	mov	r5,r2
10002a64:	00002480 	call	10000248 <IO_write>
	return IO_read(HPI_DATA);
10002a68:	0009883a 	mov	r4,zero
10002a6c:	00002b40 	call	100002b4 <IO_read>
}
10002a70:	e037883a 	mov	sp,fp
10002a74:	dfc00117 	ldw	ra,4(sp)
10002a78:	df000017 	ldw	fp,0(sp)
10002a7c:	dec00204 	addi	sp,sp,8
10002a80:	f800283a 	ret

10002a84 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10002a84:	defffe04 	addi	sp,sp,-8
10002a88:	dfc00115 	stw	ra,4(sp)
10002a8c:	df000015 	stw	fp,0(sp)
10002a90:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10002a94:	01000044 	movi	r4,1
10002a98:	017e9414 	movui	r5,64080
10002a9c:	00002480 	call	10000248 <IO_write>
	usleep(100000);
10002aa0:	010000b4 	movhi	r4,2
10002aa4:	2121a804 	addi	r4,r4,-31072
10002aa8:	0010ec00 	call	10010ec0 <usleep>
	printf("[USB INIT]:reset finished!\n");
10002aac:	01040074 	movhi	r4,4097
10002ab0:	2114a404 	addi	r4,r4,21136
10002ab4:	0003da40 	call	10003da4 <puts>

	usleep(500000);
10002ab8:	01000234 	movhi	r4,8
10002abc:	21284804 	addi	r4,r4,-24288
10002ac0:	0010ec00 	call	10010ec0 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10002ac4:	01040074 	movhi	r4,4097
10002ac8:	2114ab04 	addi	r4,r4,21164
10002acc:	0003da40 	call	10003da4 <puts>
	IO_read(HPI_MAILBOX);
10002ad0:	01000044 	movi	r4,1
10002ad4:	00002b40 	call	100002b4 <IO_read>
	IO_read(HPI_STATUS);
10002ad8:	010000c4 	movi	r4,3
10002adc:	00002b40 	call	100002b4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
10002ae0:	01005104 	movi	r4,324
10002ae4:	0002a400 	call	10002a40 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10002ae8:	01005104 	movi	r4,324
10002aec:	000b883a 	mov	r5,zero
10002af0:	00029ec0 	call	100029ec <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10002af4:	01005204 	movi	r4,328
10002af8:	0002a400 	call	10002a40 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10002afc:	01005204 	movi	r4,328
10002b00:	000b883a 	mov	r5,zero
10002b04:	00029ec0 	call	100029ec <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10002b08:	01302414 	movui	r4,49296
10002b0c:	017fffd4 	movui	r5,65535
10002b10:	00029ec0 	call	100029ec <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10002b14:	01302c14 	movui	r4,49328
10002b18:	017fffd4 	movui	r5,65535
10002b1c:	00029ec0 	call	100029ec <UsbWrite>
}
10002b20:	e037883a 	mov	sp,fp
10002b24:	dfc00117 	ldw	ra,4(sp)
10002b28:	df000017 	ldw	fp,0(sp)
10002b2c:	dec00204 	addi	sp,sp,8
10002b30:	f800283a 	ret

10002b34 <UsbSetAddress>:


void UsbSetAddress()
{
10002b34:	defffe04 	addi	sp,sp,-8
10002b38:	dfc00115 	stw	ra,4(sp)
10002b3c:	df000015 	stw	fp,0(sp)
10002b40:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002b44:	01000084 	movi	r4,2
10002b48:	01414004 	movi	r5,1280
10002b4c:	00002480 	call	10000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10002b50:	0009883a 	mov	r4,zero
10002b54:	01414304 	movi	r5,1292
10002b58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002b5c:	0009883a 	mov	r4,zero
10002b60:	01400204 	movi	r5,8
10002b64:	00002480 	call	10000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10002b68:	0009883a 	mov	r4,zero
10002b6c:	01403404 	movi	r5,208
10002b70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002b74:	0009883a 	mov	r4,zero
10002b78:	01400044 	movi	r5,1
10002b7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002b80:	0009883a 	mov	r4,zero
10002b84:	014004c4 	movi	r5,19
10002b88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002b8c:	0009883a 	mov	r4,zero
10002b90:	01414504 	movi	r5,1300
10002b94:	00002480 	call	10000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10002b98:	0009883a 	mov	r4,zero
10002b9c:	01414004 	movi	r5,1280
10002ba0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
10002ba4:	0009883a 	mov	r4,zero
10002ba8:	01400084 	movi	r5,2
10002bac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002bb0:	0009883a 	mov	r4,zero
10002bb4:	000b883a 	mov	r5,zero
10002bb8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002bbc:	0009883a 	mov	r4,zero
10002bc0:	000b883a 	mov	r5,zero
10002bc4:	00002480 	call	10000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10002bc8:	0009883a 	mov	r4,zero
10002bcc:	000b883a 	mov	r5,zero
10002bd0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10002bd4:	0009883a 	mov	r4,zero
10002bd8:	000b883a 	mov	r5,zero
10002bdc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10002be0:	0009883a 	mov	r4,zero
10002be4:	01402404 	movi	r5,144
10002be8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002bec:	0009883a 	mov	r4,zero
10002bf0:	01401044 	movi	r5,65
10002bf4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002bf8:	0009883a 	mov	r4,zero
10002bfc:	014004c4 	movi	r5,19
10002c00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002c04:	0009883a 	mov	r4,zero
10002c08:	000b883a 	mov	r5,zero
10002c0c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002c10:	01006c04 	movi	r4,432
10002c14:	01414004 	movi	r5,1280
10002c18:	00029ec0 	call	100029ec <UsbWrite>
}
10002c1c:	e037883a 	mov	sp,fp
10002c20:	dfc00117 	ldw	ra,4(sp)
10002c24:	df000017 	ldw	fp,0(sp)
10002c28:	dec00204 	addi	sp,sp,8
10002c2c:	f800283a 	ret

10002c30 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10002c30:	defffe04 	addi	sp,sp,-8
10002c34:	dfc00115 	stw	ra,4(sp)
10002c38:	df000015 	stw	fp,0(sp)
10002c3c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002c40:	01000084 	movi	r4,2
10002c44:	01414004 	movi	r5,1280
10002c48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002c4c:	0009883a 	mov	r4,zero
10002c50:	01414304 	movi	r5,1292
10002c54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002c58:	0009883a 	mov	r4,zero
10002c5c:	01400204 	movi	r5,8
10002c60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002c64:	0009883a 	mov	r4,zero
10002c68:	0140b404 	movi	r5,720
10002c6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002c70:	0009883a 	mov	r4,zero
10002c74:	01400044 	movi	r5,1
10002c78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002c7c:	0009883a 	mov	r4,zero
10002c80:	014004c4 	movi	r5,19
10002c84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002c88:	0009883a 	mov	r4,zero
10002c8c:	01414504 	movi	r5,1300
10002c90:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002c94:	0009883a 	mov	r4,zero
10002c98:	0141a004 	movi	r5,1664
10002c9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10002ca0:	0009883a 	mov	r4,zero
10002ca4:	01404004 	movi	r5,256
10002ca8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002cac:	0009883a 	mov	r4,zero
10002cb0:	000b883a 	mov	r5,zero
10002cb4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10002cb8:	0009883a 	mov	r4,zero
10002cbc:	01400204 	movi	r5,8
10002cc0:	00002480 	call	10000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10002cc4:	0009883a 	mov	r4,zero
10002cc8:	01414b04 	movi	r5,1324
10002ccc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10002cd0:	0009883a 	mov	r4,zero
10002cd4:	01400204 	movi	r5,8
10002cd8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10002cdc:	0009883a 	mov	r4,zero
10002ce0:	0140a404 	movi	r5,656
10002ce4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002ce8:	0009883a 	mov	r4,zero
10002cec:	01401044 	movi	r5,65
10002cf0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002cf4:	0009883a 	mov	r4,zero
10002cf8:	014004c4 	movi	r5,19
10002cfc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
10002d00:	0009883a 	mov	r4,zero
10002d04:	01414804 	movi	r5,1312
10002d08:	00002480 	call	10000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10002d0c:	0009883a 	mov	r4,zero
10002d10:	000b883a 	mov	r5,zero
10002d14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10002d18:	0009883a 	mov	r4,zero
10002d1c:	000b883a 	mov	r5,zero
10002d20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
10002d24:	0009883a 	mov	r4,zero
10002d28:	01408404 	movi	r5,528
10002d2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10002d30:	0009883a 	mov	r4,zero
10002d34:	01401044 	movi	r5,65
10002d38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002d3c:	0009883a 	mov	r4,zero
10002d40:	014004c4 	movi	r5,19
10002d44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10002d48:	0009883a 	mov	r4,zero
10002d4c:	000b883a 	mov	r5,zero
10002d50:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002d54:	01006c04 	movi	r4,432
10002d58:	01414004 	movi	r5,1280
10002d5c:	00029ec0 	call	100029ec <UsbWrite>
}
10002d60:	e037883a 	mov	sp,fp
10002d64:	dfc00117 	ldw	ra,4(sp)
10002d68:	df000017 	ldw	fp,0(sp)
10002d6c:	dec00204 	addi	sp,sp,8
10002d70:	f800283a 	ret

10002d74 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
10002d74:	defffe04 	addi	sp,sp,-8
10002d78:	dfc00115 	stw	ra,4(sp)
10002d7c:	df000015 	stw	fp,0(sp)
10002d80:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002d84:	01000084 	movi	r4,2
10002d88:	01414004 	movi	r5,1280
10002d8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002d90:	0009883a 	mov	r4,zero
10002d94:	01414304 	movi	r5,1292
10002d98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002d9c:	0009883a 	mov	r4,zero
10002da0:	01400204 	movi	r5,8
10002da4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002da8:	0009883a 	mov	r4,zero
10002dac:	0140b404 	movi	r5,720
10002db0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002db4:	0009883a 	mov	r4,zero
10002db8:	01400044 	movi	r5,1
10002dbc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002dc0:	0009883a 	mov	r4,zero
10002dc4:	014004c4 	movi	r5,19
10002dc8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002dcc:	0009883a 	mov	r4,zero
10002dd0:	01414504 	movi	r5,1300
10002dd4:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002dd8:	0009883a 	mov	r4,zero
10002ddc:	0141a004 	movi	r5,1664
10002de0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10002de4:	0009883a 	mov	r4,zero
10002de8:	01404004 	movi	r5,256
10002dec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002df0:	0009883a 	mov	r4,zero
10002df4:	000b883a 	mov	r5,zero
10002df8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10002dfc:	0009883a 	mov	r4,zero
10002e00:	01400484 	movi	r5,18
10002e04:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002e08:	0009883a 	mov	r4,zero
10002e0c:	01415104 	movi	r5,1348
10002e10:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002e14:	0009883a 	mov	r4,zero
10002e18:	01400204 	movi	r5,8
10002e1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002e20:	0009883a 	mov	r4,zero
10002e24:	0140a404 	movi	r5,656
10002e28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10002e2c:	0009883a 	mov	r4,zero
10002e30:	01401044 	movi	r5,65
10002e34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002e38:	0009883a 	mov	r4,zero
10002e3c:	014004c4 	movi	r5,19
10002e40:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10002e44:	0009883a 	mov	r4,zero
10002e48:	01414804 	movi	r5,1312
10002e4c:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10002e50:	0009883a 	mov	r4,zero
10002e54:	01415304 	movi	r5,1356
10002e58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10002e5c:	0009883a 	mov	r4,zero
10002e60:	01400204 	movi	r5,8
10002e64:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002e68:	0009883a 	mov	r4,zero
10002e6c:	0140a404 	movi	r5,656
10002e70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
10002e74:	0009883a 	mov	r4,zero
10002e78:	01400044 	movi	r5,1
10002e7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002e80:	0009883a 	mov	r4,zero
10002e84:	014004c4 	movi	r5,19
10002e88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10002e8c:	0009883a 	mov	r4,zero
10002e90:	01414b04 	movi	r5,1324
10002e94:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10002e98:	0009883a 	mov	r4,zero
10002e9c:	01415504 	movi	r5,1364
10002ea0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10002ea4:	0009883a 	mov	r4,zero
10002ea8:	01400084 	movi	r5,2
10002eac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10002eb0:	0009883a 	mov	r4,zero
10002eb4:	0140a404 	movi	r5,656
10002eb8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10002ebc:	0009883a 	mov	r4,zero
10002ec0:	01401044 	movi	r5,65
10002ec4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10002ec8:	0009883a 	mov	r4,zero
10002ecc:	014004c4 	movi	r5,19
10002ed0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10002ed4:	0009883a 	mov	r4,zero
10002ed8:	01414e04 	movi	r5,1336
10002edc:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10002ee0:	0009883a 	mov	r4,zero
10002ee4:	000b883a 	mov	r5,zero
10002ee8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10002eec:	0009883a 	mov	r4,zero
10002ef0:	000b883a 	mov	r5,zero
10002ef4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10002ef8:	0009883a 	mov	r4,zero
10002efc:	01408404 	movi	r5,528
10002f00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10002f04:	0009883a 	mov	r4,zero
10002f08:	01401044 	movi	r5,65
10002f0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10002f10:	0009883a 	mov	r4,zero
10002f14:	014004c4 	movi	r5,19
10002f18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10002f1c:	0009883a 	mov	r4,zero
10002f20:	000b883a 	mov	r5,zero
10002f24:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002f28:	01006c04 	movi	r4,432
10002f2c:	01414004 	movi	r5,1280
10002f30:	00029ec0 	call	100029ec <UsbWrite>
}
10002f34:	e037883a 	mov	sp,fp
10002f38:	dfc00117 	ldw	ra,4(sp)
10002f3c:	df000017 	ldw	fp,0(sp)
10002f40:	dec00204 	addi	sp,sp,8
10002f44:	f800283a 	ret

10002f48 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10002f48:	defffe04 	addi	sp,sp,-8
10002f4c:	dfc00115 	stw	ra,4(sp)
10002f50:	df000015 	stw	fp,0(sp)
10002f54:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10002f58:	01000084 	movi	r4,2
10002f5c:	01414004 	movi	r5,1280
10002f60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10002f64:	0009883a 	mov	r4,zero
10002f68:	01414304 	movi	r5,1292
10002f6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10002f70:	0009883a 	mov	r4,zero
10002f74:	01400204 	movi	r5,8
10002f78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10002f7c:	0009883a 	mov	r4,zero
10002f80:	0140b404 	movi	r5,720
10002f84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10002f88:	0009883a 	mov	r4,zero
10002f8c:	01400044 	movi	r5,1
10002f90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10002f94:	0009883a 	mov	r4,zero
10002f98:	014004c4 	movi	r5,19
10002f9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10002fa0:	0009883a 	mov	r4,zero
10002fa4:	01414504 	movi	r5,1300
10002fa8:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10002fac:	0009883a 	mov	r4,zero
10002fb0:	0141a004 	movi	r5,1664
10002fb4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10002fb8:	0009883a 	mov	r4,zero
10002fbc:	01408004 	movi	r5,512
10002fc0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10002fc4:	0009883a 	mov	r4,zero
10002fc8:	000b883a 	mov	r5,zero
10002fcc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
10002fd0:	0009883a 	mov	r4,zero
10002fd4:	01400244 	movi	r5,9
10002fd8:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10002fdc:	0009883a 	mov	r4,zero
10002fe0:	01415104 	movi	r5,1348
10002fe4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002fe8:	0009883a 	mov	r4,zero
10002fec:	01400204 	movi	r5,8
10002ff0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002ff4:	0009883a 	mov	r4,zero
10002ff8:	0140a404 	movi	r5,656
10002ffc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10003000:	0009883a 	mov	r4,zero
10003004:	01401044 	movi	r5,65
10003008:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
1000300c:	0009883a 	mov	r4,zero
10003010:	014004c4 	movi	r5,19
10003014:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003018:	0009883a 	mov	r4,zero
1000301c:	01414804 	movi	r5,1312
10003020:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10003024:	0009883a 	mov	r4,zero
10003028:	01415304 	movi	r5,1356
1000302c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
10003030:	0009883a 	mov	r4,zero
10003034:	01400044 	movi	r5,1
10003038:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
1000303c:	0009883a 	mov	r4,zero
10003040:	0140a404 	movi	r5,656
10003044:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003048:	0009883a 	mov	r4,zero
1000304c:	01400044 	movi	r5,1
10003050:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003054:	0009883a 	mov	r4,zero
10003058:	014004c4 	movi	r5,19
1000305c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10003060:	0009883a 	mov	r4,zero
10003064:	01414b04 	movi	r5,1324
10003068:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
1000306c:	0009883a 	mov	r4,zero
10003070:	000b883a 	mov	r5,zero
10003074:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003078:	0009883a 	mov	r4,zero
1000307c:	000b883a 	mov	r5,zero
10003080:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10003084:	0009883a 	mov	r4,zero
10003088:	01408404 	movi	r5,528
1000308c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003090:	0009883a 	mov	r4,zero
10003094:	01401044 	movi	r5,65
10003098:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000309c:	0009883a 	mov	r4,zero
100030a0:	014004c4 	movi	r5,19
100030a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
100030a8:	0009883a 	mov	r4,zero
100030ac:	000b883a 	mov	r5,zero
100030b0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100030b4:	01006c04 	movi	r4,432
100030b8:	01414004 	movi	r5,1280
100030bc:	00029ec0 	call	100029ec <UsbWrite>
}
100030c0:	e037883a 	mov	sp,fp
100030c4:	dfc00117 	ldw	ra,4(sp)
100030c8:	df000017 	ldw	fp,0(sp)
100030cc:	dec00204 	addi	sp,sp,8
100030d0:	f800283a 	ret

100030d4 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100030d4:	defffe04 	addi	sp,sp,-8
100030d8:	dfc00115 	stw	ra,4(sp)
100030dc:	df000015 	stw	fp,0(sp)
100030e0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100030e4:	01000084 	movi	r4,2
100030e8:	01414004 	movi	r5,1280
100030ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100030f0:	0009883a 	mov	r4,zero
100030f4:	01414304 	movi	r5,1292
100030f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100030fc:	0009883a 	mov	r4,zero
10003100:	01400204 	movi	r5,8
10003104:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10003108:	0009883a 	mov	r4,zero
1000310c:	0140b404 	movi	r5,720
10003110:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003114:	0009883a 	mov	r4,zero
10003118:	01400044 	movi	r5,1
1000311c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003120:	0009883a 	mov	r4,zero
10003124:	014004c4 	movi	r5,19
10003128:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000312c:	0009883a 	mov	r4,zero
10003130:	01414504 	movi	r5,1300
10003134:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10003138:	0009883a 	mov	r4,zero
1000313c:	0141a004 	movi	r5,1664
10003140:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10003144:	0009883a 	mov	r4,zero
10003148:	01408004 	movi	r5,512
1000314c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10003150:	0009883a 	mov	r4,zero
10003154:	000b883a 	mov	r5,zero
10003158:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
1000315c:	0009883a 	mov	r4,zero
10003160:	01403fc4 	movi	r5,255
10003164:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10003168:	0009883a 	mov	r4,zero
1000316c:	01415704 	movi	r5,1372
10003170:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003174:	0009883a 	mov	r4,zero
10003178:	01400204 	movi	r5,8
1000317c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003180:	0009883a 	mov	r4,zero
10003184:	0140a404 	movi	r5,656
10003188:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000318c:	0009883a 	mov	r4,zero
10003190:	01401044 	movi	r5,65
10003194:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003198:	0009883a 	mov	r4,zero
1000319c:	014004c4 	movi	r5,19
100031a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100031a4:	0009883a 	mov	r4,zero
100031a8:	01414804 	movi	r5,1312
100031ac:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
100031b0:	0009883a 	mov	r4,zero
100031b4:	01415904 	movi	r5,1380
100031b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100031bc:	0009883a 	mov	r4,zero
100031c0:	01400204 	movi	r5,8
100031c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100031c8:	0009883a 	mov	r4,zero
100031cc:	0140a404 	movi	r5,656
100031d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100031d4:	0009883a 	mov	r4,zero
100031d8:	01400044 	movi	r5,1
100031dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100031e0:	0009883a 	mov	r4,zero
100031e4:	014004c4 	movi	r5,19
100031e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100031ec:	0009883a 	mov	r4,zero
100031f0:	01414b04 	movi	r5,1324
100031f4:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100031f8:	0009883a 	mov	r4,zero
100031fc:	01415b04 	movi	r5,1388
10003200:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10003204:	0009883a 	mov	r4,zero
10003208:	01400204 	movi	r5,8
1000320c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10003210:	0009883a 	mov	r4,zero
10003214:	0140a404 	movi	r5,656
10003218:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000321c:	0009883a 	mov	r4,zero
10003220:	01401044 	movi	r5,65
10003224:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10003228:	0009883a 	mov	r4,zero
1000322c:	014004c4 	movi	r5,19
10003230:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10003234:	0009883a 	mov	r4,zero
10003238:	01414e04 	movi	r5,1336
1000323c:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10003240:	0009883a 	mov	r4,zero
10003244:	01415d04 	movi	r5,1396
10003248:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
1000324c:	0009883a 	mov	r4,zero
10003250:	01400204 	movi	r5,8
10003254:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003258:	0009883a 	mov	r4,zero
1000325c:	0140a404 	movi	r5,656
10003260:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003264:	0009883a 	mov	r4,zero
10003268:	01400044 	movi	r5,1
1000326c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10003270:	0009883a 	mov	r4,zero
10003274:	014004c4 	movi	r5,19
10003278:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000327c:	0009883a 	mov	r4,zero
10003280:	01415104 	movi	r5,1348
10003284:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10003288:	0009883a 	mov	r4,zero
1000328c:	01415f04 	movi	r5,1404
10003290:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10003294:	0009883a 	mov	r4,zero
10003298:	01400084 	movi	r5,2
1000329c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100032a0:	0009883a 	mov	r4,zero
100032a4:	0140a404 	movi	r5,656
100032a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
100032ac:	0009883a 	mov	r4,zero
100032b0:	01401044 	movi	r5,65
100032b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100032b8:	0009883a 	mov	r4,zero
100032bc:	014004c4 	movi	r5,19
100032c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
100032c4:	0009883a 	mov	r4,zero
100032c8:	01415404 	movi	r5,1360
100032cc:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
100032d0:	0009883a 	mov	r4,zero
100032d4:	000b883a 	mov	r5,zero
100032d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100032dc:	0009883a 	mov	r4,zero
100032e0:	000b883a 	mov	r5,zero
100032e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
100032e8:	0009883a 	mov	r4,zero
100032ec:	01408404 	movi	r5,528
100032f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
100032f4:	0009883a 	mov	r4,zero
100032f8:	01401044 	movi	r5,65
100032fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003300:	0009883a 	mov	r4,zero
10003304:	014004c4 	movi	r5,19
10003308:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
1000330c:	0009883a 	mov	r4,zero
10003310:	000b883a 	mov	r5,zero
10003314:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003318:	01006c04 	movi	r4,432
1000331c:	01414004 	movi	r5,1280
10003320:	00029ec0 	call	100029ec <UsbWrite>
}
10003324:	e037883a 	mov	sp,fp
10003328:	dfc00117 	ldw	ra,4(sp)
1000332c:	df000017 	ldw	fp,0(sp)
10003330:	dec00204 	addi	sp,sp,8
10003334:	f800283a 	ret

10003338 <UsbSetConfig>:

void UsbSetConfig()
{
10003338:	defffe04 	addi	sp,sp,-8
1000333c:	dfc00115 	stw	ra,4(sp)
10003340:	df000015 	stw	fp,0(sp)
10003344:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003348:	01000084 	movi	r4,2
1000334c:	01414004 	movi	r5,1280
10003350:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003354:	0009883a 	mov	r4,zero
10003358:	01414304 	movi	r5,1292
1000335c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003360:	0009883a 	mov	r4,zero
10003364:	01400204 	movi	r5,8
10003368:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
1000336c:	0009883a 	mov	r4,zero
10003370:	0140b404 	movi	r5,720
10003374:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003378:	0009883a 	mov	r4,zero
1000337c:	01400044 	movi	r5,1
10003380:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003384:	0009883a 	mov	r4,zero
10003388:	014004c4 	movi	r5,19
1000338c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003390:	0009883a 	mov	r4,zero
10003394:	01414504 	movi	r5,1300
10003398:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
1000339c:	0009883a 	mov	r4,zero
100033a0:	01424004 	movi	r5,2304
100033a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
100033a8:	0009883a 	mov	r4,zero
100033ac:	01400044 	movi	r5,1
100033b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100033b4:	0009883a 	mov	r4,zero
100033b8:	000b883a 	mov	r5,zero
100033bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100033c0:	0009883a 	mov	r4,zero
100033c4:	000b883a 	mov	r5,zero
100033c8:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100033cc:	0009883a 	mov	r4,zero
100033d0:	000b883a 	mov	r5,zero
100033d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100033d8:	0009883a 	mov	r4,zero
100033dc:	000b883a 	mov	r5,zero
100033e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
100033e4:	0009883a 	mov	r4,zero
100033e8:	0140a404 	movi	r5,656
100033ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
100033f0:	0009883a 	mov	r4,zero
100033f4:	01401044 	movi	r5,65
100033f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100033fc:	0009883a 	mov	r4,zero
10003400:	014004c4 	movi	r5,19
10003404:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003408:	0009883a 	mov	r4,zero
1000340c:	000b883a 	mov	r5,zero
10003410:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003414:	01006c04 	movi	r4,432
10003418:	01414004 	movi	r5,1280
1000341c:	00029ec0 	call	100029ec <UsbWrite>

}
10003420:	e037883a 	mov	sp,fp
10003424:	dfc00117 	ldw	ra,4(sp)
10003428:	df000017 	ldw	fp,0(sp)
1000342c:	dec00204 	addi	sp,sp,8
10003430:	f800283a 	ret

10003434 <UsbClassRequest>:

void UsbClassRequest()
{
10003434:	defffe04 	addi	sp,sp,-8
10003438:	dfc00115 	stw	ra,4(sp)
1000343c:	df000015 	stw	fp,0(sp)
10003440:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003444:	01000084 	movi	r4,2
10003448:	01414004 	movi	r5,1280
1000344c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003450:	0009883a 	mov	r4,zero
10003454:	01414304 	movi	r5,1292
10003458:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000345c:	0009883a 	mov	r4,zero
10003460:	01400204 	movi	r5,8
10003464:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003468:	0009883a 	mov	r4,zero
1000346c:	0140b404 	movi	r5,720
10003470:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003474:	0009883a 	mov	r4,zero
10003478:	01400044 	movi	r5,1
1000347c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10003480:	0009883a 	mov	r4,zero
10003484:	014004c4 	movi	r5,19
10003488:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000348c:	0009883a 	mov	r4,zero
10003490:	01414504 	movi	r5,1300
10003494:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10003498:	0009883a 	mov	r4,zero
1000349c:	01428844 	movi	r5,2593
100034a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
100034a4:	0009883a 	mov	r4,zero
100034a8:	000b883a 	mov	r5,zero
100034ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100034b0:	0009883a 	mov	r4,zero
100034b4:	000b883a 	mov	r5,zero
100034b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100034bc:	0009883a 	mov	r4,zero
100034c0:	000b883a 	mov	r5,zero
100034c4:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
100034c8:	0009883a 	mov	r4,zero
100034cc:	000b883a 	mov	r5,zero
100034d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
100034d4:	0009883a 	mov	r4,zero
100034d8:	000b883a 	mov	r5,zero
100034dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
100034e0:	0009883a 	mov	r4,zero
100034e4:	0140a404 	movi	r5,656
100034e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
100034ec:	0009883a 	mov	r4,zero
100034f0:	01401044 	movi	r5,65
100034f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100034f8:	0009883a 	mov	r4,zero
100034fc:	014004c4 	movi	r5,19
10003500:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10003504:	0009883a 	mov	r4,zero
10003508:	000b883a 	mov	r5,zero
1000350c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003510:	01006c04 	movi	r4,432
10003514:	01414004 	movi	r5,1280
10003518:	00029ec0 	call	100029ec <UsbWrite>
}
1000351c:	e037883a 	mov	sp,fp
10003520:	dfc00117 	ldw	ra,4(sp)
10003524:	df000017 	ldw	fp,0(sp)
10003528:	dec00204 	addi	sp,sp,8
1000352c:	f800283a 	ret

10003530 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10003530:	defffe04 	addi	sp,sp,-8
10003534:	dfc00115 	stw	ra,4(sp)
10003538:	df000015 	stw	fp,0(sp)
1000353c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003540:	01000084 	movi	r4,2
10003544:	01414004 	movi	r5,1280
10003548:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000354c:	0009883a 	mov	r4,zero
10003550:	01414304 	movi	r5,1292
10003554:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10003558:	0009883a 	mov	r4,zero
1000355c:	01400204 	movi	r5,8
10003560:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10003564:	0009883a 	mov	r4,zero
10003568:	0140b404 	movi	r5,720
1000356c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10003570:	0009883a 	mov	r4,zero
10003574:	01400044 	movi	r5,1
10003578:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000357c:	0009883a 	mov	r4,zero
10003580:	014004c4 	movi	r5,19
10003584:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10003588:	0009883a 	mov	r4,zero
1000358c:	01414504 	movi	r5,1300
10003590:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10003594:	0009883a 	mov	r4,zero
10003598:	0141a044 	movi	r5,1665
1000359c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
100035a0:	0009883a 	mov	r4,zero
100035a4:	01484004 	movi	r5,8448
100035a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100035ac:	0009883a 	mov	r4,zero
100035b0:	000b883a 	mov	r5,zero
100035b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100035b8:	0009883a 	mov	r4,zero
100035bc:	01401ec4 	movi	r5,123
100035c0:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100035c4:	0009883a 	mov	r4,zero
100035c8:	01415104 	movi	r5,1348
100035cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100035d0:	0009883a 	mov	r4,zero
100035d4:	01400204 	movi	r5,8
100035d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100035dc:	0009883a 	mov	r4,zero
100035e0:	0140a404 	movi	r5,656
100035e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100035e8:	0009883a 	mov	r4,zero
100035ec:	01401044 	movi	r5,65
100035f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100035f4:	0009883a 	mov	r4,zero
100035f8:	014004c4 	movi	r5,19
100035fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003600:	0009883a 	mov	r4,zero
10003604:	01414804 	movi	r5,1312
10003608:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
1000360c:	0009883a 	mov	r4,zero
10003610:	000b883a 	mov	r5,zero
10003614:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003618:	0009883a 	mov	r4,zero
1000361c:	000b883a 	mov	r5,zero
10003620:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10003624:	0009883a 	mov	r4,zero
10003628:	01408404 	movi	r5,528
1000362c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10003630:	0009883a 	mov	r4,zero
10003634:	01401044 	movi	r5,65
10003638:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
1000363c:	0009883a 	mov	r4,zero
10003640:	014004c4 	movi	r5,19
10003644:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003648:	0009883a 	mov	r4,zero
1000364c:	000b883a 	mov	r5,zero
10003650:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003654:	01006c04 	movi	r4,432
10003658:	01414004 	movi	r5,1280
1000365c:	00029ec0 	call	100029ec <UsbWrite>

}
10003660:	e037883a 	mov	sp,fp
10003664:	dfc00117 	ldw	ra,4(sp)
10003668:	df000017 	ldw	fp,0(sp)
1000366c:	dec00204 	addi	sp,sp,8
10003670:	f800283a 	ret

10003674 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10003674:	defffe04 	addi	sp,sp,-8
10003678:	dfc00115 	stw	ra,4(sp)
1000367c:	df000015 	stw	fp,0(sp)
10003680:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10003684:	01000084 	movi	r4,2
10003688:	01414004 	movi	r5,1280
1000368c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10003690:	0009883a 	mov	r4,zero
10003694:	01414304 	movi	r5,1292
10003698:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000369c:	0009883a 	mov	r4,zero
100036a0:	01400204 	movi	r5,8
100036a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100036a8:	0009883a 	mov	r4,zero
100036ac:	0140b404 	movi	r5,720
100036b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100036b4:	0009883a 	mov	r4,zero
100036b8:	01400044 	movi	r5,1
100036bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100036c0:	0009883a 	mov	r4,zero
100036c4:	014004c4 	movi	r5,19
100036c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100036cc:	0009883a 	mov	r4,zero
100036d0:	01414504 	movi	r5,1300
100036d4:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
100036d8:	0009883a 	mov	r4,zero
100036dc:	0141a044 	movi	r5,1665
100036e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
100036e4:	0009883a 	mov	r4,zero
100036e8:	01488004 	movi	r5,8704
100036ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100036f0:	0009883a 	mov	r4,zero
100036f4:	000b883a 	mov	r5,zero
100036f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
100036fc:	0009883a 	mov	r4,zero
10003700:	01401ec4 	movi	r5,123
10003704:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10003708:	0009883a 	mov	r4,zero
1000370c:	01416004 	movi	r5,1408
10003710:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003714:	0009883a 	mov	r4,zero
10003718:	01400204 	movi	r5,8
1000371c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003720:	0009883a 	mov	r4,zero
10003724:	0140a404 	movi	r5,656
10003728:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000372c:	0009883a 	mov	r4,zero
10003730:	01401044 	movi	r5,65
10003734:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003738:	0009883a 	mov	r4,zero
1000373c:	014004c4 	movi	r5,19
10003740:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10003744:	0009883a 	mov	r4,zero
10003748:	01414804 	movi	r5,1312
1000374c:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10003750:	0009883a 	mov	r4,zero
10003754:	01416204 	movi	r5,1416
10003758:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000375c:	0009883a 	mov	r4,zero
10003760:	01400204 	movi	r5,8
10003764:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003768:	0009883a 	mov	r4,zero
1000376c:	0140a404 	movi	r5,656
10003770:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003774:	0009883a 	mov	r4,zero
10003778:	01400044 	movi	r5,1
1000377c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10003780:	0009883a 	mov	r4,zero
10003784:	014004c4 	movi	r5,19
10003788:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000378c:	0009883a 	mov	r4,zero
10003790:	01414b04 	movi	r5,1324
10003794:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10003798:	0009883a 	mov	r4,zero
1000379c:	01416404 	movi	r5,1424
100037a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100037a4:	0009883a 	mov	r4,zero
100037a8:	01400204 	movi	r5,8
100037ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100037b0:	0009883a 	mov	r4,zero
100037b4:	0140a404 	movi	r5,656
100037b8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100037bc:	0009883a 	mov	r4,zero
100037c0:	01401044 	movi	r5,65
100037c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100037c8:	0009883a 	mov	r4,zero
100037cc:	014004c4 	movi	r5,19
100037d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100037d4:	0009883a 	mov	r4,zero
100037d8:	01414e04 	movi	r5,1336
100037dc:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
100037e0:	0009883a 	mov	r4,zero
100037e4:	01416604 	movi	r5,1432
100037e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100037ec:	0009883a 	mov	r4,zero
100037f0:	01400204 	movi	r5,8
100037f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100037f8:	0009883a 	mov	r4,zero
100037fc:	0140a404 	movi	r5,656
10003800:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003804:	0009883a 	mov	r4,zero
10003808:	01400044 	movi	r5,1
1000380c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10003810:	0009883a 	mov	r4,zero
10003814:	014004c4 	movi	r5,19
10003818:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
1000381c:	0009883a 	mov	r4,zero
10003820:	01415104 	movi	r5,1348
10003824:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10003828:	0009883a 	mov	r4,zero
1000382c:	01416804 	movi	r5,1440
10003830:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10003834:	0009883a 	mov	r4,zero
10003838:	01400204 	movi	r5,8
1000383c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10003840:	0009883a 	mov	r4,zero
10003844:	0140a404 	movi	r5,656
10003848:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000384c:	0009883a 	mov	r4,zero
10003850:	01401044 	movi	r5,65
10003854:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003858:	0009883a 	mov	r4,zero
1000385c:	014004c4 	movi	r5,19
10003860:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10003864:	0009883a 	mov	r4,zero
10003868:	01415404 	movi	r5,1360
1000386c:	00002480 	call	10000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10003870:	0009883a 	mov	r4,zero
10003874:	01416a04 	movi	r5,1448
10003878:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000387c:	0009883a 	mov	r4,zero
10003880:	01400204 	movi	r5,8
10003884:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10003888:	0009883a 	mov	r4,zero
1000388c:	0140a404 	movi	r5,656
10003890:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10003894:	0009883a 	mov	r4,zero
10003898:	01400044 	movi	r5,1
1000389c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100038a0:	0009883a 	mov	r4,zero
100038a4:	014004c4 	movi	r5,19
100038a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
100038ac:	0009883a 	mov	r4,zero
100038b0:	01415704 	movi	r5,1372
100038b4:	00002480 	call	10000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
100038b8:	0009883a 	mov	r4,zero
100038bc:	01416c04 	movi	r5,1456
100038c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100038c4:	0009883a 	mov	r4,zero
100038c8:	01400204 	movi	r5,8
100038cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
100038d0:	0009883a 	mov	r4,zero
100038d4:	0140a404 	movi	r5,656
100038d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100038dc:	0009883a 	mov	r4,zero
100038e0:	01401044 	movi	r5,65
100038e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100038e8:	0009883a 	mov	r4,zero
100038ec:	014004c4 	movi	r5,19
100038f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
100038f4:	0009883a 	mov	r4,zero
100038f8:	01415a04 	movi	r5,1384
100038fc:	00002480 	call	10000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10003900:	0009883a 	mov	r4,zero
10003904:	01416e04 	movi	r5,1464
10003908:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
1000390c:	0009883a 	mov	r4,zero
10003910:	014000c4 	movi	r5,3
10003914:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10003918:	0009883a 	mov	r4,zero
1000391c:	0140a404 	movi	r5,656
10003920:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10003924:	0009883a 	mov	r4,zero
10003928:	01400044 	movi	r5,1
1000392c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10003930:	0009883a 	mov	r4,zero
10003934:	014004c4 	movi	r5,19
10003938:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
1000393c:	0009883a 	mov	r4,zero
10003940:	01415d04 	movi	r5,1396
10003944:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10003948:	0009883a 	mov	r4,zero
1000394c:	000b883a 	mov	r5,zero
10003950:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10003954:	0009883a 	mov	r4,zero
10003958:	000b883a 	mov	r5,zero
1000395c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10003960:	0009883a 	mov	r4,zero
10003964:	01408404 	movi	r5,528
10003968:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000396c:	0009883a 	mov	r4,zero
10003970:	01401044 	movi	r5,65
10003974:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10003978:	0009883a 	mov	r4,zero
1000397c:	014004c4 	movi	r5,19
10003980:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10003984:	0009883a 	mov	r4,zero
10003988:	000b883a 	mov	r5,zero
1000398c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10003990:	01006c04 	movi	r4,432
10003994:	01414004 	movi	r5,1280
10003998:	00029ec0 	call	100029ec <UsbWrite>

}
1000399c:	e037883a 	mov	sp,fp
100039a0:	dfc00117 	ldw	ra,4(sp)
100039a4:	df000017 	ldw	fp,0(sp)
100039a8:	dec00204 	addi	sp,sp,8
100039ac:	f800283a 	ret

100039b0 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100039b0:	defffd04 	addi	sp,sp,-12
100039b4:	dfc00215 	stw	ra,8(sp)
100039b8:	df000115 	stw	fp,4(sp)
100039bc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100039c0:	01005104 	movi	r4,324
100039c4:	0002a400 	call	10002a40 <UsbRead>
100039c8:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100039cc:	01005104 	movi	r4,324
100039d0:	000b883a 	mov	r5,zero
100039d4:	00029ec0 	call	100029ec <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100039d8:	00000d06 	br	10003a10 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100039dc:	e0bfff0b 	ldhu	r2,-4(fp)
100039e0:	10000526 	beq	r2,zero,100039f8 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100039e4:	e0bfff0b 	ldhu	r2,-4(fp)
100039e8:	01040074 	movhi	r4,4097
100039ec:	2114b404 	addi	r4,r4,21200
100039f0:	100b883a 	mov	r5,r2
100039f4:	0003cb00 	call	10003cb0 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100039f8:	01005104 	movi	r4,324
100039fc:	0002a400 	call	10002a40 <UsbRead>
10003a00:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003a04:	01005104 	movi	r4,324
10003a08:	000b883a 	mov	r5,zero
10003a0c:	00029ec0 	call	100029ec <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10003a10:	e0bfff0b 	ldhu	r2,-4(fp)
10003a14:	10840018 	cmpnei	r2,r2,4096
10003a18:	103ff01e 	bne	r2,zero,100039dc <__alt_data_end+0xf80039dc>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10003a1c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003a20:	e037883a 	mov	sp,fp
10003a24:	dfc00117 	ldw	ra,4(sp)
10003a28:	df000017 	ldw	fp,0(sp)
10003a2c:	dec00204 	addi	sp,sp,8
10003a30:	f800283a 	ret

10003a34 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10003a34:	defffd04 	addi	sp,sp,-12
10003a38:	dfc00215 	stw	ra,8(sp)
10003a3c:	df000115 	stw	fp,4(sp)
10003a40:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10003a44:	010000c4 	movi	r4,3
10003a48:	00002b40 	call	100002b4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10003a4c:	01005104 	movi	r4,324
10003a50:	0002a400 	call	10002a40 <UsbRead>
10003a54:	10bfffcc 	andi	r2,r2,65535
10003a58:	10840018 	cmpnei	r2,r2,4096
10003a5c:	1000091e 	bne	r2,zero,10003a84 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10003a60:	01005104 	movi	r4,324
10003a64:	000b883a 	mov	r5,zero
10003a68:	00029ec0 	call	100029ec <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10003a6c:	0001883a 	nop
10003a70:	010000c4 	movi	r4,3
10003a74:	00002b40 	call	100002b4 <IO_read>
10003a78:	10bfffcc 	andi	r2,r2,65535
10003a7c:	1080040c 	andi	r2,r2,16
10003a80:	103ffb26 	beq	r2,zero,10003a70 <__alt_data_end+0xf8003a70>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10003a84:	01000084 	movi	r4,2
10003a88:	01414204 	movi	r5,1288
10003a8c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10003a90:	0009883a 	mov	r4,zero
10003a94:	00002b40 	call	100002b4 <IO_read>
10003a98:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10003a9c:	e0bfff0b 	ldhu	r2,-4(fp)
}
10003aa0:	e037883a 	mov	sp,fp
10003aa4:	dfc00117 	ldw	ra,4(sp)
10003aa8:	df000017 	ldw	fp,0(sp)
10003aac:	dec00204 	addi	sp,sp,8
10003ab0:	f800283a 	ret

10003ab4 <UsbPrintMem>:


void UsbPrintMem()
{
10003ab4:	defffc04 	addi	sp,sp,-16
10003ab8:	dfc00315 	stw	ra,12(sp)
10003abc:	df000215 	stw	fp,8(sp)
10003ac0:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10003ac4:	01000084 	movi	r4,2
10003ac8:	01414004 	movi	r5,1280
10003acc:	00002480 	call	10000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
10003ad0:	e03ffe15 	stw	zero,-8(fp)
10003ad4:	00000e06 	br	10003b10 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10003ad8:	0009883a 	mov	r4,zero
10003adc:	00002b40 	call	100002b4 <IO_read>
10003ae0:	10bfffcc 	andi	r2,r2,65535
10003ae4:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10003ae8:	e0bffe17 	ldw	r2,-8(fp)
10003aec:	10814004 	addi	r2,r2,1280
10003af0:	01040074 	movhi	r4,4097
10003af4:	2114bc04 	addi	r4,r4,21232
10003af8:	100b883a 	mov	r5,r2
10003afc:	e1bfff17 	ldw	r6,-4(fp)
10003b00:	0003cb00 	call	10003cb0 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10003b04:	e0bffe17 	ldw	r2,-8(fp)
10003b08:	10800084 	addi	r2,r2,2
10003b0c:	e0bffe15 	stw	r2,-8(fp)
10003b10:	e0bffe17 	ldw	r2,-8(fp)
10003b14:	10803250 	cmplti	r2,r2,201
10003b18:	103fef1e 	bne	r2,zero,10003ad8 <__alt_data_end+0xf8003ad8>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10003b1c:	e037883a 	mov	sp,fp
10003b20:	dfc00117 	ldw	ra,4(sp)
10003b24:	df000017 	ldw	fp,0(sp)
10003b28:	dec00204 	addi	sp,sp,8
10003b2c:	f800283a 	ret

10003b30 <udivmodsi4>:
10003b30:	2900182e 	bgeu	r5,r4,10003b94 <udivmodsi4+0x64>
10003b34:	28001716 	blt	r5,zero,10003b94 <udivmodsi4+0x64>
10003b38:	00800804 	movi	r2,32
10003b3c:	00c00044 	movi	r3,1
10003b40:	00000206 	br	10003b4c <udivmodsi4+0x1c>
10003b44:	10001126 	beq	r2,zero,10003b8c <udivmodsi4+0x5c>
10003b48:	28000516 	blt	r5,zero,10003b60 <udivmodsi4+0x30>
10003b4c:	294b883a 	add	r5,r5,r5
10003b50:	10bfffc4 	addi	r2,r2,-1
10003b54:	18c7883a 	add	r3,r3,r3
10003b58:	293ffa36 	bltu	r5,r4,10003b44 <__alt_data_end+0xf8003b44>
10003b5c:	18000b26 	beq	r3,zero,10003b8c <udivmodsi4+0x5c>
10003b60:	0005883a 	mov	r2,zero
10003b64:	21400236 	bltu	r4,r5,10003b70 <udivmodsi4+0x40>
10003b68:	2149c83a 	sub	r4,r4,r5
10003b6c:	10c4b03a 	or	r2,r2,r3
10003b70:	1806d07a 	srli	r3,r3,1
10003b74:	280ad07a 	srli	r5,r5,1
10003b78:	183ffa1e 	bne	r3,zero,10003b64 <__alt_data_end+0xf8003b64>
10003b7c:	3000011e 	bne	r6,zero,10003b84 <udivmodsi4+0x54>
10003b80:	f800283a 	ret
10003b84:	2005883a 	mov	r2,r4
10003b88:	f800283a 	ret
10003b8c:	0005883a 	mov	r2,zero
10003b90:	003ffa06 	br	10003b7c <__alt_data_end+0xf8003b7c>
10003b94:	00c00044 	movi	r3,1
10003b98:	003ff106 	br	10003b60 <__alt_data_end+0xf8003b60>

10003b9c <__divsi3>:
10003b9c:	defffe04 	addi	sp,sp,-8
10003ba0:	dfc00115 	stw	ra,4(sp)
10003ba4:	dc000015 	stw	r16,0(sp)
10003ba8:	20000b16 	blt	r4,zero,10003bd8 <__divsi3+0x3c>
10003bac:	0021883a 	mov	r16,zero
10003bb0:	28000c16 	blt	r5,zero,10003be4 <__divsi3+0x48>
10003bb4:	000d883a 	mov	r6,zero
10003bb8:	0003b300 	call	10003b30 <udivmodsi4>
10003bbc:	0407c83a 	sub	r3,zero,r16
10003bc0:	1884f03a 	xor	r2,r3,r2
10003bc4:	1405883a 	add	r2,r2,r16
10003bc8:	dfc00117 	ldw	ra,4(sp)
10003bcc:	dc000017 	ldw	r16,0(sp)
10003bd0:	dec00204 	addi	sp,sp,8
10003bd4:	f800283a 	ret
10003bd8:	0109c83a 	sub	r4,zero,r4
10003bdc:	04000044 	movi	r16,1
10003be0:	283ff40e 	bge	r5,zero,10003bb4 <__alt_data_end+0xf8003bb4>
10003be4:	014bc83a 	sub	r5,zero,r5
10003be8:	8400005c 	xori	r16,r16,1
10003bec:	003ff106 	br	10003bb4 <__alt_data_end+0xf8003bb4>

10003bf0 <__modsi3>:
10003bf0:	defffd04 	addi	sp,sp,-12
10003bf4:	dfc00215 	stw	ra,8(sp)
10003bf8:	dc400115 	stw	r17,4(sp)
10003bfc:	dc000015 	stw	r16,0(sp)
10003c00:	20000c16 	blt	r4,zero,10003c34 <__modsi3+0x44>
10003c04:	0023883a 	mov	r17,zero
10003c08:	0021883a 	mov	r16,zero
10003c0c:	28000d16 	blt	r5,zero,10003c44 <__modsi3+0x54>
10003c10:	01800044 	movi	r6,1
10003c14:	0003b300 	call	10003b30 <udivmodsi4>
10003c18:	1404f03a 	xor	r2,r2,r16
10003c1c:	8885883a 	add	r2,r17,r2
10003c20:	dfc00217 	ldw	ra,8(sp)
10003c24:	dc400117 	ldw	r17,4(sp)
10003c28:	dc000017 	ldw	r16,0(sp)
10003c2c:	dec00304 	addi	sp,sp,12
10003c30:	f800283a 	ret
10003c34:	0109c83a 	sub	r4,zero,r4
10003c38:	04400044 	movi	r17,1
10003c3c:	043fffc4 	movi	r16,-1
10003c40:	283ff30e 	bge	r5,zero,10003c10 <__alt_data_end+0xf8003c10>
10003c44:	014bc83a 	sub	r5,zero,r5
10003c48:	003ff106 	br	10003c10 <__alt_data_end+0xf8003c10>

10003c4c <__udivsi3>:
10003c4c:	000d883a 	mov	r6,zero
10003c50:	0003b301 	jmpi	10003b30 <udivmodsi4>

10003c54 <__umodsi3>:
10003c54:	01800044 	movi	r6,1
10003c58:	0003b301 	jmpi	10003b30 <udivmodsi4>

10003c5c <__mulsi3>:
10003c5c:	0005883a 	mov	r2,zero
10003c60:	20000726 	beq	r4,zero,10003c80 <__mulsi3+0x24>
10003c64:	20c0004c 	andi	r3,r4,1
10003c68:	2008d07a 	srli	r4,r4,1
10003c6c:	18000126 	beq	r3,zero,10003c74 <__mulsi3+0x18>
10003c70:	1145883a 	add	r2,r2,r5
10003c74:	294b883a 	add	r5,r5,r5
10003c78:	203ffa1e 	bne	r4,zero,10003c64 <__alt_data_end+0xf8003c64>
10003c7c:	f800283a 	ret
10003c80:	f800283a 	ret

10003c84 <_printf_r>:
10003c84:	defffd04 	addi	sp,sp,-12
10003c88:	dfc00015 	stw	ra,0(sp)
10003c8c:	d9800115 	stw	r6,4(sp)
10003c90:	d9c00215 	stw	r7,8(sp)
10003c94:	280d883a 	mov	r6,r5
10003c98:	21400217 	ldw	r5,8(r4)
10003c9c:	d9c00104 	addi	r7,sp,4
10003ca0:	0003ecc0 	call	10003ecc <___vfprintf_internal_r>
10003ca4:	dfc00017 	ldw	ra,0(sp)
10003ca8:	dec00304 	addi	sp,sp,12
10003cac:	f800283a 	ret

10003cb0 <printf>:
10003cb0:	defffc04 	addi	sp,sp,-16
10003cb4:	dfc00015 	stw	ra,0(sp)
10003cb8:	d9400115 	stw	r5,4(sp)
10003cbc:	d9800215 	stw	r6,8(sp)
10003cc0:	d9c00315 	stw	r7,12(sp)
10003cc4:	00840074 	movhi	r2,4097
10003cc8:	109c3104 	addi	r2,r2,28868
10003ccc:	10800017 	ldw	r2,0(r2)
10003cd0:	200b883a 	mov	r5,r4
10003cd4:	d9800104 	addi	r6,sp,4
10003cd8:	11000217 	ldw	r4,8(r2)
10003cdc:	0005fc80 	call	10005fc8 <__vfprintf_internal>
10003ce0:	dfc00017 	ldw	ra,0(sp)
10003ce4:	dec00404 	addi	sp,sp,16
10003ce8:	f800283a 	ret

10003cec <_puts_r>:
10003cec:	defff604 	addi	sp,sp,-40
10003cf0:	dc000715 	stw	r16,28(sp)
10003cf4:	2021883a 	mov	r16,r4
10003cf8:	2809883a 	mov	r4,r5
10003cfc:	dc400815 	stw	r17,32(sp)
10003d00:	dfc00915 	stw	ra,36(sp)
10003d04:	2823883a 	mov	r17,r5
10003d08:	0003e340 	call	10003e34 <strlen>
10003d0c:	00c40074 	movhi	r3,4097
10003d10:	18dc3104 	addi	r3,r3,28868
10003d14:	18c00017 	ldw	r3,0(r3)
10003d18:	11000044 	addi	r4,r2,1
10003d1c:	d8800115 	stw	r2,4(sp)
10003d20:	18c00217 	ldw	r3,8(r3)
10003d24:	01440074 	movhi	r5,4097
10003d28:	2954c104 	addi	r5,r5,21252
10003d2c:	1880030b 	ldhu	r2,12(r3)
10003d30:	d9400215 	stw	r5,8(sp)
10003d34:	d9000615 	stw	r4,24(sp)
10003d38:	01400044 	movi	r5,1
10003d3c:	01000084 	movi	r4,2
10003d40:	d9000515 	stw	r4,20(sp)
10003d44:	dc400015 	stw	r17,0(sp)
10003d48:	d9400315 	stw	r5,12(sp)
10003d4c:	dec00415 	stw	sp,16(sp)
10003d50:	1108000c 	andi	r4,r2,8192
10003d54:	2000061e 	bne	r4,zero,10003d70 <_puts_r+0x84>
10003d58:	19401917 	ldw	r5,100(r3)
10003d5c:	0137ffc4 	movi	r4,-8193
10003d60:	10880014 	ori	r2,r2,8192
10003d64:	2908703a 	and	r4,r5,r4
10003d68:	1880030d 	sth	r2,12(r3)
10003d6c:	19001915 	stw	r4,100(r3)
10003d70:	81400217 	ldw	r5,8(r16)
10003d74:	8009883a 	mov	r4,r16
10003d78:	d9800404 	addi	r6,sp,16
10003d7c:	000848c0 	call	1000848c <__sfvwrite_r>
10003d80:	1000061e 	bne	r2,zero,10003d9c <_puts_r+0xb0>
10003d84:	00800284 	movi	r2,10
10003d88:	dfc00917 	ldw	ra,36(sp)
10003d8c:	dc400817 	ldw	r17,32(sp)
10003d90:	dc000717 	ldw	r16,28(sp)
10003d94:	dec00a04 	addi	sp,sp,40
10003d98:	f800283a 	ret
10003d9c:	00bfffc4 	movi	r2,-1
10003da0:	003ff906 	br	10003d88 <__alt_data_end+0xf8003d88>

10003da4 <puts>:
10003da4:	00840074 	movhi	r2,4097
10003da8:	109c3104 	addi	r2,r2,28868
10003dac:	200b883a 	mov	r5,r4
10003db0:	11000017 	ldw	r4,0(r2)
10003db4:	0003cec1 	jmpi	10003cec <_puts_r>

10003db8 <srand>:
10003db8:	00840074 	movhi	r2,4097
10003dbc:	109c3104 	addi	r2,r2,28868
10003dc0:	10800017 	ldw	r2,0(r2)
10003dc4:	11002915 	stw	r4,164(r2)
10003dc8:	10002a15 	stw	zero,168(r2)
10003dcc:	f800283a 	ret

10003dd0 <rand>:
10003dd0:	00840074 	movhi	r2,4097
10003dd4:	defffe04 	addi	sp,sp,-8
10003dd8:	109c3104 	addi	r2,r2,28868
10003ddc:	dc000015 	stw	r16,0(sp)
10003de0:	14000017 	ldw	r16,0(r2)
10003de4:	dfc00115 	stw	ra,4(sp)
10003de8:	01932574 	movhi	r6,19605
10003dec:	81002917 	ldw	r4,164(r16)
10003df0:	81402a17 	ldw	r5,168(r16)
10003df4:	01d614b4 	movhi	r7,22610
10003df8:	319fcb44 	addi	r6,r6,32557
10003dfc:	39fd0b44 	addi	r7,r7,-3027
10003e00:	000d0b80 	call	1000d0b8 <__muldi3>
10003e04:	11000044 	addi	r4,r2,1
10003e08:	2085803a 	cmpltu	r2,r4,r2
10003e0c:	10c7883a 	add	r3,r2,r3
10003e10:	00a00034 	movhi	r2,32768
10003e14:	10bfffc4 	addi	r2,r2,-1
10003e18:	1884703a 	and	r2,r3,r2
10003e1c:	81002915 	stw	r4,164(r16)
10003e20:	80c02a15 	stw	r3,168(r16)
10003e24:	dfc00117 	ldw	ra,4(sp)
10003e28:	dc000017 	ldw	r16,0(sp)
10003e2c:	dec00204 	addi	sp,sp,8
10003e30:	f800283a 	ret

10003e34 <strlen>:
10003e34:	208000cc 	andi	r2,r4,3
10003e38:	10002026 	beq	r2,zero,10003ebc <strlen+0x88>
10003e3c:	20800007 	ldb	r2,0(r4)
10003e40:	10002026 	beq	r2,zero,10003ec4 <strlen+0x90>
10003e44:	2005883a 	mov	r2,r4
10003e48:	00000206 	br	10003e54 <strlen+0x20>
10003e4c:	10c00007 	ldb	r3,0(r2)
10003e50:	18001826 	beq	r3,zero,10003eb4 <strlen+0x80>
10003e54:	10800044 	addi	r2,r2,1
10003e58:	10c000cc 	andi	r3,r2,3
10003e5c:	183ffb1e 	bne	r3,zero,10003e4c <__alt_data_end+0xf8003e4c>
10003e60:	10c00017 	ldw	r3,0(r2)
10003e64:	01ffbff4 	movhi	r7,65279
10003e68:	39ffbfc4 	addi	r7,r7,-257
10003e6c:	00ca303a 	nor	r5,zero,r3
10003e70:	01a02074 	movhi	r6,32897
10003e74:	19c7883a 	add	r3,r3,r7
10003e78:	31a02004 	addi	r6,r6,-32640
10003e7c:	1946703a 	and	r3,r3,r5
10003e80:	1986703a 	and	r3,r3,r6
10003e84:	1800091e 	bne	r3,zero,10003eac <strlen+0x78>
10003e88:	10800104 	addi	r2,r2,4
10003e8c:	10c00017 	ldw	r3,0(r2)
10003e90:	19cb883a 	add	r5,r3,r7
10003e94:	00c6303a 	nor	r3,zero,r3
10003e98:	28c6703a 	and	r3,r5,r3
10003e9c:	1986703a 	and	r3,r3,r6
10003ea0:	183ff926 	beq	r3,zero,10003e88 <__alt_data_end+0xf8003e88>
10003ea4:	00000106 	br	10003eac <strlen+0x78>
10003ea8:	10800044 	addi	r2,r2,1
10003eac:	10c00007 	ldb	r3,0(r2)
10003eb0:	183ffd1e 	bne	r3,zero,10003ea8 <__alt_data_end+0xf8003ea8>
10003eb4:	1105c83a 	sub	r2,r2,r4
10003eb8:	f800283a 	ret
10003ebc:	2005883a 	mov	r2,r4
10003ec0:	003fe706 	br	10003e60 <__alt_data_end+0xf8003e60>
10003ec4:	0005883a 	mov	r2,zero
10003ec8:	f800283a 	ret

10003ecc <___vfprintf_internal_r>:
10003ecc:	defeb604 	addi	sp,sp,-1320
10003ed0:	dfc14915 	stw	ra,1316(sp)
10003ed4:	ddc14715 	stw	r23,1308(sp)
10003ed8:	dd814615 	stw	r22,1304(sp)
10003edc:	202f883a 	mov	r23,r4
10003ee0:	282d883a 	mov	r22,r5
10003ee4:	d9812a15 	stw	r6,1192(sp)
10003ee8:	d9c12d15 	stw	r7,1204(sp)
10003eec:	df014815 	stw	fp,1312(sp)
10003ef0:	dd414515 	stw	r21,1300(sp)
10003ef4:	dd014415 	stw	r20,1296(sp)
10003ef8:	dcc14315 	stw	r19,1292(sp)
10003efc:	dc814215 	stw	r18,1288(sp)
10003f00:	dc414115 	stw	r17,1284(sp)
10003f04:	dc014015 	stw	r16,1280(sp)
10003f08:	0008b4c0 	call	10008b4c <_localeconv_r>
10003f0c:	10800017 	ldw	r2,0(r2)
10003f10:	1009883a 	mov	r4,r2
10003f14:	d8813515 	stw	r2,1236(sp)
10003f18:	0003e340 	call	10003e34 <strlen>
10003f1c:	d8813815 	stw	r2,1248(sp)
10003f20:	b8000226 	beq	r23,zero,10003f2c <___vfprintf_internal_r+0x60>
10003f24:	b8800e17 	ldw	r2,56(r23)
10003f28:	10010526 	beq	r2,zero,10004340 <___vfprintf_internal_r+0x474>
10003f2c:	b0c0030b 	ldhu	r3,12(r22)
10003f30:	1908000c 	andi	r4,r3,8192
10003f34:	1805883a 	mov	r2,r3
10003f38:	2000071e 	bne	r4,zero,10003f58 <___vfprintf_internal_r+0x8c>
10003f3c:	b1001917 	ldw	r4,100(r22)
10003f40:	18880014 	ori	r2,r3,8192
10003f44:	00f7ffc4 	movi	r3,-8193
10003f48:	20c8703a 	and	r4,r4,r3
10003f4c:	b080030d 	sth	r2,12(r22)
10003f50:	1007883a 	mov	r3,r2
10003f54:	b1001915 	stw	r4,100(r22)
10003f58:	1100020c 	andi	r4,r2,8
10003f5c:	2000a826 	beq	r4,zero,10004200 <___vfprintf_internal_r+0x334>
10003f60:	b1000417 	ldw	r4,16(r22)
10003f64:	2000a626 	beq	r4,zero,10004200 <___vfprintf_internal_r+0x334>
10003f68:	1080068c 	andi	r2,r2,26
10003f6c:	01000284 	movi	r4,10
10003f70:	1100ac26 	beq	r2,r4,10004224 <___vfprintf_internal_r+0x358>
10003f74:	d8c10e04 	addi	r3,sp,1080
10003f78:	d9010dc4 	addi	r4,sp,1079
10003f7c:	d9400404 	addi	r5,sp,16
10003f80:	05040074 	movhi	r20,4097
10003f84:	1905c83a 	sub	r2,r3,r4
10003f88:	a514d284 	addi	r20,r20,21322
10003f8c:	d8c12815 	stw	r3,1184(sp)
10003f90:	d9012915 	stw	r4,1188(sp)
10003f94:	d9411e15 	stw	r5,1144(sp)
10003f98:	d8012015 	stw	zero,1152(sp)
10003f9c:	d8011f15 	stw	zero,1148(sp)
10003fa0:	d8013315 	stw	zero,1228(sp)
10003fa4:	d8013715 	stw	zero,1244(sp)
10003fa8:	d8013915 	stw	zero,1252(sp)
10003fac:	d8013b15 	stw	zero,1260(sp)
10003fb0:	d8013a15 	stw	zero,1256(sp)
10003fb4:	d8012f15 	stw	zero,1212(sp)
10003fb8:	2811883a 	mov	r8,r5
10003fbc:	d8813c15 	stw	r2,1264(sp)
10003fc0:	d8c12a17 	ldw	r3,1192(sp)
10003fc4:	18800007 	ldb	r2,0(r3)
10003fc8:	10021326 	beq	r2,zero,10004818 <___vfprintf_internal_r+0x94c>
10003fcc:	00c00944 	movi	r3,37
10003fd0:	dc012a17 	ldw	r16,1192(sp)
10003fd4:	10c0021e 	bne	r2,r3,10003fe0 <___vfprintf_internal_r+0x114>
10003fd8:	00001606 	br	10004034 <___vfprintf_internal_r+0x168>
10003fdc:	10c08526 	beq	r2,r3,100041f4 <___vfprintf_internal_r+0x328>
10003fe0:	84000044 	addi	r16,r16,1
10003fe4:	80800007 	ldb	r2,0(r16)
10003fe8:	103ffc1e 	bne	r2,zero,10003fdc <__alt_data_end+0xf8003fdc>
10003fec:	d9012a17 	ldw	r4,1192(sp)
10003ff0:	8123c83a 	sub	r17,r16,r4
10003ff4:	88000f26 	beq	r17,zero,10004034 <___vfprintf_internal_r+0x168>
10003ff8:	d8812a17 	ldw	r2,1192(sp)
10003ffc:	d8c12017 	ldw	r3,1152(sp)
10004000:	44400115 	stw	r17,4(r8)
10004004:	40800015 	stw	r2,0(r8)
10004008:	d8811f17 	ldw	r2,1148(sp)
1000400c:	1c47883a 	add	r3,r3,r17
10004010:	d8c12015 	stw	r3,1152(sp)
10004014:	10800044 	addi	r2,r2,1
10004018:	d8811f15 	stw	r2,1148(sp)
1000401c:	00c001c4 	movi	r3,7
10004020:	1880b516 	blt	r3,r2,100042f8 <___vfprintf_internal_r+0x42c>
10004024:	42000204 	addi	r8,r8,8
10004028:	d8c12f17 	ldw	r3,1212(sp)
1000402c:	1c47883a 	add	r3,r3,r17
10004030:	d8c12f15 	stw	r3,1212(sp)
10004034:	80800007 	ldb	r2,0(r16)
10004038:	1000b626 	beq	r2,zero,10004314 <___vfprintf_internal_r+0x448>
1000403c:	80800044 	addi	r2,r16,1
10004040:	84000047 	ldb	r16,1(r16)
10004044:	0027883a 	mov	r19,zero
10004048:	0039883a 	mov	fp,zero
1000404c:	dcc12b05 	stb	r19,1196(sp)
10004050:	d8012785 	stb	zero,1182(sp)
10004054:	027fffc4 	movi	r9,-1
10004058:	d8012e15 	stw	zero,1208(sp)
1000405c:	04401604 	movi	r17,88
10004060:	04800244 	movi	r18,9
10004064:	da012a15 	stw	r8,1192(sp)
10004068:	e027883a 	mov	r19,fp
1000406c:	17000044 	addi	fp,r2,1
10004070:	80bff804 	addi	r2,r16,-32
10004074:	88831236 	bltu	r17,r2,10004cc0 <___vfprintf_internal_r+0xdf4>
10004078:	100490ba 	slli	r2,r2,2
1000407c:	01040034 	movhi	r4,4096
10004080:	21102404 	addi	r4,r4,16528
10004084:	1105883a 	add	r2,r2,r4
10004088:	10800017 	ldw	r2,0(r2)
1000408c:	1000683a 	jmp	r2
10004090:	10004bdc 	xori	zero,r2,303
10004094:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004098:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000409c:	10004bf8 	rdprs	zero,r2,303
100040a0:	10004cc0 	call	110004cc <_gp+0xfe141c>
100040a4:	10004cc0 	call	110004cc <_gp+0xfe141c>
100040a8:	10004cc0 	call	110004cc <_gp+0xfe141c>
100040ac:	10004cc0 	call	110004cc <_gp+0xfe141c>
100040b0:	10004cc0 	call	110004cc <_gp+0xfe141c>
100040b4:	10004cc0 	call	110004cc <_gp+0xfe141c>
100040b8:	10004c08 	cmpgei	zero,r2,304
100040bc:	10004c30 	cmpltui	zero,r2,304
100040c0:	10004cc0 	call	110004cc <_gp+0xfe141c>
100040c4:	1000434c 	andi	zero,r2,269
100040c8:	1000435c 	xori	zero,r2,269
100040cc:	10004cc0 	call	110004cc <_gp+0xfe141c>
100040d0:	100043ac 	andhi	zero,r2,270
100040d4:	100043bc 	xorhi	zero,r2,270
100040d8:	100043bc 	xorhi	zero,r2,270
100040dc:	100043bc 	xorhi	zero,r2,270
100040e0:	100043bc 	xorhi	zero,r2,270
100040e4:	100043bc 	xorhi	zero,r2,270
100040e8:	100043bc 	xorhi	zero,r2,270
100040ec:	100043bc 	xorhi	zero,r2,270
100040f0:	100043bc 	xorhi	zero,r2,270
100040f4:	100043bc 	xorhi	zero,r2,270
100040f8:	10004cc0 	call	110004cc <_gp+0xfe141c>
100040fc:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004100:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004104:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004108:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000410c:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004110:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004114:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004118:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000411c:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004120:	10004400 	call	11000440 <_gp+0xfe1390>
10004124:	10004820 	cmpeqi	zero,r2,288
10004128:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000412c:	10004820 	cmpeqi	zero,r2,288
10004130:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004134:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004138:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000413c:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004140:	100048c8 	cmpgei	zero,r2,291
10004144:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004148:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000414c:	100048d8 	cmpnei	zero,r2,291
10004150:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004154:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004158:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000415c:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004160:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004164:	1000491c 	xori	zero,r2,292
10004168:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000416c:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004170:	10004954 	ori	zero,r2,293
10004174:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004178:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000417c:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004180:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004184:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004188:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000418c:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004190:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004194:	10004cc0 	call	110004cc <_gp+0xfe141c>
10004198:	10004cc0 	call	110004cc <_gp+0xfe141c>
1000419c:	10004b90 	cmplti	zero,r2,302
100041a0:	10004b3c 	xorhi	zero,r2,300
100041a4:	10004820 	cmpeqi	zero,r2,288
100041a8:	10004820 	cmpeqi	zero,r2,288
100041ac:	10004820 	cmpeqi	zero,r2,288
100041b0:	10004b80 	call	110004b8 <_gp+0xfe1408>
100041b4:	10004b3c 	xorhi	zero,r2,300
100041b8:	10004cc0 	call	110004cc <_gp+0xfe141c>
100041bc:	10004cc0 	call	110004cc <_gp+0xfe141c>
100041c0:	10004a58 	cmpnei	zero,r2,297
100041c4:	10004cc0 	call	110004cc <_gp+0xfe141c>
100041c8:	10004a70 	cmpltui	zero,r2,297
100041cc:	10004ab0 	cmpltui	zero,r2,298
100041d0:	10004af0 	cmpltui	zero,r2,299
100041d4:	100049bc 	xorhi	zero,r2,294
100041d8:	10004cc0 	call	110004cc <_gp+0xfe141c>
100041dc:	10004c44 	addi	zero,r2,305
100041e0:	10004cc0 	call	110004cc <_gp+0xfe141c>
100041e4:	100049cc 	andi	zero,r2,295
100041e8:	10004cc0 	call	110004cc <_gp+0xfe141c>
100041ec:	10004cc0 	call	110004cc <_gp+0xfe141c>
100041f0:	10004a0c 	andi	zero,r2,296
100041f4:	d9412a17 	ldw	r5,1192(sp)
100041f8:	8163c83a 	sub	r17,r16,r5
100041fc:	003f7d06 	br	10003ff4 <__alt_data_end+0xf8003ff4>
10004200:	b809883a 	mov	r4,r23
10004204:	b00b883a 	mov	r5,r22
10004208:	0005fec0 	call	10005fec <__swsetup_r>
1000420c:	10002d1e 	bne	r2,zero,100042c4 <___vfprintf_internal_r+0x3f8>
10004210:	b0c0030b 	ldhu	r3,12(r22)
10004214:	01000284 	movi	r4,10
10004218:	1805883a 	mov	r2,r3
1000421c:	1080068c 	andi	r2,r2,26
10004220:	113f541e 	bne	r2,r4,10003f74 <__alt_data_end+0xf8003f74>
10004224:	b080038b 	ldhu	r2,14(r22)
10004228:	113fffcc 	andi	r4,r2,65535
1000422c:	2120001c 	xori	r4,r4,32768
10004230:	21200004 	addi	r4,r4,-32768
10004234:	203f4f16 	blt	r4,zero,10003f74 <__alt_data_end+0xf8003f74>
10004238:	b2c01917 	ldw	r11,100(r22)
1000423c:	b2800717 	ldw	r10,28(r22)
10004240:	b2400917 	ldw	r9,36(r22)
10004244:	d9812a17 	ldw	r6,1192(sp)
10004248:	d9c12d17 	ldw	r7,1204(sp)
1000424c:	02010004 	movi	r8,1024
10004250:	18ffff4c 	andi	r3,r3,65533
10004254:	d881078d 	sth	r2,1054(sp)
10004258:	b809883a 	mov	r4,r23
1000425c:	d8800404 	addi	r2,sp,16
10004260:	d9410404 	addi	r5,sp,1040
10004264:	d8c1070d 	sth	r3,1052(sp)
10004268:	dac11d15 	stw	r11,1140(sp)
1000426c:	da810b15 	stw	r10,1068(sp)
10004270:	da410d15 	stw	r9,1076(sp)
10004274:	d8810415 	stw	r2,1040(sp)
10004278:	d8810815 	stw	r2,1056(sp)
1000427c:	da010615 	stw	r8,1048(sp)
10004280:	da010915 	stw	r8,1060(sp)
10004284:	d8010a15 	stw	zero,1064(sp)
10004288:	0003ecc0 	call	10003ecc <___vfprintf_internal_r>
1000428c:	1021883a 	mov	r16,r2
10004290:	10000416 	blt	r2,zero,100042a4 <___vfprintf_internal_r+0x3d8>
10004294:	b809883a 	mov	r4,r23
10004298:	d9410404 	addi	r5,sp,1040
1000429c:	0007a6c0 	call	10007a6c <_fflush_r>
100042a0:	1007301e 	bne	r2,zero,10005f64 <___vfprintf_internal_r+0x2098>
100042a4:	d881070b 	ldhu	r2,1052(sp)
100042a8:	1080100c 	andi	r2,r2,64
100042ac:	10000326 	beq	r2,zero,100042bc <___vfprintf_internal_r+0x3f0>
100042b0:	b080030b 	ldhu	r2,12(r22)
100042b4:	10801014 	ori	r2,r2,64
100042b8:	b080030d 	sth	r2,12(r22)
100042bc:	8005883a 	mov	r2,r16
100042c0:	00000106 	br	100042c8 <___vfprintf_internal_r+0x3fc>
100042c4:	00bfffc4 	movi	r2,-1
100042c8:	dfc14917 	ldw	ra,1316(sp)
100042cc:	df014817 	ldw	fp,1312(sp)
100042d0:	ddc14717 	ldw	r23,1308(sp)
100042d4:	dd814617 	ldw	r22,1304(sp)
100042d8:	dd414517 	ldw	r21,1300(sp)
100042dc:	dd014417 	ldw	r20,1296(sp)
100042e0:	dcc14317 	ldw	r19,1292(sp)
100042e4:	dc814217 	ldw	r18,1288(sp)
100042e8:	dc414117 	ldw	r17,1284(sp)
100042ec:	dc014017 	ldw	r16,1280(sp)
100042f0:	dec14a04 	addi	sp,sp,1320
100042f4:	f800283a 	ret
100042f8:	b809883a 	mov	r4,r23
100042fc:	b00b883a 	mov	r5,r22
10004300:	d9811e04 	addi	r6,sp,1144
10004304:	000b30c0 	call	1000b30c <__sprint_r>
10004308:	1000081e 	bne	r2,zero,1000432c <___vfprintf_internal_r+0x460>
1000430c:	da000404 	addi	r8,sp,16
10004310:	003f4506 	br	10004028 <__alt_data_end+0xf8004028>
10004314:	d8812017 	ldw	r2,1152(sp)
10004318:	10000426 	beq	r2,zero,1000432c <___vfprintf_internal_r+0x460>
1000431c:	b809883a 	mov	r4,r23
10004320:	b00b883a 	mov	r5,r22
10004324:	d9811e04 	addi	r6,sp,1144
10004328:	000b30c0 	call	1000b30c <__sprint_r>
1000432c:	b080030b 	ldhu	r2,12(r22)
10004330:	1080100c 	andi	r2,r2,64
10004334:	103fe31e 	bne	r2,zero,100042c4 <__alt_data_end+0xf80042c4>
10004338:	d8812f17 	ldw	r2,1212(sp)
1000433c:	003fe206 	br	100042c8 <__alt_data_end+0xf80042c8>
10004340:	b809883a 	mov	r4,r23
10004344:	00080280 	call	10008028 <__sinit>
10004348:	003ef806 	br	10003f2c <__alt_data_end+0xf8003f2c>
1000434c:	e005883a 	mov	r2,fp
10004350:	9cc00114 	ori	r19,r19,4
10004354:	e4000007 	ldb	r16,0(fp)
10004358:	003f4406 	br	1000406c <__alt_data_end+0xf800406c>
1000435c:	e4000007 	ldb	r16,0(fp)
10004360:	01000a84 	movi	r4,42
10004364:	e0800044 	addi	r2,fp,1
10004368:	8106f626 	beq	r16,r4,10005f44 <___vfprintf_internal_r+0x2078>
1000436c:	857ff404 	addi	r21,r16,-48
10004370:	1039883a 	mov	fp,r2
10004374:	0013883a 	mov	r9,zero
10004378:	957f3d36 	bltu	r18,r21,10004070 <__alt_data_end+0xf8004070>
1000437c:	0009883a 	mov	r4,zero
10004380:	01400284 	movi	r5,10
10004384:	0003c5c0 	call	10003c5c <__mulsi3>
10004388:	e4000007 	ldb	r16,0(fp)
1000438c:	a889883a 	add	r4,r21,r2
10004390:	e7000044 	addi	fp,fp,1
10004394:	857ff404 	addi	r21,r16,-48
10004398:	957ff92e 	bgeu	r18,r21,10004380 <__alt_data_end+0xf8004380>
1000439c:	2013883a 	mov	r9,r4
100043a0:	203f330e 	bge	r4,zero,10004070 <__alt_data_end+0xf8004070>
100043a4:	027fffc4 	movi	r9,-1
100043a8:	003f3106 	br	10004070 <__alt_data_end+0xf8004070>
100043ac:	9cc02014 	ori	r19,r19,128
100043b0:	e005883a 	mov	r2,fp
100043b4:	e4000007 	ldb	r16,0(fp)
100043b8:	003f2c06 	br	1000406c <__alt_data_end+0xf800406c>
100043bc:	857ff404 	addi	r21,r16,-48
100043c0:	d8012e15 	stw	zero,1208(sp)
100043c4:	e021883a 	mov	r16,fp
100043c8:	0009883a 	mov	r4,zero
100043cc:	da412c15 	stw	r9,1200(sp)
100043d0:	01400284 	movi	r5,10
100043d4:	0003c5c0 	call	10003c5c <__mulsi3>
100043d8:	81400007 	ldb	r5,0(r16)
100043dc:	1549883a 	add	r4,r2,r21
100043e0:	e7000044 	addi	fp,fp,1
100043e4:	2d7ff404 	addi	r21,r5,-48
100043e8:	e021883a 	mov	r16,fp
100043ec:	957ff82e 	bgeu	r18,r21,100043d0 <__alt_data_end+0xf80043d0>
100043f0:	2821883a 	mov	r16,r5
100043f4:	d9012e15 	stw	r4,1208(sp)
100043f8:	da412c17 	ldw	r9,1200(sp)
100043fc:	003f1c06 	br	10004070 <__alt_data_end+0xf8004070>
10004400:	da012a17 	ldw	r8,1192(sp)
10004404:	df012a15 	stw	fp,1192(sp)
10004408:	9839883a 	mov	fp,r19
1000440c:	dcc12b03 	ldbu	r19,1196(sp)
10004410:	e7000414 	ori	fp,fp,16
10004414:	e080080c 	andi	r2,fp,32
10004418:	dcc12785 	stb	r19,1182(sp)
1000441c:	d8c12d17 	ldw	r3,1204(sp)
10004420:	1001ce26 	beq	r2,zero,10004b5c <___vfprintf_internal_r+0xc90>
10004424:	d9012d17 	ldw	r4,1204(sp)
10004428:	18800117 	ldw	r2,4(r3)
1000442c:	1c800017 	ldw	r18,0(r3)
10004430:	21000204 	addi	r4,r4,8
10004434:	d9012d15 	stw	r4,1204(sp)
10004438:	102b883a 	mov	r21,r2
1000443c:	10044916 	blt	r2,zero,10005564 <___vfprintf_internal_r+0x1698>
10004440:	dcc12783 	ldbu	r19,1182(sp)
10004444:	da413215 	stw	r9,1224(sp)
10004448:	00800044 	movi	r2,1
1000444c:	9546b03a 	or	r3,r18,r21
10004450:	48000216 	blt	r9,zero,1000445c <___vfprintf_internal_r+0x590>
10004454:	013fdfc4 	movi	r4,-129
10004458:	e138703a 	and	fp,fp,r4
1000445c:	1802251e 	bne	r3,zero,10004cf4 <___vfprintf_internal_r+0xe28>
10004460:	48031726 	beq	r9,zero,100050c0 <___vfprintf_internal_r+0x11f4>
10004464:	10803fcc 	andi	r2,r2,255
10004468:	00c00044 	movi	r3,1
1000446c:	10c24526 	beq	r2,r3,10004d84 <___vfprintf_internal_r+0xeb8>
10004470:	00c00084 	movi	r3,2
10004474:	10c33426 	beq	r2,r3,10005148 <___vfprintf_internal_r+0x127c>
10004478:	d8c10e04 	addi	r3,sp,1080
1000447c:	9008d0fa 	srli	r4,r18,3
10004480:	a80a977a 	slli	r5,r21,29
10004484:	a82ad0fa 	srli	r21,r21,3
10004488:	948001cc 	andi	r18,r18,7
1000448c:	90800c04 	addi	r2,r18,48
10004490:	18ffffc4 	addi	r3,r3,-1
10004494:	2924b03a 	or	r18,r5,r4
10004498:	18800005 	stb	r2,0(r3)
1000449c:	9548b03a 	or	r4,r18,r21
100044a0:	203ff61e 	bne	r4,zero,1000447c <__alt_data_end+0xf800447c>
100044a4:	e100004c 	andi	r4,fp,1
100044a8:	d8c13115 	stw	r3,1220(sp)
100044ac:	20039a1e 	bne	r4,zero,10005318 <___vfprintf_internal_r+0x144c>
100044b0:	d8812817 	ldw	r2,1184(sp)
100044b4:	10e3c83a 	sub	r17,r2,r3
100044b8:	8805883a 	mov	r2,r17
100044bc:	8a40010e 	bge	r17,r9,100044c4 <___vfprintf_internal_r+0x5f8>
100044c0:	4805883a 	mov	r2,r9
100044c4:	d8812b15 	stw	r2,1196(sp)
100044c8:	d8013415 	stw	zero,1232(sp)
100044cc:	98803fcc 	andi	r2,r19,255
100044d0:	1080201c 	xori	r2,r2,128
100044d4:	10bfe004 	addi	r2,r2,-128
100044d8:	10000326 	beq	r2,zero,100044e8 <___vfprintf_internal_r+0x61c>
100044dc:	d8c12b17 	ldw	r3,1196(sp)
100044e0:	18c00044 	addi	r3,r3,1
100044e4:	d8c12b15 	stw	r3,1196(sp)
100044e8:	e0c0008c 	andi	r3,fp,2
100044ec:	d8c12c15 	stw	r3,1200(sp)
100044f0:	18000326 	beq	r3,zero,10004500 <___vfprintf_internal_r+0x634>
100044f4:	d8c12b17 	ldw	r3,1196(sp)
100044f8:	18c00084 	addi	r3,r3,2
100044fc:	d8c12b15 	stw	r3,1196(sp)
10004500:	e0c0210c 	andi	r3,fp,132
10004504:	d8c13015 	stw	r3,1216(sp)
10004508:	1801f81e 	bne	r3,zero,10004cec <___vfprintf_internal_r+0xe20>
1000450c:	d9012e17 	ldw	r4,1208(sp)
10004510:	d8c12b17 	ldw	r3,1196(sp)
10004514:	20ebc83a 	sub	r21,r4,r3
10004518:	0541f40e 	bge	zero,r21,10004cec <___vfprintf_internal_r+0xe20>
1000451c:	02400404 	movi	r9,16
10004520:	d8c12017 	ldw	r3,1152(sp)
10004524:	d8811f17 	ldw	r2,1148(sp)
10004528:	4d45750e 	bge	r9,r21,10005b00 <___vfprintf_internal_r+0x1c34>
1000452c:	01440074 	movhi	r5,4097
10004530:	2954d684 	addi	r5,r5,21338
10004534:	d9413615 	stw	r5,1240(sp)
10004538:	4827883a 	mov	r19,r9
1000453c:	048001c4 	movi	r18,7
10004540:	00000306 	br	10004550 <___vfprintf_internal_r+0x684>
10004544:	ad7ffc04 	addi	r21,r21,-16
10004548:	42000204 	addi	r8,r8,8
1000454c:	9d40130e 	bge	r19,r21,1000459c <___vfprintf_internal_r+0x6d0>
10004550:	01040074 	movhi	r4,4097
10004554:	18c00404 	addi	r3,r3,16
10004558:	10800044 	addi	r2,r2,1
1000455c:	2114d684 	addi	r4,r4,21338
10004560:	41000015 	stw	r4,0(r8)
10004564:	44c00115 	stw	r19,4(r8)
10004568:	d8c12015 	stw	r3,1152(sp)
1000456c:	d8811f15 	stw	r2,1148(sp)
10004570:	90bff40e 	bge	r18,r2,10004544 <__alt_data_end+0xf8004544>
10004574:	b809883a 	mov	r4,r23
10004578:	b00b883a 	mov	r5,r22
1000457c:	d9811e04 	addi	r6,sp,1144
10004580:	000b30c0 	call	1000b30c <__sprint_r>
10004584:	103f691e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10004588:	ad7ffc04 	addi	r21,r21,-16
1000458c:	d8c12017 	ldw	r3,1152(sp)
10004590:	d8811f17 	ldw	r2,1148(sp)
10004594:	da000404 	addi	r8,sp,16
10004598:	9d7fed16 	blt	r19,r21,10004550 <__alt_data_end+0xf8004550>
1000459c:	d9413617 	ldw	r5,1240(sp)
100045a0:	a8c7883a 	add	r3,r21,r3
100045a4:	10800044 	addi	r2,r2,1
100045a8:	41400015 	stw	r5,0(r8)
100045ac:	45400115 	stw	r21,4(r8)
100045b0:	d8c12015 	stw	r3,1152(sp)
100045b4:	d8811f15 	stw	r2,1148(sp)
100045b8:	010001c4 	movi	r4,7
100045bc:	20832b16 	blt	r4,r2,1000526c <___vfprintf_internal_r+0x13a0>
100045c0:	d8812787 	ldb	r2,1182(sp)
100045c4:	42000204 	addi	r8,r8,8
100045c8:	10000c26 	beq	r2,zero,100045fc <___vfprintf_internal_r+0x730>
100045cc:	d8811f17 	ldw	r2,1148(sp)
100045d0:	d9012784 	addi	r4,sp,1182
100045d4:	18c00044 	addi	r3,r3,1
100045d8:	10800044 	addi	r2,r2,1
100045dc:	41000015 	stw	r4,0(r8)
100045e0:	01000044 	movi	r4,1
100045e4:	41000115 	stw	r4,4(r8)
100045e8:	d8c12015 	stw	r3,1152(sp)
100045ec:	d8811f15 	stw	r2,1148(sp)
100045f0:	010001c4 	movi	r4,7
100045f4:	2082c416 	blt	r4,r2,10005108 <___vfprintf_internal_r+0x123c>
100045f8:	42000204 	addi	r8,r8,8
100045fc:	d8812c17 	ldw	r2,1200(sp)
10004600:	10000c26 	beq	r2,zero,10004634 <___vfprintf_internal_r+0x768>
10004604:	d8811f17 	ldw	r2,1148(sp)
10004608:	d9012704 	addi	r4,sp,1180
1000460c:	18c00084 	addi	r3,r3,2
10004610:	10800044 	addi	r2,r2,1
10004614:	41000015 	stw	r4,0(r8)
10004618:	01000084 	movi	r4,2
1000461c:	41000115 	stw	r4,4(r8)
10004620:	d8c12015 	stw	r3,1152(sp)
10004624:	d8811f15 	stw	r2,1148(sp)
10004628:	010001c4 	movi	r4,7
1000462c:	2082be16 	blt	r4,r2,10005128 <___vfprintf_internal_r+0x125c>
10004630:	42000204 	addi	r8,r8,8
10004634:	d9013017 	ldw	r4,1216(sp)
10004638:	00802004 	movi	r2,128
1000463c:	20822026 	beq	r4,r2,10004ec0 <___vfprintf_internal_r+0xff4>
10004640:	d9413217 	ldw	r5,1224(sp)
10004644:	2c67c83a 	sub	r19,r5,r17
10004648:	04c0260e 	bge	zero,r19,100046e4 <___vfprintf_internal_r+0x818>
1000464c:	05400404 	movi	r21,16
10004650:	d8811f17 	ldw	r2,1148(sp)
10004654:	acc4720e 	bge	r21,r19,10005820 <___vfprintf_internal_r+0x1954>
10004658:	01440074 	movhi	r5,4097
1000465c:	2954d284 	addi	r5,r5,21322
10004660:	d9412c15 	stw	r5,1200(sp)
10004664:	048001c4 	movi	r18,7
10004668:	00000306 	br	10004678 <___vfprintf_internal_r+0x7ac>
1000466c:	9cfffc04 	addi	r19,r19,-16
10004670:	42000204 	addi	r8,r8,8
10004674:	acc0110e 	bge	r21,r19,100046bc <___vfprintf_internal_r+0x7f0>
10004678:	18c00404 	addi	r3,r3,16
1000467c:	10800044 	addi	r2,r2,1
10004680:	45000015 	stw	r20,0(r8)
10004684:	45400115 	stw	r21,4(r8)
10004688:	d8c12015 	stw	r3,1152(sp)
1000468c:	d8811f15 	stw	r2,1148(sp)
10004690:	90bff60e 	bge	r18,r2,1000466c <__alt_data_end+0xf800466c>
10004694:	b809883a 	mov	r4,r23
10004698:	b00b883a 	mov	r5,r22
1000469c:	d9811e04 	addi	r6,sp,1144
100046a0:	000b30c0 	call	1000b30c <__sprint_r>
100046a4:	103f211e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
100046a8:	9cfffc04 	addi	r19,r19,-16
100046ac:	d8c12017 	ldw	r3,1152(sp)
100046b0:	d8811f17 	ldw	r2,1148(sp)
100046b4:	da000404 	addi	r8,sp,16
100046b8:	acffef16 	blt	r21,r19,10004678 <__alt_data_end+0xf8004678>
100046bc:	d9012c17 	ldw	r4,1200(sp)
100046c0:	1cc7883a 	add	r3,r3,r19
100046c4:	10800044 	addi	r2,r2,1
100046c8:	41000015 	stw	r4,0(r8)
100046cc:	44c00115 	stw	r19,4(r8)
100046d0:	d8c12015 	stw	r3,1152(sp)
100046d4:	d8811f15 	stw	r2,1148(sp)
100046d8:	010001c4 	movi	r4,7
100046dc:	20828216 	blt	r4,r2,100050e8 <___vfprintf_internal_r+0x121c>
100046e0:	42000204 	addi	r8,r8,8
100046e4:	e080400c 	andi	r2,fp,256
100046e8:	1001ac1e 	bne	r2,zero,10004d9c <___vfprintf_internal_r+0xed0>
100046ec:	d8811f17 	ldw	r2,1148(sp)
100046f0:	d9413117 	ldw	r5,1220(sp)
100046f4:	1c47883a 	add	r3,r3,r17
100046f8:	10800044 	addi	r2,r2,1
100046fc:	41400015 	stw	r5,0(r8)
10004700:	44400115 	stw	r17,4(r8)
10004704:	d8c12015 	stw	r3,1152(sp)
10004708:	d8811f15 	stw	r2,1148(sp)
1000470c:	010001c4 	movi	r4,7
10004710:	20825d16 	blt	r4,r2,10005088 <___vfprintf_internal_r+0x11bc>
10004714:	42000204 	addi	r8,r8,8
10004718:	e080010c 	andi	r2,fp,4
1000471c:	10003126 	beq	r2,zero,100047e4 <___vfprintf_internal_r+0x918>
10004720:	d8812e17 	ldw	r2,1208(sp)
10004724:	d9012b17 	ldw	r4,1196(sp)
10004728:	1121c83a 	sub	r16,r2,r4
1000472c:	04002d0e 	bge	zero,r16,100047e4 <___vfprintf_internal_r+0x918>
10004730:	04400404 	movi	r17,16
10004734:	d8811f17 	ldw	r2,1148(sp)
10004738:	8c05340e 	bge	r17,r16,10005c0c <___vfprintf_internal_r+0x1d40>
1000473c:	01040074 	movhi	r4,4097
10004740:	2114d684 	addi	r4,r4,21338
10004744:	d9013615 	stw	r4,1240(sp)
10004748:	048001c4 	movi	r18,7
1000474c:	00000306 	br	1000475c <___vfprintf_internal_r+0x890>
10004750:	843ffc04 	addi	r16,r16,-16
10004754:	42000204 	addi	r8,r8,8
10004758:	8c00130e 	bge	r17,r16,100047a8 <___vfprintf_internal_r+0x8dc>
1000475c:	01440074 	movhi	r5,4097
10004760:	18c00404 	addi	r3,r3,16
10004764:	10800044 	addi	r2,r2,1
10004768:	2954d684 	addi	r5,r5,21338
1000476c:	41400015 	stw	r5,0(r8)
10004770:	44400115 	stw	r17,4(r8)
10004774:	d8c12015 	stw	r3,1152(sp)
10004778:	d8811f15 	stw	r2,1148(sp)
1000477c:	90bff40e 	bge	r18,r2,10004750 <__alt_data_end+0xf8004750>
10004780:	b809883a 	mov	r4,r23
10004784:	b00b883a 	mov	r5,r22
10004788:	d9811e04 	addi	r6,sp,1144
1000478c:	000b30c0 	call	1000b30c <__sprint_r>
10004790:	103ee61e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10004794:	843ffc04 	addi	r16,r16,-16
10004798:	d8c12017 	ldw	r3,1152(sp)
1000479c:	d8811f17 	ldw	r2,1148(sp)
100047a0:	da000404 	addi	r8,sp,16
100047a4:	8c3fed16 	blt	r17,r16,1000475c <__alt_data_end+0xf800475c>
100047a8:	d9013617 	ldw	r4,1240(sp)
100047ac:	1c07883a 	add	r3,r3,r16
100047b0:	10800044 	addi	r2,r2,1
100047b4:	41000015 	stw	r4,0(r8)
100047b8:	44000115 	stw	r16,4(r8)
100047bc:	d8c12015 	stw	r3,1152(sp)
100047c0:	d8811f15 	stw	r2,1148(sp)
100047c4:	010001c4 	movi	r4,7
100047c8:	2080060e 	bge	r4,r2,100047e4 <___vfprintf_internal_r+0x918>
100047cc:	b809883a 	mov	r4,r23
100047d0:	b00b883a 	mov	r5,r22
100047d4:	d9811e04 	addi	r6,sp,1144
100047d8:	000b30c0 	call	1000b30c <__sprint_r>
100047dc:	103ed31e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
100047e0:	d8c12017 	ldw	r3,1152(sp)
100047e4:	df012b17 	ldw	fp,1196(sp)
100047e8:	d9412e17 	ldw	r5,1208(sp)
100047ec:	e140010e 	bge	fp,r5,100047f4 <___vfprintf_internal_r+0x928>
100047f0:	2839883a 	mov	fp,r5
100047f4:	d8812f17 	ldw	r2,1212(sp)
100047f8:	1705883a 	add	r2,r2,fp
100047fc:	d8812f15 	stw	r2,1212(sp)
10004800:	1802291e 	bne	r3,zero,100050a8 <___vfprintf_internal_r+0x11dc>
10004804:	d8c12a17 	ldw	r3,1192(sp)
10004808:	d8011f15 	stw	zero,1148(sp)
1000480c:	da000404 	addi	r8,sp,16
10004810:	18800007 	ldb	r2,0(r3)
10004814:	103ded1e 	bne	r2,zero,10003fcc <__alt_data_end+0xf8003fcc>
10004818:	dc012a17 	ldw	r16,1192(sp)
1000481c:	003e0506 	br	10004034 <__alt_data_end+0xf8004034>
10004820:	d9012d17 	ldw	r4,1204(sp)
10004824:	d9412d17 	ldw	r5,1204(sp)
10004828:	da012a17 	ldw	r8,1192(sp)
1000482c:	21000017 	ldw	r4,0(r4)
10004830:	29400117 	ldw	r5,4(r5)
10004834:	df012a15 	stw	fp,1192(sp)
10004838:	9839883a 	mov	fp,r19
1000483c:	dcc12b03 	ldbu	r19,1196(sp)
10004840:	d9013715 	stw	r4,1244(sp)
10004844:	d9413915 	stw	r5,1252(sp)
10004848:	da013f15 	stw	r8,1276(sp)
1000484c:	da413e15 	stw	r9,1272(sp)
10004850:	dcc12785 	stb	r19,1182(sp)
10004854:	000af680 	call	1000af68 <__fpclassifyd>
10004858:	d8c12d17 	ldw	r3,1204(sp)
1000485c:	04400044 	movi	r17,1
10004860:	da013f17 	ldw	r8,1276(sp)
10004864:	1c800204 	addi	r18,r3,8
10004868:	da413e17 	ldw	r9,1272(sp)
1000486c:	d9013717 	ldw	r4,1244(sp)
10004870:	d9413917 	ldw	r5,1252(sp)
10004874:	1443451e 	bne	r2,r17,1000558c <___vfprintf_internal_r+0x16c0>
10004878:	000d883a 	mov	r6,zero
1000487c:	000f883a 	mov	r7,zero
10004880:	000f1a00 	call	1000f1a0 <__ledf2>
10004884:	da013f17 	ldw	r8,1276(sp)
10004888:	1004fe16 	blt	r2,zero,10005c84 <___vfprintf_internal_r+0x1db8>
1000488c:	dcc12783 	ldbu	r19,1182(sp)
10004890:	008011c4 	movi	r2,71
10004894:	14045d0e 	bge	r2,r16,10005a0c <___vfprintf_internal_r+0x1b40>
10004898:	01440074 	movhi	r5,4097
1000489c:	2954c304 	addi	r5,r5,21260
100048a0:	d9413115 	stw	r5,1220(sp)
100048a4:	00c000c4 	movi	r3,3
100048a8:	00bfdfc4 	movi	r2,-129
100048ac:	d8c12b15 	stw	r3,1196(sp)
100048b0:	e0b8703a 	and	fp,fp,r2
100048b4:	dc812d15 	stw	r18,1204(sp)
100048b8:	1823883a 	mov	r17,r3
100048bc:	d8013215 	stw	zero,1224(sp)
100048c0:	d8013415 	stw	zero,1232(sp)
100048c4:	003f0106 	br	100044cc <__alt_data_end+0xf80044cc>
100048c8:	9cc00214 	ori	r19,r19,8
100048cc:	e005883a 	mov	r2,fp
100048d0:	e4000007 	ldb	r16,0(fp)
100048d4:	003de506 	br	1000406c <__alt_data_end+0xf800406c>
100048d8:	da012a17 	ldw	r8,1192(sp)
100048dc:	df012a15 	stw	fp,1192(sp)
100048e0:	9f000414 	ori	fp,r19,16
100048e4:	e0c0080c 	andi	r3,fp,32
100048e8:	d8812d17 	ldw	r2,1204(sp)
100048ec:	18007626 	beq	r3,zero,10004ac8 <___vfprintf_internal_r+0xbfc>
100048f0:	d9412d17 	ldw	r5,1204(sp)
100048f4:	14800017 	ldw	r18,0(r2)
100048f8:	15400117 	ldw	r21,4(r2)
100048fc:	29400204 	addi	r5,r5,8
10004900:	d9412d15 	stw	r5,1204(sp)
10004904:	0005883a 	mov	r2,zero
10004908:	9546b03a 	or	r3,r18,r21
1000490c:	d8012785 	stb	zero,1182(sp)
10004910:	da413215 	stw	r9,1224(sp)
10004914:	0027883a 	mov	r19,zero
10004918:	003ecd06 	br	10004450 <__alt_data_end+0xf8004450>
1000491c:	da012a17 	ldw	r8,1192(sp)
10004920:	df012a15 	stw	fp,1192(sp)
10004924:	9f000414 	ori	fp,r19,16
10004928:	e0c0080c 	andi	r3,fp,32
1000492c:	d8812d17 	ldw	r2,1204(sp)
10004930:	18002c26 	beq	r3,zero,100049e4 <___vfprintf_internal_r+0xb18>
10004934:	d9012d17 	ldw	r4,1204(sp)
10004938:	14800017 	ldw	r18,0(r2)
1000493c:	15400117 	ldw	r21,4(r2)
10004940:	21000204 	addi	r4,r4,8
10004944:	d9012d15 	stw	r4,1204(sp)
10004948:	00800044 	movi	r2,1
1000494c:	9546b03a 	or	r3,r18,r21
10004950:	003fee06 	br	1000490c <__alt_data_end+0xf800490c>
10004954:	da012a17 	ldw	r8,1192(sp)
10004958:	df012a15 	stw	fp,1192(sp)
1000495c:	9839883a 	mov	fp,r19
10004960:	dcc12b03 	ldbu	r19,1196(sp)
10004964:	01440074 	movhi	r5,4097
10004968:	2954c604 	addi	r5,r5,21272
1000496c:	dcc12785 	stb	r19,1182(sp)
10004970:	d9413b15 	stw	r5,1260(sp)
10004974:	e0c0080c 	andi	r3,fp,32
10004978:	d8812d17 	ldw	r2,1204(sp)
1000497c:	18002e26 	beq	r3,zero,10004a38 <___vfprintf_internal_r+0xb6c>
10004980:	d9412d17 	ldw	r5,1204(sp)
10004984:	14800017 	ldw	r18,0(r2)
10004988:	15400117 	ldw	r21,4(r2)
1000498c:	29400204 	addi	r5,r5,8
10004990:	d9412d15 	stw	r5,1204(sp)
10004994:	e080004c 	andi	r2,fp,1
10004998:	10025c26 	beq	r2,zero,1000530c <___vfprintf_internal_r+0x1440>
1000499c:	9546b03a 	or	r3,r18,r21
100049a0:	18038f26 	beq	r3,zero,100057e0 <___vfprintf_internal_r+0x1914>
100049a4:	00800c04 	movi	r2,48
100049a8:	d8812705 	stb	r2,1180(sp)
100049ac:	dc012745 	stb	r16,1181(sp)
100049b0:	e7000094 	ori	fp,fp,2
100049b4:	00800084 	movi	r2,2
100049b8:	003fd406 	br	1000490c <__alt_data_end+0xf800490c>
100049bc:	9cc00814 	ori	r19,r19,32
100049c0:	e005883a 	mov	r2,fp
100049c4:	e4000007 	ldb	r16,0(fp)
100049c8:	003da806 	br	1000406c <__alt_data_end+0xf800406c>
100049cc:	da012a17 	ldw	r8,1192(sp)
100049d0:	df012a15 	stw	fp,1192(sp)
100049d4:	9839883a 	mov	fp,r19
100049d8:	e0c0080c 	andi	r3,fp,32
100049dc:	d8812d17 	ldw	r2,1204(sp)
100049e0:	183fd41e 	bne	r3,zero,10004934 <__alt_data_end+0xf8004934>
100049e4:	e0c0040c 	andi	r3,fp,16
100049e8:	18035f26 	beq	r3,zero,10005768 <___vfprintf_internal_r+0x189c>
100049ec:	d9412d17 	ldw	r5,1204(sp)
100049f0:	14800017 	ldw	r18,0(r2)
100049f4:	002b883a 	mov	r21,zero
100049f8:	29400104 	addi	r5,r5,4
100049fc:	d9412d15 	stw	r5,1204(sp)
10004a00:	00800044 	movi	r2,1
10004a04:	9007883a 	mov	r3,r18
10004a08:	003fc006 	br	1000490c <__alt_data_end+0xf800490c>
10004a0c:	da012a17 	ldw	r8,1192(sp)
10004a10:	df012a15 	stw	fp,1192(sp)
10004a14:	9839883a 	mov	fp,r19
10004a18:	dcc12b03 	ldbu	r19,1196(sp)
10004a1c:	01040074 	movhi	r4,4097
10004a20:	2114cb04 	addi	r4,r4,21292
10004a24:	d9013b15 	stw	r4,1260(sp)
10004a28:	dcc12785 	stb	r19,1182(sp)
10004a2c:	e0c0080c 	andi	r3,fp,32
10004a30:	d8812d17 	ldw	r2,1204(sp)
10004a34:	183fd21e 	bne	r3,zero,10004980 <__alt_data_end+0xf8004980>
10004a38:	e0c0040c 	andi	r3,fp,16
10004a3c:	18035426 	beq	r3,zero,10005790 <___vfprintf_internal_r+0x18c4>
10004a40:	d8c12d17 	ldw	r3,1204(sp)
10004a44:	14800017 	ldw	r18,0(r2)
10004a48:	002b883a 	mov	r21,zero
10004a4c:	18c00104 	addi	r3,r3,4
10004a50:	d8c12d15 	stw	r3,1204(sp)
10004a54:	003fcf06 	br	10004994 <__alt_data_end+0xf8004994>
10004a58:	e4000007 	ldb	r16,0(fp)
10004a5c:	00801b04 	movi	r2,108
10004a60:	8083f726 	beq	r16,r2,10005a40 <___vfprintf_internal_r+0x1b74>
10004a64:	9cc00414 	ori	r19,r19,16
10004a68:	e005883a 	mov	r2,fp
10004a6c:	003d7f06 	br	1000406c <__alt_data_end+0xf800406c>
10004a70:	da012a17 	ldw	r8,1192(sp)
10004a74:	df012a15 	stw	fp,1192(sp)
10004a78:	9839883a 	mov	fp,r19
10004a7c:	dcc12b03 	ldbu	r19,1196(sp)
10004a80:	e080080c 	andi	r2,fp,32
10004a84:	dcc12785 	stb	r19,1182(sp)
10004a88:	10032226 	beq	r2,zero,10005714 <___vfprintf_internal_r+0x1848>
10004a8c:	d9412d17 	ldw	r5,1204(sp)
10004a90:	d9012f17 	ldw	r4,1212(sp)
10004a94:	28800017 	ldw	r2,0(r5)
10004a98:	2007d7fa 	srai	r3,r4,31
10004a9c:	29400104 	addi	r5,r5,4
10004aa0:	d9412d15 	stw	r5,1204(sp)
10004aa4:	11000015 	stw	r4,0(r2)
10004aa8:	10c00115 	stw	r3,4(r2)
10004aac:	003d4406 	br	10003fc0 <__alt_data_end+0xf8003fc0>
10004ab0:	da012a17 	ldw	r8,1192(sp)
10004ab4:	df012a15 	stw	fp,1192(sp)
10004ab8:	9839883a 	mov	fp,r19
10004abc:	e0c0080c 	andi	r3,fp,32
10004ac0:	d8812d17 	ldw	r2,1204(sp)
10004ac4:	183f8a1e 	bne	r3,zero,100048f0 <__alt_data_end+0xf80048f0>
10004ac8:	e0c0040c 	andi	r3,fp,16
10004acc:	18031c26 	beq	r3,zero,10005740 <___vfprintf_internal_r+0x1874>
10004ad0:	14800017 	ldw	r18,0(r2)
10004ad4:	d8812d17 	ldw	r2,1204(sp)
10004ad8:	002b883a 	mov	r21,zero
10004adc:	9007883a 	mov	r3,r18
10004ae0:	10800104 	addi	r2,r2,4
10004ae4:	d8812d15 	stw	r2,1204(sp)
10004ae8:	0005883a 	mov	r2,zero
10004aec:	003f8706 	br	1000490c <__alt_data_end+0xf800490c>
10004af0:	d9412d17 	ldw	r5,1204(sp)
10004af4:	00800c04 	movi	r2,48
10004af8:	d8812705 	stb	r2,1180(sp)
10004afc:	2c800017 	ldw	r18,0(r5)
10004b00:	00801e04 	movi	r2,120
10004b04:	d8812745 	stb	r2,1181(sp)
10004b08:	00840074 	movhi	r2,4097
10004b0c:	1094cb04 	addi	r2,r2,21292
10004b10:	29400104 	addi	r5,r5,4
10004b14:	da012a17 	ldw	r8,1192(sp)
10004b18:	d8813b15 	stw	r2,1260(sp)
10004b1c:	df012a15 	stw	fp,1192(sp)
10004b20:	002b883a 	mov	r21,zero
10004b24:	9f000094 	ori	fp,r19,2
10004b28:	d9412d15 	stw	r5,1204(sp)
10004b2c:	00800084 	movi	r2,2
10004b30:	04001e04 	movi	r16,120
10004b34:	9007883a 	mov	r3,r18
10004b38:	003f7406 	br	1000490c <__alt_data_end+0xf800490c>
10004b3c:	da012a17 	ldw	r8,1192(sp)
10004b40:	df012a15 	stw	fp,1192(sp)
10004b44:	9839883a 	mov	fp,r19
10004b48:	dcc12b03 	ldbu	r19,1196(sp)
10004b4c:	e080080c 	andi	r2,fp,32
10004b50:	d8c12d17 	ldw	r3,1204(sp)
10004b54:	dcc12785 	stb	r19,1182(sp)
10004b58:	103e321e 	bne	r2,zero,10004424 <__alt_data_end+0xf8004424>
10004b5c:	e080040c 	andi	r2,fp,16
10004b60:	10031326 	beq	r2,zero,100057b0 <___vfprintf_internal_r+0x18e4>
10004b64:	1c800017 	ldw	r18,0(r3)
10004b68:	d9412d17 	ldw	r5,1204(sp)
10004b6c:	902bd7fa 	srai	r21,r18,31
10004b70:	29400104 	addi	r5,r5,4
10004b74:	d9412d15 	stw	r5,1204(sp)
10004b78:	a805883a 	mov	r2,r21
10004b7c:	003e2f06 	br	1000443c <__alt_data_end+0xf800443c>
10004b80:	9cc01014 	ori	r19,r19,64
10004b84:	e005883a 	mov	r2,fp
10004b88:	e4000007 	ldb	r16,0(fp)
10004b8c:	003d3706 	br	1000406c <__alt_data_end+0xf800406c>
10004b90:	d8c12d17 	ldw	r3,1204(sp)
10004b94:	d9012d17 	ldw	r4,1204(sp)
10004b98:	da012a17 	ldw	r8,1192(sp)
10004b9c:	18800017 	ldw	r2,0(r3)
10004ba0:	21000104 	addi	r4,r4,4
10004ba4:	00c00044 	movi	r3,1
10004ba8:	df012a15 	stw	fp,1192(sp)
10004bac:	d8c12b15 	stw	r3,1196(sp)
10004bb0:	9839883a 	mov	fp,r19
10004bb4:	d8012785 	stb	zero,1182(sp)
10004bb8:	d8810405 	stb	r2,1040(sp)
10004bbc:	d9012d15 	stw	r4,1204(sp)
10004bc0:	1823883a 	mov	r17,r3
10004bc4:	d8c10404 	addi	r3,sp,1040
10004bc8:	d8013215 	stw	zero,1224(sp)
10004bcc:	d8013415 	stw	zero,1232(sp)
10004bd0:	d8c13115 	stw	r3,1220(sp)
10004bd4:	0005883a 	mov	r2,zero
10004bd8:	003e4306 	br	100044e8 <__alt_data_end+0xf80044e8>
10004bdc:	d8812b07 	ldb	r2,1196(sp)
10004be0:	1002fc1e 	bne	r2,zero,100057d4 <___vfprintf_internal_r+0x1908>
10004be4:	00c00804 	movi	r3,32
10004be8:	d8c12b05 	stb	r3,1196(sp)
10004bec:	e005883a 	mov	r2,fp
10004bf0:	e4000007 	ldb	r16,0(fp)
10004bf4:	003d1d06 	br	1000406c <__alt_data_end+0xf800406c>
10004bf8:	9cc00054 	ori	r19,r19,1
10004bfc:	e005883a 	mov	r2,fp
10004c00:	e4000007 	ldb	r16,0(fp)
10004c04:	003d1906 	br	1000406c <__alt_data_end+0xf800406c>
10004c08:	d9012d17 	ldw	r4,1204(sp)
10004c0c:	d9412d17 	ldw	r5,1204(sp)
10004c10:	21000017 	ldw	r4,0(r4)
10004c14:	28c00104 	addi	r3,r5,4
10004c18:	d9012e15 	stw	r4,1208(sp)
10004c1c:	20038c16 	blt	r4,zero,10005a50 <___vfprintf_internal_r+0x1b84>
10004c20:	d8c12d15 	stw	r3,1204(sp)
10004c24:	e005883a 	mov	r2,fp
10004c28:	e4000007 	ldb	r16,0(fp)
10004c2c:	003d0f06 	br	1000406c <__alt_data_end+0xf800406c>
10004c30:	00c00ac4 	movi	r3,43
10004c34:	d8c12b05 	stb	r3,1196(sp)
10004c38:	e005883a 	mov	r2,fp
10004c3c:	e4000007 	ldb	r16,0(fp)
10004c40:	003d0a06 	br	1000406c <__alt_data_end+0xf800406c>
10004c44:	d8c12d17 	ldw	r3,1204(sp)
10004c48:	d9012d17 	ldw	r4,1204(sp)
10004c4c:	da012a17 	ldw	r8,1192(sp)
10004c50:	18c00017 	ldw	r3,0(r3)
10004c54:	df012a15 	stw	fp,1192(sp)
10004c58:	d8012785 	stb	zero,1182(sp)
10004c5c:	d8c13115 	stw	r3,1220(sp)
10004c60:	9839883a 	mov	fp,r19
10004c64:	24800104 	addi	r18,r4,4
10004c68:	1803f726 	beq	r3,zero,10005c48 <___vfprintf_internal_r+0x1d7c>
10004c6c:	d9013117 	ldw	r4,1220(sp)
10004c70:	48038916 	blt	r9,zero,10005a98 <___vfprintf_internal_r+0x1bcc>
10004c74:	480d883a 	mov	r6,r9
10004c78:	000b883a 	mov	r5,zero
10004c7c:	da013f15 	stw	r8,1276(sp)
10004c80:	da413e15 	stw	r9,1272(sp)
10004c84:	00094e00 	call	100094e0 <memchr>
10004c88:	da013f17 	ldw	r8,1276(sp)
10004c8c:	da413e17 	ldw	r9,1272(sp)
10004c90:	10045926 	beq	r2,zero,10005df8 <___vfprintf_internal_r+0x1f2c>
10004c94:	d8c13117 	ldw	r3,1220(sp)
10004c98:	10e3c83a 	sub	r17,r2,r3
10004c9c:	4c433516 	blt	r9,r17,10005974 <___vfprintf_internal_r+0x1aa8>
10004ca0:	8805883a 	mov	r2,r17
10004ca4:	88038116 	blt	r17,zero,10005aac <___vfprintf_internal_r+0x1be0>
10004ca8:	dcc12783 	ldbu	r19,1182(sp)
10004cac:	d8812b15 	stw	r2,1196(sp)
10004cb0:	dc812d15 	stw	r18,1204(sp)
10004cb4:	d8013215 	stw	zero,1224(sp)
10004cb8:	d8013415 	stw	zero,1232(sp)
10004cbc:	003e0306 	br	100044cc <__alt_data_end+0xf80044cc>
10004cc0:	da012a17 	ldw	r8,1192(sp)
10004cc4:	df012a15 	stw	fp,1192(sp)
10004cc8:	9839883a 	mov	fp,r19
10004ccc:	dcc12b03 	ldbu	r19,1196(sp)
10004cd0:	dcc12785 	stb	r19,1182(sp)
10004cd4:	803d8f26 	beq	r16,zero,10004314 <__alt_data_end+0xf8004314>
10004cd8:	00c00044 	movi	r3,1
10004cdc:	d8c12b15 	stw	r3,1196(sp)
10004ce0:	dc010405 	stb	r16,1040(sp)
10004ce4:	d8012785 	stb	zero,1182(sp)
10004ce8:	003fb506 	br	10004bc0 <__alt_data_end+0xf8004bc0>
10004cec:	d8c12017 	ldw	r3,1152(sp)
10004cf0:	003e3506 	br	100045c8 <__alt_data_end+0xf80045c8>
10004cf4:	10803fcc 	andi	r2,r2,255
10004cf8:	00c00044 	movi	r3,1
10004cfc:	10fddc1e 	bne	r2,r3,10004470 <__alt_data_end+0xf8004470>
10004d00:	a800021e 	bne	r21,zero,10004d0c <___vfprintf_internal_r+0xe40>
10004d04:	00800244 	movi	r2,9
10004d08:	14801e2e 	bgeu	r2,r18,10004d84 <___vfprintf_internal_r+0xeb8>
10004d0c:	dc012b15 	stw	r16,1196(sp)
10004d10:	dc410e04 	addi	r17,sp,1080
10004d14:	9021883a 	mov	r16,r18
10004d18:	da012c15 	stw	r8,1200(sp)
10004d1c:	a825883a 	mov	r18,r21
10004d20:	482b883a 	mov	r21,r9
10004d24:	8009883a 	mov	r4,r16
10004d28:	900b883a 	mov	r5,r18
10004d2c:	01800284 	movi	r6,10
10004d30:	000f883a 	mov	r7,zero
10004d34:	000d8040 	call	1000d804 <__umoddi3>
10004d38:	10800c04 	addi	r2,r2,48
10004d3c:	8c7fffc4 	addi	r17,r17,-1
10004d40:	8009883a 	mov	r4,r16
10004d44:	900b883a 	mov	r5,r18
10004d48:	01800284 	movi	r6,10
10004d4c:	000f883a 	mov	r7,zero
10004d50:	88800005 	stb	r2,0(r17)
10004d54:	000d1c40 	call	1000d1c4 <__udivdi3>
10004d58:	1021883a 	mov	r16,r2
10004d5c:	10c4b03a 	or	r2,r2,r3
10004d60:	1825883a 	mov	r18,r3
10004d64:	103fef1e 	bne	r2,zero,10004d24 <__alt_data_end+0xf8004d24>
10004d68:	d9012817 	ldw	r4,1184(sp)
10004d6c:	dc413115 	stw	r17,1220(sp)
10004d70:	dc012b17 	ldw	r16,1196(sp)
10004d74:	da012c17 	ldw	r8,1200(sp)
10004d78:	a813883a 	mov	r9,r21
10004d7c:	2463c83a 	sub	r17,r4,r17
10004d80:	003dcd06 	br	100044b8 <__alt_data_end+0xf80044b8>
10004d84:	94800c04 	addi	r18,r18,48
10004d88:	d8c10dc4 	addi	r3,sp,1079
10004d8c:	dc810dc5 	stb	r18,1079(sp)
10004d90:	dc413c17 	ldw	r17,1264(sp)
10004d94:	d8c13115 	stw	r3,1220(sp)
10004d98:	003dc706 	br	100044b8 <__alt_data_end+0xf80044b8>
10004d9c:	00801944 	movi	r2,101
10004da0:	1400720e 	bge	r2,r16,10004f6c <___vfprintf_internal_r+0x10a0>
10004da4:	d9013717 	ldw	r4,1244(sp)
10004da8:	d9413917 	ldw	r5,1252(sp)
10004dac:	000d883a 	mov	r6,zero
10004db0:	000f883a 	mov	r7,zero
10004db4:	d8c13d15 	stw	r3,1268(sp)
10004db8:	da013f15 	stw	r8,1276(sp)
10004dbc:	000f03c0 	call	1000f03c <__eqdf2>
10004dc0:	d8c13d17 	ldw	r3,1268(sp)
10004dc4:	da013f17 	ldw	r8,1276(sp)
10004dc8:	1000f41e 	bne	r2,zero,1000519c <___vfprintf_internal_r+0x12d0>
10004dcc:	d8811f17 	ldw	r2,1148(sp)
10004dd0:	01040074 	movhi	r4,4097
10004dd4:	2114d204 	addi	r4,r4,21320
10004dd8:	18c00044 	addi	r3,r3,1
10004ddc:	10800044 	addi	r2,r2,1
10004de0:	41000015 	stw	r4,0(r8)
10004de4:	01000044 	movi	r4,1
10004de8:	41000115 	stw	r4,4(r8)
10004dec:	d8c12015 	stw	r3,1152(sp)
10004df0:	d8811f15 	stw	r2,1148(sp)
10004df4:	010001c4 	movi	r4,7
10004df8:	20828d16 	blt	r4,r2,10005830 <___vfprintf_internal_r+0x1964>
10004dfc:	42000204 	addi	r8,r8,8
10004e00:	d8812617 	ldw	r2,1176(sp)
10004e04:	d9413317 	ldw	r5,1228(sp)
10004e08:	11400216 	blt	r2,r5,10004e14 <___vfprintf_internal_r+0xf48>
10004e0c:	e080004c 	andi	r2,fp,1
10004e10:	103e4126 	beq	r2,zero,10004718 <__alt_data_end+0xf8004718>
10004e14:	d8813817 	ldw	r2,1248(sp)
10004e18:	d9013517 	ldw	r4,1236(sp)
10004e1c:	d9413817 	ldw	r5,1248(sp)
10004e20:	1887883a 	add	r3,r3,r2
10004e24:	d8811f17 	ldw	r2,1148(sp)
10004e28:	41000015 	stw	r4,0(r8)
10004e2c:	41400115 	stw	r5,4(r8)
10004e30:	10800044 	addi	r2,r2,1
10004e34:	d8c12015 	stw	r3,1152(sp)
10004e38:	d8811f15 	stw	r2,1148(sp)
10004e3c:	010001c4 	movi	r4,7
10004e40:	20830916 	blt	r4,r2,10005a68 <___vfprintf_internal_r+0x1b9c>
10004e44:	42000204 	addi	r8,r8,8
10004e48:	d8813317 	ldw	r2,1228(sp)
10004e4c:	143fffc4 	addi	r16,r2,-1
10004e50:	043e310e 	bge	zero,r16,10004718 <__alt_data_end+0xf8004718>
10004e54:	04400404 	movi	r17,16
10004e58:	d8811f17 	ldw	r2,1148(sp)
10004e5c:	8c007e0e 	bge	r17,r16,10005058 <___vfprintf_internal_r+0x118c>
10004e60:	01440074 	movhi	r5,4097
10004e64:	2954d284 	addi	r5,r5,21322
10004e68:	d9412c15 	stw	r5,1200(sp)
10004e6c:	04c001c4 	movi	r19,7
10004e70:	00000306 	br	10004e80 <___vfprintf_internal_r+0xfb4>
10004e74:	42000204 	addi	r8,r8,8
10004e78:	843ffc04 	addi	r16,r16,-16
10004e7c:	8c00790e 	bge	r17,r16,10005064 <___vfprintf_internal_r+0x1198>
10004e80:	18c00404 	addi	r3,r3,16
10004e84:	10800044 	addi	r2,r2,1
10004e88:	45000015 	stw	r20,0(r8)
10004e8c:	44400115 	stw	r17,4(r8)
10004e90:	d8c12015 	stw	r3,1152(sp)
10004e94:	d8811f15 	stw	r2,1148(sp)
10004e98:	98bff60e 	bge	r19,r2,10004e74 <__alt_data_end+0xf8004e74>
10004e9c:	b809883a 	mov	r4,r23
10004ea0:	b00b883a 	mov	r5,r22
10004ea4:	d9811e04 	addi	r6,sp,1144
10004ea8:	000b30c0 	call	1000b30c <__sprint_r>
10004eac:	103d1f1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10004eb0:	d8c12017 	ldw	r3,1152(sp)
10004eb4:	d8811f17 	ldw	r2,1148(sp)
10004eb8:	da000404 	addi	r8,sp,16
10004ebc:	003fee06 	br	10004e78 <__alt_data_end+0xf8004e78>
10004ec0:	d9412e17 	ldw	r5,1208(sp)
10004ec4:	d8812b17 	ldw	r2,1196(sp)
10004ec8:	28a7c83a 	sub	r19,r5,r2
10004ecc:	04fddc0e 	bge	zero,r19,10004640 <__alt_data_end+0xf8004640>
10004ed0:	05400404 	movi	r21,16
10004ed4:	d8811f17 	ldw	r2,1148(sp)
10004ed8:	acc3870e 	bge	r21,r19,10005cf8 <___vfprintf_internal_r+0x1e2c>
10004edc:	01440074 	movhi	r5,4097
10004ee0:	2954d284 	addi	r5,r5,21322
10004ee4:	d9412c15 	stw	r5,1200(sp)
10004ee8:	048001c4 	movi	r18,7
10004eec:	00000306 	br	10004efc <___vfprintf_internal_r+0x1030>
10004ef0:	9cfffc04 	addi	r19,r19,-16
10004ef4:	42000204 	addi	r8,r8,8
10004ef8:	acc0110e 	bge	r21,r19,10004f40 <___vfprintf_internal_r+0x1074>
10004efc:	18c00404 	addi	r3,r3,16
10004f00:	10800044 	addi	r2,r2,1
10004f04:	45000015 	stw	r20,0(r8)
10004f08:	45400115 	stw	r21,4(r8)
10004f0c:	d8c12015 	stw	r3,1152(sp)
10004f10:	d8811f15 	stw	r2,1148(sp)
10004f14:	90bff60e 	bge	r18,r2,10004ef0 <__alt_data_end+0xf8004ef0>
10004f18:	b809883a 	mov	r4,r23
10004f1c:	b00b883a 	mov	r5,r22
10004f20:	d9811e04 	addi	r6,sp,1144
10004f24:	000b30c0 	call	1000b30c <__sprint_r>
10004f28:	103d001e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10004f2c:	9cfffc04 	addi	r19,r19,-16
10004f30:	d8c12017 	ldw	r3,1152(sp)
10004f34:	d8811f17 	ldw	r2,1148(sp)
10004f38:	da000404 	addi	r8,sp,16
10004f3c:	acffef16 	blt	r21,r19,10004efc <__alt_data_end+0xf8004efc>
10004f40:	d9012c17 	ldw	r4,1200(sp)
10004f44:	1cc7883a 	add	r3,r3,r19
10004f48:	10800044 	addi	r2,r2,1
10004f4c:	41000015 	stw	r4,0(r8)
10004f50:	44c00115 	stw	r19,4(r8)
10004f54:	d8c12015 	stw	r3,1152(sp)
10004f58:	d8811f15 	stw	r2,1148(sp)
10004f5c:	010001c4 	movi	r4,7
10004f60:	20817816 	blt	r4,r2,10005544 <___vfprintf_internal_r+0x1678>
10004f64:	42000204 	addi	r8,r8,8
10004f68:	003db506 	br	10004640 <__alt_data_end+0xf8004640>
10004f6c:	d9413317 	ldw	r5,1228(sp)
10004f70:	00800044 	movi	r2,1
10004f74:	18c00044 	addi	r3,r3,1
10004f78:	11413e0e 	bge	r2,r5,10005474 <___vfprintf_internal_r+0x15a8>
10004f7c:	dc011f17 	ldw	r16,1148(sp)
10004f80:	d8813117 	ldw	r2,1220(sp)
10004f84:	d8c12015 	stw	r3,1152(sp)
10004f88:	84000044 	addi	r16,r16,1
10004f8c:	40800015 	stw	r2,0(r8)
10004f90:	00800044 	movi	r2,1
10004f94:	40800115 	stw	r2,4(r8)
10004f98:	dc011f15 	stw	r16,1148(sp)
10004f9c:	008001c4 	movi	r2,7
10004fa0:	14015616 	blt	r2,r16,100054fc <___vfprintf_internal_r+0x1630>
10004fa4:	42000204 	addi	r8,r8,8
10004fa8:	d9013817 	ldw	r4,1248(sp)
10004fac:	d9413517 	ldw	r5,1236(sp)
10004fb0:	84000044 	addi	r16,r16,1
10004fb4:	1907883a 	add	r3,r3,r4
10004fb8:	41400015 	stw	r5,0(r8)
10004fbc:	41000115 	stw	r4,4(r8)
10004fc0:	d8c12015 	stw	r3,1152(sp)
10004fc4:	dc011f15 	stw	r16,1148(sp)
10004fc8:	008001c4 	movi	r2,7
10004fcc:	14015416 	blt	r2,r16,10005520 <___vfprintf_internal_r+0x1654>
10004fd0:	44400204 	addi	r17,r8,8
10004fd4:	d9013717 	ldw	r4,1244(sp)
10004fd8:	d9413917 	ldw	r5,1252(sp)
10004fdc:	000d883a 	mov	r6,zero
10004fe0:	000f883a 	mov	r7,zero
10004fe4:	d8c13d15 	stw	r3,1268(sp)
10004fe8:	000f03c0 	call	1000f03c <__eqdf2>
10004fec:	d8c13d17 	ldw	r3,1268(sp)
10004ff0:	1000a726 	beq	r2,zero,10005290 <___vfprintf_internal_r+0x13c4>
10004ff4:	d9013317 	ldw	r4,1228(sp)
10004ff8:	d9413117 	ldw	r5,1220(sp)
10004ffc:	84000044 	addi	r16,r16,1
10005000:	20bfffc4 	addi	r2,r4,-1
10005004:	1887883a 	add	r3,r3,r2
10005008:	29000044 	addi	r4,r5,1
1000500c:	88800115 	stw	r2,4(r17)
10005010:	89000015 	stw	r4,0(r17)
10005014:	d8c12015 	stw	r3,1152(sp)
10005018:	dc011f15 	stw	r16,1148(sp)
1000501c:	008001c4 	movi	r2,7
10005020:	14012d16 	blt	r2,r16,100054d8 <___vfprintf_internal_r+0x160c>
10005024:	8c400204 	addi	r17,r17,8
10005028:	d9413a17 	ldw	r5,1256(sp)
1000502c:	dcc122c4 	addi	r19,sp,1163
10005030:	84000044 	addi	r16,r16,1
10005034:	28c7883a 	add	r3,r5,r3
10005038:	8cc00015 	stw	r19,0(r17)
1000503c:	89400115 	stw	r5,4(r17)
10005040:	d8c12015 	stw	r3,1152(sp)
10005044:	dc011f15 	stw	r16,1148(sp)
10005048:	008001c4 	movi	r2,7
1000504c:	14000e16 	blt	r2,r16,10005088 <___vfprintf_internal_r+0x11bc>
10005050:	8a000204 	addi	r8,r17,8
10005054:	003db006 	br	10004718 <__alt_data_end+0xf8004718>
10005058:	01040074 	movhi	r4,4097
1000505c:	2114d284 	addi	r4,r4,21322
10005060:	d9012c15 	stw	r4,1200(sp)
10005064:	d9012c17 	ldw	r4,1200(sp)
10005068:	1c07883a 	add	r3,r3,r16
1000506c:	44000115 	stw	r16,4(r8)
10005070:	41000015 	stw	r4,0(r8)
10005074:	10800044 	addi	r2,r2,1
10005078:	d8c12015 	stw	r3,1152(sp)
1000507c:	d8811f15 	stw	r2,1148(sp)
10005080:	010001c4 	movi	r4,7
10005084:	20bda30e 	bge	r4,r2,10004714 <__alt_data_end+0xf8004714>
10005088:	b809883a 	mov	r4,r23
1000508c:	b00b883a 	mov	r5,r22
10005090:	d9811e04 	addi	r6,sp,1144
10005094:	000b30c0 	call	1000b30c <__sprint_r>
10005098:	103ca41e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
1000509c:	d8c12017 	ldw	r3,1152(sp)
100050a0:	da000404 	addi	r8,sp,16
100050a4:	003d9c06 	br	10004718 <__alt_data_end+0xf8004718>
100050a8:	b809883a 	mov	r4,r23
100050ac:	b00b883a 	mov	r5,r22
100050b0:	d9811e04 	addi	r6,sp,1144
100050b4:	000b30c0 	call	1000b30c <__sprint_r>
100050b8:	103dd226 	beq	r2,zero,10004804 <__alt_data_end+0xf8004804>
100050bc:	003c9b06 	br	1000432c <__alt_data_end+0xf800432c>
100050c0:	10803fcc 	andi	r2,r2,255
100050c4:	1000311e 	bne	r2,zero,1000518c <___vfprintf_internal_r+0x12c0>
100050c8:	e080004c 	andi	r2,fp,1
100050cc:	10002f26 	beq	r2,zero,1000518c <___vfprintf_internal_r+0x12c0>
100050d0:	00800c04 	movi	r2,48
100050d4:	d8c10dc4 	addi	r3,sp,1079
100050d8:	d8810dc5 	stb	r2,1079(sp)
100050dc:	dc413c17 	ldw	r17,1264(sp)
100050e0:	d8c13115 	stw	r3,1220(sp)
100050e4:	003cf406 	br	100044b8 <__alt_data_end+0xf80044b8>
100050e8:	b809883a 	mov	r4,r23
100050ec:	b00b883a 	mov	r5,r22
100050f0:	d9811e04 	addi	r6,sp,1144
100050f4:	000b30c0 	call	1000b30c <__sprint_r>
100050f8:	103c8c1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
100050fc:	d8c12017 	ldw	r3,1152(sp)
10005100:	da000404 	addi	r8,sp,16
10005104:	003d7706 	br	100046e4 <__alt_data_end+0xf80046e4>
10005108:	b809883a 	mov	r4,r23
1000510c:	b00b883a 	mov	r5,r22
10005110:	d9811e04 	addi	r6,sp,1144
10005114:	000b30c0 	call	1000b30c <__sprint_r>
10005118:	103c841e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
1000511c:	d8c12017 	ldw	r3,1152(sp)
10005120:	da000404 	addi	r8,sp,16
10005124:	003d3506 	br	100045fc <__alt_data_end+0xf80045fc>
10005128:	b809883a 	mov	r4,r23
1000512c:	b00b883a 	mov	r5,r22
10005130:	d9811e04 	addi	r6,sp,1144
10005134:	000b30c0 	call	1000b30c <__sprint_r>
10005138:	103c7c1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
1000513c:	d8c12017 	ldw	r3,1152(sp)
10005140:	da000404 	addi	r8,sp,16
10005144:	003d3b06 	br	10004634 <__alt_data_end+0xf8004634>
10005148:	d9413b17 	ldw	r5,1260(sp)
1000514c:	d8c10e04 	addi	r3,sp,1080
10005150:	908003cc 	andi	r2,r18,15
10005154:	a808973a 	slli	r4,r21,28
10005158:	2885883a 	add	r2,r5,r2
1000515c:	9024d13a 	srli	r18,r18,4
10005160:	10800003 	ldbu	r2,0(r2)
10005164:	a82ad13a 	srli	r21,r21,4
10005168:	18ffffc4 	addi	r3,r3,-1
1000516c:	24a4b03a 	or	r18,r4,r18
10005170:	18800005 	stb	r2,0(r3)
10005174:	9544b03a 	or	r2,r18,r21
10005178:	103ff51e 	bne	r2,zero,10005150 <__alt_data_end+0xf8005150>
1000517c:	d9412817 	ldw	r5,1184(sp)
10005180:	d8c13115 	stw	r3,1220(sp)
10005184:	28e3c83a 	sub	r17,r5,r3
10005188:	003ccb06 	br	100044b8 <__alt_data_end+0xf80044b8>
1000518c:	d8c10e04 	addi	r3,sp,1080
10005190:	0023883a 	mov	r17,zero
10005194:	d8c13115 	stw	r3,1220(sp)
10005198:	003cc706 	br	100044b8 <__alt_data_end+0xf80044b8>
1000519c:	dc012617 	ldw	r16,1176(sp)
100051a0:	0401ab0e 	bge	zero,r16,10005850 <___vfprintf_internal_r+0x1984>
100051a4:	d8813317 	ldw	r2,1228(sp)
100051a8:	d9413117 	ldw	r5,1220(sp)
100051ac:	d9013417 	ldw	r4,1232(sp)
100051b0:	1023883a 	mov	r17,r2
100051b4:	28a1883a 	add	r16,r5,r2
100051b8:	2080010e 	bge	r4,r2,100051c0 <___vfprintf_internal_r+0x12f4>
100051bc:	2023883a 	mov	r17,r4
100051c0:	04400b0e 	bge	zero,r17,100051f0 <___vfprintf_internal_r+0x1324>
100051c4:	d8811f17 	ldw	r2,1148(sp)
100051c8:	d9413117 	ldw	r5,1220(sp)
100051cc:	1c47883a 	add	r3,r3,r17
100051d0:	10800044 	addi	r2,r2,1
100051d4:	41400015 	stw	r5,0(r8)
100051d8:	44400115 	stw	r17,4(r8)
100051dc:	d8c12015 	stw	r3,1152(sp)
100051e0:	d8811f15 	stw	r2,1148(sp)
100051e4:	010001c4 	movi	r4,7
100051e8:	20826716 	blt	r4,r2,10005b88 <___vfprintf_internal_r+0x1cbc>
100051ec:	42000204 	addi	r8,r8,8
100051f0:	88026316 	blt	r17,zero,10005b80 <___vfprintf_internal_r+0x1cb4>
100051f4:	d8813417 	ldw	r2,1232(sp)
100051f8:	1463c83a 	sub	r17,r2,r17
100051fc:	0440590e 	bge	zero,r17,10005364 <___vfprintf_internal_r+0x1498>
10005200:	04c00404 	movi	r19,16
10005204:	d8811f17 	ldw	r2,1148(sp)
10005208:	9c41770e 	bge	r19,r17,100057e8 <___vfprintf_internal_r+0x191c>
1000520c:	01440074 	movhi	r5,4097
10005210:	2954d284 	addi	r5,r5,21322
10005214:	d9412c15 	stw	r5,1200(sp)
10005218:	054001c4 	movi	r21,7
1000521c:	00000306 	br	1000522c <___vfprintf_internal_r+0x1360>
10005220:	42000204 	addi	r8,r8,8
10005224:	8c7ffc04 	addi	r17,r17,-16
10005228:	9c41720e 	bge	r19,r17,100057f4 <___vfprintf_internal_r+0x1928>
1000522c:	18c00404 	addi	r3,r3,16
10005230:	10800044 	addi	r2,r2,1
10005234:	45000015 	stw	r20,0(r8)
10005238:	44c00115 	stw	r19,4(r8)
1000523c:	d8c12015 	stw	r3,1152(sp)
10005240:	d8811f15 	stw	r2,1148(sp)
10005244:	a8bff60e 	bge	r21,r2,10005220 <__alt_data_end+0xf8005220>
10005248:	b809883a 	mov	r4,r23
1000524c:	b00b883a 	mov	r5,r22
10005250:	d9811e04 	addi	r6,sp,1144
10005254:	000b30c0 	call	1000b30c <__sprint_r>
10005258:	103c341e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
1000525c:	d8c12017 	ldw	r3,1152(sp)
10005260:	d8811f17 	ldw	r2,1148(sp)
10005264:	da000404 	addi	r8,sp,16
10005268:	003fee06 	br	10005224 <__alt_data_end+0xf8005224>
1000526c:	b809883a 	mov	r4,r23
10005270:	b00b883a 	mov	r5,r22
10005274:	d9811e04 	addi	r6,sp,1144
10005278:	000b30c0 	call	1000b30c <__sprint_r>
1000527c:	103c2b1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005280:	d8c12017 	ldw	r3,1152(sp)
10005284:	d8812787 	ldb	r2,1182(sp)
10005288:	da000404 	addi	r8,sp,16
1000528c:	003cce06 	br	100045c8 <__alt_data_end+0xf80045c8>
10005290:	d8813317 	ldw	r2,1228(sp)
10005294:	14ffffc4 	addi	r19,r2,-1
10005298:	04ff630e 	bge	zero,r19,10005028 <__alt_data_end+0xf8005028>
1000529c:	05400404 	movi	r21,16
100052a0:	acc0810e 	bge	r21,r19,100054a8 <___vfprintf_internal_r+0x15dc>
100052a4:	01440074 	movhi	r5,4097
100052a8:	2954d284 	addi	r5,r5,21322
100052ac:	d9412c15 	stw	r5,1200(sp)
100052b0:	01c001c4 	movi	r7,7
100052b4:	00000306 	br	100052c4 <___vfprintf_internal_r+0x13f8>
100052b8:	8c400204 	addi	r17,r17,8
100052bc:	9cfffc04 	addi	r19,r19,-16
100052c0:	acc07c0e 	bge	r21,r19,100054b4 <___vfprintf_internal_r+0x15e8>
100052c4:	18c00404 	addi	r3,r3,16
100052c8:	84000044 	addi	r16,r16,1
100052cc:	8d000015 	stw	r20,0(r17)
100052d0:	8d400115 	stw	r21,4(r17)
100052d4:	d8c12015 	stw	r3,1152(sp)
100052d8:	dc011f15 	stw	r16,1148(sp)
100052dc:	3c3ff60e 	bge	r7,r16,100052b8 <__alt_data_end+0xf80052b8>
100052e0:	b809883a 	mov	r4,r23
100052e4:	b00b883a 	mov	r5,r22
100052e8:	d9811e04 	addi	r6,sp,1144
100052ec:	d9c13d15 	stw	r7,1268(sp)
100052f0:	000b30c0 	call	1000b30c <__sprint_r>
100052f4:	d9c13d17 	ldw	r7,1268(sp)
100052f8:	103c0c1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
100052fc:	d8c12017 	ldw	r3,1152(sp)
10005300:	dc011f17 	ldw	r16,1148(sp)
10005304:	dc400404 	addi	r17,sp,16
10005308:	003fec06 	br	100052bc <__alt_data_end+0xf80052bc>
1000530c:	00800084 	movi	r2,2
10005310:	9546b03a 	or	r3,r18,r21
10005314:	003d7d06 	br	1000490c <__alt_data_end+0xf800490c>
10005318:	10803fcc 	andi	r2,r2,255
1000531c:	1080201c 	xori	r2,r2,128
10005320:	10bfe004 	addi	r2,r2,-128
10005324:	01000c04 	movi	r4,48
10005328:	1101d726 	beq	r2,r4,10005a88 <___vfprintf_internal_r+0x1bbc>
1000532c:	d9413117 	ldw	r5,1220(sp)
10005330:	d8812817 	ldw	r2,1184(sp)
10005334:	193fffc5 	stb	r4,-1(r3)
10005338:	297fffc4 	addi	r5,r5,-1
1000533c:	d9413115 	stw	r5,1220(sp)
10005340:	1163c83a 	sub	r17,r2,r5
10005344:	003c5c06 	br	100044b8 <__alt_data_end+0xf80044b8>
10005348:	b809883a 	mov	r4,r23
1000534c:	b00b883a 	mov	r5,r22
10005350:	d9811e04 	addi	r6,sp,1144
10005354:	000b30c0 	call	1000b30c <__sprint_r>
10005358:	103bf41e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
1000535c:	d8c12017 	ldw	r3,1152(sp)
10005360:	da000404 	addi	r8,sp,16
10005364:	d9413117 	ldw	r5,1220(sp)
10005368:	d9013417 	ldw	r4,1232(sp)
1000536c:	d8812617 	ldw	r2,1176(sp)
10005370:	2923883a 	add	r17,r5,r4
10005374:	d9413317 	ldw	r5,1228(sp)
10005378:	11400216 	blt	r2,r5,10005384 <___vfprintf_internal_r+0x14b8>
1000537c:	e100004c 	andi	r4,fp,1
10005380:	20000d26 	beq	r4,zero,100053b8 <___vfprintf_internal_r+0x14ec>
10005384:	d9013817 	ldw	r4,1248(sp)
10005388:	d9413517 	ldw	r5,1236(sp)
1000538c:	1907883a 	add	r3,r3,r4
10005390:	d9011f17 	ldw	r4,1148(sp)
10005394:	41400015 	stw	r5,0(r8)
10005398:	d9413817 	ldw	r5,1248(sp)
1000539c:	21000044 	addi	r4,r4,1
100053a0:	d8c12015 	stw	r3,1152(sp)
100053a4:	41400115 	stw	r5,4(r8)
100053a8:	d9011f15 	stw	r4,1148(sp)
100053ac:	014001c4 	movi	r5,7
100053b0:	2901fd16 	blt	r5,r4,10005ba8 <___vfprintf_internal_r+0x1cdc>
100053b4:	42000204 	addi	r8,r8,8
100053b8:	d9013317 	ldw	r4,1228(sp)
100053bc:	2085c83a 	sub	r2,r4,r2
100053c0:	8449c83a 	sub	r4,r16,r17
100053c4:	1021883a 	mov	r16,r2
100053c8:	2080010e 	bge	r4,r2,100053d0 <___vfprintf_internal_r+0x1504>
100053cc:	2021883a 	mov	r16,r4
100053d0:	04000a0e 	bge	zero,r16,100053fc <___vfprintf_internal_r+0x1530>
100053d4:	d9011f17 	ldw	r4,1148(sp)
100053d8:	1c07883a 	add	r3,r3,r16
100053dc:	44400015 	stw	r17,0(r8)
100053e0:	21000044 	addi	r4,r4,1
100053e4:	44000115 	stw	r16,4(r8)
100053e8:	d8c12015 	stw	r3,1152(sp)
100053ec:	d9011f15 	stw	r4,1148(sp)
100053f0:	014001c4 	movi	r5,7
100053f4:	29020916 	blt	r5,r4,10005c1c <___vfprintf_internal_r+0x1d50>
100053f8:	42000204 	addi	r8,r8,8
100053fc:	80020116 	blt	r16,zero,10005c04 <___vfprintf_internal_r+0x1d38>
10005400:	1421c83a 	sub	r16,r2,r16
10005404:	043cc40e 	bge	zero,r16,10004718 <__alt_data_end+0xf8004718>
10005408:	04400404 	movi	r17,16
1000540c:	d8811f17 	ldw	r2,1148(sp)
10005410:	8c3f110e 	bge	r17,r16,10005058 <__alt_data_end+0xf8005058>
10005414:	01440074 	movhi	r5,4097
10005418:	2954d284 	addi	r5,r5,21322
1000541c:	d9412c15 	stw	r5,1200(sp)
10005420:	04c001c4 	movi	r19,7
10005424:	00000306 	br	10005434 <___vfprintf_internal_r+0x1568>
10005428:	42000204 	addi	r8,r8,8
1000542c:	843ffc04 	addi	r16,r16,-16
10005430:	8c3f0c0e 	bge	r17,r16,10005064 <__alt_data_end+0xf8005064>
10005434:	18c00404 	addi	r3,r3,16
10005438:	10800044 	addi	r2,r2,1
1000543c:	45000015 	stw	r20,0(r8)
10005440:	44400115 	stw	r17,4(r8)
10005444:	d8c12015 	stw	r3,1152(sp)
10005448:	d8811f15 	stw	r2,1148(sp)
1000544c:	98bff60e 	bge	r19,r2,10005428 <__alt_data_end+0xf8005428>
10005450:	b809883a 	mov	r4,r23
10005454:	b00b883a 	mov	r5,r22
10005458:	d9811e04 	addi	r6,sp,1144
1000545c:	000b30c0 	call	1000b30c <__sprint_r>
10005460:	103bb21e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005464:	d8c12017 	ldw	r3,1152(sp)
10005468:	d8811f17 	ldw	r2,1148(sp)
1000546c:	da000404 	addi	r8,sp,16
10005470:	003fee06 	br	1000542c <__alt_data_end+0xf800542c>
10005474:	e088703a 	and	r4,fp,r2
10005478:	203ec01e 	bne	r4,zero,10004f7c <__alt_data_end+0xf8004f7c>
1000547c:	dc011f17 	ldw	r16,1148(sp)
10005480:	d9013117 	ldw	r4,1220(sp)
10005484:	40800115 	stw	r2,4(r8)
10005488:	84000044 	addi	r16,r16,1
1000548c:	41000015 	stw	r4,0(r8)
10005490:	d8c12015 	stw	r3,1152(sp)
10005494:	dc011f15 	stw	r16,1148(sp)
10005498:	008001c4 	movi	r2,7
1000549c:	14000e16 	blt	r2,r16,100054d8 <___vfprintf_internal_r+0x160c>
100054a0:	44400204 	addi	r17,r8,8
100054a4:	003ee006 	br	10005028 <__alt_data_end+0xf8005028>
100054a8:	01040074 	movhi	r4,4097
100054ac:	2114d284 	addi	r4,r4,21322
100054b0:	d9012c15 	stw	r4,1200(sp)
100054b4:	d8812c17 	ldw	r2,1200(sp)
100054b8:	1cc7883a 	add	r3,r3,r19
100054bc:	84000044 	addi	r16,r16,1
100054c0:	88800015 	stw	r2,0(r17)
100054c4:	8cc00115 	stw	r19,4(r17)
100054c8:	d8c12015 	stw	r3,1152(sp)
100054cc:	dc011f15 	stw	r16,1148(sp)
100054d0:	008001c4 	movi	r2,7
100054d4:	143ed30e 	bge	r2,r16,10005024 <__alt_data_end+0xf8005024>
100054d8:	b809883a 	mov	r4,r23
100054dc:	b00b883a 	mov	r5,r22
100054e0:	d9811e04 	addi	r6,sp,1144
100054e4:	000b30c0 	call	1000b30c <__sprint_r>
100054e8:	103b901e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
100054ec:	d8c12017 	ldw	r3,1152(sp)
100054f0:	dc011f17 	ldw	r16,1148(sp)
100054f4:	dc400404 	addi	r17,sp,16
100054f8:	003ecb06 	br	10005028 <__alt_data_end+0xf8005028>
100054fc:	b809883a 	mov	r4,r23
10005500:	b00b883a 	mov	r5,r22
10005504:	d9811e04 	addi	r6,sp,1144
10005508:	000b30c0 	call	1000b30c <__sprint_r>
1000550c:	103b871e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005510:	d8c12017 	ldw	r3,1152(sp)
10005514:	dc011f17 	ldw	r16,1148(sp)
10005518:	da000404 	addi	r8,sp,16
1000551c:	003ea206 	br	10004fa8 <__alt_data_end+0xf8004fa8>
10005520:	b809883a 	mov	r4,r23
10005524:	b00b883a 	mov	r5,r22
10005528:	d9811e04 	addi	r6,sp,1144
1000552c:	000b30c0 	call	1000b30c <__sprint_r>
10005530:	103b7e1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005534:	d8c12017 	ldw	r3,1152(sp)
10005538:	dc011f17 	ldw	r16,1148(sp)
1000553c:	dc400404 	addi	r17,sp,16
10005540:	003ea406 	br	10004fd4 <__alt_data_end+0xf8004fd4>
10005544:	b809883a 	mov	r4,r23
10005548:	b00b883a 	mov	r5,r22
1000554c:	d9811e04 	addi	r6,sp,1144
10005550:	000b30c0 	call	1000b30c <__sprint_r>
10005554:	103b751e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005558:	d8c12017 	ldw	r3,1152(sp)
1000555c:	da000404 	addi	r8,sp,16
10005560:	003c3706 	br	10004640 <__alt_data_end+0xf8004640>
10005564:	04a5c83a 	sub	r18,zero,r18
10005568:	9004c03a 	cmpne	r2,r18,zero
1000556c:	056bc83a 	sub	r21,zero,r21
10005570:	a8abc83a 	sub	r21,r21,r2
10005574:	04c00b44 	movi	r19,45
10005578:	dcc12785 	stb	r19,1182(sp)
1000557c:	da413215 	stw	r9,1224(sp)
10005580:	00800044 	movi	r2,1
10005584:	9546b03a 	or	r3,r18,r21
10005588:	003bb106 	br	10004450 <__alt_data_end+0xf8004450>
1000558c:	da013f15 	stw	r8,1276(sp)
10005590:	da413e15 	stw	r9,1272(sp)
10005594:	000af680 	call	1000af68 <__fpclassifyd>
10005598:	da013f17 	ldw	r8,1276(sp)
1000559c:	da413e17 	ldw	r9,1272(sp)
100055a0:	1000e526 	beq	r2,zero,10005938 <___vfprintf_internal_r+0x1a6c>
100055a4:	04fff7c4 	movi	r19,-33
100055a8:	00bfffc4 	movi	r2,-1
100055ac:	84e6703a 	and	r19,r16,r19
100055b0:	48822926 	beq	r9,r2,10005e58 <___vfprintf_internal_r+0x1f8c>
100055b4:	008011c4 	movi	r2,71
100055b8:	98821626 	beq	r19,r2,10005e14 <___vfprintf_internal_r+0x1f48>
100055bc:	d9013917 	ldw	r4,1252(sp)
100055c0:	e0c04014 	ori	r3,fp,256
100055c4:	d8c12d15 	stw	r3,1204(sp)
100055c8:	20021f16 	blt	r4,zero,10005e48 <___vfprintf_internal_r+0x1f7c>
100055cc:	dc413917 	ldw	r17,1252(sp)
100055d0:	d8012b05 	stb	zero,1196(sp)
100055d4:	00801984 	movi	r2,102
100055d8:	80814d26 	beq	r16,r2,10005b10 <___vfprintf_internal_r+0x1c44>
100055dc:	00801184 	movi	r2,70
100055e0:	80814b26 	beq	r16,r2,10005b10 <___vfprintf_internal_r+0x1c44>
100055e4:	00801144 	movi	r2,69
100055e8:	98821d26 	beq	r19,r2,10005e60 <___vfprintf_internal_r+0x1f94>
100055ec:	482b883a 	mov	r21,r9
100055f0:	d8812604 	addi	r2,sp,1176
100055f4:	d8800115 	stw	r2,4(sp)
100055f8:	d9413717 	ldw	r5,1244(sp)
100055fc:	d8812504 	addi	r2,sp,1172
10005600:	d8800215 	stw	r2,8(sp)
10005604:	d8812104 	addi	r2,sp,1156
10005608:	dd400015 	stw	r21,0(sp)
1000560c:	d8800315 	stw	r2,12(sp)
10005610:	b809883a 	mov	r4,r23
10005614:	880d883a 	mov	r6,r17
10005618:	01c00084 	movi	r7,2
1000561c:	da013f15 	stw	r8,1276(sp)
10005620:	da413e15 	stw	r9,1272(sp)
10005624:	00063440 	call	10006344 <_dtoa_r>
10005628:	d8813115 	stw	r2,1220(sp)
1000562c:	008019c4 	movi	r2,103
10005630:	da013f17 	ldw	r8,1276(sp)
10005634:	da413e17 	ldw	r9,1272(sp)
10005638:	80800226 	beq	r16,r2,10005644 <___vfprintf_internal_r+0x1778>
1000563c:	008011c4 	movi	r2,71
10005640:	8081451e 	bne	r16,r2,10005b58 <___vfprintf_internal_r+0x1c8c>
10005644:	e080004c 	andi	r2,fp,1
10005648:	10021e26 	beq	r2,zero,10005ec4 <___vfprintf_internal_r+0x1ff8>
1000564c:	d8c13117 	ldw	r3,1220(sp)
10005650:	1d55883a 	add	r10,r3,r21
10005654:	d9013717 	ldw	r4,1244(sp)
10005658:	880b883a 	mov	r5,r17
1000565c:	000d883a 	mov	r6,zero
10005660:	000f883a 	mov	r7,zero
10005664:	da013f15 	stw	r8,1276(sp)
10005668:	da413e15 	stw	r9,1272(sp)
1000566c:	da813d15 	stw	r10,1268(sp)
10005670:	000f03c0 	call	1000f03c <__eqdf2>
10005674:	da013f17 	ldw	r8,1276(sp)
10005678:	da413e17 	ldw	r9,1272(sp)
1000567c:	da813d17 	ldw	r10,1268(sp)
10005680:	1001a126 	beq	r2,zero,10005d08 <___vfprintf_internal_r+0x1e3c>
10005684:	d8812117 	ldw	r2,1156(sp)
10005688:	1280062e 	bgeu	r2,r10,100056a4 <___vfprintf_internal_r+0x17d8>
1000568c:	01000c04 	movi	r4,48
10005690:	10c00044 	addi	r3,r2,1
10005694:	d8c12115 	stw	r3,1156(sp)
10005698:	11000005 	stb	r4,0(r2)
1000569c:	d8812117 	ldw	r2,1156(sp)
100056a0:	12bffb36 	bltu	r2,r10,10005690 <__alt_data_end+0xf8005690>
100056a4:	d8c13117 	ldw	r3,1220(sp)
100056a8:	10c5c83a 	sub	r2,r2,r3
100056ac:	d8813315 	stw	r2,1228(sp)
100056b0:	008011c4 	movi	r2,71
100056b4:	98818926 	beq	r19,r2,10005cdc <___vfprintf_internal_r+0x1e10>
100056b8:	00801944 	movi	r2,101
100056bc:	14023c0e 	bge	r2,r16,10005fb0 <___vfprintf_internal_r+0x20e4>
100056c0:	d8c12617 	ldw	r3,1176(sp)
100056c4:	00801984 	movi	r2,102
100056c8:	d8c13415 	stw	r3,1232(sp)
100056cc:	8081ef26 	beq	r16,r2,10005e8c <___vfprintf_internal_r+0x1fc0>
100056d0:	d8c13417 	ldw	r3,1232(sp)
100056d4:	d9013317 	ldw	r4,1228(sp)
100056d8:	1901e316 	blt	r3,r4,10005e68 <___vfprintf_internal_r+0x1f9c>
100056dc:	e080004c 	andi	r2,fp,1
100056e0:	1001f426 	beq	r2,zero,10005eb4 <___vfprintf_internal_r+0x1fe8>
100056e4:	d8c13417 	ldw	r3,1232(sp)
100056e8:	1c400044 	addi	r17,r3,1
100056ec:	8839883a 	mov	fp,r17
100056f0:	8801e416 	blt	r17,zero,10005e84 <___vfprintf_internal_r+0x1fb8>
100056f4:	dd412b07 	ldb	r21,1196(sp)
100056f8:	a801701e 	bne	r21,zero,10005cbc <___vfprintf_internal_r+0x1df0>
100056fc:	df012b15 	stw	fp,1196(sp)
10005700:	dcc12783 	ldbu	r19,1182(sp)
10005704:	df012d17 	ldw	fp,1204(sp)
10005708:	d8013215 	stw	zero,1224(sp)
1000570c:	dc812d15 	stw	r18,1204(sp)
10005710:	003b6e06 	br	100044cc <__alt_data_end+0xf80044cc>
10005714:	e080040c 	andi	r2,fp,16
10005718:	1000b51e 	bne	r2,zero,100059f0 <___vfprintf_internal_r+0x1b24>
1000571c:	e080100c 	andi	r2,fp,64
10005720:	10015b26 	beq	r2,zero,10005c90 <___vfprintf_internal_r+0x1dc4>
10005724:	d9012d17 	ldw	r4,1204(sp)
10005728:	d9412f17 	ldw	r5,1212(sp)
1000572c:	20800017 	ldw	r2,0(r4)
10005730:	21000104 	addi	r4,r4,4
10005734:	d9012d15 	stw	r4,1204(sp)
10005738:	1140000d 	sth	r5,0(r2)
1000573c:	003a2006 	br	10003fc0 <__alt_data_end+0xf8003fc0>
10005740:	e0c0100c 	andi	r3,fp,64
10005744:	1800a226 	beq	r3,zero,100059d0 <___vfprintf_internal_r+0x1b04>
10005748:	d8c12d17 	ldw	r3,1204(sp)
1000574c:	1480000b 	ldhu	r18,0(r2)
10005750:	002b883a 	mov	r21,zero
10005754:	18c00104 	addi	r3,r3,4
10005758:	d8c12d15 	stw	r3,1204(sp)
1000575c:	0005883a 	mov	r2,zero
10005760:	9007883a 	mov	r3,r18
10005764:	003c6906 	br	1000490c <__alt_data_end+0xf800490c>
10005768:	e0c0100c 	andi	r3,fp,64
1000576c:	18009026 	beq	r3,zero,100059b0 <___vfprintf_internal_r+0x1ae4>
10005770:	1480000b 	ldhu	r18,0(r2)
10005774:	d8812d17 	ldw	r2,1204(sp)
10005778:	002b883a 	mov	r21,zero
1000577c:	9007883a 	mov	r3,r18
10005780:	10800104 	addi	r2,r2,4
10005784:	d8812d15 	stw	r2,1204(sp)
10005788:	00800044 	movi	r2,1
1000578c:	003c5f06 	br	1000490c <__alt_data_end+0xf800490c>
10005790:	e0c0100c 	andi	r3,fp,64
10005794:	18008026 	beq	r3,zero,10005998 <___vfprintf_internal_r+0x1acc>
10005798:	d9012d17 	ldw	r4,1204(sp)
1000579c:	1480000b 	ldhu	r18,0(r2)
100057a0:	002b883a 	mov	r21,zero
100057a4:	21000104 	addi	r4,r4,4
100057a8:	d9012d15 	stw	r4,1204(sp)
100057ac:	003c7906 	br	10004994 <__alt_data_end+0xf8004994>
100057b0:	e080100c 	andi	r2,fp,64
100057b4:	10007126 	beq	r2,zero,1000597c <___vfprintf_internal_r+0x1ab0>
100057b8:	1c80000f 	ldh	r18,0(r3)
100057bc:	d8812d17 	ldw	r2,1204(sp)
100057c0:	902bd7fa 	srai	r21,r18,31
100057c4:	10800104 	addi	r2,r2,4
100057c8:	d8812d15 	stw	r2,1204(sp)
100057cc:	a805883a 	mov	r2,r21
100057d0:	003b1a06 	br	1000443c <__alt_data_end+0xf800443c>
100057d4:	e4000007 	ldb	r16,0(fp)
100057d8:	e005883a 	mov	r2,fp
100057dc:	003a2306 	br	1000406c <__alt_data_end+0xf800406c>
100057e0:	00800084 	movi	r2,2
100057e4:	003c4906 	br	1000490c <__alt_data_end+0xf800490c>
100057e8:	01040074 	movhi	r4,4097
100057ec:	2114d284 	addi	r4,r4,21322
100057f0:	d9012c15 	stw	r4,1200(sp)
100057f4:	d9012c17 	ldw	r4,1200(sp)
100057f8:	1c47883a 	add	r3,r3,r17
100057fc:	10800044 	addi	r2,r2,1
10005800:	41000015 	stw	r4,0(r8)
10005804:	44400115 	stw	r17,4(r8)
10005808:	d8c12015 	stw	r3,1152(sp)
1000580c:	d8811f15 	stw	r2,1148(sp)
10005810:	010001c4 	movi	r4,7
10005814:	20becc16 	blt	r4,r2,10005348 <__alt_data_end+0xf8005348>
10005818:	42000204 	addi	r8,r8,8
1000581c:	003ed106 	br	10005364 <__alt_data_end+0xf8005364>
10005820:	01040074 	movhi	r4,4097
10005824:	2114d284 	addi	r4,r4,21322
10005828:	d9012c15 	stw	r4,1200(sp)
1000582c:	003ba306 	br	100046bc <__alt_data_end+0xf80046bc>
10005830:	b809883a 	mov	r4,r23
10005834:	b00b883a 	mov	r5,r22
10005838:	d9811e04 	addi	r6,sp,1144
1000583c:	000b30c0 	call	1000b30c <__sprint_r>
10005840:	103aba1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005844:	d8c12017 	ldw	r3,1152(sp)
10005848:	da000404 	addi	r8,sp,16
1000584c:	003d6c06 	br	10004e00 <__alt_data_end+0xf8004e00>
10005850:	d8811f17 	ldw	r2,1148(sp)
10005854:	01440074 	movhi	r5,4097
10005858:	01000044 	movi	r4,1
1000585c:	18c00044 	addi	r3,r3,1
10005860:	10800044 	addi	r2,r2,1
10005864:	2954d204 	addi	r5,r5,21320
10005868:	41000115 	stw	r4,4(r8)
1000586c:	41400015 	stw	r5,0(r8)
10005870:	d8c12015 	stw	r3,1152(sp)
10005874:	d8811f15 	stw	r2,1148(sp)
10005878:	010001c4 	movi	r4,7
1000587c:	20806716 	blt	r4,r2,10005a1c <___vfprintf_internal_r+0x1b50>
10005880:	42000204 	addi	r8,r8,8
10005884:	8000041e 	bne	r16,zero,10005898 <___vfprintf_internal_r+0x19cc>
10005888:	d8813317 	ldw	r2,1228(sp)
1000588c:	1000021e 	bne	r2,zero,10005898 <___vfprintf_internal_r+0x19cc>
10005890:	e080004c 	andi	r2,fp,1
10005894:	103ba026 	beq	r2,zero,10004718 <__alt_data_end+0xf8004718>
10005898:	d9013817 	ldw	r4,1248(sp)
1000589c:	d8811f17 	ldw	r2,1148(sp)
100058a0:	d9413517 	ldw	r5,1236(sp)
100058a4:	1907883a 	add	r3,r3,r4
100058a8:	10800044 	addi	r2,r2,1
100058ac:	41000115 	stw	r4,4(r8)
100058b0:	41400015 	stw	r5,0(r8)
100058b4:	d8c12015 	stw	r3,1152(sp)
100058b8:	d8811f15 	stw	r2,1148(sp)
100058bc:	010001c4 	movi	r4,7
100058c0:	20815716 	blt	r4,r2,10005e20 <___vfprintf_internal_r+0x1f54>
100058c4:	42000204 	addi	r8,r8,8
100058c8:	0421c83a 	sub	r16,zero,r16
100058cc:	0400810e 	bge	zero,r16,10005ad4 <___vfprintf_internal_r+0x1c08>
100058d0:	04400404 	movi	r17,16
100058d4:	8c00bd0e 	bge	r17,r16,10005bcc <___vfprintf_internal_r+0x1d00>
100058d8:	01440074 	movhi	r5,4097
100058dc:	2954d284 	addi	r5,r5,21322
100058e0:	d9412c15 	stw	r5,1200(sp)
100058e4:	04c001c4 	movi	r19,7
100058e8:	00000306 	br	100058f8 <___vfprintf_internal_r+0x1a2c>
100058ec:	42000204 	addi	r8,r8,8
100058f0:	843ffc04 	addi	r16,r16,-16
100058f4:	8c00b80e 	bge	r17,r16,10005bd8 <___vfprintf_internal_r+0x1d0c>
100058f8:	18c00404 	addi	r3,r3,16
100058fc:	10800044 	addi	r2,r2,1
10005900:	45000015 	stw	r20,0(r8)
10005904:	44400115 	stw	r17,4(r8)
10005908:	d8c12015 	stw	r3,1152(sp)
1000590c:	d8811f15 	stw	r2,1148(sp)
10005910:	98bff60e 	bge	r19,r2,100058ec <__alt_data_end+0xf80058ec>
10005914:	b809883a 	mov	r4,r23
10005918:	b00b883a 	mov	r5,r22
1000591c:	d9811e04 	addi	r6,sp,1144
10005920:	000b30c0 	call	1000b30c <__sprint_r>
10005924:	103a811e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005928:	d8c12017 	ldw	r3,1152(sp)
1000592c:	d8811f17 	ldw	r2,1148(sp)
10005930:	da000404 	addi	r8,sp,16
10005934:	003fee06 	br	100058f0 <__alt_data_end+0xf80058f0>
10005938:	008011c4 	movi	r2,71
1000593c:	1400db16 	blt	r2,r16,10005cac <___vfprintf_internal_r+0x1de0>
10005940:	01040074 	movhi	r4,4097
10005944:	2114c404 	addi	r4,r4,21264
10005948:	d9013115 	stw	r4,1220(sp)
1000594c:	00c000c4 	movi	r3,3
10005950:	00bfdfc4 	movi	r2,-129
10005954:	d8c12b15 	stw	r3,1196(sp)
10005958:	e0b8703a 	and	fp,fp,r2
1000595c:	dcc12783 	ldbu	r19,1182(sp)
10005960:	dc812d15 	stw	r18,1204(sp)
10005964:	1823883a 	mov	r17,r3
10005968:	d8013215 	stw	zero,1224(sp)
1000596c:	d8013415 	stw	zero,1232(sp)
10005970:	003ad606 	br	100044cc <__alt_data_end+0xf80044cc>
10005974:	4823883a 	mov	r17,r9
10005978:	003cc906 	br	10004ca0 <__alt_data_end+0xf8004ca0>
1000597c:	1c800017 	ldw	r18,0(r3)
10005980:	d8c12d17 	ldw	r3,1204(sp)
10005984:	902bd7fa 	srai	r21,r18,31
10005988:	18c00104 	addi	r3,r3,4
1000598c:	d8c12d15 	stw	r3,1204(sp)
10005990:	a805883a 	mov	r2,r21
10005994:	003aa906 	br	1000443c <__alt_data_end+0xf800443c>
10005998:	d9412d17 	ldw	r5,1204(sp)
1000599c:	14800017 	ldw	r18,0(r2)
100059a0:	002b883a 	mov	r21,zero
100059a4:	29400104 	addi	r5,r5,4
100059a8:	d9412d15 	stw	r5,1204(sp)
100059ac:	003bf906 	br	10004994 <__alt_data_end+0xf8004994>
100059b0:	d8c12d17 	ldw	r3,1204(sp)
100059b4:	14800017 	ldw	r18,0(r2)
100059b8:	002b883a 	mov	r21,zero
100059bc:	18c00104 	addi	r3,r3,4
100059c0:	d8c12d15 	stw	r3,1204(sp)
100059c4:	00800044 	movi	r2,1
100059c8:	9007883a 	mov	r3,r18
100059cc:	003bcf06 	br	1000490c <__alt_data_end+0xf800490c>
100059d0:	d9012d17 	ldw	r4,1204(sp)
100059d4:	14800017 	ldw	r18,0(r2)
100059d8:	002b883a 	mov	r21,zero
100059dc:	21000104 	addi	r4,r4,4
100059e0:	d9012d15 	stw	r4,1204(sp)
100059e4:	0005883a 	mov	r2,zero
100059e8:	9007883a 	mov	r3,r18
100059ec:	003bc706 	br	1000490c <__alt_data_end+0xf800490c>
100059f0:	d9412d17 	ldw	r5,1204(sp)
100059f4:	d8c12f17 	ldw	r3,1212(sp)
100059f8:	28800017 	ldw	r2,0(r5)
100059fc:	29400104 	addi	r5,r5,4
10005a00:	d9412d15 	stw	r5,1204(sp)
10005a04:	10c00015 	stw	r3,0(r2)
10005a08:	00396d06 	br	10003fc0 <__alt_data_end+0xf8003fc0>
10005a0c:	01040074 	movhi	r4,4097
10005a10:	2114c204 	addi	r4,r4,21256
10005a14:	d9013115 	stw	r4,1220(sp)
10005a18:	003ba206 	br	100048a4 <__alt_data_end+0xf80048a4>
10005a1c:	b809883a 	mov	r4,r23
10005a20:	b00b883a 	mov	r5,r22
10005a24:	d9811e04 	addi	r6,sp,1144
10005a28:	000b30c0 	call	1000b30c <__sprint_r>
10005a2c:	103a3f1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005a30:	dc012617 	ldw	r16,1176(sp)
10005a34:	d8c12017 	ldw	r3,1152(sp)
10005a38:	da000404 	addi	r8,sp,16
10005a3c:	003f9106 	br	10005884 <__alt_data_end+0xf8005884>
10005a40:	e0800044 	addi	r2,fp,1
10005a44:	9cc00814 	ori	r19,r19,32
10005a48:	e4000047 	ldb	r16,1(fp)
10005a4c:	00398706 	br	1000406c <__alt_data_end+0xf800406c>
10005a50:	d8812e17 	ldw	r2,1208(sp)
10005a54:	d8c12d15 	stw	r3,1204(sp)
10005a58:	0085c83a 	sub	r2,zero,r2
10005a5c:	d8812e15 	stw	r2,1208(sp)
10005a60:	e005883a 	mov	r2,fp
10005a64:	003a3a06 	br	10004350 <__alt_data_end+0xf8004350>
10005a68:	b809883a 	mov	r4,r23
10005a6c:	b00b883a 	mov	r5,r22
10005a70:	d9811e04 	addi	r6,sp,1144
10005a74:	000b30c0 	call	1000b30c <__sprint_r>
10005a78:	103a2c1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005a7c:	d8c12017 	ldw	r3,1152(sp)
10005a80:	da000404 	addi	r8,sp,16
10005a84:	003cf006 	br	10004e48 <__alt_data_end+0xf8004e48>
10005a88:	d8c12817 	ldw	r3,1184(sp)
10005a8c:	d9013117 	ldw	r4,1220(sp)
10005a90:	1923c83a 	sub	r17,r3,r4
10005a94:	003a8806 	br	100044b8 <__alt_data_end+0xf80044b8>
10005a98:	da013f15 	stw	r8,1276(sp)
10005a9c:	0003e340 	call	10003e34 <strlen>
10005aa0:	1023883a 	mov	r17,r2
10005aa4:	da013f17 	ldw	r8,1276(sp)
10005aa8:	883c7f0e 	bge	r17,zero,10004ca8 <__alt_data_end+0xf8004ca8>
10005aac:	0005883a 	mov	r2,zero
10005ab0:	003c7d06 	br	10004ca8 <__alt_data_end+0xf8004ca8>
10005ab4:	b809883a 	mov	r4,r23
10005ab8:	b00b883a 	mov	r5,r22
10005abc:	d9811e04 	addi	r6,sp,1144
10005ac0:	000b30c0 	call	1000b30c <__sprint_r>
10005ac4:	103a191e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005ac8:	d8c12017 	ldw	r3,1152(sp)
10005acc:	d8811f17 	ldw	r2,1148(sp)
10005ad0:	da000404 	addi	r8,sp,16
10005ad4:	d9413317 	ldw	r5,1228(sp)
10005ad8:	d9013117 	ldw	r4,1220(sp)
10005adc:	10800044 	addi	r2,r2,1
10005ae0:	28c7883a 	add	r3,r5,r3
10005ae4:	41000015 	stw	r4,0(r8)
10005ae8:	41400115 	stw	r5,4(r8)
10005aec:	d8c12015 	stw	r3,1152(sp)
10005af0:	d8811f15 	stw	r2,1148(sp)
10005af4:	010001c4 	movi	r4,7
10005af8:	20bb060e 	bge	r4,r2,10004714 <__alt_data_end+0xf8004714>
10005afc:	003d6206 	br	10005088 <__alt_data_end+0xf8005088>
10005b00:	01040074 	movhi	r4,4097
10005b04:	2114d684 	addi	r4,r4,21338
10005b08:	d9013615 	stw	r4,1240(sp)
10005b0c:	003aa306 	br	1000459c <__alt_data_end+0xf800459c>
10005b10:	d8812604 	addi	r2,sp,1176
10005b14:	d8800115 	stw	r2,4(sp)
10005b18:	d9413717 	ldw	r5,1244(sp)
10005b1c:	d8812504 	addi	r2,sp,1172
10005b20:	d8800215 	stw	r2,8(sp)
10005b24:	d8812104 	addi	r2,sp,1156
10005b28:	da400015 	stw	r9,0(sp)
10005b2c:	d8800315 	stw	r2,12(sp)
10005b30:	b809883a 	mov	r4,r23
10005b34:	880d883a 	mov	r6,r17
10005b38:	01c000c4 	movi	r7,3
10005b3c:	da013f15 	stw	r8,1276(sp)
10005b40:	da413e15 	stw	r9,1272(sp)
10005b44:	00063440 	call	10006344 <_dtoa_r>
10005b48:	da413e17 	ldw	r9,1272(sp)
10005b4c:	da013f17 	ldw	r8,1276(sp)
10005b50:	d8813115 	stw	r2,1220(sp)
10005b54:	482b883a 	mov	r21,r9
10005b58:	d8c13117 	ldw	r3,1220(sp)
10005b5c:	00801184 	movi	r2,70
10005b60:	1d55883a 	add	r10,r3,r21
10005b64:	98bebb1e 	bne	r19,r2,10005654 <__alt_data_end+0xf8005654>
10005b68:	19000007 	ldb	r4,0(r3)
10005b6c:	00800c04 	movi	r2,48
10005b70:	2080dd26 	beq	r4,r2,10005ee8 <___vfprintf_internal_r+0x201c>
10005b74:	d8c12617 	ldw	r3,1176(sp)
10005b78:	50d5883a 	add	r10,r10,r3
10005b7c:	003eb506 	br	10005654 <__alt_data_end+0xf8005654>
10005b80:	0023883a 	mov	r17,zero
10005b84:	003d9b06 	br	100051f4 <__alt_data_end+0xf80051f4>
10005b88:	b809883a 	mov	r4,r23
10005b8c:	b00b883a 	mov	r5,r22
10005b90:	d9811e04 	addi	r6,sp,1144
10005b94:	000b30c0 	call	1000b30c <__sprint_r>
10005b98:	1039e41e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005b9c:	d8c12017 	ldw	r3,1152(sp)
10005ba0:	da000404 	addi	r8,sp,16
10005ba4:	003d9206 	br	100051f0 <__alt_data_end+0xf80051f0>
10005ba8:	b809883a 	mov	r4,r23
10005bac:	b00b883a 	mov	r5,r22
10005bb0:	d9811e04 	addi	r6,sp,1144
10005bb4:	000b30c0 	call	1000b30c <__sprint_r>
10005bb8:	1039dc1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005bbc:	d8812617 	ldw	r2,1176(sp)
10005bc0:	d8c12017 	ldw	r3,1152(sp)
10005bc4:	da000404 	addi	r8,sp,16
10005bc8:	003dfb06 	br	100053b8 <__alt_data_end+0xf80053b8>
10005bcc:	01040074 	movhi	r4,4097
10005bd0:	2114d284 	addi	r4,r4,21322
10005bd4:	d9012c15 	stw	r4,1200(sp)
10005bd8:	d9012c17 	ldw	r4,1200(sp)
10005bdc:	1c07883a 	add	r3,r3,r16
10005be0:	10800044 	addi	r2,r2,1
10005be4:	41000015 	stw	r4,0(r8)
10005be8:	44000115 	stw	r16,4(r8)
10005bec:	d8c12015 	stw	r3,1152(sp)
10005bf0:	d8811f15 	stw	r2,1148(sp)
10005bf4:	010001c4 	movi	r4,7
10005bf8:	20bfae16 	blt	r4,r2,10005ab4 <__alt_data_end+0xf8005ab4>
10005bfc:	42000204 	addi	r8,r8,8
10005c00:	003fb406 	br	10005ad4 <__alt_data_end+0xf8005ad4>
10005c04:	0021883a 	mov	r16,zero
10005c08:	003dfd06 	br	10005400 <__alt_data_end+0xf8005400>
10005c0c:	01440074 	movhi	r5,4097
10005c10:	2954d684 	addi	r5,r5,21338
10005c14:	d9413615 	stw	r5,1240(sp)
10005c18:	003ae306 	br	100047a8 <__alt_data_end+0xf80047a8>
10005c1c:	b809883a 	mov	r4,r23
10005c20:	b00b883a 	mov	r5,r22
10005c24:	d9811e04 	addi	r6,sp,1144
10005c28:	000b30c0 	call	1000b30c <__sprint_r>
10005c2c:	1039bf1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005c30:	d8812617 	ldw	r2,1176(sp)
10005c34:	d9413317 	ldw	r5,1228(sp)
10005c38:	d8c12017 	ldw	r3,1152(sp)
10005c3c:	da000404 	addi	r8,sp,16
10005c40:	2885c83a 	sub	r2,r5,r2
10005c44:	003ded06 	br	100053fc <__alt_data_end+0xf80053fc>
10005c48:	00800184 	movi	r2,6
10005c4c:	1240012e 	bgeu	r2,r9,10005c54 <___vfprintf_internal_r+0x1d88>
10005c50:	1013883a 	mov	r9,r2
10005c54:	4823883a 	mov	r17,r9
10005c58:	4805883a 	mov	r2,r9
10005c5c:	4800b216 	blt	r9,zero,10005f28 <___vfprintf_internal_r+0x205c>
10005c60:	01440074 	movhi	r5,4097
10005c64:	2954d004 	addi	r5,r5,21312
10005c68:	d8812b15 	stw	r2,1196(sp)
10005c6c:	dc812d15 	stw	r18,1204(sp)
10005c70:	d8013215 	stw	zero,1224(sp)
10005c74:	d8013415 	stw	zero,1232(sp)
10005c78:	d9413115 	stw	r5,1220(sp)
10005c7c:	0005883a 	mov	r2,zero
10005c80:	003a1906 	br	100044e8 <__alt_data_end+0xf80044e8>
10005c84:	04c00b44 	movi	r19,45
10005c88:	dcc12785 	stb	r19,1182(sp)
10005c8c:	003b0006 	br	10004890 <__alt_data_end+0xf8004890>
10005c90:	d8c12d17 	ldw	r3,1204(sp)
10005c94:	d9012f17 	ldw	r4,1212(sp)
10005c98:	18800017 	ldw	r2,0(r3)
10005c9c:	18c00104 	addi	r3,r3,4
10005ca0:	d8c12d15 	stw	r3,1204(sp)
10005ca4:	11000015 	stw	r4,0(r2)
10005ca8:	0038c506 	br	10003fc0 <__alt_data_end+0xf8003fc0>
10005cac:	01440074 	movhi	r5,4097
10005cb0:	2954c504 	addi	r5,r5,21268
10005cb4:	d9413115 	stw	r5,1220(sp)
10005cb8:	003f2406 	br	1000594c <__alt_data_end+0xf800594c>
10005cbc:	00800b44 	movi	r2,45
10005cc0:	d8812785 	stb	r2,1182(sp)
10005cc4:	df012b15 	stw	fp,1196(sp)
10005cc8:	d8013215 	stw	zero,1224(sp)
10005ccc:	df012d17 	ldw	fp,1204(sp)
10005cd0:	00800b44 	movi	r2,45
10005cd4:	dc812d15 	stw	r18,1204(sp)
10005cd8:	003a0006 	br	100044dc <__alt_data_end+0xf80044dc>
10005cdc:	d8c12617 	ldw	r3,1176(sp)
10005ce0:	00bfff44 	movi	r2,-3
10005ce4:	18800a16 	blt	r3,r2,10005d10 <___vfprintf_internal_r+0x1e44>
10005ce8:	48c00916 	blt	r9,r3,10005d10 <___vfprintf_internal_r+0x1e44>
10005cec:	d8c13415 	stw	r3,1232(sp)
10005cf0:	040019c4 	movi	r16,103
10005cf4:	003e7606 	br	100056d0 <__alt_data_end+0xf80056d0>
10005cf8:	01040074 	movhi	r4,4097
10005cfc:	2114d284 	addi	r4,r4,21322
10005d00:	d9012c15 	stw	r4,1200(sp)
10005d04:	003c8e06 	br	10004f40 <__alt_data_end+0xf8004f40>
10005d08:	5005883a 	mov	r2,r10
10005d0c:	003e6506 	br	100056a4 <__alt_data_end+0xf80056a4>
10005d10:	843fff84 	addi	r16,r16,-2
10005d14:	1d7fffc4 	addi	r21,r3,-1
10005d18:	dd412615 	stw	r21,1176(sp)
10005d1c:	dc0122c5 	stb	r16,1163(sp)
10005d20:	a8009216 	blt	r21,zero,10005f6c <___vfprintf_internal_r+0x20a0>
10005d24:	00800ac4 	movi	r2,43
10005d28:	d8812305 	stb	r2,1164(sp)
10005d2c:	00800244 	movi	r2,9
10005d30:	1540660e 	bge	r2,r21,10005ecc <___vfprintf_internal_r+0x2000>
10005d34:	dcc122c4 	addi	r19,sp,1163
10005d38:	dc012c15 	stw	r16,1200(sp)
10005d3c:	4023883a 	mov	r17,r8
10005d40:	9821883a 	mov	r16,r19
10005d44:	a809883a 	mov	r4,r21
10005d48:	01400284 	movi	r5,10
10005d4c:	0003bf00 	call	10003bf0 <__modsi3>
10005d50:	10800c04 	addi	r2,r2,48
10005d54:	843fffc4 	addi	r16,r16,-1
10005d58:	a809883a 	mov	r4,r21
10005d5c:	01400284 	movi	r5,10
10005d60:	80800005 	stb	r2,0(r16)
10005d64:	0003b9c0 	call	10003b9c <__divsi3>
10005d68:	01000244 	movi	r4,9
10005d6c:	102b883a 	mov	r21,r2
10005d70:	20bff416 	blt	r4,r2,10005d44 <__alt_data_end+0xf8005d44>
10005d74:	8811883a 	mov	r8,r17
10005d78:	10800c04 	addi	r2,r2,48
10005d7c:	8023883a 	mov	r17,r16
10005d80:	897fffc4 	addi	r5,r17,-1
10005d84:	88bfffc5 	stb	r2,-1(r17)
10005d88:	dc012c17 	ldw	r16,1200(sp)
10005d8c:	2cc08a2e 	bgeu	r5,r19,10005fb8 <___vfprintf_internal_r+0x20ec>
10005d90:	d9812384 	addi	r6,sp,1166
10005d94:	344dc83a 	sub	r6,r6,r17
10005d98:	d9012344 	addi	r4,sp,1165
10005d9c:	998d883a 	add	r6,r19,r6
10005da0:	00000106 	br	10005da8 <___vfprintf_internal_r+0x1edc>
10005da4:	28800003 	ldbu	r2,0(r5)
10005da8:	20800005 	stb	r2,0(r4)
10005dac:	21000044 	addi	r4,r4,1
10005db0:	29400044 	addi	r5,r5,1
10005db4:	21bffb1e 	bne	r4,r6,10005da4 <__alt_data_end+0xf8005da4>
10005db8:	d8812304 	addi	r2,sp,1164
10005dbc:	1445c83a 	sub	r2,r2,r17
10005dc0:	d9412344 	addi	r5,sp,1165
10005dc4:	2885883a 	add	r2,r5,r2
10005dc8:	14e7c83a 	sub	r19,r2,r19
10005dcc:	d8813317 	ldw	r2,1228(sp)
10005dd0:	d8c13317 	ldw	r3,1228(sp)
10005dd4:	dcc13a15 	stw	r19,1256(sp)
10005dd8:	14e3883a 	add	r17,r2,r19
10005ddc:	00800044 	movi	r2,1
10005de0:	10c0550e 	bge	r2,r3,10005f38 <___vfprintf_internal_r+0x206c>
10005de4:	8c400044 	addi	r17,r17,1
10005de8:	8839883a 	mov	fp,r17
10005dec:	88005016 	blt	r17,zero,10005f30 <___vfprintf_internal_r+0x2064>
10005df0:	d8013415 	stw	zero,1232(sp)
10005df4:	003e3f06 	br	100056f4 <__alt_data_end+0xf80056f4>
10005df8:	da412b15 	stw	r9,1196(sp)
10005dfc:	dcc12783 	ldbu	r19,1182(sp)
10005e00:	4823883a 	mov	r17,r9
10005e04:	dc812d15 	stw	r18,1204(sp)
10005e08:	d8013215 	stw	zero,1224(sp)
10005e0c:	d8013415 	stw	zero,1232(sp)
10005e10:	0039ae06 	br	100044cc <__alt_data_end+0xf80044cc>
10005e14:	483de91e 	bne	r9,zero,100055bc <__alt_data_end+0xf80055bc>
10005e18:	8813883a 	mov	r9,r17
10005e1c:	003de706 	br	100055bc <__alt_data_end+0xf80055bc>
10005e20:	b809883a 	mov	r4,r23
10005e24:	b00b883a 	mov	r5,r22
10005e28:	d9811e04 	addi	r6,sp,1144
10005e2c:	000b30c0 	call	1000b30c <__sprint_r>
10005e30:	10393e1e 	bne	r2,zero,1000432c <__alt_data_end+0xf800432c>
10005e34:	dc012617 	ldw	r16,1176(sp)
10005e38:	d8c12017 	ldw	r3,1152(sp)
10005e3c:	d8811f17 	ldw	r2,1148(sp)
10005e40:	da000404 	addi	r8,sp,16
10005e44:	003ea006 	br	100058c8 <__alt_data_end+0xf80058c8>
10005e48:	00c00b44 	movi	r3,45
10005e4c:	2460003c 	xorhi	r17,r4,32768
10005e50:	d8c12b05 	stb	r3,1196(sp)
10005e54:	003ddf06 	br	100055d4 <__alt_data_end+0xf80055d4>
10005e58:	02400184 	movi	r9,6
10005e5c:	003dd706 	br	100055bc <__alt_data_end+0xf80055bc>
10005e60:	4d400044 	addi	r21,r9,1
10005e64:	003de206 	br	100055f0 <__alt_data_end+0xf80055f0>
10005e68:	d8c13417 	ldw	r3,1232(sp)
10005e6c:	00c0490e 	bge	zero,r3,10005f94 <___vfprintf_internal_r+0x20c8>
10005e70:	04400044 	movi	r17,1
10005e74:	d9013317 	ldw	r4,1228(sp)
10005e78:	8923883a 	add	r17,r17,r4
10005e7c:	8839883a 	mov	fp,r17
10005e80:	883e1c0e 	bge	r17,zero,100056f4 <__alt_data_end+0xf80056f4>
10005e84:	0039883a 	mov	fp,zero
10005e88:	003e1a06 	br	100056f4 <__alt_data_end+0xf80056f4>
10005e8c:	00c03b0e 	bge	zero,r3,10005f7c <___vfprintf_internal_r+0x20b0>
10005e90:	4800021e 	bne	r9,zero,10005e9c <___vfprintf_internal_r+0x1fd0>
10005e94:	e080004c 	andi	r2,fp,1
10005e98:	10000626 	beq	r2,zero,10005eb4 <___vfprintf_internal_r+0x1fe8>
10005e9c:	d8c13417 	ldw	r3,1232(sp)
10005ea0:	4a400044 	addi	r9,r9,1
10005ea4:	1a63883a 	add	r17,r3,r9
10005ea8:	8839883a 	mov	fp,r17
10005eac:	883e110e 	bge	r17,zero,100056f4 <__alt_data_end+0xf80056f4>
10005eb0:	003ff406 	br	10005e84 <__alt_data_end+0xf8005e84>
10005eb4:	1839883a 	mov	fp,r3
10005eb8:	18004116 	blt	r3,zero,10005fc0 <___vfprintf_internal_r+0x20f4>
10005ebc:	dc413417 	ldw	r17,1232(sp)
10005ec0:	003e0c06 	br	100056f4 <__alt_data_end+0xf80056f4>
10005ec4:	d8812117 	ldw	r2,1156(sp)
10005ec8:	003df606 	br	100056a4 <__alt_data_end+0xf80056a4>
10005ecc:	00800c04 	movi	r2,48
10005ed0:	a8c00c04 	addi	r3,r21,48
10005ed4:	d8812345 	stb	r2,1165(sp)
10005ed8:	d8c12385 	stb	r3,1166(sp)
10005edc:	d88123c4 	addi	r2,sp,1167
10005ee0:	dcc122c4 	addi	r19,sp,1163
10005ee4:	003fb806 	br	10005dc8 <__alt_data_end+0xf8005dc8>
10005ee8:	d9013717 	ldw	r4,1244(sp)
10005eec:	880b883a 	mov	r5,r17
10005ef0:	000d883a 	mov	r6,zero
10005ef4:	000f883a 	mov	r7,zero
10005ef8:	da013f15 	stw	r8,1276(sp)
10005efc:	da413e15 	stw	r9,1272(sp)
10005f00:	da813d15 	stw	r10,1268(sp)
10005f04:	000f03c0 	call	1000f03c <__eqdf2>
10005f08:	da013f17 	ldw	r8,1276(sp)
10005f0c:	da413e17 	ldw	r9,1272(sp)
10005f10:	da813d17 	ldw	r10,1268(sp)
10005f14:	103f1726 	beq	r2,zero,10005b74 <__alt_data_end+0xf8005b74>
10005f18:	00800044 	movi	r2,1
10005f1c:	1547c83a 	sub	r3,r2,r21
10005f20:	d8c12615 	stw	r3,1176(sp)
10005f24:	003f1406 	br	10005b78 <__alt_data_end+0xf8005b78>
10005f28:	0005883a 	mov	r2,zero
10005f2c:	003f4c06 	br	10005c60 <__alt_data_end+0xf8005c60>
10005f30:	0039883a 	mov	fp,zero
10005f34:	003fae06 	br	10005df0 <__alt_data_end+0xf8005df0>
10005f38:	e084703a 	and	r2,fp,r2
10005f3c:	103faa26 	beq	r2,zero,10005de8 <__alt_data_end+0xf8005de8>
10005f40:	003fa806 	br	10005de4 <__alt_data_end+0xf8005de4>
10005f44:	d9412d17 	ldw	r5,1204(sp)
10005f48:	2a400017 	ldw	r9,0(r5)
10005f4c:	28c00104 	addi	r3,r5,4
10005f50:	d8c12d15 	stw	r3,1204(sp)
10005f54:	483ebc0e 	bge	r9,zero,10005a48 <__alt_data_end+0xf8005a48>
10005f58:	027fffc4 	movi	r9,-1
10005f5c:	e4000047 	ldb	r16,1(fp)
10005f60:	00384206 	br	1000406c <__alt_data_end+0xf800406c>
10005f64:	043fffc4 	movi	r16,-1
10005f68:	0038ce06 	br	100042a4 <__alt_data_end+0xf80042a4>
10005f6c:	00800b44 	movi	r2,45
10005f70:	056bc83a 	sub	r21,zero,r21
10005f74:	d8812305 	stb	r2,1164(sp)
10005f78:	003f6c06 	br	10005d2c <__alt_data_end+0xf8005d2c>
10005f7c:	4800081e 	bne	r9,zero,10005fa0 <___vfprintf_internal_r+0x20d4>
10005f80:	e080004c 	andi	r2,fp,1
10005f84:	1000061e 	bne	r2,zero,10005fa0 <___vfprintf_internal_r+0x20d4>
10005f88:	07000044 	movi	fp,1
10005f8c:	e023883a 	mov	r17,fp
10005f90:	003dd806 	br	100056f4 <__alt_data_end+0xf80056f4>
10005f94:	04400084 	movi	r17,2
10005f98:	88e3c83a 	sub	r17,r17,r3
10005f9c:	003fb506 	br	10005e74 <__alt_data_end+0xf8005e74>
10005fa0:	4c400084 	addi	r17,r9,2
10005fa4:	8839883a 	mov	fp,r17
10005fa8:	883dd20e 	bge	r17,zero,100056f4 <__alt_data_end+0xf80056f4>
10005fac:	003fb506 	br	10005e84 <__alt_data_end+0xf8005e84>
10005fb0:	d8c12617 	ldw	r3,1176(sp)
10005fb4:	003f5706 	br	10005d14 <__alt_data_end+0xf8005d14>
10005fb8:	d8812344 	addi	r2,sp,1165
10005fbc:	003f8206 	br	10005dc8 <__alt_data_end+0xf8005dc8>
10005fc0:	0039883a 	mov	fp,zero
10005fc4:	003fbd06 	br	10005ebc <__alt_data_end+0xf8005ebc>

10005fc8 <__vfprintf_internal>:
10005fc8:	2007883a 	mov	r3,r4
10005fcc:	01040074 	movhi	r4,4097
10005fd0:	211c3104 	addi	r4,r4,28868
10005fd4:	21000017 	ldw	r4,0(r4)
10005fd8:	2805883a 	mov	r2,r5
10005fdc:	300f883a 	mov	r7,r6
10005fe0:	180b883a 	mov	r5,r3
10005fe4:	100d883a 	mov	r6,r2
10005fe8:	0003ecc1 	jmpi	10003ecc <___vfprintf_internal_r>

10005fec <__swsetup_r>:
10005fec:	00840074 	movhi	r2,4097
10005ff0:	defffd04 	addi	sp,sp,-12
10005ff4:	109c3104 	addi	r2,r2,28868
10005ff8:	dc400115 	stw	r17,4(sp)
10005ffc:	2023883a 	mov	r17,r4
10006000:	11000017 	ldw	r4,0(r2)
10006004:	dc000015 	stw	r16,0(sp)
10006008:	dfc00215 	stw	ra,8(sp)
1000600c:	2821883a 	mov	r16,r5
10006010:	20000226 	beq	r4,zero,1000601c <__swsetup_r+0x30>
10006014:	20c00e17 	ldw	r3,56(r4)
10006018:	18002e26 	beq	r3,zero,100060d4 <__swsetup_r+0xe8>
1000601c:	8080030b 	ldhu	r2,12(r16)
10006020:	10c0020c 	andi	r3,r2,8
10006024:	100d883a 	mov	r6,r2
10006028:	18000f26 	beq	r3,zero,10006068 <__swsetup_r+0x7c>
1000602c:	80c00417 	ldw	r3,16(r16)
10006030:	18001526 	beq	r3,zero,10006088 <__swsetup_r+0x9c>
10006034:	1100004c 	andi	r4,r2,1
10006038:	20001c1e 	bne	r4,zero,100060ac <__swsetup_r+0xc0>
1000603c:	1080008c 	andi	r2,r2,2
10006040:	1000261e 	bne	r2,zero,100060dc <__swsetup_r+0xf0>
10006044:	80800517 	ldw	r2,20(r16)
10006048:	80800215 	stw	r2,8(r16)
1000604c:	18001c26 	beq	r3,zero,100060c0 <__swsetup_r+0xd4>
10006050:	0005883a 	mov	r2,zero
10006054:	dfc00217 	ldw	ra,8(sp)
10006058:	dc400117 	ldw	r17,4(sp)
1000605c:	dc000017 	ldw	r16,0(sp)
10006060:	dec00304 	addi	sp,sp,12
10006064:	f800283a 	ret
10006068:	3080040c 	andi	r2,r6,16
1000606c:	10001726 	beq	r2,zero,100060cc <__swsetup_r+0xe0>
10006070:	3080010c 	andi	r2,r6,4
10006074:	10001b1e 	bne	r2,zero,100060e4 <__swsetup_r+0xf8>
10006078:	80c00417 	ldw	r3,16(r16)
1000607c:	30800214 	ori	r2,r6,8
10006080:	8080030d 	sth	r2,12(r16)
10006084:	183feb1e 	bne	r3,zero,10006034 <__alt_data_end+0xf8006034>
10006088:	1140a00c 	andi	r5,r2,640
1000608c:	01008004 	movi	r4,512
10006090:	293fe826 	beq	r5,r4,10006034 <__alt_data_end+0xf8006034>
10006094:	8809883a 	mov	r4,r17
10006098:	800b883a 	mov	r5,r16
1000609c:	0008b800 	call	10008b80 <__smakebuf_r>
100060a0:	8080030b 	ldhu	r2,12(r16)
100060a4:	80c00417 	ldw	r3,16(r16)
100060a8:	003fe206 	br	10006034 <__alt_data_end+0xf8006034>
100060ac:	80800517 	ldw	r2,20(r16)
100060b0:	80000215 	stw	zero,8(r16)
100060b4:	0085c83a 	sub	r2,zero,r2
100060b8:	80800615 	stw	r2,24(r16)
100060bc:	183fe41e 	bne	r3,zero,10006050 <__alt_data_end+0xf8006050>
100060c0:	8080030b 	ldhu	r2,12(r16)
100060c4:	1080200c 	andi	r2,r2,128
100060c8:	103fe226 	beq	r2,zero,10006054 <__alt_data_end+0xf8006054>
100060cc:	00bfffc4 	movi	r2,-1
100060d0:	003fe006 	br	10006054 <__alt_data_end+0xf8006054>
100060d4:	00080280 	call	10008028 <__sinit>
100060d8:	003fd006 	br	1000601c <__alt_data_end+0xf800601c>
100060dc:	0005883a 	mov	r2,zero
100060e0:	003fd906 	br	10006048 <__alt_data_end+0xf8006048>
100060e4:	81400c17 	ldw	r5,48(r16)
100060e8:	28000626 	beq	r5,zero,10006104 <__swsetup_r+0x118>
100060ec:	80801004 	addi	r2,r16,64
100060f0:	28800326 	beq	r5,r2,10006100 <__swsetup_r+0x114>
100060f4:	8809883a 	mov	r4,r17
100060f8:	000819c0 	call	1000819c <_free_r>
100060fc:	8180030b 	ldhu	r6,12(r16)
10006100:	80000c15 	stw	zero,48(r16)
10006104:	80c00417 	ldw	r3,16(r16)
10006108:	00bff6c4 	movi	r2,-37
1000610c:	118c703a 	and	r6,r2,r6
10006110:	80000115 	stw	zero,4(r16)
10006114:	80c00015 	stw	r3,0(r16)
10006118:	003fd806 	br	1000607c <__alt_data_end+0xf800607c>

1000611c <quorem>:
1000611c:	defff204 	addi	sp,sp,-56
10006120:	ddc00b15 	stw	r23,44(sp)
10006124:	20800417 	ldw	r2,16(r4)
10006128:	2dc00417 	ldw	r23,16(r5)
1000612c:	dfc00d15 	stw	ra,52(sp)
10006130:	df000c15 	stw	fp,48(sp)
10006134:	dd800a15 	stw	r22,40(sp)
10006138:	dd400915 	stw	r21,36(sp)
1000613c:	dd000815 	stw	r20,32(sp)
10006140:	dcc00715 	stw	r19,28(sp)
10006144:	dc800615 	stw	r18,24(sp)
10006148:	dc400515 	stw	r17,20(sp)
1000614c:	dc000415 	stw	r16,16(sp)
10006150:	15c07a16 	blt	r2,r23,1000633c <quorem+0x220>
10006154:	bdffffc4 	addi	r23,r23,-1
10006158:	bde9883a 	add	r20,r23,r23
1000615c:	28c00504 	addi	r3,r5,20
10006160:	a529883a 	add	r20,r20,r20
10006164:	1d39883a 	add	fp,r3,r20
10006168:	24c00504 	addi	r19,r4,20
1000616c:	d9400215 	stw	r5,8(sp)
10006170:	9d29883a 	add	r20,r19,r20
10006174:	e1400017 	ldw	r5,0(fp)
10006178:	d9000015 	stw	r4,0(sp)
1000617c:	a1000017 	ldw	r4,0(r20)
10006180:	29400044 	addi	r5,r5,1
10006184:	d8c00115 	stw	r3,4(sp)
10006188:	dd000315 	stw	r20,12(sp)
1000618c:	0003c4c0 	call	10003c4c <__udivsi3>
10006190:	1025883a 	mov	r18,r2
10006194:	10003026 	beq	r2,zero,10006258 <quorem+0x13c>
10006198:	dc400117 	ldw	r17,4(sp)
1000619c:	9829883a 	mov	r20,r19
100061a0:	002d883a 	mov	r22,zero
100061a4:	0021883a 	mov	r16,zero
100061a8:	8d400017 	ldw	r21,0(r17)
100061ac:	900b883a 	mov	r5,r18
100061b0:	8c400104 	addi	r17,r17,4
100061b4:	a93fffcc 	andi	r4,r21,65535
100061b8:	0003c5c0 	call	10003c5c <__mulsi3>
100061bc:	a808d43a 	srli	r4,r21,16
100061c0:	900b883a 	mov	r5,r18
100061c4:	b0ad883a 	add	r22,r22,r2
100061c8:	0003c5c0 	call	10003c5c <__mulsi3>
100061cc:	a1000017 	ldw	r4,0(r20)
100061d0:	b00cd43a 	srli	r6,r22,16
100061d4:	b0ffffcc 	andi	r3,r22,65535
100061d8:	217fffcc 	andi	r5,r4,65535
100061dc:	2c21883a 	add	r16,r5,r16
100061e0:	80c7c83a 	sub	r3,r16,r3
100061e4:	2008d43a 	srli	r4,r4,16
100061e8:	3085883a 	add	r2,r6,r2
100061ec:	1821d43a 	srai	r16,r3,16
100061f0:	117fffcc 	andi	r5,r2,65535
100061f4:	2149c83a 	sub	r4,r4,r5
100061f8:	2421883a 	add	r16,r4,r16
100061fc:	8008943a 	slli	r4,r16,16
10006200:	18ffffcc 	andi	r3,r3,65535
10006204:	102cd43a 	srli	r22,r2,16
10006208:	20c8b03a 	or	r4,r4,r3
1000620c:	a1000015 	stw	r4,0(r20)
10006210:	8021d43a 	srai	r16,r16,16
10006214:	a5000104 	addi	r20,r20,4
10006218:	e47fe32e 	bgeu	fp,r17,100061a8 <__alt_data_end+0xf80061a8>
1000621c:	d8c00317 	ldw	r3,12(sp)
10006220:	18800017 	ldw	r2,0(r3)
10006224:	10000c1e 	bne	r2,zero,10006258 <quorem+0x13c>
10006228:	18bfff04 	addi	r2,r3,-4
1000622c:	9880082e 	bgeu	r19,r2,10006250 <quorem+0x134>
10006230:	18ffff17 	ldw	r3,-4(r3)
10006234:	18000326 	beq	r3,zero,10006244 <quorem+0x128>
10006238:	00000506 	br	10006250 <quorem+0x134>
1000623c:	10c00017 	ldw	r3,0(r2)
10006240:	1800031e 	bne	r3,zero,10006250 <quorem+0x134>
10006244:	10bfff04 	addi	r2,r2,-4
10006248:	bdffffc4 	addi	r23,r23,-1
1000624c:	98bffb36 	bltu	r19,r2,1000623c <__alt_data_end+0xf800623c>
10006250:	d8c00017 	ldw	r3,0(sp)
10006254:	1dc00415 	stw	r23,16(r3)
10006258:	d9000017 	ldw	r4,0(sp)
1000625c:	d9400217 	ldw	r5,8(sp)
10006260:	000a2fc0 	call	1000a2fc <__mcmp>
10006264:	10002816 	blt	r2,zero,10006308 <quorem+0x1ec>
10006268:	dc400117 	ldw	r17,4(sp)
1000626c:	94800044 	addi	r18,r18,1
10006270:	980d883a 	mov	r6,r19
10006274:	0007883a 	mov	r3,zero
10006278:	31000017 	ldw	r4,0(r6)
1000627c:	89400017 	ldw	r5,0(r17)
10006280:	31800104 	addi	r6,r6,4
10006284:	20bfffcc 	andi	r2,r4,65535
10006288:	10c7883a 	add	r3,r2,r3
1000628c:	28bfffcc 	andi	r2,r5,65535
10006290:	1885c83a 	sub	r2,r3,r2
10006294:	280ad43a 	srli	r5,r5,16
10006298:	2008d43a 	srli	r4,r4,16
1000629c:	1007d43a 	srai	r3,r2,16
100062a0:	10bfffcc 	andi	r2,r2,65535
100062a4:	2149c83a 	sub	r4,r4,r5
100062a8:	20c9883a 	add	r4,r4,r3
100062ac:	200a943a 	slli	r5,r4,16
100062b0:	8c400104 	addi	r17,r17,4
100062b4:	2007d43a 	srai	r3,r4,16
100062b8:	2884b03a 	or	r2,r5,r2
100062bc:	30bfff15 	stw	r2,-4(r6)
100062c0:	e47fed2e 	bgeu	fp,r17,10006278 <__alt_data_end+0xf8006278>
100062c4:	bdc5883a 	add	r2,r23,r23
100062c8:	1085883a 	add	r2,r2,r2
100062cc:	9887883a 	add	r3,r19,r2
100062d0:	18800017 	ldw	r2,0(r3)
100062d4:	10000c1e 	bne	r2,zero,10006308 <quorem+0x1ec>
100062d8:	18bfff04 	addi	r2,r3,-4
100062dc:	9880082e 	bgeu	r19,r2,10006300 <quorem+0x1e4>
100062e0:	18ffff17 	ldw	r3,-4(r3)
100062e4:	18000326 	beq	r3,zero,100062f4 <quorem+0x1d8>
100062e8:	00000506 	br	10006300 <quorem+0x1e4>
100062ec:	10c00017 	ldw	r3,0(r2)
100062f0:	1800031e 	bne	r3,zero,10006300 <quorem+0x1e4>
100062f4:	10bfff04 	addi	r2,r2,-4
100062f8:	bdffffc4 	addi	r23,r23,-1
100062fc:	98bffb36 	bltu	r19,r2,100062ec <__alt_data_end+0xf80062ec>
10006300:	d8c00017 	ldw	r3,0(sp)
10006304:	1dc00415 	stw	r23,16(r3)
10006308:	9005883a 	mov	r2,r18
1000630c:	dfc00d17 	ldw	ra,52(sp)
10006310:	df000c17 	ldw	fp,48(sp)
10006314:	ddc00b17 	ldw	r23,44(sp)
10006318:	dd800a17 	ldw	r22,40(sp)
1000631c:	dd400917 	ldw	r21,36(sp)
10006320:	dd000817 	ldw	r20,32(sp)
10006324:	dcc00717 	ldw	r19,28(sp)
10006328:	dc800617 	ldw	r18,24(sp)
1000632c:	dc400517 	ldw	r17,20(sp)
10006330:	dc000417 	ldw	r16,16(sp)
10006334:	dec00e04 	addi	sp,sp,56
10006338:	f800283a 	ret
1000633c:	0005883a 	mov	r2,zero
10006340:	003ff206 	br	1000630c <__alt_data_end+0xf800630c>

10006344 <_dtoa_r>:
10006344:	20801017 	ldw	r2,64(r4)
10006348:	deffde04 	addi	sp,sp,-136
1000634c:	dd401d15 	stw	r21,116(sp)
10006350:	dcc01b15 	stw	r19,108(sp)
10006354:	dc801a15 	stw	r18,104(sp)
10006358:	dc401915 	stw	r17,100(sp)
1000635c:	dc001815 	stw	r16,96(sp)
10006360:	dfc02115 	stw	ra,132(sp)
10006364:	df002015 	stw	fp,128(sp)
10006368:	ddc01f15 	stw	r23,124(sp)
1000636c:	dd801e15 	stw	r22,120(sp)
10006370:	dd001c15 	stw	r20,112(sp)
10006374:	d9c00315 	stw	r7,12(sp)
10006378:	2021883a 	mov	r16,r4
1000637c:	302b883a 	mov	r21,r6
10006380:	2825883a 	mov	r18,r5
10006384:	dc402417 	ldw	r17,144(sp)
10006388:	3027883a 	mov	r19,r6
1000638c:	10000826 	beq	r2,zero,100063b0 <_dtoa_r+0x6c>
10006390:	21801117 	ldw	r6,68(r4)
10006394:	00c00044 	movi	r3,1
10006398:	100b883a 	mov	r5,r2
1000639c:	1986983a 	sll	r3,r3,r6
100063a0:	11800115 	stw	r6,4(r2)
100063a4:	10c00215 	stw	r3,8(r2)
100063a8:	0009a280 	call	10009a28 <_Bfree>
100063ac:	80001015 	stw	zero,64(r16)
100063b0:	a8002d16 	blt	r21,zero,10006468 <_dtoa_r+0x124>
100063b4:	88000015 	stw	zero,0(r17)
100063b8:	a8dffc2c 	andhi	r3,r21,32752
100063bc:	009ffc34 	movhi	r2,32752
100063c0:	18801b26 	beq	r3,r2,10006430 <_dtoa_r+0xec>
100063c4:	9009883a 	mov	r4,r18
100063c8:	980b883a 	mov	r5,r19
100063cc:	000d883a 	mov	r6,zero
100063d0:	000f883a 	mov	r7,zero
100063d4:	000f03c0 	call	1000f03c <__eqdf2>
100063d8:	10002a1e 	bne	r2,zero,10006484 <_dtoa_r+0x140>
100063dc:	d8c02317 	ldw	r3,140(sp)
100063e0:	d9002517 	ldw	r4,148(sp)
100063e4:	00800044 	movi	r2,1
100063e8:	18800015 	stw	r2,0(r3)
100063ec:	2001a226 	beq	r4,zero,10006a78 <_dtoa_r+0x734>
100063f0:	00840074 	movhi	r2,4097
100063f4:	1094d244 	addi	r2,r2,21321
100063f8:	20800015 	stw	r2,0(r4)
100063fc:	10bfffc4 	addi	r2,r2,-1
10006400:	dfc02117 	ldw	ra,132(sp)
10006404:	df002017 	ldw	fp,128(sp)
10006408:	ddc01f17 	ldw	r23,124(sp)
1000640c:	dd801e17 	ldw	r22,120(sp)
10006410:	dd401d17 	ldw	r21,116(sp)
10006414:	dd001c17 	ldw	r20,112(sp)
10006418:	dcc01b17 	ldw	r19,108(sp)
1000641c:	dc801a17 	ldw	r18,104(sp)
10006420:	dc401917 	ldw	r17,100(sp)
10006424:	dc001817 	ldw	r16,96(sp)
10006428:	dec02204 	addi	sp,sp,136
1000642c:	f800283a 	ret
10006430:	d8c02317 	ldw	r3,140(sp)
10006434:	0089c3c4 	movi	r2,9999
10006438:	18800015 	stw	r2,0(r3)
1000643c:	90017c26 	beq	r18,zero,10006a30 <_dtoa_r+0x6ec>
10006440:	00840074 	movhi	r2,4097
10006444:	1094de04 	addi	r2,r2,21368
10006448:	d9002517 	ldw	r4,148(sp)
1000644c:	203fec26 	beq	r4,zero,10006400 <__alt_data_end+0xf8006400>
10006450:	10c000c7 	ldb	r3,3(r2)
10006454:	18017d1e 	bne	r3,zero,10006a4c <_dtoa_r+0x708>
10006458:	10c000c4 	addi	r3,r2,3
1000645c:	d9802517 	ldw	r6,148(sp)
10006460:	30c00015 	stw	r3,0(r6)
10006464:	003fe606 	br	10006400 <__alt_data_end+0xf8006400>
10006468:	04e00034 	movhi	r19,32768
1000646c:	9cffffc4 	addi	r19,r19,-1
10006470:	00800044 	movi	r2,1
10006474:	ace6703a 	and	r19,r21,r19
10006478:	88800015 	stw	r2,0(r17)
1000647c:	982b883a 	mov	r21,r19
10006480:	003fcd06 	br	100063b8 <__alt_data_end+0xf80063b8>
10006484:	d8800204 	addi	r2,sp,8
10006488:	a822d53a 	srli	r17,r21,20
1000648c:	d8800015 	stw	r2,0(sp)
10006490:	8009883a 	mov	r4,r16
10006494:	900b883a 	mov	r5,r18
10006498:	980d883a 	mov	r6,r19
1000649c:	d9c00104 	addi	r7,sp,4
100064a0:	000a6700 	call	1000a670 <__d2b>
100064a4:	1039883a 	mov	fp,r2
100064a8:	88016a1e 	bne	r17,zero,10006a54 <_dtoa_r+0x710>
100064ac:	dd000217 	ldw	r20,8(sp)
100064b0:	dc400117 	ldw	r17,4(sp)
100064b4:	00befbc4 	movi	r2,-1041
100064b8:	a463883a 	add	r17,r20,r17
100064bc:	8882ea16 	blt	r17,r2,10007068 <_dtoa_r+0xd24>
100064c0:	00bf0384 	movi	r2,-1010
100064c4:	1445c83a 	sub	r2,r2,r17
100064c8:	89010484 	addi	r4,r17,1042
100064cc:	a8aa983a 	sll	r21,r21,r2
100064d0:	9108d83a 	srl	r4,r18,r4
100064d4:	a908b03a 	or	r4,r21,r4
100064d8:	00105140 	call	10010514 <__floatunsidf>
100064dc:	017f8434 	movhi	r5,65040
100064e0:	01800044 	movi	r6,1
100064e4:	1009883a 	mov	r4,r2
100064e8:	194b883a 	add	r5,r3,r5
100064ec:	8c7fffc4 	addi	r17,r17,-1
100064f0:	d9800f15 	stw	r6,60(sp)
100064f4:	000d883a 	mov	r6,zero
100064f8:	01cffe34 	movhi	r7,16376
100064fc:	000faec0 	call	1000faec <__subdf3>
10006500:	0198dbf4 	movhi	r6,25455
10006504:	01cff4f4 	movhi	r7,16339
10006508:	1009883a 	mov	r4,r2
1000650c:	180b883a 	mov	r5,r3
10006510:	3190d844 	addi	r6,r6,17249
10006514:	39e1e9c4 	addi	r7,r7,-30809
10006518:	000f2800 	call	1000f280 <__muldf3>
1000651c:	01a2d874 	movhi	r6,35681
10006520:	01cff1f4 	movhi	r7,16327
10006524:	180b883a 	mov	r5,r3
10006528:	31b22cc4 	addi	r6,r6,-14157
1000652c:	39e28a04 	addi	r7,r7,-30168
10006530:	1009883a 	mov	r4,r2
10006534:	000de200 	call	1000de20 <__adddf3>
10006538:	8809883a 	mov	r4,r17
1000653c:	102d883a 	mov	r22,r2
10006540:	182b883a 	mov	r21,r3
10006544:	00104440 	call	10010444 <__floatsidf>
10006548:	019427f4 	movhi	r6,20639
1000654c:	01cff4f4 	movhi	r7,16339
10006550:	1009883a 	mov	r4,r2
10006554:	180b883a 	mov	r5,r3
10006558:	319e7ec4 	addi	r6,r6,31227
1000655c:	39d104c4 	addi	r7,r7,17427
10006560:	000f2800 	call	1000f280 <__muldf3>
10006564:	b009883a 	mov	r4,r22
10006568:	a80b883a 	mov	r5,r21
1000656c:	100d883a 	mov	r6,r2
10006570:	180f883a 	mov	r7,r3
10006574:	000de200 	call	1000de20 <__adddf3>
10006578:	1009883a 	mov	r4,r2
1000657c:	180b883a 	mov	r5,r3
10006580:	102d883a 	mov	r22,r2
10006584:	182b883a 	mov	r21,r3
10006588:	00103bc0 	call	100103bc <__fixdfsi>
1000658c:	b009883a 	mov	r4,r22
10006590:	a80b883a 	mov	r5,r21
10006594:	000d883a 	mov	r6,zero
10006598:	000f883a 	mov	r7,zero
1000659c:	d8800515 	stw	r2,20(sp)
100065a0:	000f1a00 	call	1000f1a0 <__ledf2>
100065a4:	10023116 	blt	r2,zero,10006e6c <_dtoa_r+0xb28>
100065a8:	d8c00517 	ldw	r3,20(sp)
100065ac:	00800584 	movi	r2,22
100065b0:	10c21f36 	bltu	r2,r3,10006e30 <_dtoa_r+0xaec>
100065b4:	180490fa 	slli	r2,r3,3
100065b8:	00c40074 	movhi	r3,4097
100065bc:	18d4fa04 	addi	r3,r3,21480
100065c0:	1885883a 	add	r2,r3,r2
100065c4:	11000017 	ldw	r4,0(r2)
100065c8:	11400117 	ldw	r5,4(r2)
100065cc:	900d883a 	mov	r6,r18
100065d0:	980f883a 	mov	r7,r19
100065d4:	000f0c00 	call	1000f0c0 <__gedf2>
100065d8:	0082a70e 	bge	zero,r2,10007078 <_dtoa_r+0xd34>
100065dc:	d9000517 	ldw	r4,20(sp)
100065e0:	d8000c15 	stw	zero,48(sp)
100065e4:	213fffc4 	addi	r4,r4,-1
100065e8:	d9000515 	stw	r4,20(sp)
100065ec:	a463c83a 	sub	r17,r20,r17
100065f0:	8dbfffc4 	addi	r22,r17,-1
100065f4:	b0021916 	blt	r22,zero,10006e5c <_dtoa_r+0xb18>
100065f8:	d8000815 	stw	zero,32(sp)
100065fc:	d8800517 	ldw	r2,20(sp)
10006600:	10020e16 	blt	r2,zero,10006e3c <_dtoa_r+0xaf8>
10006604:	b0ad883a 	add	r22,r22,r2
10006608:	d8800a15 	stw	r2,40(sp)
1000660c:	d8000915 	stw	zero,36(sp)
10006610:	d8c00317 	ldw	r3,12(sp)
10006614:	00800244 	movi	r2,9
10006618:	10c11a36 	bltu	r2,r3,10006a84 <_dtoa_r+0x740>
1000661c:	00800144 	movi	r2,5
10006620:	10c4fc0e 	bge	r2,r3,10007a14 <_dtoa_r+0x16d0>
10006624:	18ffff04 	addi	r3,r3,-4
10006628:	d8c00315 	stw	r3,12(sp)
1000662c:	0029883a 	mov	r20,zero
10006630:	d9800317 	ldw	r6,12(sp)
10006634:	008000c4 	movi	r2,3
10006638:	3083bd26 	beq	r6,r2,10007530 <_dtoa_r+0x11ec>
1000663c:	1183670e 	bge	r2,r6,100073dc <_dtoa_r+0x1098>
10006640:	d8c00317 	ldw	r3,12(sp)
10006644:	00800104 	movi	r2,4
10006648:	1882e726 	beq	r3,r2,100071e8 <_dtoa_r+0xea4>
1000664c:	00800144 	movi	r2,5
10006650:	1884f21e 	bne	r3,r2,10007a1c <_dtoa_r+0x16d8>
10006654:	00800044 	movi	r2,1
10006658:	d8800b15 	stw	r2,44(sp)
1000665c:	d8c02217 	ldw	r3,136(sp)
10006660:	d9000517 	ldw	r4,20(sp)
10006664:	1907883a 	add	r3,r3,r4
10006668:	19800044 	addi	r6,r3,1
1000666c:	d8c00d15 	stw	r3,52(sp)
10006670:	d9800615 	stw	r6,24(sp)
10006674:	0183c30e 	bge	zero,r6,10007584 <_dtoa_r+0x1240>
10006678:	d9800617 	ldw	r6,24(sp)
1000667c:	3023883a 	mov	r17,r6
10006680:	80001115 	stw	zero,68(r16)
10006684:	008005c4 	movi	r2,23
10006688:	1184f62e 	bgeu	r2,r6,10007a64 <_dtoa_r+0x1720>
1000668c:	00c00044 	movi	r3,1
10006690:	00800104 	movi	r2,4
10006694:	1085883a 	add	r2,r2,r2
10006698:	11000504 	addi	r4,r2,20
1000669c:	180b883a 	mov	r5,r3
100066a0:	18c00044 	addi	r3,r3,1
100066a4:	313ffb2e 	bgeu	r6,r4,10006694 <__alt_data_end+0xf8006694>
100066a8:	81401115 	stw	r5,68(r16)
100066ac:	8009883a 	mov	r4,r16
100066b0:	00099800 	call	10009980 <_Balloc>
100066b4:	d8800715 	stw	r2,28(sp)
100066b8:	80801015 	stw	r2,64(r16)
100066bc:	00800384 	movi	r2,14
100066c0:	1440fd36 	bltu	r2,r17,10006ab8 <_dtoa_r+0x774>
100066c4:	a000fc26 	beq	r20,zero,10006ab8 <_dtoa_r+0x774>
100066c8:	d8800517 	ldw	r2,20(sp)
100066cc:	0083b90e 	bge	zero,r2,100075b4 <_dtoa_r+0x1270>
100066d0:	d8c00517 	ldw	r3,20(sp)
100066d4:	108003cc 	andi	r2,r2,15
100066d8:	100490fa 	slli	r2,r2,3
100066dc:	182fd13a 	srai	r23,r3,4
100066e0:	00c40074 	movhi	r3,4097
100066e4:	18d4fa04 	addi	r3,r3,21480
100066e8:	1885883a 	add	r2,r3,r2
100066ec:	b8c0040c 	andi	r3,r23,16
100066f0:	12c00017 	ldw	r11,0(r2)
100066f4:	12800117 	ldw	r10,4(r2)
100066f8:	18039726 	beq	r3,zero,10007558 <_dtoa_r+0x1214>
100066fc:	00840074 	movhi	r2,4097
10006700:	1094f004 	addi	r2,r2,21440
10006704:	11800817 	ldw	r6,32(r2)
10006708:	11c00917 	ldw	r7,36(r2)
1000670c:	9009883a 	mov	r4,r18
10006710:	980b883a 	mov	r5,r19
10006714:	da801615 	stw	r10,88(sp)
10006718:	dac01515 	stw	r11,84(sp)
1000671c:	000e6bc0 	call	1000e6bc <__divdf3>
10006720:	da801617 	ldw	r10,88(sp)
10006724:	dac01517 	ldw	r11,84(sp)
10006728:	bdc003cc 	andi	r23,r23,15
1000672c:	044000c4 	movi	r17,3
10006730:	d8800e15 	stw	r2,56(sp)
10006734:	182b883a 	mov	r21,r3
10006738:	b8001126 	beq	r23,zero,10006780 <_dtoa_r+0x43c>
1000673c:	05040074 	movhi	r20,4097
10006740:	a514f004 	addi	r20,r20,21440
10006744:	5805883a 	mov	r2,r11
10006748:	5007883a 	mov	r3,r10
1000674c:	b980004c 	andi	r6,r23,1
10006750:	1009883a 	mov	r4,r2
10006754:	b82fd07a 	srai	r23,r23,1
10006758:	180b883a 	mov	r5,r3
1000675c:	30000426 	beq	r6,zero,10006770 <_dtoa_r+0x42c>
10006760:	a1800017 	ldw	r6,0(r20)
10006764:	a1c00117 	ldw	r7,4(r20)
10006768:	8c400044 	addi	r17,r17,1
1000676c:	000f2800 	call	1000f280 <__muldf3>
10006770:	a5000204 	addi	r20,r20,8
10006774:	b83ff51e 	bne	r23,zero,1000674c <__alt_data_end+0xf800674c>
10006778:	1017883a 	mov	r11,r2
1000677c:	1815883a 	mov	r10,r3
10006780:	d9000e17 	ldw	r4,56(sp)
10006784:	a80b883a 	mov	r5,r21
10006788:	580d883a 	mov	r6,r11
1000678c:	500f883a 	mov	r7,r10
10006790:	000e6bc0 	call	1000e6bc <__divdf3>
10006794:	1029883a 	mov	r20,r2
10006798:	182b883a 	mov	r21,r3
1000679c:	d9800c17 	ldw	r6,48(sp)
100067a0:	30000626 	beq	r6,zero,100067bc <_dtoa_r+0x478>
100067a4:	a009883a 	mov	r4,r20
100067a8:	a80b883a 	mov	r5,r21
100067ac:	000d883a 	mov	r6,zero
100067b0:	01cffc34 	movhi	r7,16368
100067b4:	000f1a00 	call	1000f1a0 <__ledf2>
100067b8:	10043216 	blt	r2,zero,10007884 <_dtoa_r+0x1540>
100067bc:	8809883a 	mov	r4,r17
100067c0:	00104440 	call	10010444 <__floatsidf>
100067c4:	1009883a 	mov	r4,r2
100067c8:	180b883a 	mov	r5,r3
100067cc:	a00d883a 	mov	r6,r20
100067d0:	a80f883a 	mov	r7,r21
100067d4:	000f2800 	call	1000f280 <__muldf3>
100067d8:	000d883a 	mov	r6,zero
100067dc:	1009883a 	mov	r4,r2
100067e0:	180b883a 	mov	r5,r3
100067e4:	01d00734 	movhi	r7,16412
100067e8:	000de200 	call	1000de20 <__adddf3>
100067ec:	1023883a 	mov	r17,r2
100067f0:	d9800617 	ldw	r6,24(sp)
100067f4:	00bf3034 	movhi	r2,64704
100067f8:	1885883a 	add	r2,r3,r2
100067fc:	d8800e15 	stw	r2,56(sp)
10006800:	30032e26 	beq	r6,zero,100074bc <_dtoa_r+0x1178>
10006804:	d8c00517 	ldw	r3,20(sp)
10006808:	da800617 	ldw	r10,24(sp)
1000680c:	d8c01215 	stw	r3,72(sp)
10006810:	d9000b17 	ldw	r4,44(sp)
10006814:	2003b026 	beq	r4,zero,100076d8 <_dtoa_r+0x1394>
10006818:	50bfffc4 	addi	r2,r10,-1
1000681c:	100490fa 	slli	r2,r2,3
10006820:	00c40074 	movhi	r3,4097
10006824:	18d4fa04 	addi	r3,r3,21480
10006828:	1885883a 	add	r2,r3,r2
1000682c:	11800017 	ldw	r6,0(r2)
10006830:	11c00117 	ldw	r7,4(r2)
10006834:	d8800717 	ldw	r2,28(sp)
10006838:	0009883a 	mov	r4,zero
1000683c:	014ff834 	movhi	r5,16352
10006840:	da801615 	stw	r10,88(sp)
10006844:	15c00044 	addi	r23,r2,1
10006848:	000e6bc0 	call	1000e6bc <__divdf3>
1000684c:	d9c00e17 	ldw	r7,56(sp)
10006850:	880d883a 	mov	r6,r17
10006854:	1009883a 	mov	r4,r2
10006858:	180b883a 	mov	r5,r3
1000685c:	000faec0 	call	1000faec <__subdf3>
10006860:	a80b883a 	mov	r5,r21
10006864:	a009883a 	mov	r4,r20
10006868:	d8c01015 	stw	r3,64(sp)
1000686c:	d8800e15 	stw	r2,56(sp)
10006870:	00103bc0 	call	100103bc <__fixdfsi>
10006874:	1009883a 	mov	r4,r2
10006878:	d8801715 	stw	r2,92(sp)
1000687c:	00104440 	call	10010444 <__floatsidf>
10006880:	a009883a 	mov	r4,r20
10006884:	a80b883a 	mov	r5,r21
10006888:	100d883a 	mov	r6,r2
1000688c:	180f883a 	mov	r7,r3
10006890:	000faec0 	call	1000faec <__subdf3>
10006894:	da001717 	ldw	r8,92(sp)
10006898:	1829883a 	mov	r20,r3
1000689c:	d8c00717 	ldw	r3,28(sp)
100068a0:	d9000e17 	ldw	r4,56(sp)
100068a4:	d9401017 	ldw	r5,64(sp)
100068a8:	42000c04 	addi	r8,r8,48
100068ac:	1023883a 	mov	r17,r2
100068b0:	1a000005 	stb	r8,0(r3)
100068b4:	880d883a 	mov	r6,r17
100068b8:	a00f883a 	mov	r7,r20
100068bc:	402b883a 	mov	r21,r8
100068c0:	000f0c00 	call	1000f0c0 <__gedf2>
100068c4:	00844516 	blt	zero,r2,100079dc <_dtoa_r+0x1698>
100068c8:	0009883a 	mov	r4,zero
100068cc:	014ffc34 	movhi	r5,16368
100068d0:	880d883a 	mov	r6,r17
100068d4:	a00f883a 	mov	r7,r20
100068d8:	000faec0 	call	1000faec <__subdf3>
100068dc:	d9000e17 	ldw	r4,56(sp)
100068e0:	d9401017 	ldw	r5,64(sp)
100068e4:	100d883a 	mov	r6,r2
100068e8:	180f883a 	mov	r7,r3
100068ec:	000f0c00 	call	1000f0c0 <__gedf2>
100068f0:	da801617 	ldw	r10,88(sp)
100068f4:	00843616 	blt	zero,r2,100079d0 <_dtoa_r+0x168c>
100068f8:	00800044 	movi	r2,1
100068fc:	12806e0e 	bge	r2,r10,10006ab8 <_dtoa_r+0x774>
10006900:	d9000717 	ldw	r4,28(sp)
10006904:	dd801315 	stw	r22,76(sp)
10006908:	dc001115 	stw	r16,68(sp)
1000690c:	2295883a 	add	r10,r4,r10
10006910:	dcc01415 	stw	r19,80(sp)
10006914:	502d883a 	mov	r22,r10
10006918:	dcc01017 	ldw	r19,64(sp)
1000691c:	b821883a 	mov	r16,r23
10006920:	dc801015 	stw	r18,64(sp)
10006924:	dc800e17 	ldw	r18,56(sp)
10006928:	00000906 	br	10006950 <_dtoa_r+0x60c>
1000692c:	000faec0 	call	1000faec <__subdf3>
10006930:	1009883a 	mov	r4,r2
10006934:	180b883a 	mov	r5,r3
10006938:	900d883a 	mov	r6,r18
1000693c:	980f883a 	mov	r7,r19
10006940:	000f1a00 	call	1000f1a0 <__ledf2>
10006944:	10040e16 	blt	r2,zero,10007980 <_dtoa_r+0x163c>
10006948:	b821883a 	mov	r16,r23
1000694c:	bd841026 	beq	r23,r22,10007990 <_dtoa_r+0x164c>
10006950:	9009883a 	mov	r4,r18
10006954:	980b883a 	mov	r5,r19
10006958:	000d883a 	mov	r6,zero
1000695c:	01d00934 	movhi	r7,16420
10006960:	000f2800 	call	1000f280 <__muldf3>
10006964:	000d883a 	mov	r6,zero
10006968:	01d00934 	movhi	r7,16420
1000696c:	8809883a 	mov	r4,r17
10006970:	a00b883a 	mov	r5,r20
10006974:	1025883a 	mov	r18,r2
10006978:	1827883a 	mov	r19,r3
1000697c:	000f2800 	call	1000f280 <__muldf3>
10006980:	180b883a 	mov	r5,r3
10006984:	1009883a 	mov	r4,r2
10006988:	1823883a 	mov	r17,r3
1000698c:	1029883a 	mov	r20,r2
10006990:	00103bc0 	call	100103bc <__fixdfsi>
10006994:	1009883a 	mov	r4,r2
10006998:	102b883a 	mov	r21,r2
1000699c:	00104440 	call	10010444 <__floatsidf>
100069a0:	a009883a 	mov	r4,r20
100069a4:	880b883a 	mov	r5,r17
100069a8:	100d883a 	mov	r6,r2
100069ac:	180f883a 	mov	r7,r3
100069b0:	000faec0 	call	1000faec <__subdf3>
100069b4:	ad400c04 	addi	r21,r21,48
100069b8:	1009883a 	mov	r4,r2
100069bc:	180b883a 	mov	r5,r3
100069c0:	900d883a 	mov	r6,r18
100069c4:	980f883a 	mov	r7,r19
100069c8:	85400005 	stb	r21,0(r16)
100069cc:	1023883a 	mov	r17,r2
100069d0:	1829883a 	mov	r20,r3
100069d4:	000f1a00 	call	1000f1a0 <__ledf2>
100069d8:	bdc00044 	addi	r23,r23,1
100069dc:	0009883a 	mov	r4,zero
100069e0:	014ffc34 	movhi	r5,16368
100069e4:	880d883a 	mov	r6,r17
100069e8:	a00f883a 	mov	r7,r20
100069ec:	103fcf0e 	bge	r2,zero,1000692c <__alt_data_end+0xf800692c>
100069f0:	d9801217 	ldw	r6,72(sp)
100069f4:	dc001117 	ldw	r16,68(sp)
100069f8:	d9800515 	stw	r6,20(sp)
100069fc:	8009883a 	mov	r4,r16
10006a00:	e00b883a 	mov	r5,fp
10006a04:	0009a280 	call	10009a28 <_Bfree>
10006a08:	d8c00517 	ldw	r3,20(sp)
10006a0c:	d9002317 	ldw	r4,140(sp)
10006a10:	d9802517 	ldw	r6,148(sp)
10006a14:	b8000005 	stb	zero,0(r23)
10006a18:	18800044 	addi	r2,r3,1
10006a1c:	20800015 	stw	r2,0(r4)
10006a20:	30027226 	beq	r6,zero,100073ec <_dtoa_r+0x10a8>
10006a24:	35c00015 	stw	r23,0(r6)
10006a28:	d8800717 	ldw	r2,28(sp)
10006a2c:	003e7406 	br	10006400 <__alt_data_end+0xf8006400>
10006a30:	00800434 	movhi	r2,16
10006a34:	10bfffc4 	addi	r2,r2,-1
10006a38:	a8aa703a 	and	r21,r21,r2
10006a3c:	a83e801e 	bne	r21,zero,10006440 <__alt_data_end+0xf8006440>
10006a40:	00840074 	movhi	r2,4097
10006a44:	1094db04 	addi	r2,r2,21356
10006a48:	003e7f06 	br	10006448 <__alt_data_end+0xf8006448>
10006a4c:	10c00204 	addi	r3,r2,8
10006a50:	003e8206 	br	1000645c <__alt_data_end+0xf800645c>
10006a54:	01400434 	movhi	r5,16
10006a58:	297fffc4 	addi	r5,r5,-1
10006a5c:	994a703a 	and	r5,r19,r5
10006a60:	9009883a 	mov	r4,r18
10006a64:	8c7f0044 	addi	r17,r17,-1023
10006a68:	294ffc34 	orhi	r5,r5,16368
10006a6c:	dd000217 	ldw	r20,8(sp)
10006a70:	d8000f15 	stw	zero,60(sp)
10006a74:	003e9f06 	br	100064f4 <__alt_data_end+0xf80064f4>
10006a78:	00840074 	movhi	r2,4097
10006a7c:	1094d204 	addi	r2,r2,21320
10006a80:	003e5f06 	br	10006400 <__alt_data_end+0xf8006400>
10006a84:	80001115 	stw	zero,68(r16)
10006a88:	8009883a 	mov	r4,r16
10006a8c:	000b883a 	mov	r5,zero
10006a90:	00099800 	call	10009980 <_Balloc>
10006a94:	01bfffc4 	movi	r6,-1
10006a98:	d8800715 	stw	r2,28(sp)
10006a9c:	80801015 	stw	r2,64(r16)
10006aa0:	00800044 	movi	r2,1
10006aa4:	d9800615 	stw	r6,24(sp)
10006aa8:	d8800b15 	stw	r2,44(sp)
10006aac:	d8002215 	stw	zero,136(sp)
10006ab0:	d9800d15 	stw	r6,52(sp)
10006ab4:	d8000315 	stw	zero,12(sp)
10006ab8:	d8800117 	ldw	r2,4(sp)
10006abc:	10008e16 	blt	r2,zero,10006cf8 <_dtoa_r+0x9b4>
10006ac0:	d9000517 	ldw	r4,20(sp)
10006ac4:	00c00384 	movi	r3,14
10006ac8:	19008b16 	blt	r3,r4,10006cf8 <_dtoa_r+0x9b4>
10006acc:	200490fa 	slli	r2,r4,3
10006ad0:	00c40074 	movhi	r3,4097
10006ad4:	d9802217 	ldw	r6,136(sp)
10006ad8:	18d4fa04 	addi	r3,r3,21480
10006adc:	1885883a 	add	r2,r3,r2
10006ae0:	14400017 	ldw	r17,0(r2)
10006ae4:	15000117 	ldw	r20,4(r2)
10006ae8:	3001c716 	blt	r6,zero,10007208 <_dtoa_r+0xec4>
10006aec:	880d883a 	mov	r6,r17
10006af0:	a00f883a 	mov	r7,r20
10006af4:	9009883a 	mov	r4,r18
10006af8:	980b883a 	mov	r5,r19
10006afc:	000e6bc0 	call	1000e6bc <__divdf3>
10006b00:	180b883a 	mov	r5,r3
10006b04:	1009883a 	mov	r4,r2
10006b08:	00103bc0 	call	100103bc <__fixdfsi>
10006b0c:	1009883a 	mov	r4,r2
10006b10:	102d883a 	mov	r22,r2
10006b14:	00104440 	call	10010444 <__floatsidf>
10006b18:	1009883a 	mov	r4,r2
10006b1c:	180b883a 	mov	r5,r3
10006b20:	880d883a 	mov	r6,r17
10006b24:	a00f883a 	mov	r7,r20
10006b28:	000f2800 	call	1000f280 <__muldf3>
10006b2c:	9009883a 	mov	r4,r18
10006b30:	980b883a 	mov	r5,r19
10006b34:	100d883a 	mov	r6,r2
10006b38:	180f883a 	mov	r7,r3
10006b3c:	000faec0 	call	1000faec <__subdf3>
10006b40:	d9000717 	ldw	r4,28(sp)
10006b44:	d9800617 	ldw	r6,24(sp)
10006b48:	180b883a 	mov	r5,r3
10006b4c:	b0c00c04 	addi	r3,r22,48
10006b50:	20c00005 	stb	r3,0(r4)
10006b54:	25c00044 	addi	r23,r4,1
10006b58:	01000044 	movi	r4,1
10006b5c:	1011883a 	mov	r8,r2
10006b60:	2807883a 	mov	r3,r5
10006b64:	31003d26 	beq	r6,r4,10006c5c <_dtoa_r+0x918>
10006b68:	000d883a 	mov	r6,zero
10006b6c:	01d00934 	movhi	r7,16420
10006b70:	1009883a 	mov	r4,r2
10006b74:	000f2800 	call	1000f280 <__muldf3>
10006b78:	1009883a 	mov	r4,r2
10006b7c:	180b883a 	mov	r5,r3
10006b80:	000d883a 	mov	r6,zero
10006b84:	000f883a 	mov	r7,zero
10006b88:	1027883a 	mov	r19,r2
10006b8c:	182b883a 	mov	r21,r3
10006b90:	000f03c0 	call	1000f03c <__eqdf2>
10006b94:	103f9926 	beq	r2,zero,100069fc <__alt_data_end+0xf80069fc>
10006b98:	d8c00617 	ldw	r3,24(sp)
10006b9c:	d9000717 	ldw	r4,28(sp)
10006ba0:	b825883a 	mov	r18,r23
10006ba4:	18bfffc4 	addi	r2,r3,-1
10006ba8:	20ad883a 	add	r22,r4,r2
10006bac:	dc000315 	stw	r16,12(sp)
10006bb0:	00000a06 	br	10006bdc <_dtoa_r+0x898>
10006bb4:	000f2800 	call	1000f280 <__muldf3>
10006bb8:	1009883a 	mov	r4,r2
10006bbc:	180b883a 	mov	r5,r3
10006bc0:	000d883a 	mov	r6,zero
10006bc4:	000f883a 	mov	r7,zero
10006bc8:	1027883a 	mov	r19,r2
10006bcc:	182b883a 	mov	r21,r3
10006bd0:	b825883a 	mov	r18,r23
10006bd4:	000f03c0 	call	1000f03c <__eqdf2>
10006bd8:	10022626 	beq	r2,zero,10007474 <_dtoa_r+0x1130>
10006bdc:	880d883a 	mov	r6,r17
10006be0:	a00f883a 	mov	r7,r20
10006be4:	9809883a 	mov	r4,r19
10006be8:	a80b883a 	mov	r5,r21
10006bec:	000e6bc0 	call	1000e6bc <__divdf3>
10006bf0:	180b883a 	mov	r5,r3
10006bf4:	1009883a 	mov	r4,r2
10006bf8:	00103bc0 	call	100103bc <__fixdfsi>
10006bfc:	1009883a 	mov	r4,r2
10006c00:	1021883a 	mov	r16,r2
10006c04:	00104440 	call	10010444 <__floatsidf>
10006c08:	1009883a 	mov	r4,r2
10006c0c:	180b883a 	mov	r5,r3
10006c10:	880d883a 	mov	r6,r17
10006c14:	a00f883a 	mov	r7,r20
10006c18:	000f2800 	call	1000f280 <__muldf3>
10006c1c:	9809883a 	mov	r4,r19
10006c20:	a80b883a 	mov	r5,r21
10006c24:	100d883a 	mov	r6,r2
10006c28:	180f883a 	mov	r7,r3
10006c2c:	000faec0 	call	1000faec <__subdf3>
10006c30:	82000c04 	addi	r8,r16,48
10006c34:	92000005 	stb	r8,0(r18)
10006c38:	1009883a 	mov	r4,r2
10006c3c:	180b883a 	mov	r5,r3
10006c40:	000d883a 	mov	r6,zero
10006c44:	01d00934 	movhi	r7,16420
10006c48:	1011883a 	mov	r8,r2
10006c4c:	bdc00044 	addi	r23,r23,1
10006c50:	95bfd81e 	bne	r18,r22,10006bb4 <__alt_data_end+0xf8006bb4>
10006c54:	802d883a 	mov	r22,r16
10006c58:	dc000317 	ldw	r16,12(sp)
10006c5c:	4009883a 	mov	r4,r8
10006c60:	180b883a 	mov	r5,r3
10006c64:	400d883a 	mov	r6,r8
10006c68:	180f883a 	mov	r7,r3
10006c6c:	000de200 	call	1000de20 <__adddf3>
10006c70:	8809883a 	mov	r4,r17
10006c74:	a00b883a 	mov	r5,r20
10006c78:	100d883a 	mov	r6,r2
10006c7c:	180f883a 	mov	r7,r3
10006c80:	1027883a 	mov	r19,r2
10006c84:	1825883a 	mov	r18,r3
10006c88:	000f1a00 	call	1000f1a0 <__ledf2>
10006c8c:	10000816 	blt	r2,zero,10006cb0 <_dtoa_r+0x96c>
10006c90:	8809883a 	mov	r4,r17
10006c94:	a00b883a 	mov	r5,r20
10006c98:	980d883a 	mov	r6,r19
10006c9c:	900f883a 	mov	r7,r18
10006ca0:	000f03c0 	call	1000f03c <__eqdf2>
10006ca4:	103f551e 	bne	r2,zero,100069fc <__alt_data_end+0xf80069fc>
10006ca8:	b580004c 	andi	r22,r22,1
10006cac:	b03f5326 	beq	r22,zero,100069fc <__alt_data_end+0xf80069fc>
10006cb0:	bd7fffc3 	ldbu	r21,-1(r23)
10006cb4:	b8bfffc4 	addi	r2,r23,-1
10006cb8:	1007883a 	mov	r3,r2
10006cbc:	01400e44 	movi	r5,57
10006cc0:	d9800717 	ldw	r6,28(sp)
10006cc4:	00000506 	br	10006cdc <_dtoa_r+0x998>
10006cc8:	18ffffc4 	addi	r3,r3,-1
10006ccc:	30825e26 	beq	r6,r2,10007648 <_dtoa_r+0x1304>
10006cd0:	1d400003 	ldbu	r21,0(r3)
10006cd4:	102f883a 	mov	r23,r2
10006cd8:	10bfffc4 	addi	r2,r2,-1
10006cdc:	a9003fcc 	andi	r4,r21,255
10006ce0:	2100201c 	xori	r4,r4,128
10006ce4:	213fe004 	addi	r4,r4,-128
10006ce8:	217ff726 	beq	r4,r5,10006cc8 <__alt_data_end+0xf8006cc8>
10006cec:	aa000044 	addi	r8,r21,1
10006cf0:	12000005 	stb	r8,0(r2)
10006cf4:	003f4106 	br	100069fc <__alt_data_end+0xf80069fc>
10006cf8:	d8c00b17 	ldw	r3,44(sp)
10006cfc:	18006726 	beq	r3,zero,10006e9c <_dtoa_r+0xb58>
10006d00:	d9000317 	ldw	r4,12(sp)
10006d04:	00c00044 	movi	r3,1
10006d08:	19016a0e 	bge	r3,r4,100072b4 <_dtoa_r+0xf70>
10006d0c:	d8800617 	ldw	r2,24(sp)
10006d10:	d8c00917 	ldw	r3,36(sp)
10006d14:	157fffc4 	addi	r21,r2,-1
10006d18:	1d420716 	blt	r3,r21,10007538 <_dtoa_r+0x11f4>
10006d1c:	1d6bc83a 	sub	r21,r3,r21
10006d20:	d8800617 	ldw	r2,24(sp)
10006d24:	1002c716 	blt	r2,zero,10007844 <_dtoa_r+0x1500>
10006d28:	dd000817 	ldw	r20,32(sp)
10006d2c:	d8800617 	ldw	r2,24(sp)
10006d30:	d9800817 	ldw	r6,32(sp)
10006d34:	8009883a 	mov	r4,r16
10006d38:	01400044 	movi	r5,1
10006d3c:	308d883a 	add	r6,r6,r2
10006d40:	d9800815 	stw	r6,32(sp)
10006d44:	b0ad883a 	add	r22,r22,r2
10006d48:	0009da80 	call	10009da8 <__i2b>
10006d4c:	1023883a 	mov	r17,r2
10006d50:	a0000826 	beq	r20,zero,10006d74 <_dtoa_r+0xa30>
10006d54:	0580070e 	bge	zero,r22,10006d74 <_dtoa_r+0xa30>
10006d58:	b005883a 	mov	r2,r22
10006d5c:	a5812016 	blt	r20,r22,100071e0 <_dtoa_r+0xe9c>
10006d60:	d8c00817 	ldw	r3,32(sp)
10006d64:	a0a9c83a 	sub	r20,r20,r2
10006d68:	b0adc83a 	sub	r22,r22,r2
10006d6c:	1887c83a 	sub	r3,r3,r2
10006d70:	d8c00815 	stw	r3,32(sp)
10006d74:	d9000917 	ldw	r4,36(sp)
10006d78:	0100140e 	bge	zero,r4,10006dcc <_dtoa_r+0xa88>
10006d7c:	d9800b17 	ldw	r6,44(sp)
10006d80:	3001e526 	beq	r6,zero,10007518 <_dtoa_r+0x11d4>
10006d84:	05400e0e 	bge	zero,r21,10006dc0 <_dtoa_r+0xa7c>
10006d88:	880b883a 	mov	r5,r17
10006d8c:	8009883a 	mov	r4,r16
10006d90:	a80d883a 	mov	r6,r21
10006d94:	000a0740 	call	1000a074 <__pow5mult>
10006d98:	e00d883a 	mov	r6,fp
10006d9c:	8009883a 	mov	r4,r16
10006da0:	100b883a 	mov	r5,r2
10006da4:	1023883a 	mov	r17,r2
10006da8:	0009de40 	call	10009de4 <__multiply>
10006dac:	102f883a 	mov	r23,r2
10006db0:	e00b883a 	mov	r5,fp
10006db4:	8009883a 	mov	r4,r16
10006db8:	0009a280 	call	10009a28 <_Bfree>
10006dbc:	b839883a 	mov	fp,r23
10006dc0:	d8800917 	ldw	r2,36(sp)
10006dc4:	154dc83a 	sub	r6,r2,r21
10006dc8:	3001281e 	bne	r6,zero,1000726c <_dtoa_r+0xf28>
10006dcc:	05c00044 	movi	r23,1
10006dd0:	8009883a 	mov	r4,r16
10006dd4:	b80b883a 	mov	r5,r23
10006dd8:	0009da80 	call	10009da8 <__i2b>
10006ddc:	d8c00a17 	ldw	r3,40(sp)
10006de0:	102b883a 	mov	r21,r2
10006de4:	00c0310e 	bge	zero,r3,10006eac <_dtoa_r+0xb68>
10006de8:	8009883a 	mov	r4,r16
10006dec:	100b883a 	mov	r5,r2
10006df0:	180d883a 	mov	r6,r3
10006df4:	000a0740 	call	1000a074 <__pow5mult>
10006df8:	d9000317 	ldw	r4,12(sp)
10006dfc:	102b883a 	mov	r21,r2
10006e00:	b9011f0e 	bge	r23,r4,10007280 <_dtoa_r+0xf3c>
10006e04:	0027883a 	mov	r19,zero
10006e08:	a8800417 	ldw	r2,16(r21)
10006e0c:	10800104 	addi	r2,r2,4
10006e10:	1085883a 	add	r2,r2,r2
10006e14:	1085883a 	add	r2,r2,r2
10006e18:	a885883a 	add	r2,r21,r2
10006e1c:	11000017 	ldw	r4,0(r2)
10006e20:	0009c900 	call	10009c90 <__hi0bits>
10006e24:	00c00804 	movi	r3,32
10006e28:	1885c83a 	sub	r2,r3,r2
10006e2c:	00002506 	br	10006ec4 <_dtoa_r+0xb80>
10006e30:	01800044 	movi	r6,1
10006e34:	d9800c15 	stw	r6,48(sp)
10006e38:	003dec06 	br	100065ec <__alt_data_end+0xf80065ec>
10006e3c:	d8c00817 	ldw	r3,32(sp)
10006e40:	d9000517 	ldw	r4,20(sp)
10006e44:	d8000a15 	stw	zero,40(sp)
10006e48:	1907c83a 	sub	r3,r3,r4
10006e4c:	010dc83a 	sub	r6,zero,r4
10006e50:	d8c00815 	stw	r3,32(sp)
10006e54:	d9800915 	stw	r6,36(sp)
10006e58:	003ded06 	br	10006610 <__alt_data_end+0xf8006610>
10006e5c:	05adc83a 	sub	r22,zero,r22
10006e60:	dd800815 	stw	r22,32(sp)
10006e64:	002d883a 	mov	r22,zero
10006e68:	003de406 	br	100065fc <__alt_data_end+0xf80065fc>
10006e6c:	d9000517 	ldw	r4,20(sp)
10006e70:	00104440 	call	10010444 <__floatsidf>
10006e74:	1009883a 	mov	r4,r2
10006e78:	180b883a 	mov	r5,r3
10006e7c:	b00d883a 	mov	r6,r22
10006e80:	a80f883a 	mov	r7,r21
10006e84:	000f03c0 	call	1000f03c <__eqdf2>
10006e88:	103dc726 	beq	r2,zero,100065a8 <__alt_data_end+0xf80065a8>
10006e8c:	d8800517 	ldw	r2,20(sp)
10006e90:	10bfffc4 	addi	r2,r2,-1
10006e94:	d8800515 	stw	r2,20(sp)
10006e98:	003dc306 	br	100065a8 <__alt_data_end+0xf80065a8>
10006e9c:	dd400917 	ldw	r21,36(sp)
10006ea0:	dd000817 	ldw	r20,32(sp)
10006ea4:	0023883a 	mov	r17,zero
10006ea8:	003fa906 	br	10006d50 <__alt_data_end+0xf8006d50>
10006eac:	d9800317 	ldw	r6,12(sp)
10006eb0:	b981670e 	bge	r23,r6,10007450 <_dtoa_r+0x110c>
10006eb4:	0027883a 	mov	r19,zero
10006eb8:	d8c00a17 	ldw	r3,40(sp)
10006ebc:	183fd21e 	bne	r3,zero,10006e08 <__alt_data_end+0xf8006e08>
10006ec0:	00800044 	movi	r2,1
10006ec4:	1585883a 	add	r2,r2,r22
10006ec8:	108007cc 	andi	r2,r2,31
10006ecc:	10005f26 	beq	r2,zero,1000704c <_dtoa_r+0xd08>
10006ed0:	00c00804 	movi	r3,32
10006ed4:	1887c83a 	sub	r3,r3,r2
10006ed8:	01000104 	movi	r4,4
10006edc:	20c2dd0e 	bge	r4,r3,10007a54 <_dtoa_r+0x1710>
10006ee0:	d9000817 	ldw	r4,32(sp)
10006ee4:	00c00704 	movi	r3,28
10006ee8:	1885c83a 	sub	r2,r3,r2
10006eec:	2089883a 	add	r4,r4,r2
10006ef0:	d9000815 	stw	r4,32(sp)
10006ef4:	a0a9883a 	add	r20,r20,r2
10006ef8:	b0ad883a 	add	r22,r22,r2
10006efc:	d8800817 	ldw	r2,32(sp)
10006f00:	0080050e 	bge	zero,r2,10006f18 <_dtoa_r+0xbd4>
10006f04:	e00b883a 	mov	r5,fp
10006f08:	8009883a 	mov	r4,r16
10006f0c:	100d883a 	mov	r6,r2
10006f10:	000a1b40 	call	1000a1b4 <__lshift>
10006f14:	1039883a 	mov	fp,r2
10006f18:	0580050e 	bge	zero,r22,10006f30 <_dtoa_r+0xbec>
10006f1c:	a80b883a 	mov	r5,r21
10006f20:	8009883a 	mov	r4,r16
10006f24:	b00d883a 	mov	r6,r22
10006f28:	000a1b40 	call	1000a1b4 <__lshift>
10006f2c:	102b883a 	mov	r21,r2
10006f30:	d8c00c17 	ldw	r3,48(sp)
10006f34:	1801161e 	bne	r3,zero,10007390 <_dtoa_r+0x104c>
10006f38:	d8c00617 	ldw	r3,24(sp)
10006f3c:	00c12d0e 	bge	zero,r3,100073f4 <_dtoa_r+0x10b0>
10006f40:	d8c00b17 	ldw	r3,44(sp)
10006f44:	1800571e 	bne	r3,zero,100070a4 <_dtoa_r+0xd60>
10006f48:	dc800717 	ldw	r18,28(sp)
10006f4c:	dcc00617 	ldw	r19,24(sp)
10006f50:	9029883a 	mov	r20,r18
10006f54:	00000206 	br	10006f60 <_dtoa_r+0xc1c>
10006f58:	0009a500 	call	10009a50 <__multadd>
10006f5c:	1039883a 	mov	fp,r2
10006f60:	e009883a 	mov	r4,fp
10006f64:	a80b883a 	mov	r5,r21
10006f68:	000611c0 	call	1000611c <quorem>
10006f6c:	10800c04 	addi	r2,r2,48
10006f70:	90800005 	stb	r2,0(r18)
10006f74:	94800044 	addi	r18,r18,1
10006f78:	9507c83a 	sub	r3,r18,r20
10006f7c:	8009883a 	mov	r4,r16
10006f80:	e00b883a 	mov	r5,fp
10006f84:	01800284 	movi	r6,10
10006f88:	000f883a 	mov	r7,zero
10006f8c:	1cfff216 	blt	r3,r19,10006f58 <__alt_data_end+0xf8006f58>
10006f90:	1011883a 	mov	r8,r2
10006f94:	d8800617 	ldw	r2,24(sp)
10006f98:	00822e0e 	bge	zero,r2,10007854 <_dtoa_r+0x1510>
10006f9c:	d9000717 	ldw	r4,28(sp)
10006fa0:	0025883a 	mov	r18,zero
10006fa4:	20af883a 	add	r23,r4,r2
10006fa8:	e00b883a 	mov	r5,fp
10006fac:	01800044 	movi	r6,1
10006fb0:	8009883a 	mov	r4,r16
10006fb4:	da001715 	stw	r8,92(sp)
10006fb8:	000a1b40 	call	1000a1b4 <__lshift>
10006fbc:	1009883a 	mov	r4,r2
10006fc0:	a80b883a 	mov	r5,r21
10006fc4:	1039883a 	mov	fp,r2
10006fc8:	000a2fc0 	call	1000a2fc <__mcmp>
10006fcc:	da001717 	ldw	r8,92(sp)
10006fd0:	00816e0e 	bge	zero,r2,1000758c <_dtoa_r+0x1248>
10006fd4:	b93fffc3 	ldbu	r4,-1(r23)
10006fd8:	b8bfffc4 	addi	r2,r23,-1
10006fdc:	1007883a 	mov	r3,r2
10006fe0:	01800e44 	movi	r6,57
10006fe4:	d9c00717 	ldw	r7,28(sp)
10006fe8:	00000506 	br	10007000 <_dtoa_r+0xcbc>
10006fec:	18ffffc4 	addi	r3,r3,-1
10006ff0:	38811926 	beq	r7,r2,10007458 <_dtoa_r+0x1114>
10006ff4:	19000003 	ldbu	r4,0(r3)
10006ff8:	102f883a 	mov	r23,r2
10006ffc:	10bfffc4 	addi	r2,r2,-1
10007000:	21403fcc 	andi	r5,r4,255
10007004:	2940201c 	xori	r5,r5,128
10007008:	297fe004 	addi	r5,r5,-128
1000700c:	29bff726 	beq	r5,r6,10006fec <__alt_data_end+0xf8006fec>
10007010:	21000044 	addi	r4,r4,1
10007014:	11000005 	stb	r4,0(r2)
10007018:	8009883a 	mov	r4,r16
1000701c:	a80b883a 	mov	r5,r21
10007020:	0009a280 	call	10009a28 <_Bfree>
10007024:	883e7526 	beq	r17,zero,100069fc <__alt_data_end+0xf80069fc>
10007028:	90000426 	beq	r18,zero,1000703c <_dtoa_r+0xcf8>
1000702c:	94400326 	beq	r18,r17,1000703c <_dtoa_r+0xcf8>
10007030:	8009883a 	mov	r4,r16
10007034:	900b883a 	mov	r5,r18
10007038:	0009a280 	call	10009a28 <_Bfree>
1000703c:	8009883a 	mov	r4,r16
10007040:	880b883a 	mov	r5,r17
10007044:	0009a280 	call	10009a28 <_Bfree>
10007048:	003e6c06 	br	100069fc <__alt_data_end+0xf80069fc>
1000704c:	00800704 	movi	r2,28
10007050:	d9800817 	ldw	r6,32(sp)
10007054:	a0a9883a 	add	r20,r20,r2
10007058:	b0ad883a 	add	r22,r22,r2
1000705c:	308d883a 	add	r6,r6,r2
10007060:	d9800815 	stw	r6,32(sp)
10007064:	003fa506 	br	10006efc <__alt_data_end+0xf8006efc>
10007068:	013efb84 	movi	r4,-1042
1000706c:	246bc83a 	sub	r21,r4,r17
10007070:	9548983a 	sll	r4,r18,r21
10007074:	003d1806 	br	100064d8 <__alt_data_end+0xf80064d8>
10007078:	d8000c15 	stw	zero,48(sp)
1000707c:	003d5b06 	br	100065ec <__alt_data_end+0xf80065ec>
10007080:	880b883a 	mov	r5,r17
10007084:	8009883a 	mov	r4,r16
10007088:	01800284 	movi	r6,10
1000708c:	000f883a 	mov	r7,zero
10007090:	0009a500 	call	10009a50 <__multadd>
10007094:	1023883a 	mov	r17,r2
10007098:	d8800d17 	ldw	r2,52(sp)
1000709c:	0082550e 	bge	zero,r2,100079f4 <_dtoa_r+0x16b0>
100070a0:	d8800615 	stw	r2,24(sp)
100070a4:	0500050e 	bge	zero,r20,100070bc <_dtoa_r+0xd78>
100070a8:	880b883a 	mov	r5,r17
100070ac:	8009883a 	mov	r4,r16
100070b0:	a00d883a 	mov	r6,r20
100070b4:	000a1b40 	call	1000a1b4 <__lshift>
100070b8:	1023883a 	mov	r17,r2
100070bc:	98016a1e 	bne	r19,zero,10007668 <_dtoa_r+0x1324>
100070c0:	8829883a 	mov	r20,r17
100070c4:	d9000617 	ldw	r4,24(sp)
100070c8:	dcc00717 	ldw	r19,28(sp)
100070cc:	9480004c 	andi	r18,r18,1
100070d0:	20bfffc4 	addi	r2,r4,-1
100070d4:	9885883a 	add	r2,r19,r2
100070d8:	d8800415 	stw	r2,16(sp)
100070dc:	dc800615 	stw	r18,24(sp)
100070e0:	e009883a 	mov	r4,fp
100070e4:	a80b883a 	mov	r5,r21
100070e8:	000611c0 	call	1000611c <quorem>
100070ec:	e009883a 	mov	r4,fp
100070f0:	880b883a 	mov	r5,r17
100070f4:	102f883a 	mov	r23,r2
100070f8:	000a2fc0 	call	1000a2fc <__mcmp>
100070fc:	8009883a 	mov	r4,r16
10007100:	a80b883a 	mov	r5,r21
10007104:	a00d883a 	mov	r6,r20
10007108:	102d883a 	mov	r22,r2
1000710c:	000a35c0 	call	1000a35c <__mdiff>
10007110:	1007883a 	mov	r3,r2
10007114:	10800317 	ldw	r2,12(r2)
10007118:	bc800c04 	addi	r18,r23,48
1000711c:	1000971e 	bne	r2,zero,1000737c <_dtoa_r+0x1038>
10007120:	180b883a 	mov	r5,r3
10007124:	e009883a 	mov	r4,fp
10007128:	d8c01515 	stw	r3,84(sp)
1000712c:	000a2fc0 	call	1000a2fc <__mcmp>
10007130:	d8c01517 	ldw	r3,84(sp)
10007134:	8009883a 	mov	r4,r16
10007138:	d8801515 	stw	r2,84(sp)
1000713c:	180b883a 	mov	r5,r3
10007140:	0009a280 	call	10009a28 <_Bfree>
10007144:	d8801517 	ldw	r2,84(sp)
10007148:	1000041e 	bne	r2,zero,1000715c <_dtoa_r+0xe18>
1000714c:	d9800317 	ldw	r6,12(sp)
10007150:	3000021e 	bne	r6,zero,1000715c <_dtoa_r+0xe18>
10007154:	d8c00617 	ldw	r3,24(sp)
10007158:	18007626 	beq	r3,zero,10007334 <_dtoa_r+0xff0>
1000715c:	b0005b16 	blt	r22,zero,100072cc <_dtoa_r+0xf88>
10007160:	b000041e 	bne	r22,zero,10007174 <_dtoa_r+0xe30>
10007164:	d9000317 	ldw	r4,12(sp)
10007168:	2000021e 	bne	r4,zero,10007174 <_dtoa_r+0xe30>
1000716c:	d8c00617 	ldw	r3,24(sp)
10007170:	18005626 	beq	r3,zero,100072cc <_dtoa_r+0xf88>
10007174:	00814d16 	blt	zero,r2,100076ac <_dtoa_r+0x1368>
10007178:	d8c00417 	ldw	r3,16(sp)
1000717c:	9d800044 	addi	r22,r19,1
10007180:	9c800005 	stb	r18,0(r19)
10007184:	b02f883a 	mov	r23,r22
10007188:	98c14c26 	beq	r19,r3,100076bc <_dtoa_r+0x1378>
1000718c:	e00b883a 	mov	r5,fp
10007190:	8009883a 	mov	r4,r16
10007194:	01800284 	movi	r6,10
10007198:	000f883a 	mov	r7,zero
1000719c:	0009a500 	call	10009a50 <__multadd>
100071a0:	1039883a 	mov	fp,r2
100071a4:	8d006d26 	beq	r17,r20,1000735c <_dtoa_r+0x1018>
100071a8:	880b883a 	mov	r5,r17
100071ac:	01800284 	movi	r6,10
100071b0:	000f883a 	mov	r7,zero
100071b4:	8009883a 	mov	r4,r16
100071b8:	0009a500 	call	10009a50 <__multadd>
100071bc:	a00b883a 	mov	r5,r20
100071c0:	8009883a 	mov	r4,r16
100071c4:	01800284 	movi	r6,10
100071c8:	000f883a 	mov	r7,zero
100071cc:	1023883a 	mov	r17,r2
100071d0:	0009a500 	call	10009a50 <__multadd>
100071d4:	1029883a 	mov	r20,r2
100071d8:	b027883a 	mov	r19,r22
100071dc:	003fc006 	br	100070e0 <__alt_data_end+0xf80070e0>
100071e0:	a005883a 	mov	r2,r20
100071e4:	003ede06 	br	10006d60 <__alt_data_end+0xf8006d60>
100071e8:	01000044 	movi	r4,1
100071ec:	d9000b15 	stw	r4,44(sp)
100071f0:	d9802217 	ldw	r6,136(sp)
100071f4:	0180dc0e 	bge	zero,r6,10007568 <_dtoa_r+0x1224>
100071f8:	3023883a 	mov	r17,r6
100071fc:	d9800d15 	stw	r6,52(sp)
10007200:	d9800615 	stw	r6,24(sp)
10007204:	003d1e06 	br	10006680 <__alt_data_end+0xf8006680>
10007208:	d8800617 	ldw	r2,24(sp)
1000720c:	00be3716 	blt	zero,r2,10006aec <__alt_data_end+0xf8006aec>
10007210:	1000be1e 	bne	r2,zero,1000750c <_dtoa_r+0x11c8>
10007214:	8809883a 	mov	r4,r17
10007218:	a00b883a 	mov	r5,r20
1000721c:	000d883a 	mov	r6,zero
10007220:	01d00534 	movhi	r7,16404
10007224:	000f2800 	call	1000f280 <__muldf3>
10007228:	1009883a 	mov	r4,r2
1000722c:	180b883a 	mov	r5,r3
10007230:	900d883a 	mov	r6,r18
10007234:	980f883a 	mov	r7,r19
10007238:	000f0c00 	call	1000f0c0 <__gedf2>
1000723c:	002b883a 	mov	r21,zero
10007240:	0023883a 	mov	r17,zero
10007244:	10007a16 	blt	r2,zero,10007430 <_dtoa_r+0x10ec>
10007248:	d9002217 	ldw	r4,136(sp)
1000724c:	ddc00717 	ldw	r23,28(sp)
10007250:	0108303a 	nor	r4,zero,r4
10007254:	d9000515 	stw	r4,20(sp)
10007258:	8009883a 	mov	r4,r16
1000725c:	a80b883a 	mov	r5,r21
10007260:	0009a280 	call	10009a28 <_Bfree>
10007264:	883f751e 	bne	r17,zero,1000703c <__alt_data_end+0xf800703c>
10007268:	003de406 	br	100069fc <__alt_data_end+0xf80069fc>
1000726c:	e00b883a 	mov	r5,fp
10007270:	8009883a 	mov	r4,r16
10007274:	000a0740 	call	1000a074 <__pow5mult>
10007278:	1039883a 	mov	fp,r2
1000727c:	003ed306 	br	10006dcc <__alt_data_end+0xf8006dcc>
10007280:	903ee01e 	bne	r18,zero,10006e04 <__alt_data_end+0xf8006e04>
10007284:	00800434 	movhi	r2,16
10007288:	10bfffc4 	addi	r2,r2,-1
1000728c:	9884703a 	and	r2,r19,r2
10007290:	103f081e 	bne	r2,zero,10006eb4 <__alt_data_end+0xf8006eb4>
10007294:	9cdffc2c 	andhi	r19,r19,32752
10007298:	983f0626 	beq	r19,zero,10006eb4 <__alt_data_end+0xf8006eb4>
1000729c:	d8800817 	ldw	r2,32(sp)
100072a0:	b5800044 	addi	r22,r22,1
100072a4:	04c00044 	movi	r19,1
100072a8:	10800044 	addi	r2,r2,1
100072ac:	d8800815 	stw	r2,32(sp)
100072b0:	003f0106 	br	10006eb8 <__alt_data_end+0xf8006eb8>
100072b4:	d9800f17 	ldw	r6,60(sp)
100072b8:	30016826 	beq	r6,zero,1000785c <_dtoa_r+0x1518>
100072bc:	10810cc4 	addi	r2,r2,1075
100072c0:	dd400917 	ldw	r21,36(sp)
100072c4:	dd000817 	ldw	r20,32(sp)
100072c8:	003e9906 	br	10006d30 <__alt_data_end+0xf8006d30>
100072cc:	9011883a 	mov	r8,r18
100072d0:	4007883a 	mov	r3,r8
100072d4:	e02d883a 	mov	r22,fp
100072d8:	0080100e 	bge	zero,r2,1000731c <_dtoa_r+0xfd8>
100072dc:	01800044 	movi	r6,1
100072e0:	8009883a 	mov	r4,r16
100072e4:	e00b883a 	mov	r5,fp
100072e8:	da001515 	stw	r8,84(sp)
100072ec:	da001715 	stw	r8,92(sp)
100072f0:	000a1b40 	call	1000a1b4 <__lshift>
100072f4:	1009883a 	mov	r4,r2
100072f8:	a80b883a 	mov	r5,r21
100072fc:	102d883a 	mov	r22,r2
10007300:	000a2fc0 	call	1000a2fc <__mcmp>
10007304:	d8c01517 	ldw	r3,84(sp)
10007308:	da001717 	ldw	r8,92(sp)
1000730c:	0081a50e 	bge	zero,r2,100079a4 <_dtoa_r+0x1660>
10007310:	00800e44 	movi	r2,57
10007314:	40817b26 	beq	r8,r2,10007904 <_dtoa_r+0x15c0>
10007318:	40c00044 	addi	r3,r8,1
1000731c:	8825883a 	mov	r18,r17
10007320:	9dc00044 	addi	r23,r19,1
10007324:	98c00005 	stb	r3,0(r19)
10007328:	a023883a 	mov	r17,r20
1000732c:	b039883a 	mov	fp,r22
10007330:	003f3906 	br	10007018 <__alt_data_end+0xf8007018>
10007334:	00800e44 	movi	r2,57
10007338:	9011883a 	mov	r8,r18
1000733c:	90817226 	beq	r18,r2,10007908 <_dtoa_r+0x15c4>
10007340:	0580010e 	bge	zero,r22,10007348 <_dtoa_r+0x1004>
10007344:	ba000c44 	addi	r8,r23,49
10007348:	8825883a 	mov	r18,r17
1000734c:	9dc00044 	addi	r23,r19,1
10007350:	9a000005 	stb	r8,0(r19)
10007354:	a023883a 	mov	r17,r20
10007358:	003f2f06 	br	10007018 <__alt_data_end+0xf8007018>
1000735c:	880b883a 	mov	r5,r17
10007360:	8009883a 	mov	r4,r16
10007364:	01800284 	movi	r6,10
10007368:	000f883a 	mov	r7,zero
1000736c:	0009a500 	call	10009a50 <__multadd>
10007370:	1023883a 	mov	r17,r2
10007374:	1029883a 	mov	r20,r2
10007378:	003f9706 	br	100071d8 <__alt_data_end+0xf80071d8>
1000737c:	8009883a 	mov	r4,r16
10007380:	180b883a 	mov	r5,r3
10007384:	0009a280 	call	10009a28 <_Bfree>
10007388:	00800044 	movi	r2,1
1000738c:	003f7306 	br	1000715c <__alt_data_end+0xf800715c>
10007390:	e009883a 	mov	r4,fp
10007394:	a80b883a 	mov	r5,r21
10007398:	000a2fc0 	call	1000a2fc <__mcmp>
1000739c:	103ee60e 	bge	r2,zero,10006f38 <__alt_data_end+0xf8006f38>
100073a0:	8009883a 	mov	r4,r16
100073a4:	e00b883a 	mov	r5,fp
100073a8:	01800284 	movi	r6,10
100073ac:	000f883a 	mov	r7,zero
100073b0:	0009a500 	call	10009a50 <__multadd>
100073b4:	d9000517 	ldw	r4,20(sp)
100073b8:	d9800b17 	ldw	r6,44(sp)
100073bc:	1039883a 	mov	fp,r2
100073c0:	213fffc4 	addi	r4,r4,-1
100073c4:	d9000515 	stw	r4,20(sp)
100073c8:	303f2d1e 	bne	r6,zero,10007080 <__alt_data_end+0xf8007080>
100073cc:	d9000d17 	ldw	r4,52(sp)
100073d0:	0101780e 	bge	zero,r4,100079b4 <_dtoa_r+0x1670>
100073d4:	d9000615 	stw	r4,24(sp)
100073d8:	003edb06 	br	10006f48 <__alt_data_end+0xf8006f48>
100073dc:	00800084 	movi	r2,2
100073e0:	30818e1e 	bne	r6,r2,10007a1c <_dtoa_r+0x16d8>
100073e4:	d8000b15 	stw	zero,44(sp)
100073e8:	003f8106 	br	100071f0 <__alt_data_end+0xf80071f0>
100073ec:	d8800717 	ldw	r2,28(sp)
100073f0:	003c0306 	br	10006400 <__alt_data_end+0xf8006400>
100073f4:	d9000317 	ldw	r4,12(sp)
100073f8:	00800084 	movi	r2,2
100073fc:	113ed00e 	bge	r2,r4,10006f40 <__alt_data_end+0xf8006f40>
10007400:	d8c00617 	ldw	r3,24(sp)
10007404:	183f901e 	bne	r3,zero,10007248 <__alt_data_end+0xf8007248>
10007408:	a80b883a 	mov	r5,r21
1000740c:	8009883a 	mov	r4,r16
10007410:	01800144 	movi	r6,5
10007414:	000f883a 	mov	r7,zero
10007418:	0009a500 	call	10009a50 <__multadd>
1000741c:	e009883a 	mov	r4,fp
10007420:	100b883a 	mov	r5,r2
10007424:	102b883a 	mov	r21,r2
10007428:	000a2fc0 	call	1000a2fc <__mcmp>
1000742c:	00bf860e 	bge	zero,r2,10007248 <__alt_data_end+0xf8007248>
10007430:	d9800717 	ldw	r6,28(sp)
10007434:	00800c44 	movi	r2,49
10007438:	30800005 	stb	r2,0(r6)
1000743c:	d8800517 	ldw	r2,20(sp)
10007440:	35c00044 	addi	r23,r6,1
10007444:	10800044 	addi	r2,r2,1
10007448:	d8800515 	stw	r2,20(sp)
1000744c:	003f8206 	br	10007258 <__alt_data_end+0xf8007258>
10007450:	903e981e 	bne	r18,zero,10006eb4 <__alt_data_end+0xf8006eb4>
10007454:	003f8b06 	br	10007284 <__alt_data_end+0xf8007284>
10007458:	d9800517 	ldw	r6,20(sp)
1000745c:	d8c00717 	ldw	r3,28(sp)
10007460:	00800c44 	movi	r2,49
10007464:	31800044 	addi	r6,r6,1
10007468:	d9800515 	stw	r6,20(sp)
1000746c:	18800005 	stb	r2,0(r3)
10007470:	003ee906 	br	10007018 <__alt_data_end+0xf8007018>
10007474:	dc000317 	ldw	r16,12(sp)
10007478:	003d6006 	br	100069fc <__alt_data_end+0xf80069fc>
1000747c:	8809883a 	mov	r4,r17
10007480:	00104440 	call	10010444 <__floatsidf>
10007484:	a009883a 	mov	r4,r20
10007488:	a80b883a 	mov	r5,r21
1000748c:	100d883a 	mov	r6,r2
10007490:	180f883a 	mov	r7,r3
10007494:	000f2800 	call	1000f280 <__muldf3>
10007498:	1009883a 	mov	r4,r2
1000749c:	180b883a 	mov	r5,r3
100074a0:	000d883a 	mov	r6,zero
100074a4:	01d00734 	movhi	r7,16412
100074a8:	000de200 	call	1000de20 <__adddf3>
100074ac:	1023883a 	mov	r17,r2
100074b0:	00bf3034 	movhi	r2,64704
100074b4:	1885883a 	add	r2,r3,r2
100074b8:	d8800e15 	stw	r2,56(sp)
100074bc:	a009883a 	mov	r4,r20
100074c0:	a80b883a 	mov	r5,r21
100074c4:	000d883a 	mov	r6,zero
100074c8:	01d00534 	movhi	r7,16404
100074cc:	000faec0 	call	1000faec <__subdf3>
100074d0:	d9c00e17 	ldw	r7,56(sp)
100074d4:	1009883a 	mov	r4,r2
100074d8:	180b883a 	mov	r5,r3
100074dc:	880d883a 	mov	r6,r17
100074e0:	102b883a 	mov	r21,r2
100074e4:	1829883a 	mov	r20,r3
100074e8:	000f0c00 	call	1000f0c0 <__gedf2>
100074ec:	00807716 	blt	zero,r2,100076cc <_dtoa_r+0x1388>
100074f0:	d8800e17 	ldw	r2,56(sp)
100074f4:	a809883a 	mov	r4,r21
100074f8:	a00b883a 	mov	r5,r20
100074fc:	11e0003c 	xorhi	r7,r2,32768
10007500:	880d883a 	mov	r6,r17
10007504:	000f1a00 	call	1000f1a0 <__ledf2>
10007508:	103d6b0e 	bge	r2,zero,10006ab8 <__alt_data_end+0xf8006ab8>
1000750c:	002b883a 	mov	r21,zero
10007510:	0023883a 	mov	r17,zero
10007514:	003f4c06 	br	10007248 <__alt_data_end+0xf8007248>
10007518:	d9800917 	ldw	r6,36(sp)
1000751c:	e00b883a 	mov	r5,fp
10007520:	8009883a 	mov	r4,r16
10007524:	000a0740 	call	1000a074 <__pow5mult>
10007528:	1039883a 	mov	fp,r2
1000752c:	003e2706 	br	10006dcc <__alt_data_end+0xf8006dcc>
10007530:	d8000b15 	stw	zero,44(sp)
10007534:	003c4906 	br	1000665c <__alt_data_end+0xf800665c>
10007538:	d9000917 	ldw	r4,36(sp)
1000753c:	d9800a17 	ldw	r6,40(sp)
10007540:	dd400915 	stw	r21,36(sp)
10007544:	a905c83a 	sub	r2,r21,r4
10007548:	308d883a 	add	r6,r6,r2
1000754c:	d9800a15 	stw	r6,40(sp)
10007550:	002b883a 	mov	r21,zero
10007554:	003df206 	br	10006d20 <__alt_data_end+0xf8006d20>
10007558:	dc800e15 	stw	r18,56(sp)
1000755c:	982b883a 	mov	r21,r19
10007560:	04400084 	movi	r17,2
10007564:	003c7406 	br	10006738 <__alt_data_end+0xf8006738>
10007568:	04400044 	movi	r17,1
1000756c:	dc400d15 	stw	r17,52(sp)
10007570:	dc400615 	stw	r17,24(sp)
10007574:	dc402215 	stw	r17,136(sp)
10007578:	80001115 	stw	zero,68(r16)
1000757c:	000b883a 	mov	r5,zero
10007580:	003c4a06 	br	100066ac <__alt_data_end+0xf80066ac>
10007584:	3023883a 	mov	r17,r6
10007588:	003ffb06 	br	10007578 <__alt_data_end+0xf8007578>
1000758c:	1000021e 	bne	r2,zero,10007598 <_dtoa_r+0x1254>
10007590:	4200004c 	andi	r8,r8,1
10007594:	403e8f1e 	bne	r8,zero,10006fd4 <__alt_data_end+0xf8006fd4>
10007598:	01000c04 	movi	r4,48
1000759c:	00000106 	br	100075a4 <_dtoa_r+0x1260>
100075a0:	102f883a 	mov	r23,r2
100075a4:	b8bfffc4 	addi	r2,r23,-1
100075a8:	10c00007 	ldb	r3,0(r2)
100075ac:	193ffc26 	beq	r3,r4,100075a0 <__alt_data_end+0xf80075a0>
100075b0:	003e9906 	br	10007018 <__alt_data_end+0xf8007018>
100075b4:	d9000517 	ldw	r4,20(sp)
100075b8:	012fc83a 	sub	r23,zero,r4
100075bc:	b800ad26 	beq	r23,zero,10007874 <_dtoa_r+0x1530>
100075c0:	b88003cc 	andi	r2,r23,15
100075c4:	100490fa 	slli	r2,r2,3
100075c8:	00c40074 	movhi	r3,4097
100075cc:	18d4fa04 	addi	r3,r3,21480
100075d0:	1885883a 	add	r2,r3,r2
100075d4:	11800017 	ldw	r6,0(r2)
100075d8:	11c00117 	ldw	r7,4(r2)
100075dc:	b82fd13a 	srai	r23,r23,4
100075e0:	9009883a 	mov	r4,r18
100075e4:	980b883a 	mov	r5,r19
100075e8:	000f2800 	call	1000f280 <__muldf3>
100075ec:	1029883a 	mov	r20,r2
100075f0:	182b883a 	mov	r21,r3
100075f4:	b800f426 	beq	r23,zero,100079c8 <_dtoa_r+0x1684>
100075f8:	02040074 	movhi	r8,4097
100075fc:	4214f004 	addi	r8,r8,21440
10007600:	8029883a 	mov	r20,r16
10007604:	04400084 	movi	r17,2
10007608:	4021883a 	mov	r16,r8
1000760c:	b980004c 	andi	r6,r23,1
10007610:	1009883a 	mov	r4,r2
10007614:	b82fd07a 	srai	r23,r23,1
10007618:	180b883a 	mov	r5,r3
1000761c:	30000426 	beq	r6,zero,10007630 <_dtoa_r+0x12ec>
10007620:	81800017 	ldw	r6,0(r16)
10007624:	81c00117 	ldw	r7,4(r16)
10007628:	8c400044 	addi	r17,r17,1
1000762c:	000f2800 	call	1000f280 <__muldf3>
10007630:	84000204 	addi	r16,r16,8
10007634:	b83ff51e 	bne	r23,zero,1000760c <__alt_data_end+0xf800760c>
10007638:	a021883a 	mov	r16,r20
1000763c:	182b883a 	mov	r21,r3
10007640:	1029883a 	mov	r20,r2
10007644:	003c5506 	br	1000679c <__alt_data_end+0xf800679c>
10007648:	d9800517 	ldw	r6,20(sp)
1000764c:	d9000717 	ldw	r4,28(sp)
10007650:	00c00c04 	movi	r3,48
10007654:	31800044 	addi	r6,r6,1
10007658:	d9800515 	stw	r6,20(sp)
1000765c:	20c00005 	stb	r3,0(r4)
10007660:	02000c44 	movi	r8,49
10007664:	003da206 	br	10006cf0 <__alt_data_end+0xf8006cf0>
10007668:	89400117 	ldw	r5,4(r17)
1000766c:	8009883a 	mov	r4,r16
10007670:	00099800 	call	10009980 <_Balloc>
10007674:	89800417 	ldw	r6,16(r17)
10007678:	11000304 	addi	r4,r2,12
1000767c:	89400304 	addi	r5,r17,12
10007680:	31800084 	addi	r6,r6,2
10007684:	318d883a 	add	r6,r6,r6
10007688:	318d883a 	add	r6,r6,r6
1000768c:	1027883a 	mov	r19,r2
10007690:	00095c80 	call	100095c8 <memcpy>
10007694:	8009883a 	mov	r4,r16
10007698:	980b883a 	mov	r5,r19
1000769c:	01800044 	movi	r6,1
100076a0:	000a1b40 	call	1000a1b4 <__lshift>
100076a4:	1029883a 	mov	r20,r2
100076a8:	003e8606 	br	100070c4 <__alt_data_end+0xf80070c4>
100076ac:	00800e44 	movi	r2,57
100076b0:	90809526 	beq	r18,r2,10007908 <_dtoa_r+0x15c4>
100076b4:	92000044 	addi	r8,r18,1
100076b8:	003f2306 	br	10007348 <__alt_data_end+0xf8007348>
100076bc:	9011883a 	mov	r8,r18
100076c0:	8825883a 	mov	r18,r17
100076c4:	a023883a 	mov	r17,r20
100076c8:	003e3706 	br	10006fa8 <__alt_data_end+0xf8006fa8>
100076cc:	002b883a 	mov	r21,zero
100076d0:	0023883a 	mov	r17,zero
100076d4:	003f5606 	br	10007430 <__alt_data_end+0xf8007430>
100076d8:	51bfffc4 	addi	r6,r10,-1
100076dc:	300490fa 	slli	r2,r6,3
100076e0:	00c40074 	movhi	r3,4097
100076e4:	18d4fa04 	addi	r3,r3,21480
100076e8:	1885883a 	add	r2,r3,r2
100076ec:	d9c00e17 	ldw	r7,56(sp)
100076f0:	11000017 	ldw	r4,0(r2)
100076f4:	11400117 	ldw	r5,4(r2)
100076f8:	d8800717 	ldw	r2,28(sp)
100076fc:	d9801015 	stw	r6,64(sp)
10007700:	880d883a 	mov	r6,r17
10007704:	da801615 	stw	r10,88(sp)
10007708:	15c00044 	addi	r23,r2,1
1000770c:	000f2800 	call	1000f280 <__muldf3>
10007710:	a80b883a 	mov	r5,r21
10007714:	a009883a 	mov	r4,r20
10007718:	d8c01115 	stw	r3,68(sp)
1000771c:	d8800e15 	stw	r2,56(sp)
10007720:	00103bc0 	call	100103bc <__fixdfsi>
10007724:	1009883a 	mov	r4,r2
10007728:	1023883a 	mov	r17,r2
1000772c:	00104440 	call	10010444 <__floatsidf>
10007730:	a009883a 	mov	r4,r20
10007734:	a80b883a 	mov	r5,r21
10007738:	100d883a 	mov	r6,r2
1000773c:	180f883a 	mov	r7,r3
10007740:	000faec0 	call	1000faec <__subdf3>
10007744:	1813883a 	mov	r9,r3
10007748:	d8c00717 	ldw	r3,28(sp)
1000774c:	8c400c04 	addi	r17,r17,48
10007750:	1011883a 	mov	r8,r2
10007754:	1c400005 	stb	r17,0(r3)
10007758:	da801617 	ldw	r10,88(sp)
1000775c:	00800044 	movi	r2,1
10007760:	50802326 	beq	r10,r2,100077f0 <_dtoa_r+0x14ac>
10007764:	d8800717 	ldw	r2,28(sp)
10007768:	b82b883a 	mov	r21,r23
1000776c:	dc001315 	stw	r16,76(sp)
10007770:	12a9883a 	add	r20,r2,r10
10007774:	4807883a 	mov	r3,r9
10007778:	4005883a 	mov	r2,r8
1000777c:	dc801415 	stw	r18,80(sp)
10007780:	000d883a 	mov	r6,zero
10007784:	01d00934 	movhi	r7,16420
10007788:	1009883a 	mov	r4,r2
1000778c:	180b883a 	mov	r5,r3
10007790:	000f2800 	call	1000f280 <__muldf3>
10007794:	180b883a 	mov	r5,r3
10007798:	1009883a 	mov	r4,r2
1000779c:	1821883a 	mov	r16,r3
100077a0:	1025883a 	mov	r18,r2
100077a4:	00103bc0 	call	100103bc <__fixdfsi>
100077a8:	1009883a 	mov	r4,r2
100077ac:	1023883a 	mov	r17,r2
100077b0:	00104440 	call	10010444 <__floatsidf>
100077b4:	9009883a 	mov	r4,r18
100077b8:	800b883a 	mov	r5,r16
100077bc:	100d883a 	mov	r6,r2
100077c0:	180f883a 	mov	r7,r3
100077c4:	8c400c04 	addi	r17,r17,48
100077c8:	000faec0 	call	1000faec <__subdf3>
100077cc:	ad400044 	addi	r21,r21,1
100077d0:	ac7fffc5 	stb	r17,-1(r21)
100077d4:	ad3fea1e 	bne	r21,r20,10007780 <__alt_data_end+0xf8007780>
100077d8:	1813883a 	mov	r9,r3
100077dc:	d8c01017 	ldw	r3,64(sp)
100077e0:	dc001317 	ldw	r16,76(sp)
100077e4:	dc801417 	ldw	r18,80(sp)
100077e8:	1011883a 	mov	r8,r2
100077ec:	b8ef883a 	add	r23,r23,r3
100077f0:	d9000e17 	ldw	r4,56(sp)
100077f4:	d9401117 	ldw	r5,68(sp)
100077f8:	000d883a 	mov	r6,zero
100077fc:	01cff834 	movhi	r7,16352
10007800:	da001715 	stw	r8,92(sp)
10007804:	da401515 	stw	r9,84(sp)
10007808:	000de200 	call	1000de20 <__adddf3>
1000780c:	da001717 	ldw	r8,92(sp)
10007810:	da401517 	ldw	r9,84(sp)
10007814:	1009883a 	mov	r4,r2
10007818:	400d883a 	mov	r6,r8
1000781c:	480f883a 	mov	r7,r9
10007820:	180b883a 	mov	r5,r3
10007824:	000f1a00 	call	1000f1a0 <__ledf2>
10007828:	da001717 	ldw	r8,92(sp)
1000782c:	da401517 	ldw	r9,84(sp)
10007830:	10003b0e 	bge	r2,zero,10007920 <_dtoa_r+0x15dc>
10007834:	d9001217 	ldw	r4,72(sp)
10007838:	bd7fffc3 	ldbu	r21,-1(r23)
1000783c:	d9000515 	stw	r4,20(sp)
10007840:	003d1c06 	br	10006cb4 <__alt_data_end+0xf8006cb4>
10007844:	d8c00817 	ldw	r3,32(sp)
10007848:	18a9c83a 	sub	r20,r3,r2
1000784c:	0005883a 	mov	r2,zero
10007850:	003d3706 	br	10006d30 <__alt_data_end+0xf8006d30>
10007854:	00800044 	movi	r2,1
10007858:	003dd006 	br	10006f9c <__alt_data_end+0xf8006f9c>
1000785c:	d8c00217 	ldw	r3,8(sp)
10007860:	00800d84 	movi	r2,54
10007864:	dd400917 	ldw	r21,36(sp)
10007868:	10c5c83a 	sub	r2,r2,r3
1000786c:	dd000817 	ldw	r20,32(sp)
10007870:	003d2f06 	br	10006d30 <__alt_data_end+0xf8006d30>
10007874:	9029883a 	mov	r20,r18
10007878:	982b883a 	mov	r21,r19
1000787c:	04400084 	movi	r17,2
10007880:	003bc606 	br	1000679c <__alt_data_end+0xf800679c>
10007884:	d8800617 	ldw	r2,24(sp)
10007888:	103efc26 	beq	r2,zero,1000747c <__alt_data_end+0xf800747c>
1000788c:	d8c00d17 	ldw	r3,52(sp)
10007890:	00fc890e 	bge	zero,r3,10006ab8 <__alt_data_end+0xf8006ab8>
10007894:	a80b883a 	mov	r5,r21
10007898:	a009883a 	mov	r4,r20
1000789c:	000d883a 	mov	r6,zero
100078a0:	01d00934 	movhi	r7,16420
100078a4:	000f2800 	call	1000f280 <__muldf3>
100078a8:	89000044 	addi	r4,r17,1
100078ac:	1029883a 	mov	r20,r2
100078b0:	182b883a 	mov	r21,r3
100078b4:	00104440 	call	10010444 <__floatsidf>
100078b8:	a009883a 	mov	r4,r20
100078bc:	a80b883a 	mov	r5,r21
100078c0:	100d883a 	mov	r6,r2
100078c4:	180f883a 	mov	r7,r3
100078c8:	000f2800 	call	1000f280 <__muldf3>
100078cc:	1009883a 	mov	r4,r2
100078d0:	180b883a 	mov	r5,r3
100078d4:	000d883a 	mov	r6,zero
100078d8:	01d00734 	movhi	r7,16412
100078dc:	000de200 	call	1000de20 <__adddf3>
100078e0:	d9000517 	ldw	r4,20(sp)
100078e4:	1023883a 	mov	r17,r2
100078e8:	00bf3034 	movhi	r2,64704
100078ec:	213fffc4 	addi	r4,r4,-1
100078f0:	1885883a 	add	r2,r3,r2
100078f4:	d9001215 	stw	r4,72(sp)
100078f8:	d8800e15 	stw	r2,56(sp)
100078fc:	da800d17 	ldw	r10,52(sp)
10007900:	003bc306 	br	10006810 <__alt_data_end+0xf8006810>
10007904:	b039883a 	mov	fp,r22
10007908:	01000e44 	movi	r4,57
1000790c:	8825883a 	mov	r18,r17
10007910:	9dc00044 	addi	r23,r19,1
10007914:	99000005 	stb	r4,0(r19)
10007918:	a023883a 	mov	r17,r20
1000791c:	003dae06 	br	10006fd8 <__alt_data_end+0xf8006fd8>
10007920:	d9800e17 	ldw	r6,56(sp)
10007924:	d9c01117 	ldw	r7,68(sp)
10007928:	0009883a 	mov	r4,zero
1000792c:	014ff834 	movhi	r5,16352
10007930:	da001715 	stw	r8,92(sp)
10007934:	da401515 	stw	r9,84(sp)
10007938:	000faec0 	call	1000faec <__subdf3>
1000793c:	da001717 	ldw	r8,92(sp)
10007940:	da401517 	ldw	r9,84(sp)
10007944:	1009883a 	mov	r4,r2
10007948:	180b883a 	mov	r5,r3
1000794c:	400d883a 	mov	r6,r8
10007950:	480f883a 	mov	r7,r9
10007954:	000f0c00 	call	1000f0c0 <__gedf2>
10007958:	00bc570e 	bge	zero,r2,10006ab8 <__alt_data_end+0xf8006ab8>
1000795c:	01000c04 	movi	r4,48
10007960:	00000106 	br	10007968 <_dtoa_r+0x1624>
10007964:	102f883a 	mov	r23,r2
10007968:	b8bfffc4 	addi	r2,r23,-1
1000796c:	10c00007 	ldb	r3,0(r2)
10007970:	193ffc26 	beq	r3,r4,10007964 <__alt_data_end+0xf8007964>
10007974:	d9801217 	ldw	r6,72(sp)
10007978:	d9800515 	stw	r6,20(sp)
1000797c:	003c1f06 	br	100069fc <__alt_data_end+0xf80069fc>
10007980:	d8801217 	ldw	r2,72(sp)
10007984:	dc001117 	ldw	r16,68(sp)
10007988:	d8800515 	stw	r2,20(sp)
1000798c:	003cc906 	br	10006cb4 <__alt_data_end+0xf8006cb4>
10007990:	dd801317 	ldw	r22,76(sp)
10007994:	dc001117 	ldw	r16,68(sp)
10007998:	dcc01417 	ldw	r19,80(sp)
1000799c:	dc801017 	ldw	r18,64(sp)
100079a0:	003c4506 	br	10006ab8 <__alt_data_end+0xf8006ab8>
100079a4:	103e5d1e 	bne	r2,zero,1000731c <__alt_data_end+0xf800731c>
100079a8:	4080004c 	andi	r2,r8,1
100079ac:	103e5b26 	beq	r2,zero,1000731c <__alt_data_end+0xf800731c>
100079b0:	003e5706 	br	10007310 <__alt_data_end+0xf8007310>
100079b4:	d8c00317 	ldw	r3,12(sp)
100079b8:	00800084 	movi	r2,2
100079bc:	10c00a16 	blt	r2,r3,100079e8 <_dtoa_r+0x16a4>
100079c0:	d9000d17 	ldw	r4,52(sp)
100079c4:	003e8306 	br	100073d4 <__alt_data_end+0xf80073d4>
100079c8:	04400084 	movi	r17,2
100079cc:	003b7306 	br	1000679c <__alt_data_end+0xf800679c>
100079d0:	d9801217 	ldw	r6,72(sp)
100079d4:	d9800515 	stw	r6,20(sp)
100079d8:	003cb606 	br	10006cb4 <__alt_data_end+0xf8006cb4>
100079dc:	d9001217 	ldw	r4,72(sp)
100079e0:	d9000515 	stw	r4,20(sp)
100079e4:	003c0506 	br	100069fc <__alt_data_end+0xf80069fc>
100079e8:	d9800d17 	ldw	r6,52(sp)
100079ec:	d9800615 	stw	r6,24(sp)
100079f0:	003e8306 	br	10007400 <__alt_data_end+0xf8007400>
100079f4:	d9800317 	ldw	r6,12(sp)
100079f8:	00800084 	movi	r2,2
100079fc:	11800216 	blt	r2,r6,10007a08 <_dtoa_r+0x16c4>
10007a00:	d8800d17 	ldw	r2,52(sp)
10007a04:	003da606 	br	100070a0 <__alt_data_end+0xf80070a0>
10007a08:	d8800d17 	ldw	r2,52(sp)
10007a0c:	d8800615 	stw	r2,24(sp)
10007a10:	003e7b06 	br	10007400 <__alt_data_end+0xf8007400>
10007a14:	05000044 	movi	r20,1
10007a18:	003b0506 	br	10006630 <__alt_data_end+0xf8006630>
10007a1c:	8009883a 	mov	r4,r16
10007a20:	80001115 	stw	zero,68(r16)
10007a24:	000b883a 	mov	r5,zero
10007a28:	00099800 	call	10009980 <_Balloc>
10007a2c:	d8800715 	stw	r2,28(sp)
10007a30:	d8c00717 	ldw	r3,28(sp)
10007a34:	00bfffc4 	movi	r2,-1
10007a38:	01000044 	movi	r4,1
10007a3c:	d8800615 	stw	r2,24(sp)
10007a40:	80c01015 	stw	r3,64(r16)
10007a44:	d9000b15 	stw	r4,44(sp)
10007a48:	d8002215 	stw	zero,136(sp)
10007a4c:	d8800d15 	stw	r2,52(sp)
10007a50:	003c1906 	br	10006ab8 <__alt_data_end+0xf8006ab8>
10007a54:	193d2926 	beq	r3,r4,10006efc <__alt_data_end+0xf8006efc>
10007a58:	00c00f04 	movi	r3,60
10007a5c:	1885c83a 	sub	r2,r3,r2
10007a60:	003d7b06 	br	10007050 <__alt_data_end+0xf8007050>
10007a64:	000b883a 	mov	r5,zero
10007a68:	003b1006 	br	100066ac <__alt_data_end+0xf80066ac>

10007a6c <_fflush_r>:
10007a6c:	defffb04 	addi	sp,sp,-20
10007a70:	dcc00315 	stw	r19,12(sp)
10007a74:	dc000015 	stw	r16,0(sp)
10007a78:	dfc00415 	stw	ra,16(sp)
10007a7c:	dc800215 	stw	r18,8(sp)
10007a80:	dc400115 	stw	r17,4(sp)
10007a84:	2027883a 	mov	r19,r4
10007a88:	2821883a 	mov	r16,r5
10007a8c:	20000226 	beq	r4,zero,10007a98 <_fflush_r+0x2c>
10007a90:	20800e17 	ldw	r2,56(r4)
10007a94:	10005326 	beq	r2,zero,10007be4 <_fflush_r+0x178>
10007a98:	8080030b 	ldhu	r2,12(r16)
10007a9c:	10ffffcc 	andi	r3,r2,65535
10007aa0:	18e0001c 	xori	r3,r3,32768
10007aa4:	18e00004 	addi	r3,r3,-32768
10007aa8:	18002c26 	beq	r3,zero,10007b5c <_fflush_r+0xf0>
10007aac:	10c0020c 	andi	r3,r2,8
10007ab0:	1800321e 	bne	r3,zero,10007b7c <_fflush_r+0x110>
10007ab4:	80c00117 	ldw	r3,4(r16)
10007ab8:	10820014 	ori	r2,r2,2048
10007abc:	8080030d 	sth	r2,12(r16)
10007ac0:	00c0570e 	bge	zero,r3,10007c20 <_fflush_r+0x1b4>
10007ac4:	82000a17 	ldw	r8,40(r16)
10007ac8:	40002426 	beq	r8,zero,10007b5c <_fflush_r+0xf0>
10007acc:	9c400017 	ldw	r17,0(r19)
10007ad0:	10c4000c 	andi	r3,r2,4096
10007ad4:	98000015 	stw	zero,0(r19)
10007ad8:	18004626 	beq	r3,zero,10007bf4 <_fflush_r+0x188>
10007adc:	81801417 	ldw	r6,80(r16)
10007ae0:	10c0010c 	andi	r3,r2,4
10007ae4:	18000626 	beq	r3,zero,10007b00 <_fflush_r+0x94>
10007ae8:	80c00117 	ldw	r3,4(r16)
10007aec:	80800c17 	ldw	r2,48(r16)
10007af0:	30cdc83a 	sub	r6,r6,r3
10007af4:	10000226 	beq	r2,zero,10007b00 <_fflush_r+0x94>
10007af8:	80800f17 	ldw	r2,60(r16)
10007afc:	308dc83a 	sub	r6,r6,r2
10007b00:	81400717 	ldw	r5,28(r16)
10007b04:	9809883a 	mov	r4,r19
10007b08:	000f883a 	mov	r7,zero
10007b0c:	403ee83a 	callr	r8
10007b10:	00ffffc4 	movi	r3,-1
10007b14:	10c04526 	beq	r2,r3,10007c2c <_fflush_r+0x1c0>
10007b18:	80c0030b 	ldhu	r3,12(r16)
10007b1c:	81000417 	ldw	r4,16(r16)
10007b20:	80000115 	stw	zero,4(r16)
10007b24:	197dffcc 	andi	r5,r3,63487
10007b28:	8140030d 	sth	r5,12(r16)
10007b2c:	81000015 	stw	r4,0(r16)
10007b30:	18c4000c 	andi	r3,r3,4096
10007b34:	18000126 	beq	r3,zero,10007b3c <_fflush_r+0xd0>
10007b38:	80801415 	stw	r2,80(r16)
10007b3c:	81400c17 	ldw	r5,48(r16)
10007b40:	9c400015 	stw	r17,0(r19)
10007b44:	28000526 	beq	r5,zero,10007b5c <_fflush_r+0xf0>
10007b48:	80801004 	addi	r2,r16,64
10007b4c:	28800226 	beq	r5,r2,10007b58 <_fflush_r+0xec>
10007b50:	9809883a 	mov	r4,r19
10007b54:	000819c0 	call	1000819c <_free_r>
10007b58:	80000c15 	stw	zero,48(r16)
10007b5c:	0005883a 	mov	r2,zero
10007b60:	dfc00417 	ldw	ra,16(sp)
10007b64:	dcc00317 	ldw	r19,12(sp)
10007b68:	dc800217 	ldw	r18,8(sp)
10007b6c:	dc400117 	ldw	r17,4(sp)
10007b70:	dc000017 	ldw	r16,0(sp)
10007b74:	dec00504 	addi	sp,sp,20
10007b78:	f800283a 	ret
10007b7c:	84800417 	ldw	r18,16(r16)
10007b80:	903ff626 	beq	r18,zero,10007b5c <__alt_data_end+0xf8007b5c>
10007b84:	84400017 	ldw	r17,0(r16)
10007b88:	108000cc 	andi	r2,r2,3
10007b8c:	84800015 	stw	r18,0(r16)
10007b90:	8ca3c83a 	sub	r17,r17,r18
10007b94:	10001526 	beq	r2,zero,10007bec <_fflush_r+0x180>
10007b98:	0005883a 	mov	r2,zero
10007b9c:	80800215 	stw	r2,8(r16)
10007ba0:	04400316 	blt	zero,r17,10007bb0 <_fflush_r+0x144>
10007ba4:	003fed06 	br	10007b5c <__alt_data_end+0xf8007b5c>
10007ba8:	90a5883a 	add	r18,r18,r2
10007bac:	047feb0e 	bge	zero,r17,10007b5c <__alt_data_end+0xf8007b5c>
10007bb0:	80800917 	ldw	r2,36(r16)
10007bb4:	81400717 	ldw	r5,28(r16)
10007bb8:	880f883a 	mov	r7,r17
10007bbc:	900d883a 	mov	r6,r18
10007bc0:	9809883a 	mov	r4,r19
10007bc4:	103ee83a 	callr	r2
10007bc8:	88a3c83a 	sub	r17,r17,r2
10007bcc:	00bff616 	blt	zero,r2,10007ba8 <__alt_data_end+0xf8007ba8>
10007bd0:	80c0030b 	ldhu	r3,12(r16)
10007bd4:	00bfffc4 	movi	r2,-1
10007bd8:	18c01014 	ori	r3,r3,64
10007bdc:	80c0030d 	sth	r3,12(r16)
10007be0:	003fdf06 	br	10007b60 <__alt_data_end+0xf8007b60>
10007be4:	00080280 	call	10008028 <__sinit>
10007be8:	003fab06 	br	10007a98 <__alt_data_end+0xf8007a98>
10007bec:	80800517 	ldw	r2,20(r16)
10007bf0:	003fea06 	br	10007b9c <__alt_data_end+0xf8007b9c>
10007bf4:	81400717 	ldw	r5,28(r16)
10007bf8:	000d883a 	mov	r6,zero
10007bfc:	9809883a 	mov	r4,r19
10007c00:	01c00044 	movi	r7,1
10007c04:	403ee83a 	callr	r8
10007c08:	100d883a 	mov	r6,r2
10007c0c:	00bfffc4 	movi	r2,-1
10007c10:	30801326 	beq	r6,r2,10007c60 <_fflush_r+0x1f4>
10007c14:	8080030b 	ldhu	r2,12(r16)
10007c18:	82000a17 	ldw	r8,40(r16)
10007c1c:	003fb006 	br	10007ae0 <__alt_data_end+0xf8007ae0>
10007c20:	80c00f17 	ldw	r3,60(r16)
10007c24:	00ffa716 	blt	zero,r3,10007ac4 <__alt_data_end+0xf8007ac4>
10007c28:	003fcc06 	br	10007b5c <__alt_data_end+0xf8007b5c>
10007c2c:	98c00017 	ldw	r3,0(r19)
10007c30:	183fb926 	beq	r3,zero,10007b18 <__alt_data_end+0xf8007b18>
10007c34:	01000744 	movi	r4,29
10007c38:	19000226 	beq	r3,r4,10007c44 <_fflush_r+0x1d8>
10007c3c:	01000584 	movi	r4,22
10007c40:	1900101e 	bne	r3,r4,10007c84 <_fflush_r+0x218>
10007c44:	8080030b 	ldhu	r2,12(r16)
10007c48:	80c00417 	ldw	r3,16(r16)
10007c4c:	80000115 	stw	zero,4(r16)
10007c50:	10bdffcc 	andi	r2,r2,63487
10007c54:	8080030d 	sth	r2,12(r16)
10007c58:	80c00015 	stw	r3,0(r16)
10007c5c:	003fb706 	br	10007b3c <__alt_data_end+0xf8007b3c>
10007c60:	98800017 	ldw	r2,0(r19)
10007c64:	103feb26 	beq	r2,zero,10007c14 <__alt_data_end+0xf8007c14>
10007c68:	00c00744 	movi	r3,29
10007c6c:	10c00226 	beq	r2,r3,10007c78 <_fflush_r+0x20c>
10007c70:	00c00584 	movi	r3,22
10007c74:	10ffd61e 	bne	r2,r3,10007bd0 <__alt_data_end+0xf8007bd0>
10007c78:	9c400015 	stw	r17,0(r19)
10007c7c:	0005883a 	mov	r2,zero
10007c80:	003fb706 	br	10007b60 <__alt_data_end+0xf8007b60>
10007c84:	80c0030b 	ldhu	r3,12(r16)
10007c88:	18c01014 	ori	r3,r3,64
10007c8c:	80c0030d 	sth	r3,12(r16)
10007c90:	003fb306 	br	10007b60 <__alt_data_end+0xf8007b60>

10007c94 <fflush>:
10007c94:	20000526 	beq	r4,zero,10007cac <fflush+0x18>
10007c98:	00840074 	movhi	r2,4097
10007c9c:	109c3104 	addi	r2,r2,28868
10007ca0:	200b883a 	mov	r5,r4
10007ca4:	11000017 	ldw	r4,0(r2)
10007ca8:	0007a6c1 	jmpi	10007a6c <_fflush_r>
10007cac:	00840074 	movhi	r2,4097
10007cb0:	109c3004 	addi	r2,r2,28864
10007cb4:	11000017 	ldw	r4,0(r2)
10007cb8:	01440034 	movhi	r5,4096
10007cbc:	295e9b04 	addi	r5,r5,31340
10007cc0:	00089e81 	jmpi	100089e8 <_fwalk_reent>

10007cc4 <__fp_lock>:
10007cc4:	0005883a 	mov	r2,zero
10007cc8:	f800283a 	ret

10007ccc <__fp_unlock>:
10007ccc:	0005883a 	mov	r2,zero
10007cd0:	f800283a 	ret

10007cd4 <_cleanup_r>:
10007cd4:	01440074 	movhi	r5,4097
10007cd8:	29727d04 	addi	r5,r5,-13836
10007cdc:	00089301 	jmpi	10008930 <_fwalk>

10007ce0 <__sinit.part.1>:
10007ce0:	defff604 	addi	sp,sp,-40
10007ce4:	00c40034 	movhi	r3,4096
10007ce8:	dfc00915 	stw	ra,36(sp)
10007cec:	df000815 	stw	fp,32(sp)
10007cf0:	ddc00715 	stw	r23,28(sp)
10007cf4:	dd800615 	stw	r22,24(sp)
10007cf8:	dd400515 	stw	r21,20(sp)
10007cfc:	dd000415 	stw	r20,16(sp)
10007d00:	dcc00315 	stw	r19,12(sp)
10007d04:	dc800215 	stw	r18,8(sp)
10007d08:	dc400115 	stw	r17,4(sp)
10007d0c:	dc000015 	stw	r16,0(sp)
10007d10:	18df3504 	addi	r3,r3,31956
10007d14:	24000117 	ldw	r16,4(r4)
10007d18:	20c00f15 	stw	r3,60(r4)
10007d1c:	07000044 	movi	fp,1
10007d20:	00c000c4 	movi	r3,3
10007d24:	2080bb04 	addi	r2,r4,748
10007d28:	20c0b915 	stw	r3,740(r4)
10007d2c:	27000e15 	stw	fp,56(r4)
10007d30:	2080ba15 	stw	r2,744(r4)
10007d34:	2000b815 	stw	zero,736(r4)
10007d38:	05c00204 	movi	r23,8
10007d3c:	00800104 	movi	r2,4
10007d40:	2025883a 	mov	r18,r4
10007d44:	b80d883a 	mov	r6,r23
10007d48:	81001704 	addi	r4,r16,92
10007d4c:	000b883a 	mov	r5,zero
10007d50:	80000015 	stw	zero,0(r16)
10007d54:	80000115 	stw	zero,4(r16)
10007d58:	80000215 	stw	zero,8(r16)
10007d5c:	8080030d 	sth	r2,12(r16)
10007d60:	80001915 	stw	zero,100(r16)
10007d64:	8000038d 	sth	zero,14(r16)
10007d68:	80000415 	stw	zero,16(r16)
10007d6c:	80000515 	stw	zero,20(r16)
10007d70:	80000615 	stw	zero,24(r16)
10007d74:	000985c0 	call	1000985c <memset>
10007d78:	05840074 	movhi	r22,4097
10007d7c:	94400217 	ldw	r17,8(r18)
10007d80:	05440074 	movhi	r21,4097
10007d84:	05040074 	movhi	r20,4097
10007d88:	04c40074 	movhi	r19,4097
10007d8c:	b5ac0c04 	addi	r22,r22,-20432
10007d90:	ad6c2304 	addi	r21,r21,-20340
10007d94:	a52c4204 	addi	r20,r20,-20216
10007d98:	9cec5904 	addi	r19,r19,-20124
10007d9c:	85800815 	stw	r22,32(r16)
10007da0:	85400915 	stw	r21,36(r16)
10007da4:	85000a15 	stw	r20,40(r16)
10007da8:	84c00b15 	stw	r19,44(r16)
10007dac:	84000715 	stw	r16,28(r16)
10007db0:	00800284 	movi	r2,10
10007db4:	89001704 	addi	r4,r17,92
10007db8:	b80d883a 	mov	r6,r23
10007dbc:	000b883a 	mov	r5,zero
10007dc0:	88000015 	stw	zero,0(r17)
10007dc4:	88000115 	stw	zero,4(r17)
10007dc8:	88000215 	stw	zero,8(r17)
10007dcc:	8880030d 	sth	r2,12(r17)
10007dd0:	88001915 	stw	zero,100(r17)
10007dd4:	8f00038d 	sth	fp,14(r17)
10007dd8:	88000415 	stw	zero,16(r17)
10007ddc:	88000515 	stw	zero,20(r17)
10007de0:	88000615 	stw	zero,24(r17)
10007de4:	000985c0 	call	1000985c <memset>
10007de8:	94000317 	ldw	r16,12(r18)
10007dec:	00800484 	movi	r2,18
10007df0:	8c400715 	stw	r17,28(r17)
10007df4:	8d800815 	stw	r22,32(r17)
10007df8:	8d400915 	stw	r21,36(r17)
10007dfc:	8d000a15 	stw	r20,40(r17)
10007e00:	8cc00b15 	stw	r19,44(r17)
10007e04:	8080030d 	sth	r2,12(r16)
10007e08:	00800084 	movi	r2,2
10007e0c:	80000015 	stw	zero,0(r16)
10007e10:	80000115 	stw	zero,4(r16)
10007e14:	80000215 	stw	zero,8(r16)
10007e18:	80001915 	stw	zero,100(r16)
10007e1c:	8080038d 	sth	r2,14(r16)
10007e20:	80000415 	stw	zero,16(r16)
10007e24:	80000515 	stw	zero,20(r16)
10007e28:	80000615 	stw	zero,24(r16)
10007e2c:	81001704 	addi	r4,r16,92
10007e30:	000b883a 	mov	r5,zero
10007e34:	b80d883a 	mov	r6,r23
10007e38:	000985c0 	call	1000985c <memset>
10007e3c:	84000715 	stw	r16,28(r16)
10007e40:	85800815 	stw	r22,32(r16)
10007e44:	85400915 	stw	r21,36(r16)
10007e48:	85000a15 	stw	r20,40(r16)
10007e4c:	84c00b15 	stw	r19,44(r16)
10007e50:	dfc00917 	ldw	ra,36(sp)
10007e54:	df000817 	ldw	fp,32(sp)
10007e58:	ddc00717 	ldw	r23,28(sp)
10007e5c:	dd800617 	ldw	r22,24(sp)
10007e60:	dd400517 	ldw	r21,20(sp)
10007e64:	dd000417 	ldw	r20,16(sp)
10007e68:	dcc00317 	ldw	r19,12(sp)
10007e6c:	dc800217 	ldw	r18,8(sp)
10007e70:	dc400117 	ldw	r17,4(sp)
10007e74:	dc000017 	ldw	r16,0(sp)
10007e78:	dec00a04 	addi	sp,sp,40
10007e7c:	f800283a 	ret

10007e80 <__sfmoreglue>:
10007e80:	defffc04 	addi	sp,sp,-16
10007e84:	dc800215 	stw	r18,8(sp)
10007e88:	2825883a 	mov	r18,r5
10007e8c:	dc000015 	stw	r16,0(sp)
10007e90:	01401a04 	movi	r5,104
10007e94:	2021883a 	mov	r16,r4
10007e98:	9009883a 	mov	r4,r18
10007e9c:	dfc00315 	stw	ra,12(sp)
10007ea0:	dc400115 	stw	r17,4(sp)
10007ea4:	0003c5c0 	call	10003c5c <__mulsi3>
10007ea8:	8009883a 	mov	r4,r16
10007eac:	11400304 	addi	r5,r2,12
10007eb0:	1023883a 	mov	r17,r2
10007eb4:	0008d380 	call	10008d38 <_malloc_r>
10007eb8:	1021883a 	mov	r16,r2
10007ebc:	10000726 	beq	r2,zero,10007edc <__sfmoreglue+0x5c>
10007ec0:	11000304 	addi	r4,r2,12
10007ec4:	10000015 	stw	zero,0(r2)
10007ec8:	14800115 	stw	r18,4(r2)
10007ecc:	11000215 	stw	r4,8(r2)
10007ed0:	000b883a 	mov	r5,zero
10007ed4:	880d883a 	mov	r6,r17
10007ed8:	000985c0 	call	1000985c <memset>
10007edc:	8005883a 	mov	r2,r16
10007ee0:	dfc00317 	ldw	ra,12(sp)
10007ee4:	dc800217 	ldw	r18,8(sp)
10007ee8:	dc400117 	ldw	r17,4(sp)
10007eec:	dc000017 	ldw	r16,0(sp)
10007ef0:	dec00404 	addi	sp,sp,16
10007ef4:	f800283a 	ret

10007ef8 <__sfp>:
10007ef8:	00840074 	movhi	r2,4097
10007efc:	defffb04 	addi	sp,sp,-20
10007f00:	109c3004 	addi	r2,r2,28864
10007f04:	dc800215 	stw	r18,8(sp)
10007f08:	14800017 	ldw	r18,0(r2)
10007f0c:	dcc00315 	stw	r19,12(sp)
10007f10:	dfc00415 	stw	ra,16(sp)
10007f14:	90800e17 	ldw	r2,56(r18)
10007f18:	dc400115 	stw	r17,4(sp)
10007f1c:	dc000015 	stw	r16,0(sp)
10007f20:	2027883a 	mov	r19,r4
10007f24:	1000021e 	bne	r2,zero,10007f30 <__sfp+0x38>
10007f28:	9009883a 	mov	r4,r18
10007f2c:	0007ce00 	call	10007ce0 <__sinit.part.1>
10007f30:	9480b804 	addi	r18,r18,736
10007f34:	047fffc4 	movi	r17,-1
10007f38:	91400117 	ldw	r5,4(r18)
10007f3c:	94000217 	ldw	r16,8(r18)
10007f40:	297fffc4 	addi	r5,r5,-1
10007f44:	28000a16 	blt	r5,zero,10007f70 <__sfp+0x78>
10007f48:	8080030f 	ldh	r2,12(r16)
10007f4c:	10000c26 	beq	r2,zero,10007f80 <__sfp+0x88>
10007f50:	80c01d04 	addi	r3,r16,116
10007f54:	00000206 	br	10007f60 <__sfp+0x68>
10007f58:	18bfe60f 	ldh	r2,-104(r3)
10007f5c:	10000826 	beq	r2,zero,10007f80 <__sfp+0x88>
10007f60:	297fffc4 	addi	r5,r5,-1
10007f64:	1c3ffd04 	addi	r16,r3,-12
10007f68:	18c01a04 	addi	r3,r3,104
10007f6c:	2c7ffa1e 	bne	r5,r17,10007f58 <__alt_data_end+0xf8007f58>
10007f70:	90800017 	ldw	r2,0(r18)
10007f74:	10001d26 	beq	r2,zero,10007fec <__sfp+0xf4>
10007f78:	1025883a 	mov	r18,r2
10007f7c:	003fee06 	br	10007f38 <__alt_data_end+0xf8007f38>
10007f80:	00bfffc4 	movi	r2,-1
10007f84:	8080038d 	sth	r2,14(r16)
10007f88:	00800044 	movi	r2,1
10007f8c:	8080030d 	sth	r2,12(r16)
10007f90:	80001915 	stw	zero,100(r16)
10007f94:	80000015 	stw	zero,0(r16)
10007f98:	80000215 	stw	zero,8(r16)
10007f9c:	80000115 	stw	zero,4(r16)
10007fa0:	80000415 	stw	zero,16(r16)
10007fa4:	80000515 	stw	zero,20(r16)
10007fa8:	80000615 	stw	zero,24(r16)
10007fac:	81001704 	addi	r4,r16,92
10007fb0:	000b883a 	mov	r5,zero
10007fb4:	01800204 	movi	r6,8
10007fb8:	000985c0 	call	1000985c <memset>
10007fbc:	8005883a 	mov	r2,r16
10007fc0:	80000c15 	stw	zero,48(r16)
10007fc4:	80000d15 	stw	zero,52(r16)
10007fc8:	80001115 	stw	zero,68(r16)
10007fcc:	80001215 	stw	zero,72(r16)
10007fd0:	dfc00417 	ldw	ra,16(sp)
10007fd4:	dcc00317 	ldw	r19,12(sp)
10007fd8:	dc800217 	ldw	r18,8(sp)
10007fdc:	dc400117 	ldw	r17,4(sp)
10007fe0:	dc000017 	ldw	r16,0(sp)
10007fe4:	dec00504 	addi	sp,sp,20
10007fe8:	f800283a 	ret
10007fec:	9809883a 	mov	r4,r19
10007ff0:	01400104 	movi	r5,4
10007ff4:	0007e800 	call	10007e80 <__sfmoreglue>
10007ff8:	90800015 	stw	r2,0(r18)
10007ffc:	103fde1e 	bne	r2,zero,10007f78 <__alt_data_end+0xf8007f78>
10008000:	00800304 	movi	r2,12
10008004:	98800015 	stw	r2,0(r19)
10008008:	0005883a 	mov	r2,zero
1000800c:	003ff006 	br	10007fd0 <__alt_data_end+0xf8007fd0>

10008010 <_cleanup>:
10008010:	00840074 	movhi	r2,4097
10008014:	109c3004 	addi	r2,r2,28864
10008018:	11000017 	ldw	r4,0(r2)
1000801c:	01440074 	movhi	r5,4097
10008020:	29727d04 	addi	r5,r5,-13836
10008024:	00089301 	jmpi	10008930 <_fwalk>

10008028 <__sinit>:
10008028:	20800e17 	ldw	r2,56(r4)
1000802c:	10000126 	beq	r2,zero,10008034 <__sinit+0xc>
10008030:	f800283a 	ret
10008034:	0007ce01 	jmpi	10007ce0 <__sinit.part.1>

10008038 <__sfp_lock_acquire>:
10008038:	f800283a 	ret

1000803c <__sfp_lock_release>:
1000803c:	f800283a 	ret

10008040 <__sinit_lock_acquire>:
10008040:	f800283a 	ret

10008044 <__sinit_lock_release>:
10008044:	f800283a 	ret

10008048 <__fp_lock_all>:
10008048:	00840074 	movhi	r2,4097
1000804c:	109c3104 	addi	r2,r2,28868
10008050:	11000017 	ldw	r4,0(r2)
10008054:	01440034 	movhi	r5,4096
10008058:	295f3104 	addi	r5,r5,31940
1000805c:	00089301 	jmpi	10008930 <_fwalk>

10008060 <__fp_unlock_all>:
10008060:	00840074 	movhi	r2,4097
10008064:	109c3104 	addi	r2,r2,28868
10008068:	11000017 	ldw	r4,0(r2)
1000806c:	01440034 	movhi	r5,4096
10008070:	295f3304 	addi	r5,r5,31948
10008074:	00089301 	jmpi	10008930 <_fwalk>

10008078 <_malloc_trim_r>:
10008078:	defffb04 	addi	sp,sp,-20
1000807c:	dcc00315 	stw	r19,12(sp)
10008080:	04c40074 	movhi	r19,4097
10008084:	dc800215 	stw	r18,8(sp)
10008088:	dc400115 	stw	r17,4(sp)
1000808c:	dc000015 	stw	r16,0(sp)
10008090:	dfc00415 	stw	ra,16(sp)
10008094:	2821883a 	mov	r16,r5
10008098:	9cd6a804 	addi	r19,r19,23200
1000809c:	2025883a 	mov	r18,r4
100080a0:	0010bfc0 	call	10010bfc <__malloc_lock>
100080a4:	98800217 	ldw	r2,8(r19)
100080a8:	14400117 	ldw	r17,4(r2)
100080ac:	00bfff04 	movi	r2,-4
100080b0:	88a2703a 	and	r17,r17,r2
100080b4:	8c21c83a 	sub	r16,r17,r16
100080b8:	8403fbc4 	addi	r16,r16,4079
100080bc:	8020d33a 	srli	r16,r16,12
100080c0:	0083ffc4 	movi	r2,4095
100080c4:	843fffc4 	addi	r16,r16,-1
100080c8:	8020933a 	slli	r16,r16,12
100080cc:	1400060e 	bge	r2,r16,100080e8 <_malloc_trim_r+0x70>
100080d0:	9009883a 	mov	r4,r18
100080d4:	000b883a 	mov	r5,zero
100080d8:	000afdc0 	call	1000afdc <_sbrk_r>
100080dc:	98c00217 	ldw	r3,8(r19)
100080e0:	1c47883a 	add	r3,r3,r17
100080e4:	10c00a26 	beq	r2,r3,10008110 <_malloc_trim_r+0x98>
100080e8:	9009883a 	mov	r4,r18
100080ec:	0010c1c0 	call	10010c1c <__malloc_unlock>
100080f0:	0005883a 	mov	r2,zero
100080f4:	dfc00417 	ldw	ra,16(sp)
100080f8:	dcc00317 	ldw	r19,12(sp)
100080fc:	dc800217 	ldw	r18,8(sp)
10008100:	dc400117 	ldw	r17,4(sp)
10008104:	dc000017 	ldw	r16,0(sp)
10008108:	dec00504 	addi	sp,sp,20
1000810c:	f800283a 	ret
10008110:	9009883a 	mov	r4,r18
10008114:	040bc83a 	sub	r5,zero,r16
10008118:	000afdc0 	call	1000afdc <_sbrk_r>
1000811c:	00ffffc4 	movi	r3,-1
10008120:	10c00d26 	beq	r2,r3,10008158 <_malloc_trim_r+0xe0>
10008124:	00c400b4 	movhi	r3,4098
10008128:	18e31504 	addi	r3,r3,-29612
1000812c:	18800017 	ldw	r2,0(r3)
10008130:	99000217 	ldw	r4,8(r19)
10008134:	8c23c83a 	sub	r17,r17,r16
10008138:	8c400054 	ori	r17,r17,1
1000813c:	1421c83a 	sub	r16,r2,r16
10008140:	24400115 	stw	r17,4(r4)
10008144:	9009883a 	mov	r4,r18
10008148:	1c000015 	stw	r16,0(r3)
1000814c:	0010c1c0 	call	10010c1c <__malloc_unlock>
10008150:	00800044 	movi	r2,1
10008154:	003fe706 	br	100080f4 <__alt_data_end+0xf80080f4>
10008158:	9009883a 	mov	r4,r18
1000815c:	000b883a 	mov	r5,zero
10008160:	000afdc0 	call	1000afdc <_sbrk_r>
10008164:	99000217 	ldw	r4,8(r19)
10008168:	014003c4 	movi	r5,15
1000816c:	1107c83a 	sub	r3,r2,r4
10008170:	28ffdd0e 	bge	r5,r3,100080e8 <__alt_data_end+0xf80080e8>
10008174:	01440074 	movhi	r5,4097
10008178:	295c3304 	addi	r5,r5,28876
1000817c:	29400017 	ldw	r5,0(r5)
10008180:	18c00054 	ori	r3,r3,1
10008184:	20c00115 	stw	r3,4(r4)
10008188:	00c400b4 	movhi	r3,4098
1000818c:	1145c83a 	sub	r2,r2,r5
10008190:	18e31504 	addi	r3,r3,-29612
10008194:	18800015 	stw	r2,0(r3)
10008198:	003fd306 	br	100080e8 <__alt_data_end+0xf80080e8>

1000819c <_free_r>:
1000819c:	28004c26 	beq	r5,zero,100082d0 <_free_r+0x134>
100081a0:	defffd04 	addi	sp,sp,-12
100081a4:	dc400115 	stw	r17,4(sp)
100081a8:	dc000015 	stw	r16,0(sp)
100081ac:	2023883a 	mov	r17,r4
100081b0:	2821883a 	mov	r16,r5
100081b4:	dfc00215 	stw	ra,8(sp)
100081b8:	0010bfc0 	call	10010bfc <__malloc_lock>
100081bc:	813fff17 	ldw	r4,-4(r16)
100081c0:	00bfff84 	movi	r2,-2
100081c4:	02440074 	movhi	r9,4097
100081c8:	81bffe04 	addi	r6,r16,-8
100081cc:	2084703a 	and	r2,r4,r2
100081d0:	4a56a804 	addi	r9,r9,23200
100081d4:	308b883a 	add	r5,r6,r2
100081d8:	2a000117 	ldw	r8,4(r5)
100081dc:	49c00217 	ldw	r7,8(r9)
100081e0:	00ffff04 	movi	r3,-4
100081e4:	40c6703a 	and	r3,r8,r3
100081e8:	39405326 	beq	r7,r5,10008338 <_free_r+0x19c>
100081ec:	28c00115 	stw	r3,4(r5)
100081f0:	2100004c 	andi	r4,r4,1
100081f4:	2000091e 	bne	r4,zero,1000821c <_free_r+0x80>
100081f8:	81fffe17 	ldw	r7,-8(r16)
100081fc:	4a000204 	addi	r8,r9,8
10008200:	31cdc83a 	sub	r6,r6,r7
10008204:	31000217 	ldw	r4,8(r6)
10008208:	11c5883a 	add	r2,r2,r7
1000820c:	22006126 	beq	r4,r8,10008394 <_free_r+0x1f8>
10008210:	31c00317 	ldw	r7,12(r6)
10008214:	21c00315 	stw	r7,12(r4)
10008218:	39000215 	stw	r4,8(r7)
1000821c:	28c9883a 	add	r4,r5,r3
10008220:	21c00117 	ldw	r7,4(r4)
10008224:	39c0004c 	andi	r7,r7,1
10008228:	38000d1e 	bne	r7,zero,10008260 <_free_r+0xc4>
1000822c:	29000217 	ldw	r4,8(r5)
10008230:	10c5883a 	add	r2,r2,r3
10008234:	00c40074 	movhi	r3,4097
10008238:	18d6aa04 	addi	r3,r3,23208
1000823c:	20c07526 	beq	r4,r3,10008414 <_free_r+0x278>
10008240:	29c00317 	ldw	r7,12(r5)
10008244:	11400054 	ori	r5,r2,1
10008248:	3087883a 	add	r3,r6,r2
1000824c:	21c00315 	stw	r7,12(r4)
10008250:	39000215 	stw	r4,8(r7)
10008254:	31400115 	stw	r5,4(r6)
10008258:	18800015 	stw	r2,0(r3)
1000825c:	00000406 	br	10008270 <_free_r+0xd4>
10008260:	10c00054 	ori	r3,r2,1
10008264:	30c00115 	stw	r3,4(r6)
10008268:	3087883a 	add	r3,r6,r2
1000826c:	18800015 	stw	r2,0(r3)
10008270:	00c07fc4 	movi	r3,511
10008274:	18801736 	bltu	r3,r2,100082d4 <_free_r+0x138>
10008278:	1004d0fa 	srli	r2,r2,3
1000827c:	01400044 	movi	r5,1
10008280:	49000117 	ldw	r4,4(r9)
10008284:	1087883a 	add	r3,r2,r2
10008288:	18c7883a 	add	r3,r3,r3
1000828c:	1005d0ba 	srai	r2,r2,2
10008290:	18c7883a 	add	r3,r3,r3
10008294:	1a47883a 	add	r3,r3,r9
10008298:	19c00217 	ldw	r7,8(r3)
1000829c:	2884983a 	sll	r2,r5,r2
100082a0:	30c00315 	stw	r3,12(r6)
100082a4:	31c00215 	stw	r7,8(r6)
100082a8:	1104b03a 	or	r2,r2,r4
100082ac:	19800215 	stw	r6,8(r3)
100082b0:	48800115 	stw	r2,4(r9)
100082b4:	39800315 	stw	r6,12(r7)
100082b8:	8809883a 	mov	r4,r17
100082bc:	dfc00217 	ldw	ra,8(sp)
100082c0:	dc400117 	ldw	r17,4(sp)
100082c4:	dc000017 	ldw	r16,0(sp)
100082c8:	dec00304 	addi	sp,sp,12
100082cc:	0010c1c1 	jmpi	10010c1c <__malloc_unlock>
100082d0:	f800283a 	ret
100082d4:	1006d27a 	srli	r3,r2,9
100082d8:	01000104 	movi	r4,4
100082dc:	20c04036 	bltu	r4,r3,100083e0 <_free_r+0x244>
100082e0:	1006d1ba 	srli	r3,r2,6
100082e4:	19400e04 	addi	r5,r3,56
100082e8:	2947883a 	add	r3,r5,r5
100082ec:	18c7883a 	add	r3,r3,r3
100082f0:	18c7883a 	add	r3,r3,r3
100082f4:	1a49883a 	add	r4,r3,r9
100082f8:	20c00217 	ldw	r3,8(r4)
100082fc:	01c40074 	movhi	r7,4097
10008300:	39d6a804 	addi	r7,r7,23200
10008304:	19003b26 	beq	r3,r4,100083f4 <_free_r+0x258>
10008308:	01ffff04 	movi	r7,-4
1000830c:	19400117 	ldw	r5,4(r3)
10008310:	29ca703a 	and	r5,r5,r7
10008314:	1140022e 	bgeu	r2,r5,10008320 <_free_r+0x184>
10008318:	18c00217 	ldw	r3,8(r3)
1000831c:	20fffb1e 	bne	r4,r3,1000830c <__alt_data_end+0xf800830c>
10008320:	18800317 	ldw	r2,12(r3)
10008324:	30800315 	stw	r2,12(r6)
10008328:	30c00215 	stw	r3,8(r6)
1000832c:	11800215 	stw	r6,8(r2)
10008330:	19800315 	stw	r6,12(r3)
10008334:	003fe006 	br	100082b8 <__alt_data_end+0xf80082b8>
10008338:	2100004c 	andi	r4,r4,1
1000833c:	1885883a 	add	r2,r3,r2
10008340:	2000071e 	bne	r4,zero,10008360 <_free_r+0x1c4>
10008344:	817ffe17 	ldw	r5,-8(r16)
10008348:	314dc83a 	sub	r6,r6,r5
1000834c:	30c00317 	ldw	r3,12(r6)
10008350:	31000217 	ldw	r4,8(r6)
10008354:	1145883a 	add	r2,r2,r5
10008358:	20c00315 	stw	r3,12(r4)
1000835c:	19000215 	stw	r4,8(r3)
10008360:	10c00054 	ori	r3,r2,1
10008364:	30c00115 	stw	r3,4(r6)
10008368:	00c40074 	movhi	r3,4097
1000836c:	18dc3404 	addi	r3,r3,28880
10008370:	18c00017 	ldw	r3,0(r3)
10008374:	49800215 	stw	r6,8(r9)
10008378:	10ffcf36 	bltu	r2,r3,100082b8 <__alt_data_end+0xf80082b8>
1000837c:	008400b4 	movhi	r2,4098
10008380:	10a30d04 	addi	r2,r2,-29644
10008384:	11400017 	ldw	r5,0(r2)
10008388:	8809883a 	mov	r4,r17
1000838c:	00080780 	call	10008078 <_malloc_trim_r>
10008390:	003fc906 	br	100082b8 <__alt_data_end+0xf80082b8>
10008394:	28c9883a 	add	r4,r5,r3
10008398:	21000117 	ldw	r4,4(r4)
1000839c:	2100004c 	andi	r4,r4,1
100083a0:	20000a1e 	bne	r4,zero,100083cc <_free_r+0x230>
100083a4:	29000317 	ldw	r4,12(r5)
100083a8:	29400217 	ldw	r5,8(r5)
100083ac:	10c5883a 	add	r2,r2,r3
100083b0:	10c00054 	ori	r3,r2,1
100083b4:	29000315 	stw	r4,12(r5)
100083b8:	21400215 	stw	r5,8(r4)
100083bc:	30c00115 	stw	r3,4(r6)
100083c0:	308d883a 	add	r6,r6,r2
100083c4:	30800015 	stw	r2,0(r6)
100083c8:	003fbb06 	br	100082b8 <__alt_data_end+0xf80082b8>
100083cc:	10c00054 	ori	r3,r2,1
100083d0:	30c00115 	stw	r3,4(r6)
100083d4:	308d883a 	add	r6,r6,r2
100083d8:	30800015 	stw	r2,0(r6)
100083dc:	003fb606 	br	100082b8 <__alt_data_end+0xf80082b8>
100083e0:	01000504 	movi	r4,20
100083e4:	20c01436 	bltu	r4,r3,10008438 <_free_r+0x29c>
100083e8:	194016c4 	addi	r5,r3,91
100083ec:	2947883a 	add	r3,r5,r5
100083f0:	003fbe06 	br	100082ec <__alt_data_end+0xf80082ec>
100083f4:	280bd0ba 	srai	r5,r5,2
100083f8:	00800044 	movi	r2,1
100083fc:	39000117 	ldw	r4,4(r7)
10008400:	114a983a 	sll	r5,r2,r5
10008404:	1805883a 	mov	r2,r3
10008408:	2908b03a 	or	r4,r5,r4
1000840c:	39000115 	stw	r4,4(r7)
10008410:	003fc406 	br	10008324 <__alt_data_end+0xf8008324>
10008414:	49800515 	stw	r6,20(r9)
10008418:	49800415 	stw	r6,16(r9)
1000841c:	10c00054 	ori	r3,r2,1
10008420:	31000315 	stw	r4,12(r6)
10008424:	31000215 	stw	r4,8(r6)
10008428:	30c00115 	stw	r3,4(r6)
1000842c:	308d883a 	add	r6,r6,r2
10008430:	30800015 	stw	r2,0(r6)
10008434:	003fa006 	br	100082b8 <__alt_data_end+0xf80082b8>
10008438:	01001504 	movi	r4,84
1000843c:	20c00436 	bltu	r4,r3,10008450 <_free_r+0x2b4>
10008440:	1006d33a 	srli	r3,r2,12
10008444:	19401b84 	addi	r5,r3,110
10008448:	2947883a 	add	r3,r5,r5
1000844c:	003fa706 	br	100082ec <__alt_data_end+0xf80082ec>
10008450:	01005504 	movi	r4,340
10008454:	20c00436 	bltu	r4,r3,10008468 <_free_r+0x2cc>
10008458:	1006d3fa 	srli	r3,r2,15
1000845c:	19401dc4 	addi	r5,r3,119
10008460:	2947883a 	add	r3,r5,r5
10008464:	003fa106 	br	100082ec <__alt_data_end+0xf80082ec>
10008468:	01015504 	movi	r4,1364
1000846c:	20c00436 	bltu	r4,r3,10008480 <_free_r+0x2e4>
10008470:	1006d4ba 	srli	r3,r2,18
10008474:	19401f04 	addi	r5,r3,124
10008478:	2947883a 	add	r3,r5,r5
1000847c:	003f9b06 	br	100082ec <__alt_data_end+0xf80082ec>
10008480:	00c03f04 	movi	r3,252
10008484:	01401f84 	movi	r5,126
10008488:	003f9806 	br	100082ec <__alt_data_end+0xf80082ec>

1000848c <__sfvwrite_r>:
1000848c:	30800217 	ldw	r2,8(r6)
10008490:	10004526 	beq	r2,zero,100085a8 <__sfvwrite_r+0x11c>
10008494:	28c0030b 	ldhu	r3,12(r5)
10008498:	defff404 	addi	sp,sp,-48
1000849c:	dd400715 	stw	r21,28(sp)
100084a0:	dcc00515 	stw	r19,20(sp)
100084a4:	dc000215 	stw	r16,8(sp)
100084a8:	dfc00b15 	stw	ra,44(sp)
100084ac:	df000a15 	stw	fp,40(sp)
100084b0:	ddc00915 	stw	r23,36(sp)
100084b4:	dd800815 	stw	r22,32(sp)
100084b8:	dd000615 	stw	r20,24(sp)
100084bc:	dc800415 	stw	r18,16(sp)
100084c0:	dc400315 	stw	r17,12(sp)
100084c4:	1880020c 	andi	r2,r3,8
100084c8:	2821883a 	mov	r16,r5
100084cc:	202b883a 	mov	r21,r4
100084d0:	3027883a 	mov	r19,r6
100084d4:	10002526 	beq	r2,zero,1000856c <__sfvwrite_r+0xe0>
100084d8:	28800417 	ldw	r2,16(r5)
100084dc:	10002326 	beq	r2,zero,1000856c <__sfvwrite_r+0xe0>
100084e0:	1880008c 	andi	r2,r3,2
100084e4:	9c400017 	ldw	r17,0(r19)
100084e8:	10003126 	beq	r2,zero,100085b0 <__sfvwrite_r+0x124>
100084ec:	0029883a 	mov	r20,zero
100084f0:	0025883a 	mov	r18,zero
100084f4:	05810004 	movi	r22,1024
100084f8:	a00d883a 	mov	r6,r20
100084fc:	a809883a 	mov	r4,r21
10008500:	90002526 	beq	r18,zero,10008598 <__sfvwrite_r+0x10c>
10008504:	900f883a 	mov	r7,r18
10008508:	81400717 	ldw	r5,28(r16)
1000850c:	b480012e 	bgeu	r22,r18,10008514 <__sfvwrite_r+0x88>
10008510:	01c10004 	movi	r7,1024
10008514:	80800917 	ldw	r2,36(r16)
10008518:	103ee83a 	callr	r2
1000851c:	0080510e 	bge	zero,r2,10008664 <__sfvwrite_r+0x1d8>
10008520:	98c00217 	ldw	r3,8(r19)
10008524:	a0a9883a 	add	r20,r20,r2
10008528:	90a5c83a 	sub	r18,r18,r2
1000852c:	1885c83a 	sub	r2,r3,r2
10008530:	98800215 	stw	r2,8(r19)
10008534:	103ff01e 	bne	r2,zero,100084f8 <__alt_data_end+0xf80084f8>
10008538:	0005883a 	mov	r2,zero
1000853c:	dfc00b17 	ldw	ra,44(sp)
10008540:	df000a17 	ldw	fp,40(sp)
10008544:	ddc00917 	ldw	r23,36(sp)
10008548:	dd800817 	ldw	r22,32(sp)
1000854c:	dd400717 	ldw	r21,28(sp)
10008550:	dd000617 	ldw	r20,24(sp)
10008554:	dcc00517 	ldw	r19,20(sp)
10008558:	dc800417 	ldw	r18,16(sp)
1000855c:	dc400317 	ldw	r17,12(sp)
10008560:	dc000217 	ldw	r16,8(sp)
10008564:	dec00c04 	addi	sp,sp,48
10008568:	f800283a 	ret
1000856c:	a809883a 	mov	r4,r21
10008570:	800b883a 	mov	r5,r16
10008574:	0005fec0 	call	10005fec <__swsetup_r>
10008578:	80c0030b 	ldhu	r3,12(r16)
1000857c:	103fd826 	beq	r2,zero,100084e0 <__alt_data_end+0xf80084e0>
10008580:	18c01014 	ori	r3,r3,64
10008584:	80c0030d 	sth	r3,12(r16)
10008588:	00c00244 	movi	r3,9
1000858c:	00bfffc4 	movi	r2,-1
10008590:	a8c00015 	stw	r3,0(r21)
10008594:	003fe906 	br	1000853c <__alt_data_end+0xf800853c>
10008598:	8d000017 	ldw	r20,0(r17)
1000859c:	8c800117 	ldw	r18,4(r17)
100085a0:	8c400204 	addi	r17,r17,8
100085a4:	003fd406 	br	100084f8 <__alt_data_end+0xf80084f8>
100085a8:	0005883a 	mov	r2,zero
100085ac:	f800283a 	ret
100085b0:	1880004c 	andi	r2,r3,1
100085b4:	1000301e 	bne	r2,zero,10008678 <__sfvwrite_r+0x1ec>
100085b8:	002f883a 	mov	r23,zero
100085bc:	0025883a 	mov	r18,zero
100085c0:	90001c26 	beq	r18,zero,10008634 <__sfvwrite_r+0x1a8>
100085c4:	1880800c 	andi	r2,r3,512
100085c8:	85000217 	ldw	r20,8(r16)
100085cc:	10006c26 	beq	r2,zero,10008780 <__sfvwrite_r+0x2f4>
100085d0:	a02d883a 	mov	r22,r20
100085d4:	95008536 	bltu	r18,r20,100087ec <__sfvwrite_r+0x360>
100085d8:	1881200c 	andi	r2,r3,1152
100085dc:	10009d1e 	bne	r2,zero,10008854 <__sfvwrite_r+0x3c8>
100085e0:	81000017 	ldw	r4,0(r16)
100085e4:	a039883a 	mov	fp,r20
100085e8:	9029883a 	mov	r20,r18
100085ec:	b80b883a 	mov	r5,r23
100085f0:	b00d883a 	mov	r6,r22
100085f4:	00097000 	call	10009700 <memmove>
100085f8:	80c00217 	ldw	r3,8(r16)
100085fc:	81000017 	ldw	r4,0(r16)
10008600:	9005883a 	mov	r2,r18
10008604:	1f39c83a 	sub	fp,r3,fp
10008608:	258f883a 	add	r7,r4,r22
1000860c:	87000215 	stw	fp,8(r16)
10008610:	81c00015 	stw	r7,0(r16)
10008614:	98c00217 	ldw	r3,8(r19)
10008618:	b8af883a 	add	r23,r23,r2
1000861c:	90a5c83a 	sub	r18,r18,r2
10008620:	1d05c83a 	sub	r2,r3,r20
10008624:	98800215 	stw	r2,8(r19)
10008628:	103fc326 	beq	r2,zero,10008538 <__alt_data_end+0xf8008538>
1000862c:	80c0030b 	ldhu	r3,12(r16)
10008630:	903fe41e 	bne	r18,zero,100085c4 <__alt_data_end+0xf80085c4>
10008634:	8dc00017 	ldw	r23,0(r17)
10008638:	8c800117 	ldw	r18,4(r17)
1000863c:	8c400204 	addi	r17,r17,8
10008640:	003fdf06 	br	100085c0 <__alt_data_end+0xf80085c0>
10008644:	000a9c80 	call	1000a9c8 <_realloc_r>
10008648:	102d883a 	mov	r22,r2
1000864c:	1000a01e 	bne	r2,zero,100088d0 <__sfvwrite_r+0x444>
10008650:	81400417 	ldw	r5,16(r16)
10008654:	a809883a 	mov	r4,r21
10008658:	000819c0 	call	1000819c <_free_r>
1000865c:	00800304 	movi	r2,12
10008660:	a8800015 	stw	r2,0(r21)
10008664:	80c0030b 	ldhu	r3,12(r16)
10008668:	00bfffc4 	movi	r2,-1
1000866c:	18c01014 	ori	r3,r3,64
10008670:	80c0030d 	sth	r3,12(r16)
10008674:	003fb106 	br	1000853c <__alt_data_end+0xf800853c>
10008678:	0029883a 	mov	r20,zero
1000867c:	0011883a 	mov	r8,zero
10008680:	0039883a 	mov	fp,zero
10008684:	0025883a 	mov	r18,zero
10008688:	90001f26 	beq	r18,zero,10008708 <__sfvwrite_r+0x27c>
1000868c:	40006826 	beq	r8,zero,10008830 <__sfvwrite_r+0x3a4>
10008690:	a02f883a 	mov	r23,r20
10008694:	9500012e 	bgeu	r18,r20,1000869c <__sfvwrite_r+0x210>
10008698:	902f883a 	mov	r23,r18
1000869c:	81000017 	ldw	r4,0(r16)
100086a0:	80800417 	ldw	r2,16(r16)
100086a4:	b82d883a 	mov	r22,r23
100086a8:	81800217 	ldw	r6,8(r16)
100086ac:	81c00517 	ldw	r7,20(r16)
100086b0:	1100022e 	bgeu	r2,r4,100086bc <__sfvwrite_r+0x230>
100086b4:	31c7883a 	add	r3,r6,r7
100086b8:	1dc01816 	blt	r3,r23,1000871c <__sfvwrite_r+0x290>
100086bc:	b9c03f16 	blt	r23,r7,100087bc <__sfvwrite_r+0x330>
100086c0:	80800917 	ldw	r2,36(r16)
100086c4:	81400717 	ldw	r5,28(r16)
100086c8:	a809883a 	mov	r4,r21
100086cc:	da000115 	stw	r8,4(sp)
100086d0:	e00d883a 	mov	r6,fp
100086d4:	103ee83a 	callr	r2
100086d8:	102d883a 	mov	r22,r2
100086dc:	da000117 	ldw	r8,4(sp)
100086e0:	00bfe00e 	bge	zero,r2,10008664 <__alt_data_end+0xf8008664>
100086e4:	a5a9c83a 	sub	r20,r20,r22
100086e8:	a0001f26 	beq	r20,zero,10008768 <__sfvwrite_r+0x2dc>
100086ec:	98800217 	ldw	r2,8(r19)
100086f0:	e5b9883a 	add	fp,fp,r22
100086f4:	95a5c83a 	sub	r18,r18,r22
100086f8:	15adc83a 	sub	r22,r2,r22
100086fc:	9d800215 	stw	r22,8(r19)
10008700:	b03f8d26 	beq	r22,zero,10008538 <__alt_data_end+0xf8008538>
10008704:	903fe11e 	bne	r18,zero,1000868c <__alt_data_end+0xf800868c>
10008708:	8f000017 	ldw	fp,0(r17)
1000870c:	8c800117 	ldw	r18,4(r17)
10008710:	0011883a 	mov	r8,zero
10008714:	8c400204 	addi	r17,r17,8
10008718:	003fdb06 	br	10008688 <__alt_data_end+0xf8008688>
1000871c:	180d883a 	mov	r6,r3
10008720:	e00b883a 	mov	r5,fp
10008724:	da000115 	stw	r8,4(sp)
10008728:	d8c00015 	stw	r3,0(sp)
1000872c:	00097000 	call	10009700 <memmove>
10008730:	d8c00017 	ldw	r3,0(sp)
10008734:	80800017 	ldw	r2,0(r16)
10008738:	a809883a 	mov	r4,r21
1000873c:	800b883a 	mov	r5,r16
10008740:	10c5883a 	add	r2,r2,r3
10008744:	80800015 	stw	r2,0(r16)
10008748:	d8c00015 	stw	r3,0(sp)
1000874c:	0007a6c0 	call	10007a6c <_fflush_r>
10008750:	d8c00017 	ldw	r3,0(sp)
10008754:	da000117 	ldw	r8,4(sp)
10008758:	103fc21e 	bne	r2,zero,10008664 <__alt_data_end+0xf8008664>
1000875c:	182d883a 	mov	r22,r3
10008760:	a5a9c83a 	sub	r20,r20,r22
10008764:	a03fe11e 	bne	r20,zero,100086ec <__alt_data_end+0xf80086ec>
10008768:	a809883a 	mov	r4,r21
1000876c:	800b883a 	mov	r5,r16
10008770:	0007a6c0 	call	10007a6c <_fflush_r>
10008774:	103fbb1e 	bne	r2,zero,10008664 <__alt_data_end+0xf8008664>
10008778:	0011883a 	mov	r8,zero
1000877c:	003fdb06 	br	100086ec <__alt_data_end+0xf80086ec>
10008780:	81000017 	ldw	r4,0(r16)
10008784:	80800417 	ldw	r2,16(r16)
10008788:	1100012e 	bgeu	r2,r4,10008790 <__sfvwrite_r+0x304>
1000878c:	a4805a36 	bltu	r20,r18,100088f8 <__sfvwrite_r+0x46c>
10008790:	81c00517 	ldw	r7,20(r16)
10008794:	91c01a36 	bltu	r18,r7,10008800 <__sfvwrite_r+0x374>
10008798:	80800917 	ldw	r2,36(r16)
1000879c:	81400717 	ldw	r5,28(r16)
100087a0:	a809883a 	mov	r4,r21
100087a4:	b80d883a 	mov	r6,r23
100087a8:	103ee83a 	callr	r2
100087ac:	1029883a 	mov	r20,r2
100087b0:	00bfac0e 	bge	zero,r2,10008664 <__alt_data_end+0xf8008664>
100087b4:	a005883a 	mov	r2,r20
100087b8:	003f9606 	br	10008614 <__alt_data_end+0xf8008614>
100087bc:	b80d883a 	mov	r6,r23
100087c0:	e00b883a 	mov	r5,fp
100087c4:	da000115 	stw	r8,4(sp)
100087c8:	00097000 	call	10009700 <memmove>
100087cc:	80800217 	ldw	r2,8(r16)
100087d0:	80c00017 	ldw	r3,0(r16)
100087d4:	da000117 	ldw	r8,4(sp)
100087d8:	15c5c83a 	sub	r2,r2,r23
100087dc:	1def883a 	add	r23,r3,r23
100087e0:	80800215 	stw	r2,8(r16)
100087e4:	85c00015 	stw	r23,0(r16)
100087e8:	003fbe06 	br	100086e4 <__alt_data_end+0xf80086e4>
100087ec:	81000017 	ldw	r4,0(r16)
100087f0:	9039883a 	mov	fp,r18
100087f4:	9029883a 	mov	r20,r18
100087f8:	902d883a 	mov	r22,r18
100087fc:	003f7b06 	br	100085ec <__alt_data_end+0xf80085ec>
10008800:	b80b883a 	mov	r5,r23
10008804:	900d883a 	mov	r6,r18
10008808:	00097000 	call	10009700 <memmove>
1000880c:	80c00217 	ldw	r3,8(r16)
10008810:	80800017 	ldw	r2,0(r16)
10008814:	9029883a 	mov	r20,r18
10008818:	1c87c83a 	sub	r3,r3,r18
1000881c:	1485883a 	add	r2,r2,r18
10008820:	80800015 	stw	r2,0(r16)
10008824:	80c00215 	stw	r3,8(r16)
10008828:	9005883a 	mov	r2,r18
1000882c:	003f7906 	br	10008614 <__alt_data_end+0xf8008614>
10008830:	e009883a 	mov	r4,fp
10008834:	01400284 	movi	r5,10
10008838:	900d883a 	mov	r6,r18
1000883c:	00094e00 	call	100094e0 <memchr>
10008840:	10003826 	beq	r2,zero,10008924 <__sfvwrite_r+0x498>
10008844:	10800044 	addi	r2,r2,1
10008848:	1729c83a 	sub	r20,r2,fp
1000884c:	02000044 	movi	r8,1
10008850:	003f8f06 	br	10008690 <__alt_data_end+0xf8008690>
10008854:	80800517 	ldw	r2,20(r16)
10008858:	81400417 	ldw	r5,16(r16)
1000885c:	87000017 	ldw	fp,0(r16)
10008860:	10a9883a 	add	r20,r2,r2
10008864:	a085883a 	add	r2,r20,r2
10008868:	1028d7fa 	srli	r20,r2,31
1000886c:	e179c83a 	sub	fp,fp,r5
10008870:	e1000044 	addi	r4,fp,1
10008874:	a085883a 	add	r2,r20,r2
10008878:	1029d07a 	srai	r20,r2,1
1000887c:	2485883a 	add	r2,r4,r18
10008880:	a00d883a 	mov	r6,r20
10008884:	a080022e 	bgeu	r20,r2,10008890 <__sfvwrite_r+0x404>
10008888:	1029883a 	mov	r20,r2
1000888c:	100d883a 	mov	r6,r2
10008890:	18c1000c 	andi	r3,r3,1024
10008894:	a809883a 	mov	r4,r21
10008898:	183f6a26 	beq	r3,zero,10008644 <__alt_data_end+0xf8008644>
1000889c:	300b883a 	mov	r5,r6
100088a0:	0008d380 	call	10008d38 <_malloc_r>
100088a4:	102d883a 	mov	r22,r2
100088a8:	103f6c26 	beq	r2,zero,1000865c <__alt_data_end+0xf800865c>
100088ac:	81400417 	ldw	r5,16(r16)
100088b0:	1009883a 	mov	r4,r2
100088b4:	e00d883a 	mov	r6,fp
100088b8:	00095c80 	call	100095c8 <memcpy>
100088bc:	8080030b 	ldhu	r2,12(r16)
100088c0:	00fedfc4 	movi	r3,-1153
100088c4:	10c4703a 	and	r2,r2,r3
100088c8:	10802014 	ori	r2,r2,128
100088cc:	8080030d 	sth	r2,12(r16)
100088d0:	b709883a 	add	r4,r22,fp
100088d4:	a707c83a 	sub	r3,r20,fp
100088d8:	85800415 	stw	r22,16(r16)
100088dc:	85000515 	stw	r20,20(r16)
100088e0:	81000015 	stw	r4,0(r16)
100088e4:	9039883a 	mov	fp,r18
100088e8:	80c00215 	stw	r3,8(r16)
100088ec:	9029883a 	mov	r20,r18
100088f0:	902d883a 	mov	r22,r18
100088f4:	003f3d06 	br	100085ec <__alt_data_end+0xf80085ec>
100088f8:	b80b883a 	mov	r5,r23
100088fc:	a00d883a 	mov	r6,r20
10008900:	00097000 	call	10009700 <memmove>
10008904:	80800017 	ldw	r2,0(r16)
10008908:	a809883a 	mov	r4,r21
1000890c:	800b883a 	mov	r5,r16
10008910:	1505883a 	add	r2,r2,r20
10008914:	80800015 	stw	r2,0(r16)
10008918:	0007a6c0 	call	10007a6c <_fflush_r>
1000891c:	103fa526 	beq	r2,zero,100087b4 <__alt_data_end+0xf80087b4>
10008920:	003f5006 	br	10008664 <__alt_data_end+0xf8008664>
10008924:	95000044 	addi	r20,r18,1
10008928:	02000044 	movi	r8,1
1000892c:	003f5806 	br	10008690 <__alt_data_end+0xf8008690>

10008930 <_fwalk>:
10008930:	defff804 	addi	sp,sp,-32
10008934:	dd400515 	stw	r21,20(sp)
10008938:	2540b804 	addi	r21,r4,736
1000893c:	dd800615 	stw	r22,24(sp)
10008940:	dd000415 	stw	r20,16(sp)
10008944:	dfc00715 	stw	ra,28(sp)
10008948:	dcc00315 	stw	r19,12(sp)
1000894c:	dc800215 	stw	r18,8(sp)
10008950:	dc400115 	stw	r17,4(sp)
10008954:	dc000015 	stw	r16,0(sp)
10008958:	2829883a 	mov	r20,r5
1000895c:	002d883a 	mov	r22,zero
10008960:	00080380 	call	10008038 <__sfp_lock_acquire>
10008964:	a8001426 	beq	r21,zero,100089b8 <_fwalk+0x88>
10008968:	04ffffc4 	movi	r19,-1
1000896c:	ac400117 	ldw	r17,4(r21)
10008970:	ac800217 	ldw	r18,8(r21)
10008974:	8c7fffc4 	addi	r17,r17,-1
10008978:	88000d16 	blt	r17,zero,100089b0 <_fwalk+0x80>
1000897c:	94000304 	addi	r16,r18,12
10008980:	94800384 	addi	r18,r18,14
10008984:	80c0000f 	ldh	r3,0(r16)
10008988:	8c7fffc4 	addi	r17,r17,-1
1000898c:	813ffd04 	addi	r4,r16,-12
10008990:	18000426 	beq	r3,zero,100089a4 <_fwalk+0x74>
10008994:	90c0000f 	ldh	r3,0(r18)
10008998:	1cc00226 	beq	r3,r19,100089a4 <_fwalk+0x74>
1000899c:	a03ee83a 	callr	r20
100089a0:	b0acb03a 	or	r22,r22,r2
100089a4:	84001a04 	addi	r16,r16,104
100089a8:	94801a04 	addi	r18,r18,104
100089ac:	8cfff51e 	bne	r17,r19,10008984 <__alt_data_end+0xf8008984>
100089b0:	ad400017 	ldw	r21,0(r21)
100089b4:	a83fed1e 	bne	r21,zero,1000896c <__alt_data_end+0xf800896c>
100089b8:	000803c0 	call	1000803c <__sfp_lock_release>
100089bc:	b005883a 	mov	r2,r22
100089c0:	dfc00717 	ldw	ra,28(sp)
100089c4:	dd800617 	ldw	r22,24(sp)
100089c8:	dd400517 	ldw	r21,20(sp)
100089cc:	dd000417 	ldw	r20,16(sp)
100089d0:	dcc00317 	ldw	r19,12(sp)
100089d4:	dc800217 	ldw	r18,8(sp)
100089d8:	dc400117 	ldw	r17,4(sp)
100089dc:	dc000017 	ldw	r16,0(sp)
100089e0:	dec00804 	addi	sp,sp,32
100089e4:	f800283a 	ret

100089e8 <_fwalk_reent>:
100089e8:	defff804 	addi	sp,sp,-32
100089ec:	dd400515 	stw	r21,20(sp)
100089f0:	2540b804 	addi	r21,r4,736
100089f4:	dd800615 	stw	r22,24(sp)
100089f8:	dd000415 	stw	r20,16(sp)
100089fc:	dcc00315 	stw	r19,12(sp)
10008a00:	dfc00715 	stw	ra,28(sp)
10008a04:	dc800215 	stw	r18,8(sp)
10008a08:	dc400115 	stw	r17,4(sp)
10008a0c:	dc000015 	stw	r16,0(sp)
10008a10:	2027883a 	mov	r19,r4
10008a14:	2829883a 	mov	r20,r5
10008a18:	002d883a 	mov	r22,zero
10008a1c:	00080380 	call	10008038 <__sfp_lock_acquire>
10008a20:	a8001326 	beq	r21,zero,10008a70 <_fwalk_reent+0x88>
10008a24:	04bfffc4 	movi	r18,-1
10008a28:	ac400117 	ldw	r17,4(r21)
10008a2c:	ac000217 	ldw	r16,8(r21)
10008a30:	8c7fffc4 	addi	r17,r17,-1
10008a34:	88000c16 	blt	r17,zero,10008a68 <_fwalk_reent+0x80>
10008a38:	84000304 	addi	r16,r16,12
10008a3c:	80c0000f 	ldh	r3,0(r16)
10008a40:	8c7fffc4 	addi	r17,r17,-1
10008a44:	817ffd04 	addi	r5,r16,-12
10008a48:	18000526 	beq	r3,zero,10008a60 <_fwalk_reent+0x78>
10008a4c:	80c0008f 	ldh	r3,2(r16)
10008a50:	9809883a 	mov	r4,r19
10008a54:	1c800226 	beq	r3,r18,10008a60 <_fwalk_reent+0x78>
10008a58:	a03ee83a 	callr	r20
10008a5c:	b0acb03a 	or	r22,r22,r2
10008a60:	84001a04 	addi	r16,r16,104
10008a64:	8cbff51e 	bne	r17,r18,10008a3c <__alt_data_end+0xf8008a3c>
10008a68:	ad400017 	ldw	r21,0(r21)
10008a6c:	a83fee1e 	bne	r21,zero,10008a28 <__alt_data_end+0xf8008a28>
10008a70:	000803c0 	call	1000803c <__sfp_lock_release>
10008a74:	b005883a 	mov	r2,r22
10008a78:	dfc00717 	ldw	ra,28(sp)
10008a7c:	dd800617 	ldw	r22,24(sp)
10008a80:	dd400517 	ldw	r21,20(sp)
10008a84:	dd000417 	ldw	r20,16(sp)
10008a88:	dcc00317 	ldw	r19,12(sp)
10008a8c:	dc800217 	ldw	r18,8(sp)
10008a90:	dc400117 	ldw	r17,4(sp)
10008a94:	dc000017 	ldw	r16,0(sp)
10008a98:	dec00804 	addi	sp,sp,32
10008a9c:	f800283a 	ret

10008aa0 <_setlocale_r>:
10008aa0:	30001b26 	beq	r6,zero,10008b10 <_setlocale_r+0x70>
10008aa4:	01440074 	movhi	r5,4097
10008aa8:	defffe04 	addi	sp,sp,-8
10008aac:	2954e004 	addi	r5,r5,21376
10008ab0:	3009883a 	mov	r4,r6
10008ab4:	dc000015 	stw	r16,0(sp)
10008ab8:	dfc00115 	stw	ra,4(sp)
10008abc:	3021883a 	mov	r16,r6
10008ac0:	000b16c0 	call	1000b16c <strcmp>
10008ac4:	1000061e 	bne	r2,zero,10008ae0 <_setlocale_r+0x40>
10008ac8:	00840074 	movhi	r2,4097
10008acc:	1094df04 	addi	r2,r2,21372
10008ad0:	dfc00117 	ldw	ra,4(sp)
10008ad4:	dc000017 	ldw	r16,0(sp)
10008ad8:	dec00204 	addi	sp,sp,8
10008adc:	f800283a 	ret
10008ae0:	01440074 	movhi	r5,4097
10008ae4:	2954df04 	addi	r5,r5,21372
10008ae8:	8009883a 	mov	r4,r16
10008aec:	000b16c0 	call	1000b16c <strcmp>
10008af0:	103ff526 	beq	r2,zero,10008ac8 <__alt_data_end+0xf8008ac8>
10008af4:	01440074 	movhi	r5,4097
10008af8:	2954ca04 	addi	r5,r5,21288
10008afc:	8009883a 	mov	r4,r16
10008b00:	000b16c0 	call	1000b16c <strcmp>
10008b04:	103ff026 	beq	r2,zero,10008ac8 <__alt_data_end+0xf8008ac8>
10008b08:	0005883a 	mov	r2,zero
10008b0c:	003ff006 	br	10008ad0 <__alt_data_end+0xf8008ad0>
10008b10:	00840074 	movhi	r2,4097
10008b14:	1094df04 	addi	r2,r2,21372
10008b18:	f800283a 	ret

10008b1c <__locale_charset>:
10008b1c:	00840074 	movhi	r2,4097
10008b20:	10969204 	addi	r2,r2,23112
10008b24:	f800283a 	ret

10008b28 <__locale_mb_cur_max>:
10008b28:	00840074 	movhi	r2,4097
10008b2c:	109c3204 	addi	r2,r2,28872
10008b30:	10800017 	ldw	r2,0(r2)
10008b34:	f800283a 	ret

10008b38 <__locale_msgcharset>:
10008b38:	00840074 	movhi	r2,4097
10008b3c:	10968a04 	addi	r2,r2,23080
10008b40:	f800283a 	ret

10008b44 <__locale_cjk_lang>:
10008b44:	0005883a 	mov	r2,zero
10008b48:	f800283a 	ret

10008b4c <_localeconv_r>:
10008b4c:	00840074 	movhi	r2,4097
10008b50:	10969a04 	addi	r2,r2,23144
10008b54:	f800283a 	ret

10008b58 <setlocale>:
10008b58:	00c40074 	movhi	r3,4097
10008b5c:	18dc3104 	addi	r3,r3,28868
10008b60:	2005883a 	mov	r2,r4
10008b64:	19000017 	ldw	r4,0(r3)
10008b68:	280d883a 	mov	r6,r5
10008b6c:	100b883a 	mov	r5,r2
10008b70:	0008aa01 	jmpi	10008aa0 <_setlocale_r>

10008b74 <localeconv>:
10008b74:	00840074 	movhi	r2,4097
10008b78:	10969a04 	addi	r2,r2,23144
10008b7c:	f800283a 	ret

10008b80 <__smakebuf_r>:
10008b80:	2880030b 	ldhu	r2,12(r5)
10008b84:	10c0008c 	andi	r3,r2,2
10008b88:	1800401e 	bne	r3,zero,10008c8c <__smakebuf_r+0x10c>
10008b8c:	deffec04 	addi	sp,sp,-80
10008b90:	dc000f15 	stw	r16,60(sp)
10008b94:	2821883a 	mov	r16,r5
10008b98:	2940038f 	ldh	r5,14(r5)
10008b9c:	dc401015 	stw	r17,64(sp)
10008ba0:	dfc01315 	stw	ra,76(sp)
10008ba4:	dcc01215 	stw	r19,72(sp)
10008ba8:	dc801115 	stw	r18,68(sp)
10008bac:	2023883a 	mov	r17,r4
10008bb0:	28001b16 	blt	r5,zero,10008c20 <__smakebuf_r+0xa0>
10008bb4:	d80d883a 	mov	r6,sp
10008bb8:	000cbe40 	call	1000cbe4 <_fstat_r>
10008bbc:	10001716 	blt	r2,zero,10008c1c <__smakebuf_r+0x9c>
10008bc0:	d8800117 	ldw	r2,4(sp)
10008bc4:	00e00014 	movui	r3,32768
10008bc8:	10bc000c 	andi	r2,r2,61440
10008bcc:	10c03726 	beq	r2,r3,10008cac <__smakebuf_r+0x12c>
10008bd0:	80c0030b 	ldhu	r3,12(r16)
10008bd4:	18c20014 	ori	r3,r3,2048
10008bd8:	80c0030d 	sth	r3,12(r16)
10008bdc:	00c80004 	movi	r3,8192
10008be0:	10c03c1e 	bne	r2,r3,10008cd4 <__smakebuf_r+0x154>
10008be4:	8140038f 	ldh	r5,14(r16)
10008be8:	8809883a 	mov	r4,r17
10008bec:	000cc3c0 	call	1000cc3c <_isatty_r>
10008bf0:	10004e26 	beq	r2,zero,10008d2c <__smakebuf_r+0x1ac>
10008bf4:	8080030b 	ldhu	r2,12(r16)
10008bf8:	04c00044 	movi	r19,1
10008bfc:	80c010c4 	addi	r3,r16,67
10008c00:	14c4b03a 	or	r2,r2,r19
10008c04:	8080030d 	sth	r2,12(r16)
10008c08:	80c00015 	stw	r3,0(r16)
10008c0c:	80c00415 	stw	r3,16(r16)
10008c10:	84c00515 	stw	r19,20(r16)
10008c14:	04810004 	movi	r18,1024
10008c18:	00000706 	br	10008c38 <__smakebuf_r+0xb8>
10008c1c:	8080030b 	ldhu	r2,12(r16)
10008c20:	10c0200c 	andi	r3,r2,128
10008c24:	18001f1e 	bne	r3,zero,10008ca4 <__smakebuf_r+0x124>
10008c28:	04810004 	movi	r18,1024
10008c2c:	10820014 	ori	r2,r2,2048
10008c30:	8080030d 	sth	r2,12(r16)
10008c34:	0027883a 	mov	r19,zero
10008c38:	8809883a 	mov	r4,r17
10008c3c:	900b883a 	mov	r5,r18
10008c40:	0008d380 	call	10008d38 <_malloc_r>
10008c44:	10002e26 	beq	r2,zero,10008d00 <__smakebuf_r+0x180>
10008c48:	80c0030b 	ldhu	r3,12(r16)
10008c4c:	01040034 	movhi	r4,4096
10008c50:	211f3504 	addi	r4,r4,31956
10008c54:	89000f15 	stw	r4,60(r17)
10008c58:	18c02014 	ori	r3,r3,128
10008c5c:	80c0030d 	sth	r3,12(r16)
10008c60:	80800015 	stw	r2,0(r16)
10008c64:	80800415 	stw	r2,16(r16)
10008c68:	84800515 	stw	r18,20(r16)
10008c6c:	98001c1e 	bne	r19,zero,10008ce0 <__smakebuf_r+0x160>
10008c70:	dfc01317 	ldw	ra,76(sp)
10008c74:	dcc01217 	ldw	r19,72(sp)
10008c78:	dc801117 	ldw	r18,68(sp)
10008c7c:	dc401017 	ldw	r17,64(sp)
10008c80:	dc000f17 	ldw	r16,60(sp)
10008c84:	dec01404 	addi	sp,sp,80
10008c88:	f800283a 	ret
10008c8c:	288010c4 	addi	r2,r5,67
10008c90:	28800015 	stw	r2,0(r5)
10008c94:	28800415 	stw	r2,16(r5)
10008c98:	00800044 	movi	r2,1
10008c9c:	28800515 	stw	r2,20(r5)
10008ca0:	f800283a 	ret
10008ca4:	04801004 	movi	r18,64
10008ca8:	003fe006 	br	10008c2c <__alt_data_end+0xf8008c2c>
10008cac:	81000a17 	ldw	r4,40(r16)
10008cb0:	00c40074 	movhi	r3,4097
10008cb4:	18ec4204 	addi	r3,r3,-20216
10008cb8:	20ffc51e 	bne	r4,r3,10008bd0 <__alt_data_end+0xf8008bd0>
10008cbc:	80c0030b 	ldhu	r3,12(r16)
10008cc0:	01010004 	movi	r4,1024
10008cc4:	81001315 	stw	r4,76(r16)
10008cc8:	1906b03a 	or	r3,r3,r4
10008ccc:	80c0030d 	sth	r3,12(r16)
10008cd0:	003fc206 	br	10008bdc <__alt_data_end+0xf8008bdc>
10008cd4:	0027883a 	mov	r19,zero
10008cd8:	04810004 	movi	r18,1024
10008cdc:	003fd606 	br	10008c38 <__alt_data_end+0xf8008c38>
10008ce0:	8140038f 	ldh	r5,14(r16)
10008ce4:	8809883a 	mov	r4,r17
10008ce8:	000cc3c0 	call	1000cc3c <_isatty_r>
10008cec:	103fe026 	beq	r2,zero,10008c70 <__alt_data_end+0xf8008c70>
10008cf0:	8080030b 	ldhu	r2,12(r16)
10008cf4:	10800054 	ori	r2,r2,1
10008cf8:	8080030d 	sth	r2,12(r16)
10008cfc:	003fdc06 	br	10008c70 <__alt_data_end+0xf8008c70>
10008d00:	8080030b 	ldhu	r2,12(r16)
10008d04:	10c0800c 	andi	r3,r2,512
10008d08:	183fd91e 	bne	r3,zero,10008c70 <__alt_data_end+0xf8008c70>
10008d0c:	10800094 	ori	r2,r2,2
10008d10:	80c010c4 	addi	r3,r16,67
10008d14:	8080030d 	sth	r2,12(r16)
10008d18:	00800044 	movi	r2,1
10008d1c:	80c00015 	stw	r3,0(r16)
10008d20:	80c00415 	stw	r3,16(r16)
10008d24:	80800515 	stw	r2,20(r16)
10008d28:	003fd106 	br	10008c70 <__alt_data_end+0xf8008c70>
10008d2c:	04c00044 	movi	r19,1
10008d30:	04810004 	movi	r18,1024
10008d34:	003fc006 	br	10008c38 <__alt_data_end+0xf8008c38>

10008d38 <_malloc_r>:
10008d38:	defff504 	addi	sp,sp,-44
10008d3c:	dc800315 	stw	r18,12(sp)
10008d40:	dfc00a15 	stw	ra,40(sp)
10008d44:	df000915 	stw	fp,36(sp)
10008d48:	ddc00815 	stw	r23,32(sp)
10008d4c:	dd800715 	stw	r22,28(sp)
10008d50:	dd400615 	stw	r21,24(sp)
10008d54:	dd000515 	stw	r20,20(sp)
10008d58:	dcc00415 	stw	r19,16(sp)
10008d5c:	dc400215 	stw	r17,8(sp)
10008d60:	dc000115 	stw	r16,4(sp)
10008d64:	288002c4 	addi	r2,r5,11
10008d68:	00c00584 	movi	r3,22
10008d6c:	2025883a 	mov	r18,r4
10008d70:	18802a2e 	bgeu	r3,r2,10008e1c <_malloc_r+0xe4>
10008d74:	047ffe04 	movi	r17,-8
10008d78:	1462703a 	and	r17,r2,r17
10008d7c:	88009e16 	blt	r17,zero,10008ff8 <_malloc_r+0x2c0>
10008d80:	89409d36 	bltu	r17,r5,10008ff8 <_malloc_r+0x2c0>
10008d84:	0010bfc0 	call	10010bfc <__malloc_lock>
10008d88:	00807dc4 	movi	r2,503
10008d8c:	14402736 	bltu	r2,r17,10008e2c <_malloc_r+0xf4>
10008d90:	8806d0fa 	srli	r3,r17,3
10008d94:	04c40074 	movhi	r19,4097
10008d98:	9cd6a804 	addi	r19,r19,23200
10008d9c:	18c5883a 	add	r2,r3,r3
10008da0:	1085883a 	add	r2,r2,r2
10008da4:	1085883a 	add	r2,r2,r2
10008da8:	9885883a 	add	r2,r19,r2
10008dac:	14000317 	ldw	r16,12(r2)
10008db0:	80814a26 	beq	r16,r2,100092dc <_malloc_r+0x5a4>
10008db4:	80c00117 	ldw	r3,4(r16)
10008db8:	81000317 	ldw	r4,12(r16)
10008dbc:	00bfff04 	movi	r2,-4
10008dc0:	1884703a 	and	r2,r3,r2
10008dc4:	81400217 	ldw	r5,8(r16)
10008dc8:	8085883a 	add	r2,r16,r2
10008dcc:	10c00117 	ldw	r3,4(r2)
10008dd0:	29000315 	stw	r4,12(r5)
10008dd4:	21400215 	stw	r5,8(r4)
10008dd8:	18c00054 	ori	r3,r3,1
10008ddc:	10c00115 	stw	r3,4(r2)
10008de0:	9009883a 	mov	r4,r18
10008de4:	0010c1c0 	call	10010c1c <__malloc_unlock>
10008de8:	80800204 	addi	r2,r16,8
10008dec:	dfc00a17 	ldw	ra,40(sp)
10008df0:	df000917 	ldw	fp,36(sp)
10008df4:	ddc00817 	ldw	r23,32(sp)
10008df8:	dd800717 	ldw	r22,28(sp)
10008dfc:	dd400617 	ldw	r21,24(sp)
10008e00:	dd000517 	ldw	r20,20(sp)
10008e04:	dcc00417 	ldw	r19,16(sp)
10008e08:	dc800317 	ldw	r18,12(sp)
10008e0c:	dc400217 	ldw	r17,8(sp)
10008e10:	dc000117 	ldw	r16,4(sp)
10008e14:	dec00b04 	addi	sp,sp,44
10008e18:	f800283a 	ret
10008e1c:	04400404 	movi	r17,16
10008e20:	89407536 	bltu	r17,r5,10008ff8 <_malloc_r+0x2c0>
10008e24:	0010bfc0 	call	10010bfc <__malloc_lock>
10008e28:	003fd906 	br	10008d90 <__alt_data_end+0xf8008d90>
10008e2c:	8806d27a 	srli	r3,r17,9
10008e30:	18007526 	beq	r3,zero,10009008 <_malloc_r+0x2d0>
10008e34:	00800104 	movi	r2,4
10008e38:	10c0ef36 	bltu	r2,r3,100091f8 <_malloc_r+0x4c0>
10008e3c:	8806d1ba 	srli	r3,r17,6
10008e40:	19c00e04 	addi	r7,r3,56
10008e44:	39cb883a 	add	r5,r7,r7
10008e48:	04c40074 	movhi	r19,4097
10008e4c:	294b883a 	add	r5,r5,r5
10008e50:	9cd6a804 	addi	r19,r19,23200
10008e54:	294b883a 	add	r5,r5,r5
10008e58:	994b883a 	add	r5,r19,r5
10008e5c:	2c000317 	ldw	r16,12(r5)
10008e60:	2c000e26 	beq	r5,r16,10008e9c <_malloc_r+0x164>
10008e64:	80800117 	ldw	r2,4(r16)
10008e68:	01bfff04 	movi	r6,-4
10008e6c:	010003c4 	movi	r4,15
10008e70:	1184703a 	and	r2,r2,r6
10008e74:	1447c83a 	sub	r3,r2,r17
10008e78:	20c00716 	blt	r4,r3,10008e98 <_malloc_r+0x160>
10008e7c:	1800650e 	bge	r3,zero,10009014 <_malloc_r+0x2dc>
10008e80:	84000317 	ldw	r16,12(r16)
10008e84:	2c000526 	beq	r5,r16,10008e9c <_malloc_r+0x164>
10008e88:	80800117 	ldw	r2,4(r16)
10008e8c:	1184703a 	and	r2,r2,r6
10008e90:	1447c83a 	sub	r3,r2,r17
10008e94:	20fff90e 	bge	r4,r3,10008e7c <__alt_data_end+0xf8008e7c>
10008e98:	39ffffc4 	addi	r7,r7,-1
10008e9c:	38c00044 	addi	r3,r7,1
10008ea0:	01840074 	movhi	r6,4097
10008ea4:	9c000417 	ldw	r16,16(r19)
10008ea8:	3196a804 	addi	r6,r6,23200
10008eac:	32400204 	addi	r9,r6,8
10008eb0:	82410326 	beq	r16,r9,100092c0 <_malloc_r+0x588>
10008eb4:	81000117 	ldw	r4,4(r16)
10008eb8:	00bfff04 	movi	r2,-4
10008ebc:	208e703a 	and	r7,r4,r2
10008ec0:	3c45c83a 	sub	r2,r7,r17
10008ec4:	010003c4 	movi	r4,15
10008ec8:	2080ee16 	blt	r4,r2,10009284 <_malloc_r+0x54c>
10008ecc:	32400515 	stw	r9,20(r6)
10008ed0:	32400415 	stw	r9,16(r6)
10008ed4:	1000510e 	bge	r2,zero,1000901c <_malloc_r+0x2e4>
10008ed8:	00807fc4 	movi	r2,511
10008edc:	11c0ce36 	bltu	r2,r7,10009218 <_malloc_r+0x4e0>
10008ee0:	3808d0fa 	srli	r4,r7,3
10008ee4:	01c00044 	movi	r7,1
10008ee8:	30800117 	ldw	r2,4(r6)
10008eec:	210b883a 	add	r5,r4,r4
10008ef0:	294b883a 	add	r5,r5,r5
10008ef4:	2009d0ba 	srai	r4,r4,2
10008ef8:	294b883a 	add	r5,r5,r5
10008efc:	298b883a 	add	r5,r5,r6
10008f00:	2a000217 	ldw	r8,8(r5)
10008f04:	3908983a 	sll	r4,r7,r4
10008f08:	81400315 	stw	r5,12(r16)
10008f0c:	82000215 	stw	r8,8(r16)
10008f10:	2088b03a 	or	r4,r4,r2
10008f14:	2c000215 	stw	r16,8(r5)
10008f18:	31000115 	stw	r4,4(r6)
10008f1c:	44000315 	stw	r16,12(r8)
10008f20:	1805d0ba 	srai	r2,r3,2
10008f24:	01400044 	movi	r5,1
10008f28:	288a983a 	sll	r5,r5,r2
10008f2c:	21404336 	bltu	r4,r5,1000903c <_malloc_r+0x304>
10008f30:	2144703a 	and	r2,r4,r5
10008f34:	10000a1e 	bne	r2,zero,10008f60 <_malloc_r+0x228>
10008f38:	00bfff04 	movi	r2,-4
10008f3c:	294b883a 	add	r5,r5,r5
10008f40:	1886703a 	and	r3,r3,r2
10008f44:	2144703a 	and	r2,r4,r5
10008f48:	18c00104 	addi	r3,r3,4
10008f4c:	1000041e 	bne	r2,zero,10008f60 <_malloc_r+0x228>
10008f50:	294b883a 	add	r5,r5,r5
10008f54:	2144703a 	and	r2,r4,r5
10008f58:	18c00104 	addi	r3,r3,4
10008f5c:	103ffc26 	beq	r2,zero,10008f50 <__alt_data_end+0xf8008f50>
10008f60:	023fff04 	movi	r8,-4
10008f64:	01c003c4 	movi	r7,15
10008f68:	18c5883a 	add	r2,r3,r3
10008f6c:	1085883a 	add	r2,r2,r2
10008f70:	1085883a 	add	r2,r2,r2
10008f74:	9895883a 	add	r10,r19,r2
10008f78:	52c00304 	addi	r11,r10,12
10008f7c:	1819883a 	mov	r12,r3
10008f80:	5c000017 	ldw	r16,0(r11)
10008f84:	59bffd04 	addi	r6,r11,-12
10008f88:	8180041e 	bne	r16,r6,10008f9c <_malloc_r+0x264>
10008f8c:	0000ce06 	br	100092c8 <_malloc_r+0x590>
10008f90:	2000d70e 	bge	r4,zero,100092f0 <_malloc_r+0x5b8>
10008f94:	84000317 	ldw	r16,12(r16)
10008f98:	8180cb26 	beq	r16,r6,100092c8 <_malloc_r+0x590>
10008f9c:	80800117 	ldw	r2,4(r16)
10008fa0:	1204703a 	and	r2,r2,r8
10008fa4:	1449c83a 	sub	r4,r2,r17
10008fa8:	393ff90e 	bge	r7,r4,10008f90 <__alt_data_end+0xf8008f90>
10008fac:	80800317 	ldw	r2,12(r16)
10008fb0:	80c00217 	ldw	r3,8(r16)
10008fb4:	89400054 	ori	r5,r17,1
10008fb8:	81400115 	stw	r5,4(r16)
10008fbc:	18800315 	stw	r2,12(r3)
10008fc0:	10c00215 	stw	r3,8(r2)
10008fc4:	8463883a 	add	r17,r16,r17
10008fc8:	9c400515 	stw	r17,20(r19)
10008fcc:	9c400415 	stw	r17,16(r19)
10008fd0:	20800054 	ori	r2,r4,1
10008fd4:	88800115 	stw	r2,4(r17)
10008fd8:	8a400315 	stw	r9,12(r17)
10008fdc:	8a400215 	stw	r9,8(r17)
10008fe0:	8923883a 	add	r17,r17,r4
10008fe4:	89000015 	stw	r4,0(r17)
10008fe8:	9009883a 	mov	r4,r18
10008fec:	0010c1c0 	call	10010c1c <__malloc_unlock>
10008ff0:	80800204 	addi	r2,r16,8
10008ff4:	003f7d06 	br	10008dec <__alt_data_end+0xf8008dec>
10008ff8:	00800304 	movi	r2,12
10008ffc:	90800015 	stw	r2,0(r18)
10009000:	0005883a 	mov	r2,zero
10009004:	003f7906 	br	10008dec <__alt_data_end+0xf8008dec>
10009008:	01401f84 	movi	r5,126
1000900c:	01c00fc4 	movi	r7,63
10009010:	003f8d06 	br	10008e48 <__alt_data_end+0xf8008e48>
10009014:	81000317 	ldw	r4,12(r16)
10009018:	003f6a06 	br	10008dc4 <__alt_data_end+0xf8008dc4>
1000901c:	81c5883a 	add	r2,r16,r7
10009020:	10c00117 	ldw	r3,4(r2)
10009024:	9009883a 	mov	r4,r18
10009028:	18c00054 	ori	r3,r3,1
1000902c:	10c00115 	stw	r3,4(r2)
10009030:	0010c1c0 	call	10010c1c <__malloc_unlock>
10009034:	80800204 	addi	r2,r16,8
10009038:	003f6c06 	br	10008dec <__alt_data_end+0xf8008dec>
1000903c:	9c000217 	ldw	r16,8(r19)
10009040:	00bfff04 	movi	r2,-4
10009044:	85800117 	ldw	r22,4(r16)
10009048:	b0ac703a 	and	r22,r22,r2
1000904c:	b4400336 	bltu	r22,r17,1000905c <_malloc_r+0x324>
10009050:	b445c83a 	sub	r2,r22,r17
10009054:	00c003c4 	movi	r3,15
10009058:	18805d16 	blt	r3,r2,100091d0 <_malloc_r+0x498>
1000905c:	05c40074 	movhi	r23,4097
10009060:	008400b4 	movhi	r2,4098
10009064:	bddc3304 	addi	r23,r23,28876
10009068:	10a30d04 	addi	r2,r2,-29644
1000906c:	15400017 	ldw	r21,0(r2)
10009070:	b9000017 	ldw	r4,0(r23)
10009074:	00ffffc4 	movi	r3,-1
10009078:	858d883a 	add	r6,r16,r22
1000907c:	8d6b883a 	add	r21,r17,r21
10009080:	20c0e426 	beq	r4,r3,10009414 <_malloc_r+0x6dc>
10009084:	ad4403c4 	addi	r21,r21,4111
10009088:	00fc0004 	movi	r3,-4096
1000908c:	a8ea703a 	and	r21,r21,r3
10009090:	9009883a 	mov	r4,r18
10009094:	a80b883a 	mov	r5,r21
10009098:	d9800015 	stw	r6,0(sp)
1000909c:	000afdc0 	call	1000afdc <_sbrk_r>
100090a0:	00ffffc4 	movi	r3,-1
100090a4:	1029883a 	mov	r20,r2
100090a8:	d9800017 	ldw	r6,0(sp)
100090ac:	10c0a426 	beq	r2,r3,10009340 <_malloc_r+0x608>
100090b0:	1180a236 	bltu	r2,r6,1000933c <_malloc_r+0x604>
100090b4:	070400b4 	movhi	fp,4098
100090b8:	e7231504 	addi	fp,fp,-29612
100090bc:	e0c00017 	ldw	r3,0(fp)
100090c0:	a8c7883a 	add	r3,r21,r3
100090c4:	e0c00015 	stw	r3,0(fp)
100090c8:	3500da26 	beq	r6,r20,10009434 <_malloc_r+0x6fc>
100090cc:	b9000017 	ldw	r4,0(r23)
100090d0:	00bfffc4 	movi	r2,-1
100090d4:	2080e426 	beq	r4,r2,10009468 <_malloc_r+0x730>
100090d8:	a185c83a 	sub	r2,r20,r6
100090dc:	1885883a 	add	r2,r3,r2
100090e0:	e0800015 	stw	r2,0(fp)
100090e4:	a0c001cc 	andi	r3,r20,7
100090e8:	1800b526 	beq	r3,zero,100093c0 <_malloc_r+0x688>
100090ec:	a0e9c83a 	sub	r20,r20,r3
100090f0:	00840204 	movi	r2,4104
100090f4:	a5000204 	addi	r20,r20,8
100090f8:	10c7c83a 	sub	r3,r2,r3
100090fc:	a545883a 	add	r2,r20,r21
10009100:	1083ffcc 	andi	r2,r2,4095
10009104:	18abc83a 	sub	r21,r3,r2
10009108:	9009883a 	mov	r4,r18
1000910c:	a80b883a 	mov	r5,r21
10009110:	000afdc0 	call	1000afdc <_sbrk_r>
10009114:	00ffffc4 	movi	r3,-1
10009118:	10c0d026 	beq	r2,r3,1000945c <_malloc_r+0x724>
1000911c:	1507c83a 	sub	r3,r2,r20
10009120:	a8c7883a 	add	r3,r21,r3
10009124:	18c00054 	ori	r3,r3,1
10009128:	e0800017 	ldw	r2,0(fp)
1000912c:	9d000215 	stw	r20,8(r19)
10009130:	a0c00115 	stw	r3,4(r20)
10009134:	a887883a 	add	r3,r21,r2
10009138:	e0c00015 	stw	r3,0(fp)
1000913c:	84c00e26 	beq	r16,r19,10009178 <_malloc_r+0x440>
10009140:	018003c4 	movi	r6,15
10009144:	3580a02e 	bgeu	r6,r22,100093c8 <_malloc_r+0x690>
10009148:	81400117 	ldw	r5,4(r16)
1000914c:	013ffe04 	movi	r4,-8
10009150:	b0bffd04 	addi	r2,r22,-12
10009154:	1104703a 	and	r2,r2,r4
10009158:	2900004c 	andi	r4,r5,1
1000915c:	1108b03a 	or	r4,r2,r4
10009160:	81000115 	stw	r4,4(r16)
10009164:	01400144 	movi	r5,5
10009168:	8089883a 	add	r4,r16,r2
1000916c:	21400115 	stw	r5,4(r4)
10009170:	21400215 	stw	r5,8(r4)
10009174:	3080c036 	bltu	r6,r2,10009478 <_malloc_r+0x740>
10009178:	008400b4 	movhi	r2,4098
1000917c:	10a30c04 	addi	r2,r2,-29648
10009180:	11000017 	ldw	r4,0(r2)
10009184:	20c0012e 	bgeu	r4,r3,1000918c <_malloc_r+0x454>
10009188:	10c00015 	stw	r3,0(r2)
1000918c:	008400b4 	movhi	r2,4098
10009190:	10a30b04 	addi	r2,r2,-29652
10009194:	11000017 	ldw	r4,0(r2)
10009198:	9c000217 	ldw	r16,8(r19)
1000919c:	20c0012e 	bgeu	r4,r3,100091a4 <_malloc_r+0x46c>
100091a0:	10c00015 	stw	r3,0(r2)
100091a4:	80c00117 	ldw	r3,4(r16)
100091a8:	00bfff04 	movi	r2,-4
100091ac:	1886703a 	and	r3,r3,r2
100091b0:	1c45c83a 	sub	r2,r3,r17
100091b4:	1c400236 	bltu	r3,r17,100091c0 <_malloc_r+0x488>
100091b8:	00c003c4 	movi	r3,15
100091bc:	18800416 	blt	r3,r2,100091d0 <_malloc_r+0x498>
100091c0:	9009883a 	mov	r4,r18
100091c4:	0010c1c0 	call	10010c1c <__malloc_unlock>
100091c8:	0005883a 	mov	r2,zero
100091cc:	003f0706 	br	10008dec <__alt_data_end+0xf8008dec>
100091d0:	88c00054 	ori	r3,r17,1
100091d4:	80c00115 	stw	r3,4(r16)
100091d8:	8463883a 	add	r17,r16,r17
100091dc:	10800054 	ori	r2,r2,1
100091e0:	9c400215 	stw	r17,8(r19)
100091e4:	88800115 	stw	r2,4(r17)
100091e8:	9009883a 	mov	r4,r18
100091ec:	0010c1c0 	call	10010c1c <__malloc_unlock>
100091f0:	80800204 	addi	r2,r16,8
100091f4:	003efd06 	br	10008dec <__alt_data_end+0xf8008dec>
100091f8:	00800504 	movi	r2,20
100091fc:	10c0482e 	bgeu	r2,r3,10009320 <_malloc_r+0x5e8>
10009200:	00801504 	movi	r2,84
10009204:	10c06836 	bltu	r2,r3,100093a8 <_malloc_r+0x670>
10009208:	8806d33a 	srli	r3,r17,12
1000920c:	19c01b84 	addi	r7,r3,110
10009210:	39cb883a 	add	r5,r7,r7
10009214:	003f0c06 	br	10008e48 <__alt_data_end+0xf8008e48>
10009218:	3804d27a 	srli	r2,r7,9
1000921c:	01000104 	movi	r4,4
10009220:	2080422e 	bgeu	r4,r2,1000932c <_malloc_r+0x5f4>
10009224:	01000504 	movi	r4,20
10009228:	20807c36 	bltu	r4,r2,1000941c <_malloc_r+0x6e4>
1000922c:	110016c4 	addi	r4,r2,91
10009230:	210b883a 	add	r5,r4,r4
10009234:	294b883a 	add	r5,r5,r5
10009238:	294b883a 	add	r5,r5,r5
1000923c:	994b883a 	add	r5,r19,r5
10009240:	28800217 	ldw	r2,8(r5)
10009244:	02040074 	movhi	r8,4097
10009248:	4216a804 	addi	r8,r8,23200
1000924c:	11406326 	beq	r2,r5,100093dc <_malloc_r+0x6a4>
10009250:	01bfff04 	movi	r6,-4
10009254:	11000117 	ldw	r4,4(r2)
10009258:	2188703a 	and	r4,r4,r6
1000925c:	3900022e 	bgeu	r7,r4,10009268 <_malloc_r+0x530>
10009260:	10800217 	ldw	r2,8(r2)
10009264:	28bffb1e 	bne	r5,r2,10009254 <__alt_data_end+0xf8009254>
10009268:	11800317 	ldw	r6,12(r2)
1000926c:	99000117 	ldw	r4,4(r19)
10009270:	81800315 	stw	r6,12(r16)
10009274:	80800215 	stw	r2,8(r16)
10009278:	34000215 	stw	r16,8(r6)
1000927c:	14000315 	stw	r16,12(r2)
10009280:	003f2706 	br	10008f20 <__alt_data_end+0xf8008f20>
10009284:	88c00054 	ori	r3,r17,1
10009288:	80c00115 	stw	r3,4(r16)
1000928c:	8463883a 	add	r17,r16,r17
10009290:	34400515 	stw	r17,20(r6)
10009294:	34400415 	stw	r17,16(r6)
10009298:	10c00054 	ori	r3,r2,1
1000929c:	8a400315 	stw	r9,12(r17)
100092a0:	8a400215 	stw	r9,8(r17)
100092a4:	88c00115 	stw	r3,4(r17)
100092a8:	88a3883a 	add	r17,r17,r2
100092ac:	88800015 	stw	r2,0(r17)
100092b0:	9009883a 	mov	r4,r18
100092b4:	0010c1c0 	call	10010c1c <__malloc_unlock>
100092b8:	80800204 	addi	r2,r16,8
100092bc:	003ecb06 	br	10008dec <__alt_data_end+0xf8008dec>
100092c0:	31000117 	ldw	r4,4(r6)
100092c4:	003f1606 	br	10008f20 <__alt_data_end+0xf8008f20>
100092c8:	63000044 	addi	r12,r12,1
100092cc:	608000cc 	andi	r2,r12,3
100092d0:	5ac00204 	addi	r11,r11,8
100092d4:	103f2a1e 	bne	r2,zero,10008f80 <__alt_data_end+0xf8008f80>
100092d8:	00002106 	br	10009360 <_malloc_r+0x628>
100092dc:	80800204 	addi	r2,r16,8
100092e0:	84000517 	ldw	r16,20(r16)
100092e4:	143eb31e 	bne	r2,r16,10008db4 <__alt_data_end+0xf8008db4>
100092e8:	18c00084 	addi	r3,r3,2
100092ec:	003eec06 	br	10008ea0 <__alt_data_end+0xf8008ea0>
100092f0:	8085883a 	add	r2,r16,r2
100092f4:	10c00117 	ldw	r3,4(r2)
100092f8:	81000317 	ldw	r4,12(r16)
100092fc:	81400217 	ldw	r5,8(r16)
10009300:	18c00054 	ori	r3,r3,1
10009304:	10c00115 	stw	r3,4(r2)
10009308:	29000315 	stw	r4,12(r5)
1000930c:	21400215 	stw	r5,8(r4)
10009310:	9009883a 	mov	r4,r18
10009314:	0010c1c0 	call	10010c1c <__malloc_unlock>
10009318:	80800204 	addi	r2,r16,8
1000931c:	003eb306 	br	10008dec <__alt_data_end+0xf8008dec>
10009320:	19c016c4 	addi	r7,r3,91
10009324:	39cb883a 	add	r5,r7,r7
10009328:	003ec706 	br	10008e48 <__alt_data_end+0xf8008e48>
1000932c:	3804d1ba 	srli	r2,r7,6
10009330:	11000e04 	addi	r4,r2,56
10009334:	210b883a 	add	r5,r4,r4
10009338:	003fbe06 	br	10009234 <__alt_data_end+0xf8009234>
1000933c:	84ff5d26 	beq	r16,r19,100090b4 <__alt_data_end+0xf80090b4>
10009340:	9c000217 	ldw	r16,8(r19)
10009344:	00bfff04 	movi	r2,-4
10009348:	80c00117 	ldw	r3,4(r16)
1000934c:	1886703a 	and	r3,r3,r2
10009350:	003f9706 	br	100091b0 <__alt_data_end+0xf80091b0>
10009354:	52800017 	ldw	r10,0(r10)
10009358:	18ffffc4 	addi	r3,r3,-1
1000935c:	50805c1e 	bne	r10,r2,100094d0 <_malloc_r+0x798>
10009360:	190000cc 	andi	r4,r3,3
10009364:	50bffe04 	addi	r2,r10,-8
10009368:	203ffa1e 	bne	r4,zero,10009354 <__alt_data_end+0xf8009354>
1000936c:	98800117 	ldw	r2,4(r19)
10009370:	0146303a 	nor	r3,zero,r5
10009374:	1884703a 	and	r2,r3,r2
10009378:	98800115 	stw	r2,4(r19)
1000937c:	294b883a 	add	r5,r5,r5
10009380:	117f2e36 	bltu	r2,r5,1000903c <__alt_data_end+0xf800903c>
10009384:	283f2d26 	beq	r5,zero,1000903c <__alt_data_end+0xf800903c>
10009388:	1146703a 	and	r3,r2,r5
1000938c:	1800521e 	bne	r3,zero,100094d8 <_malloc_r+0x7a0>
10009390:	6007883a 	mov	r3,r12
10009394:	294b883a 	add	r5,r5,r5
10009398:	1148703a 	and	r4,r2,r5
1000939c:	18c00104 	addi	r3,r3,4
100093a0:	203ffc26 	beq	r4,zero,10009394 <__alt_data_end+0xf8009394>
100093a4:	003ef006 	br	10008f68 <__alt_data_end+0xf8008f68>
100093a8:	00805504 	movi	r2,340
100093ac:	10c01336 	bltu	r2,r3,100093fc <_malloc_r+0x6c4>
100093b0:	8806d3fa 	srli	r3,r17,15
100093b4:	19c01dc4 	addi	r7,r3,119
100093b8:	39cb883a 	add	r5,r7,r7
100093bc:	003ea206 	br	10008e48 <__alt_data_end+0xf8008e48>
100093c0:	00c40004 	movi	r3,4096
100093c4:	003f4d06 	br	100090fc <__alt_data_end+0xf80090fc>
100093c8:	00800044 	movi	r2,1
100093cc:	a0800115 	stw	r2,4(r20)
100093d0:	a021883a 	mov	r16,r20
100093d4:	0007883a 	mov	r3,zero
100093d8:	003f7506 	br	100091b0 <__alt_data_end+0xf80091b0>
100093dc:	200bd0ba 	srai	r5,r4,2
100093e0:	01800044 	movi	r6,1
100093e4:	41000117 	ldw	r4,4(r8)
100093e8:	314a983a 	sll	r5,r6,r5
100093ec:	100d883a 	mov	r6,r2
100093f0:	2908b03a 	or	r4,r5,r4
100093f4:	41000115 	stw	r4,4(r8)
100093f8:	003f9d06 	br	10009270 <__alt_data_end+0xf8009270>
100093fc:	00815504 	movi	r2,1364
10009400:	10c01336 	bltu	r2,r3,10009450 <_malloc_r+0x718>
10009404:	8806d4ba 	srli	r3,r17,18
10009408:	19c01f04 	addi	r7,r3,124
1000940c:	39cb883a 	add	r5,r7,r7
10009410:	003e8d06 	br	10008e48 <__alt_data_end+0xf8008e48>
10009414:	ad400404 	addi	r21,r21,16
10009418:	003f1d06 	br	10009090 <__alt_data_end+0xf8009090>
1000941c:	01001504 	movi	r4,84
10009420:	20801c36 	bltu	r4,r2,10009494 <_malloc_r+0x75c>
10009424:	3804d33a 	srli	r2,r7,12
10009428:	11001b84 	addi	r4,r2,110
1000942c:	210b883a 	add	r5,r4,r4
10009430:	003f8006 	br	10009234 <__alt_data_end+0xf8009234>
10009434:	3083ffcc 	andi	r2,r6,4095
10009438:	103f241e 	bne	r2,zero,100090cc <__alt_data_end+0xf80090cc>
1000943c:	99000217 	ldw	r4,8(r19)
10009440:	ad85883a 	add	r2,r21,r22
10009444:	10800054 	ori	r2,r2,1
10009448:	20800115 	stw	r2,4(r4)
1000944c:	003f4a06 	br	10009178 <__alt_data_end+0xf8009178>
10009450:	01403f04 	movi	r5,252
10009454:	01c01f84 	movi	r7,126
10009458:	003e7b06 	br	10008e48 <__alt_data_end+0xf8008e48>
1000945c:	00c00044 	movi	r3,1
10009460:	002b883a 	mov	r21,zero
10009464:	003f3006 	br	10009128 <__alt_data_end+0xf8009128>
10009468:	00840074 	movhi	r2,4097
1000946c:	109c3304 	addi	r2,r2,28876
10009470:	15000015 	stw	r20,0(r2)
10009474:	003f1b06 	br	100090e4 <__alt_data_end+0xf80090e4>
10009478:	9009883a 	mov	r4,r18
1000947c:	81400204 	addi	r5,r16,8
10009480:	000819c0 	call	1000819c <_free_r>
10009484:	008400b4 	movhi	r2,4098
10009488:	10a31504 	addi	r2,r2,-29612
1000948c:	10c00017 	ldw	r3,0(r2)
10009490:	003f3906 	br	10009178 <__alt_data_end+0xf8009178>
10009494:	01005504 	movi	r4,340
10009498:	20800436 	bltu	r4,r2,100094ac <_malloc_r+0x774>
1000949c:	3804d3fa 	srli	r2,r7,15
100094a0:	11001dc4 	addi	r4,r2,119
100094a4:	210b883a 	add	r5,r4,r4
100094a8:	003f6206 	br	10009234 <__alt_data_end+0xf8009234>
100094ac:	01015504 	movi	r4,1364
100094b0:	20800436 	bltu	r4,r2,100094c4 <_malloc_r+0x78c>
100094b4:	3804d4ba 	srli	r2,r7,18
100094b8:	11001f04 	addi	r4,r2,124
100094bc:	210b883a 	add	r5,r4,r4
100094c0:	003f5c06 	br	10009234 <__alt_data_end+0xf8009234>
100094c4:	01403f04 	movi	r5,252
100094c8:	01001f84 	movi	r4,126
100094cc:	003f5906 	br	10009234 <__alt_data_end+0xf8009234>
100094d0:	98800117 	ldw	r2,4(r19)
100094d4:	003fa906 	br	1000937c <__alt_data_end+0xf800937c>
100094d8:	6007883a 	mov	r3,r12
100094dc:	003ea206 	br	10008f68 <__alt_data_end+0xf8008f68>

100094e0 <memchr>:
100094e0:	208000cc 	andi	r2,r4,3
100094e4:	280f883a 	mov	r7,r5
100094e8:	10003526 	beq	r2,zero,100095c0 <memchr+0xe0>
100094ec:	30bfffc4 	addi	r2,r6,-1
100094f0:	30001b26 	beq	r6,zero,10009560 <memchr+0x80>
100094f4:	21800003 	ldbu	r6,0(r4)
100094f8:	28c03fcc 	andi	r3,r5,255
100094fc:	30c01a26 	beq	r6,r3,10009568 <memchr+0x88>
10009500:	180d883a 	mov	r6,r3
10009504:	00000406 	br	10009518 <memchr+0x38>
10009508:	10001526 	beq	r2,zero,10009560 <memchr+0x80>
1000950c:	20c00003 	ldbu	r3,0(r4)
10009510:	10bfffc4 	addi	r2,r2,-1
10009514:	19801426 	beq	r3,r6,10009568 <memchr+0x88>
10009518:	21000044 	addi	r4,r4,1
1000951c:	20c000cc 	andi	r3,r4,3
10009520:	183ff91e 	bne	r3,zero,10009508 <__alt_data_end+0xf8009508>
10009524:	024000c4 	movi	r9,3
10009528:	48801136 	bltu	r9,r2,10009570 <memchr+0x90>
1000952c:	10000c26 	beq	r2,zero,10009560 <memchr+0x80>
10009530:	20c00003 	ldbu	r3,0(r4)
10009534:	29403fcc 	andi	r5,r5,255
10009538:	19400b26 	beq	r3,r5,10009568 <memchr+0x88>
1000953c:	20c00044 	addi	r3,r4,1
10009540:	2085883a 	add	r2,r4,r2
10009544:	39803fcc 	andi	r6,r7,255
10009548:	00000306 	br	10009558 <memchr+0x78>
1000954c:	18c00044 	addi	r3,r3,1
10009550:	197fffc3 	ldbu	r5,-1(r3)
10009554:	29800426 	beq	r5,r6,10009568 <memchr+0x88>
10009558:	1809883a 	mov	r4,r3
1000955c:	18bffb1e 	bne	r3,r2,1000954c <__alt_data_end+0xf800954c>
10009560:	0005883a 	mov	r2,zero
10009564:	f800283a 	ret
10009568:	2005883a 	mov	r2,r4
1000956c:	f800283a 	ret
10009570:	28c03fcc 	andi	r3,r5,255
10009574:	1810923a 	slli	r8,r3,8
10009578:	02ffbff4 	movhi	r11,65279
1000957c:	02a02074 	movhi	r10,32897
10009580:	40c6b03a 	or	r3,r8,r3
10009584:	1810943a 	slli	r8,r3,16
10009588:	5affbfc4 	addi	r11,r11,-257
1000958c:	52a02004 	addi	r10,r10,-32640
10009590:	40d0b03a 	or	r8,r8,r3
10009594:	20c00017 	ldw	r3,0(r4)
10009598:	40c6f03a 	xor	r3,r8,r3
1000959c:	1acd883a 	add	r6,r3,r11
100095a0:	00c6303a 	nor	r3,zero,r3
100095a4:	30c6703a 	and	r3,r6,r3
100095a8:	1a86703a 	and	r3,r3,r10
100095ac:	183fdf1e 	bne	r3,zero,1000952c <__alt_data_end+0xf800952c>
100095b0:	10bfff04 	addi	r2,r2,-4
100095b4:	21000104 	addi	r4,r4,4
100095b8:	48bff636 	bltu	r9,r2,10009594 <__alt_data_end+0xf8009594>
100095bc:	003fdb06 	br	1000952c <__alt_data_end+0xf800952c>
100095c0:	3005883a 	mov	r2,r6
100095c4:	003fd706 	br	10009524 <__alt_data_end+0xf8009524>

100095c8 <memcpy>:
100095c8:	deffff04 	addi	sp,sp,-4
100095cc:	dc000015 	stw	r16,0(sp)
100095d0:	00c003c4 	movi	r3,15
100095d4:	2005883a 	mov	r2,r4
100095d8:	1980432e 	bgeu	r3,r6,100096e8 <memcpy+0x120>
100095dc:	2146b03a 	or	r3,r4,r5
100095e0:	18c000cc 	andi	r3,r3,3
100095e4:	1800421e 	bne	r3,zero,100096f0 <memcpy+0x128>
100095e8:	343ffc04 	addi	r16,r6,-16
100095ec:	8020d13a 	srli	r16,r16,4
100095f0:	28c00104 	addi	r3,r5,4
100095f4:	23400104 	addi	r13,r4,4
100095f8:	801e913a 	slli	r15,r16,4
100095fc:	2b000204 	addi	r12,r5,8
10009600:	22c00204 	addi	r11,r4,8
10009604:	7bc00504 	addi	r15,r15,20
10009608:	2a800304 	addi	r10,r5,12
1000960c:	22400304 	addi	r9,r4,12
10009610:	2bdf883a 	add	r15,r5,r15
10009614:	2811883a 	mov	r8,r5
10009618:	200f883a 	mov	r7,r4
1000961c:	41000017 	ldw	r4,0(r8)
10009620:	39c00404 	addi	r7,r7,16
10009624:	18c00404 	addi	r3,r3,16
10009628:	393ffc15 	stw	r4,-16(r7)
1000962c:	1bbffc17 	ldw	r14,-16(r3)
10009630:	6b400404 	addi	r13,r13,16
10009634:	5ac00404 	addi	r11,r11,16
10009638:	6bbffc15 	stw	r14,-16(r13)
1000963c:	63800017 	ldw	r14,0(r12)
10009640:	4a400404 	addi	r9,r9,16
10009644:	42000404 	addi	r8,r8,16
10009648:	5bbffc15 	stw	r14,-16(r11)
1000964c:	53800017 	ldw	r14,0(r10)
10009650:	63000404 	addi	r12,r12,16
10009654:	52800404 	addi	r10,r10,16
10009658:	4bbffc15 	stw	r14,-16(r9)
1000965c:	1bffef1e 	bne	r3,r15,1000961c <__alt_data_end+0xf800961c>
10009660:	81c00044 	addi	r7,r16,1
10009664:	380e913a 	slli	r7,r7,4
10009668:	310003cc 	andi	r4,r6,15
1000966c:	02c000c4 	movi	r11,3
10009670:	11c7883a 	add	r3,r2,r7
10009674:	29cb883a 	add	r5,r5,r7
10009678:	59001f2e 	bgeu	r11,r4,100096f8 <memcpy+0x130>
1000967c:	1813883a 	mov	r9,r3
10009680:	2811883a 	mov	r8,r5
10009684:	200f883a 	mov	r7,r4
10009688:	42800017 	ldw	r10,0(r8)
1000968c:	4a400104 	addi	r9,r9,4
10009690:	39ffff04 	addi	r7,r7,-4
10009694:	4abfff15 	stw	r10,-4(r9)
10009698:	42000104 	addi	r8,r8,4
1000969c:	59fffa36 	bltu	r11,r7,10009688 <__alt_data_end+0xf8009688>
100096a0:	213fff04 	addi	r4,r4,-4
100096a4:	2008d0ba 	srli	r4,r4,2
100096a8:	318000cc 	andi	r6,r6,3
100096ac:	21000044 	addi	r4,r4,1
100096b0:	2109883a 	add	r4,r4,r4
100096b4:	2109883a 	add	r4,r4,r4
100096b8:	1907883a 	add	r3,r3,r4
100096bc:	290b883a 	add	r5,r5,r4
100096c0:	30000626 	beq	r6,zero,100096dc <memcpy+0x114>
100096c4:	198d883a 	add	r6,r3,r6
100096c8:	29c00003 	ldbu	r7,0(r5)
100096cc:	18c00044 	addi	r3,r3,1
100096d0:	29400044 	addi	r5,r5,1
100096d4:	19ffffc5 	stb	r7,-1(r3)
100096d8:	19bffb1e 	bne	r3,r6,100096c8 <__alt_data_end+0xf80096c8>
100096dc:	dc000017 	ldw	r16,0(sp)
100096e0:	dec00104 	addi	sp,sp,4
100096e4:	f800283a 	ret
100096e8:	2007883a 	mov	r3,r4
100096ec:	003ff406 	br	100096c0 <__alt_data_end+0xf80096c0>
100096f0:	2007883a 	mov	r3,r4
100096f4:	003ff306 	br	100096c4 <__alt_data_end+0xf80096c4>
100096f8:	200d883a 	mov	r6,r4
100096fc:	003ff006 	br	100096c0 <__alt_data_end+0xf80096c0>

10009700 <memmove>:
10009700:	2005883a 	mov	r2,r4
10009704:	29000b2e 	bgeu	r5,r4,10009734 <memmove+0x34>
10009708:	298f883a 	add	r7,r5,r6
1000970c:	21c0092e 	bgeu	r4,r7,10009734 <memmove+0x34>
10009710:	2187883a 	add	r3,r4,r6
10009714:	198bc83a 	sub	r5,r3,r6
10009718:	30004b26 	beq	r6,zero,10009848 <memmove+0x148>
1000971c:	39ffffc4 	addi	r7,r7,-1
10009720:	39000003 	ldbu	r4,0(r7)
10009724:	18ffffc4 	addi	r3,r3,-1
10009728:	19000005 	stb	r4,0(r3)
1000972c:	197ffb1e 	bne	r3,r5,1000971c <__alt_data_end+0xf800971c>
10009730:	f800283a 	ret
10009734:	00c003c4 	movi	r3,15
10009738:	1980412e 	bgeu	r3,r6,10009840 <memmove+0x140>
1000973c:	1146b03a 	or	r3,r2,r5
10009740:	18c000cc 	andi	r3,r3,3
10009744:	1800411e 	bne	r3,zero,1000984c <memmove+0x14c>
10009748:	33fffc04 	addi	r15,r6,-16
1000974c:	781ed13a 	srli	r15,r15,4
10009750:	28c00104 	addi	r3,r5,4
10009754:	13400104 	addi	r13,r2,4
10009758:	781c913a 	slli	r14,r15,4
1000975c:	2b000204 	addi	r12,r5,8
10009760:	12c00204 	addi	r11,r2,8
10009764:	73800504 	addi	r14,r14,20
10009768:	2a800304 	addi	r10,r5,12
1000976c:	12400304 	addi	r9,r2,12
10009770:	2b9d883a 	add	r14,r5,r14
10009774:	2811883a 	mov	r8,r5
10009778:	100f883a 	mov	r7,r2
1000977c:	41000017 	ldw	r4,0(r8)
10009780:	39c00404 	addi	r7,r7,16
10009784:	18c00404 	addi	r3,r3,16
10009788:	393ffc15 	stw	r4,-16(r7)
1000978c:	193ffc17 	ldw	r4,-16(r3)
10009790:	6b400404 	addi	r13,r13,16
10009794:	5ac00404 	addi	r11,r11,16
10009798:	693ffc15 	stw	r4,-16(r13)
1000979c:	61000017 	ldw	r4,0(r12)
100097a0:	4a400404 	addi	r9,r9,16
100097a4:	42000404 	addi	r8,r8,16
100097a8:	593ffc15 	stw	r4,-16(r11)
100097ac:	51000017 	ldw	r4,0(r10)
100097b0:	63000404 	addi	r12,r12,16
100097b4:	52800404 	addi	r10,r10,16
100097b8:	493ffc15 	stw	r4,-16(r9)
100097bc:	1bbfef1e 	bne	r3,r14,1000977c <__alt_data_end+0xf800977c>
100097c0:	79000044 	addi	r4,r15,1
100097c4:	2008913a 	slli	r4,r4,4
100097c8:	328003cc 	andi	r10,r6,15
100097cc:	02c000c4 	movi	r11,3
100097d0:	1107883a 	add	r3,r2,r4
100097d4:	290b883a 	add	r5,r5,r4
100097d8:	5a801e2e 	bgeu	r11,r10,10009854 <memmove+0x154>
100097dc:	1813883a 	mov	r9,r3
100097e0:	2811883a 	mov	r8,r5
100097e4:	500f883a 	mov	r7,r10
100097e8:	41000017 	ldw	r4,0(r8)
100097ec:	4a400104 	addi	r9,r9,4
100097f0:	39ffff04 	addi	r7,r7,-4
100097f4:	493fff15 	stw	r4,-4(r9)
100097f8:	42000104 	addi	r8,r8,4
100097fc:	59fffa36 	bltu	r11,r7,100097e8 <__alt_data_end+0xf80097e8>
10009800:	513fff04 	addi	r4,r10,-4
10009804:	2008d0ba 	srli	r4,r4,2
10009808:	318000cc 	andi	r6,r6,3
1000980c:	21000044 	addi	r4,r4,1
10009810:	2109883a 	add	r4,r4,r4
10009814:	2109883a 	add	r4,r4,r4
10009818:	1907883a 	add	r3,r3,r4
1000981c:	290b883a 	add	r5,r5,r4
10009820:	30000926 	beq	r6,zero,10009848 <memmove+0x148>
10009824:	198d883a 	add	r6,r3,r6
10009828:	29c00003 	ldbu	r7,0(r5)
1000982c:	18c00044 	addi	r3,r3,1
10009830:	29400044 	addi	r5,r5,1
10009834:	19ffffc5 	stb	r7,-1(r3)
10009838:	19bffb1e 	bne	r3,r6,10009828 <__alt_data_end+0xf8009828>
1000983c:	f800283a 	ret
10009840:	1007883a 	mov	r3,r2
10009844:	003ff606 	br	10009820 <__alt_data_end+0xf8009820>
10009848:	f800283a 	ret
1000984c:	1007883a 	mov	r3,r2
10009850:	003ff406 	br	10009824 <__alt_data_end+0xf8009824>
10009854:	500d883a 	mov	r6,r10
10009858:	003ff106 	br	10009820 <__alt_data_end+0xf8009820>

1000985c <memset>:
1000985c:	20c000cc 	andi	r3,r4,3
10009860:	2005883a 	mov	r2,r4
10009864:	18004326 	beq	r3,zero,10009974 <memset+0x118>
10009868:	31ffffc4 	addi	r7,r6,-1
1000986c:	30004026 	beq	r6,zero,10009970 <memset+0x114>
10009870:	2813883a 	mov	r9,r5
10009874:	200d883a 	mov	r6,r4
10009878:	2007883a 	mov	r3,r4
1000987c:	00000406 	br	10009890 <memset+0x34>
10009880:	3a3fffc4 	addi	r8,r7,-1
10009884:	31800044 	addi	r6,r6,1
10009888:	38003926 	beq	r7,zero,10009970 <memset+0x114>
1000988c:	400f883a 	mov	r7,r8
10009890:	18c00044 	addi	r3,r3,1
10009894:	32400005 	stb	r9,0(r6)
10009898:	1a0000cc 	andi	r8,r3,3
1000989c:	403ff81e 	bne	r8,zero,10009880 <__alt_data_end+0xf8009880>
100098a0:	010000c4 	movi	r4,3
100098a4:	21c02d2e 	bgeu	r4,r7,1000995c <memset+0x100>
100098a8:	29803fcc 	andi	r6,r5,255
100098ac:	3008923a 	slli	r4,r6,8
100098b0:	218cb03a 	or	r6,r4,r6
100098b4:	3008943a 	slli	r4,r6,16
100098b8:	218cb03a 	or	r6,r4,r6
100098bc:	010003c4 	movi	r4,15
100098c0:	21c0182e 	bgeu	r4,r7,10009924 <memset+0xc8>
100098c4:	3b3ffc04 	addi	r12,r7,-16
100098c8:	6018d13a 	srli	r12,r12,4
100098cc:	1a000104 	addi	r8,r3,4
100098d0:	1ac00204 	addi	r11,r3,8
100098d4:	6008913a 	slli	r4,r12,4
100098d8:	1a800304 	addi	r10,r3,12
100098dc:	1813883a 	mov	r9,r3
100098e0:	21000504 	addi	r4,r4,20
100098e4:	1909883a 	add	r4,r3,r4
100098e8:	49800015 	stw	r6,0(r9)
100098ec:	41800015 	stw	r6,0(r8)
100098f0:	59800015 	stw	r6,0(r11)
100098f4:	51800015 	stw	r6,0(r10)
100098f8:	42000404 	addi	r8,r8,16
100098fc:	4a400404 	addi	r9,r9,16
10009900:	5ac00404 	addi	r11,r11,16
10009904:	52800404 	addi	r10,r10,16
10009908:	413ff71e 	bne	r8,r4,100098e8 <__alt_data_end+0xf80098e8>
1000990c:	63000044 	addi	r12,r12,1
10009910:	6018913a 	slli	r12,r12,4
10009914:	39c003cc 	andi	r7,r7,15
10009918:	010000c4 	movi	r4,3
1000991c:	1b07883a 	add	r3,r3,r12
10009920:	21c00e2e 	bgeu	r4,r7,1000995c <memset+0x100>
10009924:	1813883a 	mov	r9,r3
10009928:	3811883a 	mov	r8,r7
1000992c:	010000c4 	movi	r4,3
10009930:	49800015 	stw	r6,0(r9)
10009934:	423fff04 	addi	r8,r8,-4
10009938:	4a400104 	addi	r9,r9,4
1000993c:	223ffc36 	bltu	r4,r8,10009930 <__alt_data_end+0xf8009930>
10009940:	393fff04 	addi	r4,r7,-4
10009944:	2008d0ba 	srli	r4,r4,2
10009948:	39c000cc 	andi	r7,r7,3
1000994c:	21000044 	addi	r4,r4,1
10009950:	2109883a 	add	r4,r4,r4
10009954:	2109883a 	add	r4,r4,r4
10009958:	1907883a 	add	r3,r3,r4
1000995c:	38000426 	beq	r7,zero,10009970 <memset+0x114>
10009960:	19cf883a 	add	r7,r3,r7
10009964:	19400005 	stb	r5,0(r3)
10009968:	18c00044 	addi	r3,r3,1
1000996c:	19fffd1e 	bne	r3,r7,10009964 <__alt_data_end+0xf8009964>
10009970:	f800283a 	ret
10009974:	2007883a 	mov	r3,r4
10009978:	300f883a 	mov	r7,r6
1000997c:	003fc806 	br	100098a0 <__alt_data_end+0xf80098a0>

10009980 <_Balloc>:
10009980:	20801317 	ldw	r2,76(r4)
10009984:	defffc04 	addi	sp,sp,-16
10009988:	dc400115 	stw	r17,4(sp)
1000998c:	dc000015 	stw	r16,0(sp)
10009990:	dfc00315 	stw	ra,12(sp)
10009994:	dc800215 	stw	r18,8(sp)
10009998:	2023883a 	mov	r17,r4
1000999c:	2821883a 	mov	r16,r5
100099a0:	10000f26 	beq	r2,zero,100099e0 <_Balloc+0x60>
100099a4:	8407883a 	add	r3,r16,r16
100099a8:	18c7883a 	add	r3,r3,r3
100099ac:	10c7883a 	add	r3,r2,r3
100099b0:	18800017 	ldw	r2,0(r3)
100099b4:	10001126 	beq	r2,zero,100099fc <_Balloc+0x7c>
100099b8:	11000017 	ldw	r4,0(r2)
100099bc:	19000015 	stw	r4,0(r3)
100099c0:	10000415 	stw	zero,16(r2)
100099c4:	10000315 	stw	zero,12(r2)
100099c8:	dfc00317 	ldw	ra,12(sp)
100099cc:	dc800217 	ldw	r18,8(sp)
100099d0:	dc400117 	ldw	r17,4(sp)
100099d4:	dc000017 	ldw	r16,0(sp)
100099d8:	dec00404 	addi	sp,sp,16
100099dc:	f800283a 	ret
100099e0:	01400104 	movi	r5,4
100099e4:	01800844 	movi	r6,33
100099e8:	000c81c0 	call	1000c81c <_calloc_r>
100099ec:	88801315 	stw	r2,76(r17)
100099f0:	103fec1e 	bne	r2,zero,100099a4 <__alt_data_end+0xf80099a4>
100099f4:	0005883a 	mov	r2,zero
100099f8:	003ff306 	br	100099c8 <__alt_data_end+0xf80099c8>
100099fc:	01400044 	movi	r5,1
10009a00:	2c24983a 	sll	r18,r5,r16
10009a04:	8809883a 	mov	r4,r17
10009a08:	91800144 	addi	r6,r18,5
10009a0c:	318d883a 	add	r6,r6,r6
10009a10:	318d883a 	add	r6,r6,r6
10009a14:	000c81c0 	call	1000c81c <_calloc_r>
10009a18:	103ff626 	beq	r2,zero,100099f4 <__alt_data_end+0xf80099f4>
10009a1c:	14000115 	stw	r16,4(r2)
10009a20:	14800215 	stw	r18,8(r2)
10009a24:	003fe606 	br	100099c0 <__alt_data_end+0xf80099c0>

10009a28 <_Bfree>:
10009a28:	28000826 	beq	r5,zero,10009a4c <_Bfree+0x24>
10009a2c:	28c00117 	ldw	r3,4(r5)
10009a30:	20801317 	ldw	r2,76(r4)
10009a34:	18c7883a 	add	r3,r3,r3
10009a38:	18c7883a 	add	r3,r3,r3
10009a3c:	10c5883a 	add	r2,r2,r3
10009a40:	10c00017 	ldw	r3,0(r2)
10009a44:	28c00015 	stw	r3,0(r5)
10009a48:	11400015 	stw	r5,0(r2)
10009a4c:	f800283a 	ret

10009a50 <__multadd>:
10009a50:	defff704 	addi	sp,sp,-36
10009a54:	dc800215 	stw	r18,8(sp)
10009a58:	2c800417 	ldw	r18,16(r5)
10009a5c:	ddc00715 	stw	r23,28(sp)
10009a60:	dd800615 	stw	r22,24(sp)
10009a64:	dd000415 	stw	r20,16(sp)
10009a68:	dcc00315 	stw	r19,12(sp)
10009a6c:	dc400115 	stw	r17,4(sp)
10009a70:	dc000015 	stw	r16,0(sp)
10009a74:	dfc00815 	stw	ra,32(sp)
10009a78:	dd400515 	stw	r21,20(sp)
10009a7c:	2827883a 	mov	r19,r5
10009a80:	2029883a 	mov	r20,r4
10009a84:	3023883a 	mov	r17,r6
10009a88:	3821883a 	mov	r16,r7
10009a8c:	2d800504 	addi	r22,r5,20
10009a90:	002f883a 	mov	r23,zero
10009a94:	b5400017 	ldw	r21,0(r22)
10009a98:	880b883a 	mov	r5,r17
10009a9c:	bdc00044 	addi	r23,r23,1
10009aa0:	a93fffcc 	andi	r4,r21,65535
10009aa4:	0003c5c0 	call	10003c5c <__mulsi3>
10009aa8:	1421883a 	add	r16,r2,r16
10009aac:	a808d43a 	srli	r4,r21,16
10009ab0:	802ad43a 	srli	r21,r16,16
10009ab4:	880b883a 	mov	r5,r17
10009ab8:	0003c5c0 	call	10003c5c <__mulsi3>
10009abc:	a88f883a 	add	r7,r21,r2
10009ac0:	3804943a 	slli	r2,r7,16
10009ac4:	80ffffcc 	andi	r3,r16,65535
10009ac8:	b5800104 	addi	r22,r22,4
10009acc:	10c7883a 	add	r3,r2,r3
10009ad0:	b0ffff15 	stw	r3,-4(r22)
10009ad4:	3820d43a 	srli	r16,r7,16
10009ad8:	bcbfee16 	blt	r23,r18,10009a94 <__alt_data_end+0xf8009a94>
10009adc:	80000926 	beq	r16,zero,10009b04 <__multadd+0xb4>
10009ae0:	98800217 	ldw	r2,8(r19)
10009ae4:	9080130e 	bge	r18,r2,10009b34 <__multadd+0xe4>
10009ae8:	90800144 	addi	r2,r18,5
10009aec:	1085883a 	add	r2,r2,r2
10009af0:	1085883a 	add	r2,r2,r2
10009af4:	9885883a 	add	r2,r19,r2
10009af8:	14000015 	stw	r16,0(r2)
10009afc:	94800044 	addi	r18,r18,1
10009b00:	9c800415 	stw	r18,16(r19)
10009b04:	9805883a 	mov	r2,r19
10009b08:	dfc00817 	ldw	ra,32(sp)
10009b0c:	ddc00717 	ldw	r23,28(sp)
10009b10:	dd800617 	ldw	r22,24(sp)
10009b14:	dd400517 	ldw	r21,20(sp)
10009b18:	dd000417 	ldw	r20,16(sp)
10009b1c:	dcc00317 	ldw	r19,12(sp)
10009b20:	dc800217 	ldw	r18,8(sp)
10009b24:	dc400117 	ldw	r17,4(sp)
10009b28:	dc000017 	ldw	r16,0(sp)
10009b2c:	dec00904 	addi	sp,sp,36
10009b30:	f800283a 	ret
10009b34:	99400117 	ldw	r5,4(r19)
10009b38:	a009883a 	mov	r4,r20
10009b3c:	29400044 	addi	r5,r5,1
10009b40:	00099800 	call	10009980 <_Balloc>
10009b44:	99800417 	ldw	r6,16(r19)
10009b48:	99400304 	addi	r5,r19,12
10009b4c:	11000304 	addi	r4,r2,12
10009b50:	31800084 	addi	r6,r6,2
10009b54:	318d883a 	add	r6,r6,r6
10009b58:	318d883a 	add	r6,r6,r6
10009b5c:	1023883a 	mov	r17,r2
10009b60:	00095c80 	call	100095c8 <memcpy>
10009b64:	99000117 	ldw	r4,4(r19)
10009b68:	a0c01317 	ldw	r3,76(r20)
10009b6c:	2109883a 	add	r4,r4,r4
10009b70:	2109883a 	add	r4,r4,r4
10009b74:	1907883a 	add	r3,r3,r4
10009b78:	18800017 	ldw	r2,0(r3)
10009b7c:	98800015 	stw	r2,0(r19)
10009b80:	1cc00015 	stw	r19,0(r3)
10009b84:	8827883a 	mov	r19,r17
10009b88:	003fd706 	br	10009ae8 <__alt_data_end+0xf8009ae8>

10009b8c <__s2b>:
10009b8c:	defff904 	addi	sp,sp,-28
10009b90:	dc400115 	stw	r17,4(sp)
10009b94:	dc000015 	stw	r16,0(sp)
10009b98:	2023883a 	mov	r17,r4
10009b9c:	2821883a 	mov	r16,r5
10009ba0:	39000204 	addi	r4,r7,8
10009ba4:	01400244 	movi	r5,9
10009ba8:	dcc00315 	stw	r19,12(sp)
10009bac:	dc800215 	stw	r18,8(sp)
10009bb0:	dfc00615 	stw	ra,24(sp)
10009bb4:	dd400515 	stw	r21,20(sp)
10009bb8:	dd000415 	stw	r20,16(sp)
10009bbc:	3825883a 	mov	r18,r7
10009bc0:	3027883a 	mov	r19,r6
10009bc4:	0003b9c0 	call	10003b9c <__divsi3>
10009bc8:	00c00044 	movi	r3,1
10009bcc:	000b883a 	mov	r5,zero
10009bd0:	1880030e 	bge	r3,r2,10009be0 <__s2b+0x54>
10009bd4:	18c7883a 	add	r3,r3,r3
10009bd8:	29400044 	addi	r5,r5,1
10009bdc:	18bffd16 	blt	r3,r2,10009bd4 <__alt_data_end+0xf8009bd4>
10009be0:	8809883a 	mov	r4,r17
10009be4:	00099800 	call	10009980 <_Balloc>
10009be8:	d8c00717 	ldw	r3,28(sp)
10009bec:	10c00515 	stw	r3,20(r2)
10009bf0:	00c00044 	movi	r3,1
10009bf4:	10c00415 	stw	r3,16(r2)
10009bf8:	00c00244 	movi	r3,9
10009bfc:	1cc0210e 	bge	r3,r19,10009c84 <__s2b+0xf8>
10009c00:	80eb883a 	add	r21,r16,r3
10009c04:	a829883a 	mov	r20,r21
10009c08:	84e1883a 	add	r16,r16,r19
10009c0c:	a1c00007 	ldb	r7,0(r20)
10009c10:	8809883a 	mov	r4,r17
10009c14:	a5000044 	addi	r20,r20,1
10009c18:	100b883a 	mov	r5,r2
10009c1c:	01800284 	movi	r6,10
10009c20:	39fff404 	addi	r7,r7,-48
10009c24:	0009a500 	call	10009a50 <__multadd>
10009c28:	a43ff81e 	bne	r20,r16,10009c0c <__alt_data_end+0xf8009c0c>
10009c2c:	ace1883a 	add	r16,r21,r19
10009c30:	843ffe04 	addi	r16,r16,-8
10009c34:	9c800a0e 	bge	r19,r18,10009c60 <__s2b+0xd4>
10009c38:	94e5c83a 	sub	r18,r18,r19
10009c3c:	84a5883a 	add	r18,r16,r18
10009c40:	81c00007 	ldb	r7,0(r16)
10009c44:	8809883a 	mov	r4,r17
10009c48:	84000044 	addi	r16,r16,1
10009c4c:	100b883a 	mov	r5,r2
10009c50:	01800284 	movi	r6,10
10009c54:	39fff404 	addi	r7,r7,-48
10009c58:	0009a500 	call	10009a50 <__multadd>
10009c5c:	84bff81e 	bne	r16,r18,10009c40 <__alt_data_end+0xf8009c40>
10009c60:	dfc00617 	ldw	ra,24(sp)
10009c64:	dd400517 	ldw	r21,20(sp)
10009c68:	dd000417 	ldw	r20,16(sp)
10009c6c:	dcc00317 	ldw	r19,12(sp)
10009c70:	dc800217 	ldw	r18,8(sp)
10009c74:	dc400117 	ldw	r17,4(sp)
10009c78:	dc000017 	ldw	r16,0(sp)
10009c7c:	dec00704 	addi	sp,sp,28
10009c80:	f800283a 	ret
10009c84:	84000284 	addi	r16,r16,10
10009c88:	1827883a 	mov	r19,r3
10009c8c:	003fe906 	br	10009c34 <__alt_data_end+0xf8009c34>

10009c90 <__hi0bits>:
10009c90:	20bfffec 	andhi	r2,r4,65535
10009c94:	1000141e 	bne	r2,zero,10009ce8 <__hi0bits+0x58>
10009c98:	2008943a 	slli	r4,r4,16
10009c9c:	00800404 	movi	r2,16
10009ca0:	20ffc02c 	andhi	r3,r4,65280
10009ca4:	1800021e 	bne	r3,zero,10009cb0 <__hi0bits+0x20>
10009ca8:	2008923a 	slli	r4,r4,8
10009cac:	10800204 	addi	r2,r2,8
10009cb0:	20fc002c 	andhi	r3,r4,61440
10009cb4:	1800021e 	bne	r3,zero,10009cc0 <__hi0bits+0x30>
10009cb8:	2008913a 	slli	r4,r4,4
10009cbc:	10800104 	addi	r2,r2,4
10009cc0:	20f0002c 	andhi	r3,r4,49152
10009cc4:	1800031e 	bne	r3,zero,10009cd4 <__hi0bits+0x44>
10009cc8:	2109883a 	add	r4,r4,r4
10009ccc:	10800084 	addi	r2,r2,2
10009cd0:	2109883a 	add	r4,r4,r4
10009cd4:	20000316 	blt	r4,zero,10009ce4 <__hi0bits+0x54>
10009cd8:	2110002c 	andhi	r4,r4,16384
10009cdc:	2000041e 	bne	r4,zero,10009cf0 <__hi0bits+0x60>
10009ce0:	00800804 	movi	r2,32
10009ce4:	f800283a 	ret
10009ce8:	0005883a 	mov	r2,zero
10009cec:	003fec06 	br	10009ca0 <__alt_data_end+0xf8009ca0>
10009cf0:	10800044 	addi	r2,r2,1
10009cf4:	f800283a 	ret

10009cf8 <__lo0bits>:
10009cf8:	20c00017 	ldw	r3,0(r4)
10009cfc:	188001cc 	andi	r2,r3,7
10009d00:	10000826 	beq	r2,zero,10009d24 <__lo0bits+0x2c>
10009d04:	1880004c 	andi	r2,r3,1
10009d08:	1000211e 	bne	r2,zero,10009d90 <__lo0bits+0x98>
10009d0c:	1880008c 	andi	r2,r3,2
10009d10:	1000211e 	bne	r2,zero,10009d98 <__lo0bits+0xa0>
10009d14:	1806d0ba 	srli	r3,r3,2
10009d18:	00800084 	movi	r2,2
10009d1c:	20c00015 	stw	r3,0(r4)
10009d20:	f800283a 	ret
10009d24:	18bfffcc 	andi	r2,r3,65535
10009d28:	10001326 	beq	r2,zero,10009d78 <__lo0bits+0x80>
10009d2c:	0005883a 	mov	r2,zero
10009d30:	19403fcc 	andi	r5,r3,255
10009d34:	2800021e 	bne	r5,zero,10009d40 <__lo0bits+0x48>
10009d38:	1806d23a 	srli	r3,r3,8
10009d3c:	10800204 	addi	r2,r2,8
10009d40:	194003cc 	andi	r5,r3,15
10009d44:	2800021e 	bne	r5,zero,10009d50 <__lo0bits+0x58>
10009d48:	1806d13a 	srli	r3,r3,4
10009d4c:	10800104 	addi	r2,r2,4
10009d50:	194000cc 	andi	r5,r3,3
10009d54:	2800021e 	bne	r5,zero,10009d60 <__lo0bits+0x68>
10009d58:	1806d0ba 	srli	r3,r3,2
10009d5c:	10800084 	addi	r2,r2,2
10009d60:	1940004c 	andi	r5,r3,1
10009d64:	2800081e 	bne	r5,zero,10009d88 <__lo0bits+0x90>
10009d68:	1806d07a 	srli	r3,r3,1
10009d6c:	1800051e 	bne	r3,zero,10009d84 <__lo0bits+0x8c>
10009d70:	00800804 	movi	r2,32
10009d74:	f800283a 	ret
10009d78:	1806d43a 	srli	r3,r3,16
10009d7c:	00800404 	movi	r2,16
10009d80:	003feb06 	br	10009d30 <__alt_data_end+0xf8009d30>
10009d84:	10800044 	addi	r2,r2,1
10009d88:	20c00015 	stw	r3,0(r4)
10009d8c:	f800283a 	ret
10009d90:	0005883a 	mov	r2,zero
10009d94:	f800283a 	ret
10009d98:	1806d07a 	srli	r3,r3,1
10009d9c:	00800044 	movi	r2,1
10009da0:	20c00015 	stw	r3,0(r4)
10009da4:	f800283a 	ret

10009da8 <__i2b>:
10009da8:	defffd04 	addi	sp,sp,-12
10009dac:	dc000015 	stw	r16,0(sp)
10009db0:	04000044 	movi	r16,1
10009db4:	dc400115 	stw	r17,4(sp)
10009db8:	2823883a 	mov	r17,r5
10009dbc:	800b883a 	mov	r5,r16
10009dc0:	dfc00215 	stw	ra,8(sp)
10009dc4:	00099800 	call	10009980 <_Balloc>
10009dc8:	14400515 	stw	r17,20(r2)
10009dcc:	14000415 	stw	r16,16(r2)
10009dd0:	dfc00217 	ldw	ra,8(sp)
10009dd4:	dc400117 	ldw	r17,4(sp)
10009dd8:	dc000017 	ldw	r16,0(sp)
10009ddc:	dec00304 	addi	sp,sp,12
10009de0:	f800283a 	ret

10009de4 <__multiply>:
10009de4:	deffef04 	addi	sp,sp,-68
10009de8:	dc400815 	stw	r17,32(sp)
10009dec:	dc000715 	stw	r16,28(sp)
10009df0:	2c400417 	ldw	r17,16(r5)
10009df4:	34000417 	ldw	r16,16(r6)
10009df8:	dd800d15 	stw	r22,52(sp)
10009dfc:	dc800915 	stw	r18,36(sp)
10009e00:	dfc01015 	stw	ra,64(sp)
10009e04:	df000f15 	stw	fp,60(sp)
10009e08:	ddc00e15 	stw	r23,56(sp)
10009e0c:	dd400c15 	stw	r21,48(sp)
10009e10:	dd000b15 	stw	r20,44(sp)
10009e14:	dcc00a15 	stw	r19,40(sp)
10009e18:	2825883a 	mov	r18,r5
10009e1c:	302d883a 	mov	r22,r6
10009e20:	8c009116 	blt	r17,r16,1000a068 <__multiply+0x284>
10009e24:	8005883a 	mov	r2,r16
10009e28:	8821883a 	mov	r16,r17
10009e2c:	1023883a 	mov	r17,r2
10009e30:	90800217 	ldw	r2,8(r18)
10009e34:	8447883a 	add	r3,r16,r17
10009e38:	d8c00215 	stw	r3,8(sp)
10009e3c:	91400117 	ldw	r5,4(r18)
10009e40:	10c0010e 	bge	r2,r3,10009e48 <__multiply+0x64>
10009e44:	29400044 	addi	r5,r5,1
10009e48:	00099800 	call	10009980 <_Balloc>
10009e4c:	d8c00217 	ldw	r3,8(sp)
10009e50:	d8800615 	stw	r2,24(sp)
10009e54:	18eb883a 	add	r21,r3,r3
10009e58:	ad6b883a 	add	r21,r21,r21
10009e5c:	10c00504 	addi	r3,r2,20
10009e60:	1d6b883a 	add	r21,r3,r21
10009e64:	d8c00115 	stw	r3,4(sp)
10009e68:	dd400315 	stw	r21,12(sp)
10009e6c:	1805883a 	mov	r2,r3
10009e70:	1d40042e 	bgeu	r3,r21,10009e84 <__multiply+0xa0>
10009e74:	d8c00317 	ldw	r3,12(sp)
10009e78:	10000015 	stw	zero,0(r2)
10009e7c:	10800104 	addi	r2,r2,4
10009e80:	10fffc36 	bltu	r2,r3,10009e74 <__alt_data_end+0xf8009e74>
10009e84:	8c63883a 	add	r17,r17,r17
10009e88:	b5800504 	addi	r22,r22,20
10009e8c:	8c63883a 	add	r17,r17,r17
10009e90:	94800504 	addi	r18,r18,20
10009e94:	8421883a 	add	r16,r16,r16
10009e98:	b463883a 	add	r17,r22,r17
10009e9c:	8421883a 	add	r16,r16,r16
10009ea0:	dd800015 	stw	r22,0(sp)
10009ea4:	dc800415 	stw	r18,16(sp)
10009ea8:	dc400515 	stw	r17,20(sp)
10009eac:	9429883a 	add	r20,r18,r16
10009eb0:	b4404f2e 	bgeu	r22,r17,10009ff0 <__multiply+0x20c>
10009eb4:	d8c00017 	ldw	r3,0(sp)
10009eb8:	1c800017 	ldw	r18,0(r3)
10009ebc:	943fffcc 	andi	r16,r18,65535
10009ec0:	80001e26 	beq	r16,zero,10009f3c <__multiply+0x158>
10009ec4:	dd800117 	ldw	r22,4(sp)
10009ec8:	dd400417 	ldw	r21,16(sp)
10009ecc:	0025883a 	mov	r18,zero
10009ed0:	adc00017 	ldw	r23,0(r21)
10009ed4:	b4c00017 	ldw	r19,0(r22)
10009ed8:	800b883a 	mov	r5,r16
10009edc:	b93fffcc 	andi	r4,r23,65535
10009ee0:	0003c5c0 	call	10003c5c <__mulsi3>
10009ee4:	9c7fffcc 	andi	r17,r19,65535
10009ee8:	8885883a 	add	r2,r17,r2
10009eec:	b808d43a 	srli	r4,r23,16
10009ef0:	14a3883a 	add	r17,r2,r18
10009ef4:	9826d43a 	srli	r19,r19,16
10009ef8:	8824d43a 	srli	r18,r17,16
10009efc:	800b883a 	mov	r5,r16
10009f00:	0003c5c0 	call	10003c5c <__mulsi3>
10009f04:	9885883a 	add	r2,r19,r2
10009f08:	14a7883a 	add	r19,r2,r18
10009f0c:	88ffffcc 	andi	r3,r17,65535
10009f10:	9822943a 	slli	r17,r19,16
10009f14:	ad400104 	addi	r21,r21,4
10009f18:	b005883a 	mov	r2,r22
10009f1c:	88c6b03a 	or	r3,r17,r3
10009f20:	b0c00015 	stw	r3,0(r22)
10009f24:	9824d43a 	srli	r18,r19,16
10009f28:	b5800104 	addi	r22,r22,4
10009f2c:	ad3fe836 	bltu	r21,r20,10009ed0 <__alt_data_end+0xf8009ed0>
10009f30:	d8c00017 	ldw	r3,0(sp)
10009f34:	14800115 	stw	r18,4(r2)
10009f38:	1c800017 	ldw	r18,0(r3)
10009f3c:	9024d43a 	srli	r18,r18,16
10009f40:	90002226 	beq	r18,zero,10009fcc <__multiply+0x1e8>
10009f44:	d8c00117 	ldw	r3,4(sp)
10009f48:	dd800417 	ldw	r22,16(sp)
10009f4c:	002f883a 	mov	r23,zero
10009f50:	1f000017 	ldw	fp,0(r3)
10009f54:	1823883a 	mov	r17,r3
10009f58:	182b883a 	mov	r21,r3
10009f5c:	e021883a 	mov	r16,fp
10009f60:	00000106 	br	10009f68 <__multiply+0x184>
10009f64:	982b883a 	mov	r21,r19
10009f68:	b100000b 	ldhu	r4,0(r22)
10009f6c:	8020d43a 	srli	r16,r16,16
10009f70:	900b883a 	mov	r5,r18
10009f74:	0003c5c0 	call	10003c5c <__mulsi3>
10009f78:	1405883a 	add	r2,r2,r16
10009f7c:	15ef883a 	add	r23,r2,r23
10009f80:	b804943a 	slli	r2,r23,16
10009f84:	e0ffffcc 	andi	r3,fp,65535
10009f88:	8c400104 	addi	r17,r17,4
10009f8c:	10c6b03a 	or	r3,r2,r3
10009f90:	88ffff15 	stw	r3,-4(r17)
10009f94:	b5800104 	addi	r22,r22,4
10009f98:	b13fff17 	ldw	r4,-4(r22)
10009f9c:	acc00104 	addi	r19,r21,4
10009fa0:	900b883a 	mov	r5,r18
10009fa4:	2008d43a 	srli	r4,r4,16
10009fa8:	9c000017 	ldw	r16,0(r19)
10009fac:	0003c5c0 	call	10003c5c <__mulsi3>
10009fb0:	b806d43a 	srli	r3,r23,16
10009fb4:	813fffcc 	andi	r4,r16,65535
10009fb8:	1105883a 	add	r2,r2,r4
10009fbc:	10f9883a 	add	fp,r2,r3
10009fc0:	e02ed43a 	srli	r23,fp,16
10009fc4:	b53fe736 	bltu	r22,r20,10009f64 <__alt_data_end+0xf8009f64>
10009fc8:	af000115 	stw	fp,4(r21)
10009fcc:	d8c00017 	ldw	r3,0(sp)
10009fd0:	d9000517 	ldw	r4,20(sp)
10009fd4:	18c00104 	addi	r3,r3,4
10009fd8:	d8c00015 	stw	r3,0(sp)
10009fdc:	d8c00117 	ldw	r3,4(sp)
10009fe0:	18c00104 	addi	r3,r3,4
10009fe4:	d8c00115 	stw	r3,4(sp)
10009fe8:	d8c00017 	ldw	r3,0(sp)
10009fec:	193fb136 	bltu	r3,r4,10009eb4 <__alt_data_end+0xf8009eb4>
10009ff0:	d8c00217 	ldw	r3,8(sp)
10009ff4:	00c00c0e 	bge	zero,r3,1000a028 <__multiply+0x244>
10009ff8:	d8c00317 	ldw	r3,12(sp)
10009ffc:	18bfff17 	ldw	r2,-4(r3)
1000a000:	1d7fff04 	addi	r21,r3,-4
1000a004:	10000326 	beq	r2,zero,1000a014 <__multiply+0x230>
1000a008:	00000706 	br	1000a028 <__multiply+0x244>
1000a00c:	a8800017 	ldw	r2,0(r21)
1000a010:	1000051e 	bne	r2,zero,1000a028 <__multiply+0x244>
1000a014:	d8c00217 	ldw	r3,8(sp)
1000a018:	ad7fff04 	addi	r21,r21,-4
1000a01c:	18ffffc4 	addi	r3,r3,-1
1000a020:	d8c00215 	stw	r3,8(sp)
1000a024:	183ff91e 	bne	r3,zero,1000a00c <__alt_data_end+0xf800a00c>
1000a028:	d8c00617 	ldw	r3,24(sp)
1000a02c:	d9000217 	ldw	r4,8(sp)
1000a030:	1805883a 	mov	r2,r3
1000a034:	19000415 	stw	r4,16(r3)
1000a038:	dfc01017 	ldw	ra,64(sp)
1000a03c:	df000f17 	ldw	fp,60(sp)
1000a040:	ddc00e17 	ldw	r23,56(sp)
1000a044:	dd800d17 	ldw	r22,52(sp)
1000a048:	dd400c17 	ldw	r21,48(sp)
1000a04c:	dd000b17 	ldw	r20,44(sp)
1000a050:	dcc00a17 	ldw	r19,40(sp)
1000a054:	dc800917 	ldw	r18,36(sp)
1000a058:	dc400817 	ldw	r17,32(sp)
1000a05c:	dc000717 	ldw	r16,28(sp)
1000a060:	dec01104 	addi	sp,sp,68
1000a064:	f800283a 	ret
1000a068:	3025883a 	mov	r18,r6
1000a06c:	282d883a 	mov	r22,r5
1000a070:	003f6f06 	br	10009e30 <__alt_data_end+0xf8009e30>

1000a074 <__pow5mult>:
1000a074:	defffa04 	addi	sp,sp,-24
1000a078:	dcc00315 	stw	r19,12(sp)
1000a07c:	dc800215 	stw	r18,8(sp)
1000a080:	dc000015 	stw	r16,0(sp)
1000a084:	dfc00515 	stw	ra,20(sp)
1000a088:	dd000415 	stw	r20,16(sp)
1000a08c:	dc400115 	stw	r17,4(sp)
1000a090:	308000cc 	andi	r2,r6,3
1000a094:	3021883a 	mov	r16,r6
1000a098:	2027883a 	mov	r19,r4
1000a09c:	2825883a 	mov	r18,r5
1000a0a0:	10002e1e 	bne	r2,zero,1000a15c <__pow5mult+0xe8>
1000a0a4:	8021d0ba 	srai	r16,r16,2
1000a0a8:	80001a26 	beq	r16,zero,1000a114 <__pow5mult+0xa0>
1000a0ac:	9c401217 	ldw	r17,72(r19)
1000a0b0:	8800061e 	bne	r17,zero,1000a0cc <__pow5mult+0x58>
1000a0b4:	00003406 	br	1000a188 <__pow5mult+0x114>
1000a0b8:	8021d07a 	srai	r16,r16,1
1000a0bc:	80001526 	beq	r16,zero,1000a114 <__pow5mult+0xa0>
1000a0c0:	88800017 	ldw	r2,0(r17)
1000a0c4:	10001c26 	beq	r2,zero,1000a138 <__pow5mult+0xc4>
1000a0c8:	1023883a 	mov	r17,r2
1000a0cc:	80c0004c 	andi	r3,r16,1
1000a0d0:	183ff926 	beq	r3,zero,1000a0b8 <__alt_data_end+0xf800a0b8>
1000a0d4:	900b883a 	mov	r5,r18
1000a0d8:	880d883a 	mov	r6,r17
1000a0dc:	9809883a 	mov	r4,r19
1000a0e0:	0009de40 	call	10009de4 <__multiply>
1000a0e4:	90001b26 	beq	r18,zero,1000a154 <__pow5mult+0xe0>
1000a0e8:	91c00117 	ldw	r7,4(r18)
1000a0ec:	98c01317 	ldw	r3,76(r19)
1000a0f0:	8021d07a 	srai	r16,r16,1
1000a0f4:	39cf883a 	add	r7,r7,r7
1000a0f8:	39cf883a 	add	r7,r7,r7
1000a0fc:	19c7883a 	add	r3,r3,r7
1000a100:	19000017 	ldw	r4,0(r3)
1000a104:	91000015 	stw	r4,0(r18)
1000a108:	1c800015 	stw	r18,0(r3)
1000a10c:	1025883a 	mov	r18,r2
1000a110:	803feb1e 	bne	r16,zero,1000a0c0 <__alt_data_end+0xf800a0c0>
1000a114:	9005883a 	mov	r2,r18
1000a118:	dfc00517 	ldw	ra,20(sp)
1000a11c:	dd000417 	ldw	r20,16(sp)
1000a120:	dcc00317 	ldw	r19,12(sp)
1000a124:	dc800217 	ldw	r18,8(sp)
1000a128:	dc400117 	ldw	r17,4(sp)
1000a12c:	dc000017 	ldw	r16,0(sp)
1000a130:	dec00604 	addi	sp,sp,24
1000a134:	f800283a 	ret
1000a138:	9809883a 	mov	r4,r19
1000a13c:	880b883a 	mov	r5,r17
1000a140:	880d883a 	mov	r6,r17
1000a144:	0009de40 	call	10009de4 <__multiply>
1000a148:	88800015 	stw	r2,0(r17)
1000a14c:	10000015 	stw	zero,0(r2)
1000a150:	003fdd06 	br	1000a0c8 <__alt_data_end+0xf800a0c8>
1000a154:	1025883a 	mov	r18,r2
1000a158:	003fd706 	br	1000a0b8 <__alt_data_end+0xf800a0b8>
1000a15c:	10bfffc4 	addi	r2,r2,-1
1000a160:	1085883a 	add	r2,r2,r2
1000a164:	00c40074 	movhi	r3,4097
1000a168:	18d4e304 	addi	r3,r3,21388
1000a16c:	1085883a 	add	r2,r2,r2
1000a170:	1885883a 	add	r2,r3,r2
1000a174:	11800017 	ldw	r6,0(r2)
1000a178:	000f883a 	mov	r7,zero
1000a17c:	0009a500 	call	10009a50 <__multadd>
1000a180:	1025883a 	mov	r18,r2
1000a184:	003fc706 	br	1000a0a4 <__alt_data_end+0xf800a0a4>
1000a188:	05000044 	movi	r20,1
1000a18c:	9809883a 	mov	r4,r19
1000a190:	a00b883a 	mov	r5,r20
1000a194:	00099800 	call	10009980 <_Balloc>
1000a198:	1023883a 	mov	r17,r2
1000a19c:	00809c44 	movi	r2,625
1000a1a0:	88800515 	stw	r2,20(r17)
1000a1a4:	8d000415 	stw	r20,16(r17)
1000a1a8:	9c401215 	stw	r17,72(r19)
1000a1ac:	88000015 	stw	zero,0(r17)
1000a1b0:	003fc606 	br	1000a0cc <__alt_data_end+0xf800a0cc>

1000a1b4 <__lshift>:
1000a1b4:	defff904 	addi	sp,sp,-28
1000a1b8:	dd000415 	stw	r20,16(sp)
1000a1bc:	dcc00315 	stw	r19,12(sp)
1000a1c0:	3029d17a 	srai	r20,r6,5
1000a1c4:	2cc00417 	ldw	r19,16(r5)
1000a1c8:	28800217 	ldw	r2,8(r5)
1000a1cc:	dd400515 	stw	r21,20(sp)
1000a1d0:	a4e7883a 	add	r19,r20,r19
1000a1d4:	dc800215 	stw	r18,8(sp)
1000a1d8:	dc400115 	stw	r17,4(sp)
1000a1dc:	dc000015 	stw	r16,0(sp)
1000a1e0:	dfc00615 	stw	ra,24(sp)
1000a1e4:	9c000044 	addi	r16,r19,1
1000a1e8:	2823883a 	mov	r17,r5
1000a1ec:	302b883a 	mov	r21,r6
1000a1f0:	2025883a 	mov	r18,r4
1000a1f4:	29400117 	ldw	r5,4(r5)
1000a1f8:	1400030e 	bge	r2,r16,1000a208 <__lshift+0x54>
1000a1fc:	1085883a 	add	r2,r2,r2
1000a200:	29400044 	addi	r5,r5,1
1000a204:	143ffd16 	blt	r2,r16,1000a1fc <__alt_data_end+0xf800a1fc>
1000a208:	9009883a 	mov	r4,r18
1000a20c:	00099800 	call	10009980 <_Balloc>
1000a210:	11c00504 	addi	r7,r2,20
1000a214:	0500090e 	bge	zero,r20,1000a23c <__lshift+0x88>
1000a218:	3811883a 	mov	r8,r7
1000a21c:	0007883a 	mov	r3,zero
1000a220:	40000015 	stw	zero,0(r8)
1000a224:	18c00044 	addi	r3,r3,1
1000a228:	42000104 	addi	r8,r8,4
1000a22c:	1d3ffc1e 	bne	r3,r20,1000a220 <__alt_data_end+0xf800a220>
1000a230:	18c7883a 	add	r3,r3,r3
1000a234:	18c7883a 	add	r3,r3,r3
1000a238:	38cf883a 	add	r7,r7,r3
1000a23c:	89000417 	ldw	r4,16(r17)
1000a240:	88c00504 	addi	r3,r17,20
1000a244:	a98007cc 	andi	r6,r21,31
1000a248:	2109883a 	add	r4,r4,r4
1000a24c:	2109883a 	add	r4,r4,r4
1000a250:	1909883a 	add	r4,r3,r4
1000a254:	30002326 	beq	r6,zero,1000a2e4 <__lshift+0x130>
1000a258:	01400804 	movi	r5,32
1000a25c:	298bc83a 	sub	r5,r5,r6
1000a260:	0013883a 	mov	r9,zero
1000a264:	1a000017 	ldw	r8,0(r3)
1000a268:	3815883a 	mov	r10,r7
1000a26c:	39c00104 	addi	r7,r7,4
1000a270:	4190983a 	sll	r8,r8,r6
1000a274:	18c00104 	addi	r3,r3,4
1000a278:	4a10b03a 	or	r8,r9,r8
1000a27c:	3a3fff15 	stw	r8,-4(r7)
1000a280:	1a3fff17 	ldw	r8,-4(r3)
1000a284:	4152d83a 	srl	r9,r8,r5
1000a288:	193ff636 	bltu	r3,r4,1000a264 <__alt_data_end+0xf800a264>
1000a28c:	52400115 	stw	r9,4(r10)
1000a290:	48000126 	beq	r9,zero,1000a298 <__lshift+0xe4>
1000a294:	9c000084 	addi	r16,r19,2
1000a298:	89000117 	ldw	r4,4(r17)
1000a29c:	90c01317 	ldw	r3,76(r18)
1000a2a0:	843fffc4 	addi	r16,r16,-1
1000a2a4:	2109883a 	add	r4,r4,r4
1000a2a8:	2109883a 	add	r4,r4,r4
1000a2ac:	1907883a 	add	r3,r3,r4
1000a2b0:	19000017 	ldw	r4,0(r3)
1000a2b4:	14000415 	stw	r16,16(r2)
1000a2b8:	89000015 	stw	r4,0(r17)
1000a2bc:	1c400015 	stw	r17,0(r3)
1000a2c0:	dfc00617 	ldw	ra,24(sp)
1000a2c4:	dd400517 	ldw	r21,20(sp)
1000a2c8:	dd000417 	ldw	r20,16(sp)
1000a2cc:	dcc00317 	ldw	r19,12(sp)
1000a2d0:	dc800217 	ldw	r18,8(sp)
1000a2d4:	dc400117 	ldw	r17,4(sp)
1000a2d8:	dc000017 	ldw	r16,0(sp)
1000a2dc:	dec00704 	addi	sp,sp,28
1000a2e0:	f800283a 	ret
1000a2e4:	19400017 	ldw	r5,0(r3)
1000a2e8:	39c00104 	addi	r7,r7,4
1000a2ec:	18c00104 	addi	r3,r3,4
1000a2f0:	397fff15 	stw	r5,-4(r7)
1000a2f4:	193ffb36 	bltu	r3,r4,1000a2e4 <__alt_data_end+0xf800a2e4>
1000a2f8:	003fe706 	br	1000a298 <__alt_data_end+0xf800a298>

1000a2fc <__mcmp>:
1000a2fc:	20800417 	ldw	r2,16(r4)
1000a300:	28c00417 	ldw	r3,16(r5)
1000a304:	10c5c83a 	sub	r2,r2,r3
1000a308:	1000111e 	bne	r2,zero,1000a350 <__mcmp+0x54>
1000a30c:	18c7883a 	add	r3,r3,r3
1000a310:	18c7883a 	add	r3,r3,r3
1000a314:	21000504 	addi	r4,r4,20
1000a318:	29400504 	addi	r5,r5,20
1000a31c:	20c5883a 	add	r2,r4,r3
1000a320:	28cb883a 	add	r5,r5,r3
1000a324:	00000106 	br	1000a32c <__mcmp+0x30>
1000a328:	20800a2e 	bgeu	r4,r2,1000a354 <__mcmp+0x58>
1000a32c:	10bfff04 	addi	r2,r2,-4
1000a330:	297fff04 	addi	r5,r5,-4
1000a334:	11800017 	ldw	r6,0(r2)
1000a338:	28c00017 	ldw	r3,0(r5)
1000a33c:	30fffa26 	beq	r6,r3,1000a328 <__alt_data_end+0xf800a328>
1000a340:	30c00236 	bltu	r6,r3,1000a34c <__mcmp+0x50>
1000a344:	00800044 	movi	r2,1
1000a348:	f800283a 	ret
1000a34c:	00bfffc4 	movi	r2,-1
1000a350:	f800283a 	ret
1000a354:	0005883a 	mov	r2,zero
1000a358:	f800283a 	ret

1000a35c <__mdiff>:
1000a35c:	defffb04 	addi	sp,sp,-20
1000a360:	dc000015 	stw	r16,0(sp)
1000a364:	2821883a 	mov	r16,r5
1000a368:	dcc00315 	stw	r19,12(sp)
1000a36c:	300b883a 	mov	r5,r6
1000a370:	2027883a 	mov	r19,r4
1000a374:	8009883a 	mov	r4,r16
1000a378:	dc800215 	stw	r18,8(sp)
1000a37c:	dfc00415 	stw	ra,16(sp)
1000a380:	dc400115 	stw	r17,4(sp)
1000a384:	3025883a 	mov	r18,r6
1000a388:	000a2fc0 	call	1000a2fc <__mcmp>
1000a38c:	10005226 	beq	r2,zero,1000a4d8 <__mdiff+0x17c>
1000a390:	10004c16 	blt	r2,zero,1000a4c4 <__mdiff+0x168>
1000a394:	0023883a 	mov	r17,zero
1000a398:	81400117 	ldw	r5,4(r16)
1000a39c:	9809883a 	mov	r4,r19
1000a3a0:	00099800 	call	10009980 <_Balloc>
1000a3a4:	83400417 	ldw	r13,16(r16)
1000a3a8:	93800417 	ldw	r14,16(r18)
1000a3ac:	81000504 	addi	r4,r16,20
1000a3b0:	6b59883a 	add	r12,r13,r13
1000a3b4:	739d883a 	add	r14,r14,r14
1000a3b8:	6319883a 	add	r12,r12,r12
1000a3bc:	91800504 	addi	r6,r18,20
1000a3c0:	739d883a 	add	r14,r14,r14
1000a3c4:	14400315 	stw	r17,12(r2)
1000a3c8:	2319883a 	add	r12,r4,r12
1000a3cc:	339d883a 	add	r14,r6,r14
1000a3d0:	12400504 	addi	r9,r2,20
1000a3d4:	0007883a 	mov	r3,zero
1000a3d8:	22000017 	ldw	r8,0(r4)
1000a3dc:	32800017 	ldw	r10,0(r6)
1000a3e0:	4ac00104 	addi	r11,r9,4
1000a3e4:	41ffffcc 	andi	r7,r8,65535
1000a3e8:	38c7883a 	add	r3,r7,r3
1000a3ec:	51ffffcc 	andi	r7,r10,65535
1000a3f0:	19cfc83a 	sub	r7,r3,r7
1000a3f4:	4010d43a 	srli	r8,r8,16
1000a3f8:	5014d43a 	srli	r10,r10,16
1000a3fc:	3807d43a 	srai	r3,r7,16
1000a400:	39ffffcc 	andi	r7,r7,65535
1000a404:	4291c83a 	sub	r8,r8,r10
1000a408:	40c7883a 	add	r3,r8,r3
1000a40c:	1810943a 	slli	r8,r3,16
1000a410:	31800104 	addi	r6,r6,4
1000a414:	21000104 	addi	r4,r4,4
1000a418:	41ceb03a 	or	r7,r8,r7
1000a41c:	49c00015 	stw	r7,0(r9)
1000a420:	1807d43a 	srai	r3,r3,16
1000a424:	580b883a 	mov	r5,r11
1000a428:	5813883a 	mov	r9,r11
1000a42c:	33bfea36 	bltu	r6,r14,1000a3d8 <__alt_data_end+0xf800a3d8>
1000a430:	2011883a 	mov	r8,r4
1000a434:	2300152e 	bgeu	r4,r12,1000a48c <__mdiff+0x130>
1000a438:	21400017 	ldw	r5,0(r4)
1000a43c:	4a400104 	addi	r9,r9,4
1000a440:	21000104 	addi	r4,r4,4
1000a444:	29ffffcc 	andi	r7,r5,65535
1000a448:	38c7883a 	add	r3,r7,r3
1000a44c:	280ad43a 	srli	r5,r5,16
1000a450:	180dd43a 	srai	r6,r3,16
1000a454:	19ffffcc 	andi	r7,r3,65535
1000a458:	3147883a 	add	r3,r6,r5
1000a45c:	180a943a 	slli	r5,r3,16
1000a460:	1807d43a 	srai	r3,r3,16
1000a464:	29ceb03a 	or	r7,r5,r7
1000a468:	49ffff15 	stw	r7,-4(r9)
1000a46c:	233ff236 	bltu	r4,r12,1000a438 <__alt_data_end+0xf800a438>
1000a470:	0206303a 	nor	r3,zero,r8
1000a474:	1b07883a 	add	r3,r3,r12
1000a478:	1806d0ba 	srli	r3,r3,2
1000a47c:	18c00044 	addi	r3,r3,1
1000a480:	18c7883a 	add	r3,r3,r3
1000a484:	18c7883a 	add	r3,r3,r3
1000a488:	58cb883a 	add	r5,r11,r3
1000a48c:	28ffff04 	addi	r3,r5,-4
1000a490:	3800041e 	bne	r7,zero,1000a4a4 <__mdiff+0x148>
1000a494:	18ffff04 	addi	r3,r3,-4
1000a498:	19000017 	ldw	r4,0(r3)
1000a49c:	6b7fffc4 	addi	r13,r13,-1
1000a4a0:	203ffc26 	beq	r4,zero,1000a494 <__alt_data_end+0xf800a494>
1000a4a4:	13400415 	stw	r13,16(r2)
1000a4a8:	dfc00417 	ldw	ra,16(sp)
1000a4ac:	dcc00317 	ldw	r19,12(sp)
1000a4b0:	dc800217 	ldw	r18,8(sp)
1000a4b4:	dc400117 	ldw	r17,4(sp)
1000a4b8:	dc000017 	ldw	r16,0(sp)
1000a4bc:	dec00504 	addi	sp,sp,20
1000a4c0:	f800283a 	ret
1000a4c4:	8005883a 	mov	r2,r16
1000a4c8:	04400044 	movi	r17,1
1000a4cc:	9021883a 	mov	r16,r18
1000a4d0:	1025883a 	mov	r18,r2
1000a4d4:	003fb006 	br	1000a398 <__alt_data_end+0xf800a398>
1000a4d8:	9809883a 	mov	r4,r19
1000a4dc:	000b883a 	mov	r5,zero
1000a4e0:	00099800 	call	10009980 <_Balloc>
1000a4e4:	00c00044 	movi	r3,1
1000a4e8:	10c00415 	stw	r3,16(r2)
1000a4ec:	10000515 	stw	zero,20(r2)
1000a4f0:	003fed06 	br	1000a4a8 <__alt_data_end+0xf800a4a8>

1000a4f4 <__ulp>:
1000a4f4:	295ffc2c 	andhi	r5,r5,32752
1000a4f8:	00bf3034 	movhi	r2,64704
1000a4fc:	2887883a 	add	r3,r5,r2
1000a500:	00c0020e 	bge	zero,r3,1000a50c <__ulp+0x18>
1000a504:	0005883a 	mov	r2,zero
1000a508:	f800283a 	ret
1000a50c:	00c7c83a 	sub	r3,zero,r3
1000a510:	180bd53a 	srai	r5,r3,20
1000a514:	008004c4 	movi	r2,19
1000a518:	11400a0e 	bge	r2,r5,1000a544 <__ulp+0x50>
1000a51c:	00800c84 	movi	r2,50
1000a520:	0007883a 	mov	r3,zero
1000a524:	11400516 	blt	r2,r5,1000a53c <__ulp+0x48>
1000a528:	00800cc4 	movi	r2,51
1000a52c:	114bc83a 	sub	r5,r2,r5
1000a530:	00800044 	movi	r2,1
1000a534:	1144983a 	sll	r2,r2,r5
1000a538:	f800283a 	ret
1000a53c:	00800044 	movi	r2,1
1000a540:	f800283a 	ret
1000a544:	00800234 	movhi	r2,8
1000a548:	1147d83a 	sra	r3,r2,r5
1000a54c:	0005883a 	mov	r2,zero
1000a550:	f800283a 	ret

1000a554 <__b2d>:
1000a554:	defffa04 	addi	sp,sp,-24
1000a558:	dc000015 	stw	r16,0(sp)
1000a55c:	24000417 	ldw	r16,16(r4)
1000a560:	dc400115 	stw	r17,4(sp)
1000a564:	24400504 	addi	r17,r4,20
1000a568:	8421883a 	add	r16,r16,r16
1000a56c:	8421883a 	add	r16,r16,r16
1000a570:	8c21883a 	add	r16,r17,r16
1000a574:	dc800215 	stw	r18,8(sp)
1000a578:	84bfff17 	ldw	r18,-4(r16)
1000a57c:	dd000415 	stw	r20,16(sp)
1000a580:	dcc00315 	stw	r19,12(sp)
1000a584:	9009883a 	mov	r4,r18
1000a588:	2829883a 	mov	r20,r5
1000a58c:	dfc00515 	stw	ra,20(sp)
1000a590:	0009c900 	call	10009c90 <__hi0bits>
1000a594:	00c00804 	movi	r3,32
1000a598:	1887c83a 	sub	r3,r3,r2
1000a59c:	a0c00015 	stw	r3,0(r20)
1000a5a0:	00c00284 	movi	r3,10
1000a5a4:	84ffff04 	addi	r19,r16,-4
1000a5a8:	18801216 	blt	r3,r2,1000a5f4 <__b2d+0xa0>
1000a5ac:	014002c4 	movi	r5,11
1000a5b0:	2889c83a 	sub	r4,r5,r2
1000a5b4:	9106d83a 	srl	r3,r18,r4
1000a5b8:	18cffc34 	orhi	r3,r3,16368
1000a5bc:	8cc0282e 	bgeu	r17,r19,1000a660 <__b2d+0x10c>
1000a5c0:	817ffe17 	ldw	r5,-8(r16)
1000a5c4:	290ad83a 	srl	r5,r5,r4
1000a5c8:	10800544 	addi	r2,r2,21
1000a5cc:	9084983a 	sll	r2,r18,r2
1000a5d0:	2884b03a 	or	r2,r5,r2
1000a5d4:	dfc00517 	ldw	ra,20(sp)
1000a5d8:	dd000417 	ldw	r20,16(sp)
1000a5dc:	dcc00317 	ldw	r19,12(sp)
1000a5e0:	dc800217 	ldw	r18,8(sp)
1000a5e4:	dc400117 	ldw	r17,4(sp)
1000a5e8:	dc000017 	ldw	r16,0(sp)
1000a5ec:	dec00604 	addi	sp,sp,24
1000a5f0:	f800283a 	ret
1000a5f4:	113ffd44 	addi	r4,r2,-11
1000a5f8:	8cc00f2e 	bgeu	r17,r19,1000a638 <__b2d+0xe4>
1000a5fc:	81bffe04 	addi	r6,r16,-8
1000a600:	817ffe17 	ldw	r5,-8(r16)
1000a604:	20001326 	beq	r4,zero,1000a654 <__b2d+0x100>
1000a608:	00c00ac4 	movi	r3,43
1000a60c:	1885c83a 	sub	r2,r3,r2
1000a610:	2886d83a 	srl	r3,r5,r2
1000a614:	9124983a 	sll	r18,r18,r4
1000a618:	90e4b03a 	or	r18,r18,r3
1000a61c:	90cffc34 	orhi	r3,r18,16368
1000a620:	8980112e 	bgeu	r17,r6,1000a668 <__b2d+0x114>
1000a624:	81bffd17 	ldw	r6,-12(r16)
1000a628:	308cd83a 	srl	r6,r6,r2
1000a62c:	2904983a 	sll	r2,r5,r4
1000a630:	1184b03a 	or	r2,r2,r6
1000a634:	003fe706 	br	1000a5d4 <__alt_data_end+0xf800a5d4>
1000a638:	20000526 	beq	r4,zero,1000a650 <__b2d+0xfc>
1000a63c:	9124983a 	sll	r18,r18,r4
1000a640:	000d883a 	mov	r6,zero
1000a644:	000b883a 	mov	r5,zero
1000a648:	90cffc34 	orhi	r3,r18,16368
1000a64c:	003ff706 	br	1000a62c <__alt_data_end+0xf800a62c>
1000a650:	000b883a 	mov	r5,zero
1000a654:	90cffc34 	orhi	r3,r18,16368
1000a658:	2805883a 	mov	r2,r5
1000a65c:	003fdd06 	br	1000a5d4 <__alt_data_end+0xf800a5d4>
1000a660:	000b883a 	mov	r5,zero
1000a664:	003fd806 	br	1000a5c8 <__alt_data_end+0xf800a5c8>
1000a668:	000d883a 	mov	r6,zero
1000a66c:	003fef06 	br	1000a62c <__alt_data_end+0xf800a62c>

1000a670 <__d2b>:
1000a670:	defff704 	addi	sp,sp,-36
1000a674:	dc000215 	stw	r16,8(sp)
1000a678:	3021883a 	mov	r16,r6
1000a67c:	dc400315 	stw	r17,12(sp)
1000a680:	8022907a 	slli	r17,r16,1
1000a684:	dd400715 	stw	r21,28(sp)
1000a688:	282b883a 	mov	r21,r5
1000a68c:	01400044 	movi	r5,1
1000a690:	dd000615 	stw	r20,24(sp)
1000a694:	dcc00515 	stw	r19,20(sp)
1000a698:	dc800415 	stw	r18,16(sp)
1000a69c:	dfc00815 	stw	ra,32(sp)
1000a6a0:	3829883a 	mov	r20,r7
1000a6a4:	dc800917 	ldw	r18,36(sp)
1000a6a8:	8822d57a 	srli	r17,r17,21
1000a6ac:	00099800 	call	10009980 <_Balloc>
1000a6b0:	1027883a 	mov	r19,r2
1000a6b4:	00800434 	movhi	r2,16
1000a6b8:	10bfffc4 	addi	r2,r2,-1
1000a6bc:	808c703a 	and	r6,r16,r2
1000a6c0:	88000126 	beq	r17,zero,1000a6c8 <__d2b+0x58>
1000a6c4:	31800434 	orhi	r6,r6,16
1000a6c8:	d9800015 	stw	r6,0(sp)
1000a6cc:	a8001f26 	beq	r21,zero,1000a74c <__d2b+0xdc>
1000a6d0:	d9000104 	addi	r4,sp,4
1000a6d4:	dd400115 	stw	r21,4(sp)
1000a6d8:	0009cf80 	call	10009cf8 <__lo0bits>
1000a6dc:	d8c00017 	ldw	r3,0(sp)
1000a6e0:	1000291e 	bne	r2,zero,1000a788 <__d2b+0x118>
1000a6e4:	d9000117 	ldw	r4,4(sp)
1000a6e8:	99000515 	stw	r4,20(r19)
1000a6ec:	1820c03a 	cmpne	r16,r3,zero
1000a6f0:	84000044 	addi	r16,r16,1
1000a6f4:	98c00615 	stw	r3,24(r19)
1000a6f8:	9c000415 	stw	r16,16(r19)
1000a6fc:	88001b1e 	bne	r17,zero,1000a76c <__d2b+0xfc>
1000a700:	800690ba 	slli	r3,r16,2
1000a704:	10bef384 	addi	r2,r2,-1074
1000a708:	a0800015 	stw	r2,0(r20)
1000a70c:	98c5883a 	add	r2,r19,r3
1000a710:	11000417 	ldw	r4,16(r2)
1000a714:	8020917a 	slli	r16,r16,5
1000a718:	0009c900 	call	10009c90 <__hi0bits>
1000a71c:	8085c83a 	sub	r2,r16,r2
1000a720:	90800015 	stw	r2,0(r18)
1000a724:	9805883a 	mov	r2,r19
1000a728:	dfc00817 	ldw	ra,32(sp)
1000a72c:	dd400717 	ldw	r21,28(sp)
1000a730:	dd000617 	ldw	r20,24(sp)
1000a734:	dcc00517 	ldw	r19,20(sp)
1000a738:	dc800417 	ldw	r18,16(sp)
1000a73c:	dc400317 	ldw	r17,12(sp)
1000a740:	dc000217 	ldw	r16,8(sp)
1000a744:	dec00904 	addi	sp,sp,36
1000a748:	f800283a 	ret
1000a74c:	d809883a 	mov	r4,sp
1000a750:	0009cf80 	call	10009cf8 <__lo0bits>
1000a754:	d8c00017 	ldw	r3,0(sp)
1000a758:	04000044 	movi	r16,1
1000a75c:	9c000415 	stw	r16,16(r19)
1000a760:	98c00515 	stw	r3,20(r19)
1000a764:	10800804 	addi	r2,r2,32
1000a768:	883fe526 	beq	r17,zero,1000a700 <__alt_data_end+0xf800a700>
1000a76c:	8c7ef344 	addi	r17,r17,-1075
1000a770:	88a3883a 	add	r17,r17,r2
1000a774:	00c00d44 	movi	r3,53
1000a778:	a4400015 	stw	r17,0(r20)
1000a77c:	1885c83a 	sub	r2,r3,r2
1000a780:	90800015 	stw	r2,0(r18)
1000a784:	003fe706 	br	1000a724 <__alt_data_end+0xf800a724>
1000a788:	01000804 	movi	r4,32
1000a78c:	2089c83a 	sub	r4,r4,r2
1000a790:	1908983a 	sll	r4,r3,r4
1000a794:	d9400117 	ldw	r5,4(sp)
1000a798:	1886d83a 	srl	r3,r3,r2
1000a79c:	2148b03a 	or	r4,r4,r5
1000a7a0:	99000515 	stw	r4,20(r19)
1000a7a4:	d8c00015 	stw	r3,0(sp)
1000a7a8:	003fd006 	br	1000a6ec <__alt_data_end+0xf800a6ec>

1000a7ac <__ratio>:
1000a7ac:	defff904 	addi	sp,sp,-28
1000a7b0:	dc400315 	stw	r17,12(sp)
1000a7b4:	2823883a 	mov	r17,r5
1000a7b8:	d9400104 	addi	r5,sp,4
1000a7bc:	dfc00615 	stw	ra,24(sp)
1000a7c0:	dcc00515 	stw	r19,20(sp)
1000a7c4:	dc800415 	stw	r18,16(sp)
1000a7c8:	2027883a 	mov	r19,r4
1000a7cc:	dc000215 	stw	r16,8(sp)
1000a7d0:	000a5540 	call	1000a554 <__b2d>
1000a7d4:	8809883a 	mov	r4,r17
1000a7d8:	d80b883a 	mov	r5,sp
1000a7dc:	1025883a 	mov	r18,r2
1000a7e0:	1821883a 	mov	r16,r3
1000a7e4:	000a5540 	call	1000a554 <__b2d>
1000a7e8:	8a400417 	ldw	r9,16(r17)
1000a7ec:	9a000417 	ldw	r8,16(r19)
1000a7f0:	100d883a 	mov	r6,r2
1000a7f4:	d8800017 	ldw	r2,0(sp)
1000a7f8:	4251c83a 	sub	r8,r8,r9
1000a7fc:	4012917a 	slli	r9,r8,5
1000a800:	da000117 	ldw	r8,4(sp)
1000a804:	4091c83a 	sub	r8,r8,r2
1000a808:	4251883a 	add	r8,r8,r9
1000a80c:	02000d0e 	bge	zero,r8,1000a844 <__ratio+0x98>
1000a810:	4010953a 	slli	r8,r8,20
1000a814:	4421883a 	add	r16,r8,r16
1000a818:	9009883a 	mov	r4,r18
1000a81c:	800b883a 	mov	r5,r16
1000a820:	180f883a 	mov	r7,r3
1000a824:	000e6bc0 	call	1000e6bc <__divdf3>
1000a828:	dfc00617 	ldw	ra,24(sp)
1000a82c:	dcc00517 	ldw	r19,20(sp)
1000a830:	dc800417 	ldw	r18,16(sp)
1000a834:	dc400317 	ldw	r17,12(sp)
1000a838:	dc000217 	ldw	r16,8(sp)
1000a83c:	dec00704 	addi	sp,sp,28
1000a840:	f800283a 	ret
1000a844:	4010953a 	slli	r8,r8,20
1000a848:	1a07c83a 	sub	r3,r3,r8
1000a84c:	003ff206 	br	1000a818 <__alt_data_end+0xf800a818>

1000a850 <_mprec_log10>:
1000a850:	defffe04 	addi	sp,sp,-8
1000a854:	dc000015 	stw	r16,0(sp)
1000a858:	dfc00115 	stw	ra,4(sp)
1000a85c:	008005c4 	movi	r2,23
1000a860:	2021883a 	mov	r16,r4
1000a864:	11000d0e 	bge	r2,r4,1000a89c <_mprec_log10+0x4c>
1000a868:	0005883a 	mov	r2,zero
1000a86c:	00cffc34 	movhi	r3,16368
1000a870:	843fffc4 	addi	r16,r16,-1
1000a874:	1009883a 	mov	r4,r2
1000a878:	180b883a 	mov	r5,r3
1000a87c:	000d883a 	mov	r6,zero
1000a880:	01d00934 	movhi	r7,16420
1000a884:	000f2800 	call	1000f280 <__muldf3>
1000a888:	803ff91e 	bne	r16,zero,1000a870 <__alt_data_end+0xf800a870>
1000a88c:	dfc00117 	ldw	ra,4(sp)
1000a890:	dc000017 	ldw	r16,0(sp)
1000a894:	dec00204 	addi	sp,sp,8
1000a898:	f800283a 	ret
1000a89c:	202090fa 	slli	r16,r4,3
1000a8a0:	00840074 	movhi	r2,4097
1000a8a4:	1094fa04 	addi	r2,r2,21480
1000a8a8:	1421883a 	add	r16,r2,r16
1000a8ac:	80800017 	ldw	r2,0(r16)
1000a8b0:	80c00117 	ldw	r3,4(r16)
1000a8b4:	dfc00117 	ldw	ra,4(sp)
1000a8b8:	dc000017 	ldw	r16,0(sp)
1000a8bc:	dec00204 	addi	sp,sp,8
1000a8c0:	f800283a 	ret

1000a8c4 <__copybits>:
1000a8c4:	297fffc4 	addi	r5,r5,-1
1000a8c8:	280fd17a 	srai	r7,r5,5
1000a8cc:	30c00417 	ldw	r3,16(r6)
1000a8d0:	30800504 	addi	r2,r6,20
1000a8d4:	39c00044 	addi	r7,r7,1
1000a8d8:	18c7883a 	add	r3,r3,r3
1000a8dc:	39cf883a 	add	r7,r7,r7
1000a8e0:	18c7883a 	add	r3,r3,r3
1000a8e4:	39cf883a 	add	r7,r7,r7
1000a8e8:	10c7883a 	add	r3,r2,r3
1000a8ec:	21cf883a 	add	r7,r4,r7
1000a8f0:	10c00d2e 	bgeu	r2,r3,1000a928 <__copybits+0x64>
1000a8f4:	200b883a 	mov	r5,r4
1000a8f8:	12000017 	ldw	r8,0(r2)
1000a8fc:	29400104 	addi	r5,r5,4
1000a900:	10800104 	addi	r2,r2,4
1000a904:	2a3fff15 	stw	r8,-4(r5)
1000a908:	10fffb36 	bltu	r2,r3,1000a8f8 <__alt_data_end+0xf800a8f8>
1000a90c:	1985c83a 	sub	r2,r3,r6
1000a910:	10bffac4 	addi	r2,r2,-21
1000a914:	1004d0ba 	srli	r2,r2,2
1000a918:	10800044 	addi	r2,r2,1
1000a91c:	1085883a 	add	r2,r2,r2
1000a920:	1085883a 	add	r2,r2,r2
1000a924:	2089883a 	add	r4,r4,r2
1000a928:	21c0032e 	bgeu	r4,r7,1000a938 <__copybits+0x74>
1000a92c:	20000015 	stw	zero,0(r4)
1000a930:	21000104 	addi	r4,r4,4
1000a934:	21fffd36 	bltu	r4,r7,1000a92c <__alt_data_end+0xf800a92c>
1000a938:	f800283a 	ret

1000a93c <__any_on>:
1000a93c:	20c00417 	ldw	r3,16(r4)
1000a940:	2805d17a 	srai	r2,r5,5
1000a944:	21000504 	addi	r4,r4,20
1000a948:	18800d0e 	bge	r3,r2,1000a980 <__any_on+0x44>
1000a94c:	18c7883a 	add	r3,r3,r3
1000a950:	18c7883a 	add	r3,r3,r3
1000a954:	20c7883a 	add	r3,r4,r3
1000a958:	20c0192e 	bgeu	r4,r3,1000a9c0 <__any_on+0x84>
1000a95c:	18bfff17 	ldw	r2,-4(r3)
1000a960:	18ffff04 	addi	r3,r3,-4
1000a964:	1000041e 	bne	r2,zero,1000a978 <__any_on+0x3c>
1000a968:	20c0142e 	bgeu	r4,r3,1000a9bc <__any_on+0x80>
1000a96c:	18ffff04 	addi	r3,r3,-4
1000a970:	19400017 	ldw	r5,0(r3)
1000a974:	283ffc26 	beq	r5,zero,1000a968 <__alt_data_end+0xf800a968>
1000a978:	00800044 	movi	r2,1
1000a97c:	f800283a 	ret
1000a980:	10c00a0e 	bge	r2,r3,1000a9ac <__any_on+0x70>
1000a984:	1085883a 	add	r2,r2,r2
1000a988:	1085883a 	add	r2,r2,r2
1000a98c:	294007cc 	andi	r5,r5,31
1000a990:	2087883a 	add	r3,r4,r2
1000a994:	283ff026 	beq	r5,zero,1000a958 <__alt_data_end+0xf800a958>
1000a998:	19800017 	ldw	r6,0(r3)
1000a99c:	3144d83a 	srl	r2,r6,r5
1000a9a0:	114a983a 	sll	r5,r2,r5
1000a9a4:	29bff41e 	bne	r5,r6,1000a978 <__alt_data_end+0xf800a978>
1000a9a8:	003feb06 	br	1000a958 <__alt_data_end+0xf800a958>
1000a9ac:	1085883a 	add	r2,r2,r2
1000a9b0:	1085883a 	add	r2,r2,r2
1000a9b4:	2087883a 	add	r3,r4,r2
1000a9b8:	003fe706 	br	1000a958 <__alt_data_end+0xf800a958>
1000a9bc:	f800283a 	ret
1000a9c0:	0005883a 	mov	r2,zero
1000a9c4:	f800283a 	ret

1000a9c8 <_realloc_r>:
1000a9c8:	defff604 	addi	sp,sp,-40
1000a9cc:	dcc00315 	stw	r19,12(sp)
1000a9d0:	dc400115 	stw	r17,4(sp)
1000a9d4:	dfc00915 	stw	ra,36(sp)
1000a9d8:	df000815 	stw	fp,32(sp)
1000a9dc:	ddc00715 	stw	r23,28(sp)
1000a9e0:	dd800615 	stw	r22,24(sp)
1000a9e4:	dd400515 	stw	r21,20(sp)
1000a9e8:	dd000415 	stw	r20,16(sp)
1000a9ec:	dc800215 	stw	r18,8(sp)
1000a9f0:	dc000015 	stw	r16,0(sp)
1000a9f4:	2827883a 	mov	r19,r5
1000a9f8:	3023883a 	mov	r17,r6
1000a9fc:	2800bf26 	beq	r5,zero,1000acfc <_realloc_r+0x334>
1000aa00:	2025883a 	mov	r18,r4
1000aa04:	0010bfc0 	call	10010bfc <__malloc_lock>
1000aa08:	98ffff17 	ldw	r3,-4(r19)
1000aa0c:	01bfff04 	movi	r6,-4
1000aa10:	890002c4 	addi	r4,r17,11
1000aa14:	01c00584 	movi	r7,22
1000aa18:	9d7ffe04 	addi	r21,r19,-8
1000aa1c:	19a0703a 	and	r16,r3,r6
1000aa20:	39003f2e 	bgeu	r7,r4,1000ab20 <_realloc_r+0x158>
1000aa24:	053ffe04 	movi	r20,-8
1000aa28:	2528703a 	and	r20,r4,r20
1000aa2c:	a00f883a 	mov	r7,r20
1000aa30:	a0008216 	blt	r20,zero,1000ac3c <_realloc_r+0x274>
1000aa34:	a4408136 	bltu	r20,r17,1000ac3c <_realloc_r+0x274>
1000aa38:	81c03c0e 	bge	r16,r7,1000ab2c <_realloc_r+0x164>
1000aa3c:	07040074 	movhi	fp,4097
1000aa40:	e716a804 	addi	fp,fp,23200
1000aa44:	e1000217 	ldw	r4,8(fp)
1000aa48:	ac05883a 	add	r2,r21,r16
1000aa4c:	2080bf26 	beq	r4,r2,1000ad4c <_realloc_r+0x384>
1000aa50:	11000117 	ldw	r4,4(r2)
1000aa54:	023fff84 	movi	r8,-2
1000aa58:	2210703a 	and	r8,r4,r8
1000aa5c:	1211883a 	add	r8,r2,r8
1000aa60:	41400117 	ldw	r5,4(r8)
1000aa64:	2940004c 	andi	r5,r5,1
1000aa68:	28004a1e 	bne	r5,zero,1000ab94 <_realloc_r+0x1cc>
1000aa6c:	017fff04 	movi	r5,-4
1000aa70:	2148703a 	and	r4,r4,r5
1000aa74:	2409883a 	add	r4,r4,r16
1000aa78:	21c0ad0e 	bge	r4,r7,1000ad30 <_realloc_r+0x368>
1000aa7c:	18c0004c 	andi	r3,r3,1
1000aa80:	18007f1e 	bne	r3,zero,1000ac80 <_realloc_r+0x2b8>
1000aa84:	9dfffe17 	ldw	r23,-8(r19)
1000aa88:	adefc83a 	sub	r23,r21,r23
1000aa8c:	bd800117 	ldw	r22,4(r23)
1000aa90:	b14a703a 	and	r5,r22,r5
1000aa94:	216d883a 	add	r22,r4,r5
1000aa98:	b1c04516 	blt	r22,r7,1000abb0 <_realloc_r+0x1e8>
1000aa9c:	10c00317 	ldw	r3,12(r2)
1000aaa0:	10800217 	ldw	r2,8(r2)
1000aaa4:	81bfff04 	addi	r6,r16,-4
1000aaa8:	bc400204 	addi	r17,r23,8
1000aaac:	10c00315 	stw	r3,12(r2)
1000aab0:	18800215 	stw	r2,8(r3)
1000aab4:	b9400217 	ldw	r5,8(r23)
1000aab8:	b8c00317 	ldw	r3,12(r23)
1000aabc:	00800904 	movi	r2,36
1000aac0:	28c00315 	stw	r3,12(r5)
1000aac4:	19400215 	stw	r5,8(r3)
1000aac8:	1180ef36 	bltu	r2,r6,1000ae88 <_realloc_r+0x4c0>
1000aacc:	008004c4 	movi	r2,19
1000aad0:	1180da2e 	bgeu	r2,r6,1000ae3c <_realloc_r+0x474>
1000aad4:	98800017 	ldw	r2,0(r19)
1000aad8:	b8800215 	stw	r2,8(r23)
1000aadc:	98800117 	ldw	r2,4(r19)
1000aae0:	b8800315 	stw	r2,12(r23)
1000aae4:	008006c4 	movi	r2,27
1000aae8:	1180fc2e 	bgeu	r2,r6,1000aedc <_realloc_r+0x514>
1000aaec:	98800217 	ldw	r2,8(r19)
1000aaf0:	b8800415 	stw	r2,16(r23)
1000aaf4:	98800317 	ldw	r2,12(r19)
1000aaf8:	b8800515 	stw	r2,20(r23)
1000aafc:	00800904 	movi	r2,36
1000ab00:	3080421e 	bne	r6,r2,1000ac0c <_realloc_r+0x244>
1000ab04:	98800417 	ldw	r2,16(r19)
1000ab08:	9cc00604 	addi	r19,r19,24
1000ab0c:	b8c00804 	addi	r3,r23,32
1000ab10:	b8800615 	stw	r2,24(r23)
1000ab14:	98bfff17 	ldw	r2,-4(r19)
1000ab18:	b8800715 	stw	r2,28(r23)
1000ab1c:	00003d06 	br	1000ac14 <_realloc_r+0x24c>
1000ab20:	01c00404 	movi	r7,16
1000ab24:	3829883a 	mov	r20,r7
1000ab28:	003fc206 	br	1000aa34 <__alt_data_end+0xf800aa34>
1000ab2c:	9823883a 	mov	r17,r19
1000ab30:	850fc83a 	sub	r7,r16,r20
1000ab34:	008003c4 	movi	r2,15
1000ab38:	18c0004c 	andi	r3,r3,1
1000ab3c:	11c04336 	bltu	r2,r7,1000ac4c <_realloc_r+0x284>
1000ab40:	1c06b03a 	or	r3,r3,r16
1000ab44:	a8c00115 	stw	r3,4(r21)
1000ab48:	ac21883a 	add	r16,r21,r16
1000ab4c:	80c00117 	ldw	r3,4(r16)
1000ab50:	18c00054 	ori	r3,r3,1
1000ab54:	80c00115 	stw	r3,4(r16)
1000ab58:	9009883a 	mov	r4,r18
1000ab5c:	0010c1c0 	call	10010c1c <__malloc_unlock>
1000ab60:	8805883a 	mov	r2,r17
1000ab64:	dfc00917 	ldw	ra,36(sp)
1000ab68:	df000817 	ldw	fp,32(sp)
1000ab6c:	ddc00717 	ldw	r23,28(sp)
1000ab70:	dd800617 	ldw	r22,24(sp)
1000ab74:	dd400517 	ldw	r21,20(sp)
1000ab78:	dd000417 	ldw	r20,16(sp)
1000ab7c:	dcc00317 	ldw	r19,12(sp)
1000ab80:	dc800217 	ldw	r18,8(sp)
1000ab84:	dc400117 	ldw	r17,4(sp)
1000ab88:	dc000017 	ldw	r16,0(sp)
1000ab8c:	dec00a04 	addi	sp,sp,40
1000ab90:	f800283a 	ret
1000ab94:	18c0004c 	andi	r3,r3,1
1000ab98:	1800391e 	bne	r3,zero,1000ac80 <_realloc_r+0x2b8>
1000ab9c:	9dfffe17 	ldw	r23,-8(r19)
1000aba0:	00bfff04 	movi	r2,-4
1000aba4:	adefc83a 	sub	r23,r21,r23
1000aba8:	b9400117 	ldw	r5,4(r23)
1000abac:	288a703a 	and	r5,r5,r2
1000abb0:	2c2d883a 	add	r22,r5,r16
1000abb4:	b1c03216 	blt	r22,r7,1000ac80 <_realloc_r+0x2b8>
1000abb8:	b8800317 	ldw	r2,12(r23)
1000abbc:	b8c00217 	ldw	r3,8(r23)
1000abc0:	81bfff04 	addi	r6,r16,-4
1000abc4:	01000904 	movi	r4,36
1000abc8:	18800315 	stw	r2,12(r3)
1000abcc:	10c00215 	stw	r3,8(r2)
1000abd0:	bc400204 	addi	r17,r23,8
1000abd4:	2180ac36 	bltu	r4,r6,1000ae88 <_realloc_r+0x4c0>
1000abd8:	008004c4 	movi	r2,19
1000abdc:	1180972e 	bgeu	r2,r6,1000ae3c <_realloc_r+0x474>
1000abe0:	98800017 	ldw	r2,0(r19)
1000abe4:	b8800215 	stw	r2,8(r23)
1000abe8:	98800117 	ldw	r2,4(r19)
1000abec:	b8800315 	stw	r2,12(r23)
1000abf0:	008006c4 	movi	r2,27
1000abf4:	1180b92e 	bgeu	r2,r6,1000aedc <_realloc_r+0x514>
1000abf8:	98800217 	ldw	r2,8(r19)
1000abfc:	b8800415 	stw	r2,16(r23)
1000ac00:	98800317 	ldw	r2,12(r19)
1000ac04:	b8800515 	stw	r2,20(r23)
1000ac08:	313fbe26 	beq	r6,r4,1000ab04 <__alt_data_end+0xf800ab04>
1000ac0c:	b8c00604 	addi	r3,r23,24
1000ac10:	9cc00404 	addi	r19,r19,16
1000ac14:	98800017 	ldw	r2,0(r19)
1000ac18:	b021883a 	mov	r16,r22
1000ac1c:	b82b883a 	mov	r21,r23
1000ac20:	18800015 	stw	r2,0(r3)
1000ac24:	98800117 	ldw	r2,4(r19)
1000ac28:	18800115 	stw	r2,4(r3)
1000ac2c:	98800217 	ldw	r2,8(r19)
1000ac30:	18800215 	stw	r2,8(r3)
1000ac34:	b8c00117 	ldw	r3,4(r23)
1000ac38:	003fbd06 	br	1000ab30 <__alt_data_end+0xf800ab30>
1000ac3c:	00800304 	movi	r2,12
1000ac40:	90800015 	stw	r2,0(r18)
1000ac44:	0005883a 	mov	r2,zero
1000ac48:	003fc606 	br	1000ab64 <__alt_data_end+0xf800ab64>
1000ac4c:	1d06b03a 	or	r3,r3,r20
1000ac50:	ad0b883a 	add	r5,r21,r20
1000ac54:	a8c00115 	stw	r3,4(r21)
1000ac58:	38800054 	ori	r2,r7,1
1000ac5c:	28800115 	stw	r2,4(r5)
1000ac60:	29cf883a 	add	r7,r5,r7
1000ac64:	38800117 	ldw	r2,4(r7)
1000ac68:	9009883a 	mov	r4,r18
1000ac6c:	29400204 	addi	r5,r5,8
1000ac70:	10800054 	ori	r2,r2,1
1000ac74:	38800115 	stw	r2,4(r7)
1000ac78:	000819c0 	call	1000819c <_free_r>
1000ac7c:	003fb606 	br	1000ab58 <__alt_data_end+0xf800ab58>
1000ac80:	880b883a 	mov	r5,r17
1000ac84:	9009883a 	mov	r4,r18
1000ac88:	0008d380 	call	10008d38 <_malloc_r>
1000ac8c:	1023883a 	mov	r17,r2
1000ac90:	1000aa26 	beq	r2,zero,1000af3c <_realloc_r+0x574>
1000ac94:	98ffff17 	ldw	r3,-4(r19)
1000ac98:	113ffe04 	addi	r4,r2,-8
1000ac9c:	00bfff84 	movi	r2,-2
1000aca0:	1884703a 	and	r2,r3,r2
1000aca4:	a885883a 	add	r2,r21,r2
1000aca8:	20808626 	beq	r4,r2,1000aec4 <_realloc_r+0x4fc>
1000acac:	81bfff04 	addi	r6,r16,-4
1000acb0:	00800904 	movi	r2,36
1000acb4:	11807036 	bltu	r2,r6,1000ae78 <_realloc_r+0x4b0>
1000acb8:	00c004c4 	movi	r3,19
1000acbc:	19805636 	bltu	r3,r6,1000ae18 <_realloc_r+0x450>
1000acc0:	8805883a 	mov	r2,r17
1000acc4:	9807883a 	mov	r3,r19
1000acc8:	19000017 	ldw	r4,0(r3)
1000accc:	11000015 	stw	r4,0(r2)
1000acd0:	19000117 	ldw	r4,4(r3)
1000acd4:	11000115 	stw	r4,4(r2)
1000acd8:	18c00217 	ldw	r3,8(r3)
1000acdc:	10c00215 	stw	r3,8(r2)
1000ace0:	980b883a 	mov	r5,r19
1000ace4:	9009883a 	mov	r4,r18
1000ace8:	000819c0 	call	1000819c <_free_r>
1000acec:	9009883a 	mov	r4,r18
1000acf0:	0010c1c0 	call	10010c1c <__malloc_unlock>
1000acf4:	8805883a 	mov	r2,r17
1000acf8:	003f9a06 	br	1000ab64 <__alt_data_end+0xf800ab64>
1000acfc:	300b883a 	mov	r5,r6
1000ad00:	dfc00917 	ldw	ra,36(sp)
1000ad04:	df000817 	ldw	fp,32(sp)
1000ad08:	ddc00717 	ldw	r23,28(sp)
1000ad0c:	dd800617 	ldw	r22,24(sp)
1000ad10:	dd400517 	ldw	r21,20(sp)
1000ad14:	dd000417 	ldw	r20,16(sp)
1000ad18:	dcc00317 	ldw	r19,12(sp)
1000ad1c:	dc800217 	ldw	r18,8(sp)
1000ad20:	dc400117 	ldw	r17,4(sp)
1000ad24:	dc000017 	ldw	r16,0(sp)
1000ad28:	dec00a04 	addi	sp,sp,40
1000ad2c:	0008d381 	jmpi	10008d38 <_malloc_r>
1000ad30:	11400317 	ldw	r5,12(r2)
1000ad34:	10800217 	ldw	r2,8(r2)
1000ad38:	9823883a 	mov	r17,r19
1000ad3c:	2021883a 	mov	r16,r4
1000ad40:	11400315 	stw	r5,12(r2)
1000ad44:	28800215 	stw	r2,8(r5)
1000ad48:	003f7906 	br	1000ab30 <__alt_data_end+0xf800ab30>
1000ad4c:	21000117 	ldw	r4,4(r4)
1000ad50:	00bfff04 	movi	r2,-4
1000ad54:	a1800404 	addi	r6,r20,16
1000ad58:	2088703a 	and	r4,r4,r2
1000ad5c:	2409883a 	add	r4,r4,r16
1000ad60:	2180380e 	bge	r4,r6,1000ae44 <_realloc_r+0x47c>
1000ad64:	18c0004c 	andi	r3,r3,1
1000ad68:	183fc51e 	bne	r3,zero,1000ac80 <__alt_data_end+0xf800ac80>
1000ad6c:	9dfffe17 	ldw	r23,-8(r19)
1000ad70:	adefc83a 	sub	r23,r21,r23
1000ad74:	b9400117 	ldw	r5,4(r23)
1000ad78:	288a703a 	and	r5,r5,r2
1000ad7c:	216d883a 	add	r22,r4,r5
1000ad80:	b1bf8b16 	blt	r22,r6,1000abb0 <__alt_data_end+0xf800abb0>
1000ad84:	b8800317 	ldw	r2,12(r23)
1000ad88:	b8c00217 	ldw	r3,8(r23)
1000ad8c:	81bfff04 	addi	r6,r16,-4
1000ad90:	01000904 	movi	r4,36
1000ad94:	18800315 	stw	r2,12(r3)
1000ad98:	10c00215 	stw	r3,8(r2)
1000ad9c:	bc400204 	addi	r17,r23,8
1000ada0:	21805a36 	bltu	r4,r6,1000af0c <_realloc_r+0x544>
1000ada4:	008004c4 	movi	r2,19
1000ada8:	1180562e 	bgeu	r2,r6,1000af04 <_realloc_r+0x53c>
1000adac:	98800017 	ldw	r2,0(r19)
1000adb0:	b8800215 	stw	r2,8(r23)
1000adb4:	98800117 	ldw	r2,4(r19)
1000adb8:	b8800315 	stw	r2,12(r23)
1000adbc:	008006c4 	movi	r2,27
1000adc0:	11805636 	bltu	r2,r6,1000af1c <_realloc_r+0x554>
1000adc4:	b8800404 	addi	r2,r23,16
1000adc8:	9cc00204 	addi	r19,r19,8
1000adcc:	98c00017 	ldw	r3,0(r19)
1000add0:	10c00015 	stw	r3,0(r2)
1000add4:	98c00117 	ldw	r3,4(r19)
1000add8:	10c00115 	stw	r3,4(r2)
1000addc:	98c00217 	ldw	r3,8(r19)
1000ade0:	10c00215 	stw	r3,8(r2)
1000ade4:	bd07883a 	add	r3,r23,r20
1000ade8:	b505c83a 	sub	r2,r22,r20
1000adec:	e0c00215 	stw	r3,8(fp)
1000adf0:	10800054 	ori	r2,r2,1
1000adf4:	18800115 	stw	r2,4(r3)
1000adf8:	b8800117 	ldw	r2,4(r23)
1000adfc:	9009883a 	mov	r4,r18
1000ae00:	1080004c 	andi	r2,r2,1
1000ae04:	a0a8b03a 	or	r20,r20,r2
1000ae08:	bd000115 	stw	r20,4(r23)
1000ae0c:	0010c1c0 	call	10010c1c <__malloc_unlock>
1000ae10:	8805883a 	mov	r2,r17
1000ae14:	003f5306 	br	1000ab64 <__alt_data_end+0xf800ab64>
1000ae18:	98c00017 	ldw	r3,0(r19)
1000ae1c:	88c00015 	stw	r3,0(r17)
1000ae20:	98c00117 	ldw	r3,4(r19)
1000ae24:	88c00115 	stw	r3,4(r17)
1000ae28:	00c006c4 	movi	r3,27
1000ae2c:	19801d36 	bltu	r3,r6,1000aea4 <_realloc_r+0x4dc>
1000ae30:	88800204 	addi	r2,r17,8
1000ae34:	98c00204 	addi	r3,r19,8
1000ae38:	003fa306 	br	1000acc8 <__alt_data_end+0xf800acc8>
1000ae3c:	8807883a 	mov	r3,r17
1000ae40:	003f7406 	br	1000ac14 <__alt_data_end+0xf800ac14>
1000ae44:	ad2b883a 	add	r21,r21,r20
1000ae48:	2505c83a 	sub	r2,r4,r20
1000ae4c:	e5400215 	stw	r21,8(fp)
1000ae50:	10800054 	ori	r2,r2,1
1000ae54:	a8800115 	stw	r2,4(r21)
1000ae58:	98bfff17 	ldw	r2,-4(r19)
1000ae5c:	9009883a 	mov	r4,r18
1000ae60:	1080004c 	andi	r2,r2,1
1000ae64:	a0a8b03a 	or	r20,r20,r2
1000ae68:	9d3fff15 	stw	r20,-4(r19)
1000ae6c:	0010c1c0 	call	10010c1c <__malloc_unlock>
1000ae70:	9805883a 	mov	r2,r19
1000ae74:	003f3b06 	br	1000ab64 <__alt_data_end+0xf800ab64>
1000ae78:	8809883a 	mov	r4,r17
1000ae7c:	980b883a 	mov	r5,r19
1000ae80:	00097000 	call	10009700 <memmove>
1000ae84:	003f9606 	br	1000ace0 <__alt_data_end+0xf800ace0>
1000ae88:	8809883a 	mov	r4,r17
1000ae8c:	980b883a 	mov	r5,r19
1000ae90:	00097000 	call	10009700 <memmove>
1000ae94:	b8c00117 	ldw	r3,4(r23)
1000ae98:	b021883a 	mov	r16,r22
1000ae9c:	b82b883a 	mov	r21,r23
1000aea0:	003f2306 	br	1000ab30 <__alt_data_end+0xf800ab30>
1000aea4:	98c00217 	ldw	r3,8(r19)
1000aea8:	88c00215 	stw	r3,8(r17)
1000aeac:	98c00317 	ldw	r3,12(r19)
1000aeb0:	88c00315 	stw	r3,12(r17)
1000aeb4:	30800c26 	beq	r6,r2,1000aee8 <_realloc_r+0x520>
1000aeb8:	88800404 	addi	r2,r17,16
1000aebc:	98c00404 	addi	r3,r19,16
1000aec0:	003f8106 	br	1000acc8 <__alt_data_end+0xf800acc8>
1000aec4:	893fff17 	ldw	r4,-4(r17)
1000aec8:	00bfff04 	movi	r2,-4
1000aecc:	9823883a 	mov	r17,r19
1000aed0:	2084703a 	and	r2,r4,r2
1000aed4:	80a1883a 	add	r16,r16,r2
1000aed8:	003f1506 	br	1000ab30 <__alt_data_end+0xf800ab30>
1000aedc:	b8c00404 	addi	r3,r23,16
1000aee0:	9cc00204 	addi	r19,r19,8
1000aee4:	003f4b06 	br	1000ac14 <__alt_data_end+0xf800ac14>
1000aee8:	99000417 	ldw	r4,16(r19)
1000aeec:	88800604 	addi	r2,r17,24
1000aef0:	98c00604 	addi	r3,r19,24
1000aef4:	89000415 	stw	r4,16(r17)
1000aef8:	99000517 	ldw	r4,20(r19)
1000aefc:	89000515 	stw	r4,20(r17)
1000af00:	003f7106 	br	1000acc8 <__alt_data_end+0xf800acc8>
1000af04:	8805883a 	mov	r2,r17
1000af08:	003fb006 	br	1000adcc <__alt_data_end+0xf800adcc>
1000af0c:	8809883a 	mov	r4,r17
1000af10:	980b883a 	mov	r5,r19
1000af14:	00097000 	call	10009700 <memmove>
1000af18:	003fb206 	br	1000ade4 <__alt_data_end+0xf800ade4>
1000af1c:	98800217 	ldw	r2,8(r19)
1000af20:	b8800415 	stw	r2,16(r23)
1000af24:	98800317 	ldw	r2,12(r19)
1000af28:	b8800515 	stw	r2,20(r23)
1000af2c:	31000726 	beq	r6,r4,1000af4c <_realloc_r+0x584>
1000af30:	b8800604 	addi	r2,r23,24
1000af34:	9cc00404 	addi	r19,r19,16
1000af38:	003fa406 	br	1000adcc <__alt_data_end+0xf800adcc>
1000af3c:	9009883a 	mov	r4,r18
1000af40:	0010c1c0 	call	10010c1c <__malloc_unlock>
1000af44:	0005883a 	mov	r2,zero
1000af48:	003f0606 	br	1000ab64 <__alt_data_end+0xf800ab64>
1000af4c:	98c00417 	ldw	r3,16(r19)
1000af50:	9cc00604 	addi	r19,r19,24
1000af54:	b8800804 	addi	r2,r23,32
1000af58:	b8c00615 	stw	r3,24(r23)
1000af5c:	98ffff17 	ldw	r3,-4(r19)
1000af60:	b8c00715 	stw	r3,28(r23)
1000af64:	003f9906 	br	1000adcc <__alt_data_end+0xf800adcc>

1000af68 <__fpclassifyd>:
1000af68:	00a00034 	movhi	r2,32768
1000af6c:	10bfffc4 	addi	r2,r2,-1
1000af70:	2884703a 	and	r2,r5,r2
1000af74:	10000726 	beq	r2,zero,1000af94 <__fpclassifyd+0x2c>
1000af78:	00fffc34 	movhi	r3,65520
1000af7c:	019ff834 	movhi	r6,32736
1000af80:	28c7883a 	add	r3,r5,r3
1000af84:	31bfffc4 	addi	r6,r6,-1
1000af88:	30c00536 	bltu	r6,r3,1000afa0 <__fpclassifyd+0x38>
1000af8c:	00800104 	movi	r2,4
1000af90:	f800283a 	ret
1000af94:	2000021e 	bne	r4,zero,1000afa0 <__fpclassifyd+0x38>
1000af98:	00800084 	movi	r2,2
1000af9c:	f800283a 	ret
1000afa0:	00dffc34 	movhi	r3,32752
1000afa4:	019ff834 	movhi	r6,32736
1000afa8:	28cb883a 	add	r5,r5,r3
1000afac:	31bfffc4 	addi	r6,r6,-1
1000afb0:	317ff62e 	bgeu	r6,r5,1000af8c <__alt_data_end+0xf800af8c>
1000afb4:	01400434 	movhi	r5,16
1000afb8:	297fffc4 	addi	r5,r5,-1
1000afbc:	28800236 	bltu	r5,r2,1000afc8 <__fpclassifyd+0x60>
1000afc0:	008000c4 	movi	r2,3
1000afc4:	f800283a 	ret
1000afc8:	10c00226 	beq	r2,r3,1000afd4 <__fpclassifyd+0x6c>
1000afcc:	0005883a 	mov	r2,zero
1000afd0:	f800283a 	ret
1000afd4:	2005003a 	cmpeq	r2,r4,zero
1000afd8:	f800283a 	ret

1000afdc <_sbrk_r>:
1000afdc:	defffd04 	addi	sp,sp,-12
1000afe0:	dc000015 	stw	r16,0(sp)
1000afe4:	040400b4 	movhi	r16,4098
1000afe8:	dc400115 	stw	r17,4(sp)
1000afec:	84230e04 	addi	r16,r16,-29640
1000aff0:	2023883a 	mov	r17,r4
1000aff4:	2809883a 	mov	r4,r5
1000aff8:	dfc00215 	stw	ra,8(sp)
1000affc:	80000015 	stw	zero,0(r16)
1000b000:	0010e100 	call	10010e10 <sbrk>
1000b004:	00ffffc4 	movi	r3,-1
1000b008:	10c00526 	beq	r2,r3,1000b020 <_sbrk_r+0x44>
1000b00c:	dfc00217 	ldw	ra,8(sp)
1000b010:	dc400117 	ldw	r17,4(sp)
1000b014:	dc000017 	ldw	r16,0(sp)
1000b018:	dec00304 	addi	sp,sp,12
1000b01c:	f800283a 	ret
1000b020:	80c00017 	ldw	r3,0(r16)
1000b024:	183ff926 	beq	r3,zero,1000b00c <__alt_data_end+0xf800b00c>
1000b028:	88c00015 	stw	r3,0(r17)
1000b02c:	003ff706 	br	1000b00c <__alt_data_end+0xf800b00c>

1000b030 <__sread>:
1000b030:	defffe04 	addi	sp,sp,-8
1000b034:	dc000015 	stw	r16,0(sp)
1000b038:	2821883a 	mov	r16,r5
1000b03c:	2940038f 	ldh	r5,14(r5)
1000b040:	dfc00115 	stw	ra,4(sp)
1000b044:	000ccec0 	call	1000ccec <_read_r>
1000b048:	10000716 	blt	r2,zero,1000b068 <__sread+0x38>
1000b04c:	80c01417 	ldw	r3,80(r16)
1000b050:	1887883a 	add	r3,r3,r2
1000b054:	80c01415 	stw	r3,80(r16)
1000b058:	dfc00117 	ldw	ra,4(sp)
1000b05c:	dc000017 	ldw	r16,0(sp)
1000b060:	dec00204 	addi	sp,sp,8
1000b064:	f800283a 	ret
1000b068:	80c0030b 	ldhu	r3,12(r16)
1000b06c:	18fbffcc 	andi	r3,r3,61439
1000b070:	80c0030d 	sth	r3,12(r16)
1000b074:	dfc00117 	ldw	ra,4(sp)
1000b078:	dc000017 	ldw	r16,0(sp)
1000b07c:	dec00204 	addi	sp,sp,8
1000b080:	f800283a 	ret

1000b084 <__seofread>:
1000b084:	0005883a 	mov	r2,zero
1000b088:	f800283a 	ret

1000b08c <__swrite>:
1000b08c:	2880030b 	ldhu	r2,12(r5)
1000b090:	defffb04 	addi	sp,sp,-20
1000b094:	dcc00315 	stw	r19,12(sp)
1000b098:	dc800215 	stw	r18,8(sp)
1000b09c:	dc400115 	stw	r17,4(sp)
1000b0a0:	dc000015 	stw	r16,0(sp)
1000b0a4:	dfc00415 	stw	ra,16(sp)
1000b0a8:	10c0400c 	andi	r3,r2,256
1000b0ac:	2821883a 	mov	r16,r5
1000b0b0:	2027883a 	mov	r19,r4
1000b0b4:	3025883a 	mov	r18,r6
1000b0b8:	3823883a 	mov	r17,r7
1000b0bc:	18000526 	beq	r3,zero,1000b0d4 <__swrite+0x48>
1000b0c0:	2940038f 	ldh	r5,14(r5)
1000b0c4:	000d883a 	mov	r6,zero
1000b0c8:	01c00084 	movi	r7,2
1000b0cc:	000cc900 	call	1000cc90 <_lseek_r>
1000b0d0:	8080030b 	ldhu	r2,12(r16)
1000b0d4:	8140038f 	ldh	r5,14(r16)
1000b0d8:	10bbffcc 	andi	r2,r2,61439
1000b0dc:	9809883a 	mov	r4,r19
1000b0e0:	900d883a 	mov	r6,r18
1000b0e4:	880f883a 	mov	r7,r17
1000b0e8:	8080030d 	sth	r2,12(r16)
1000b0ec:	dfc00417 	ldw	ra,16(sp)
1000b0f0:	dcc00317 	ldw	r19,12(sp)
1000b0f4:	dc800217 	ldw	r18,8(sp)
1000b0f8:	dc400117 	ldw	r17,4(sp)
1000b0fc:	dc000017 	ldw	r16,0(sp)
1000b100:	dec00504 	addi	sp,sp,20
1000b104:	000c76c1 	jmpi	1000c76c <_write_r>

1000b108 <__sseek>:
1000b108:	defffe04 	addi	sp,sp,-8
1000b10c:	dc000015 	stw	r16,0(sp)
1000b110:	2821883a 	mov	r16,r5
1000b114:	2940038f 	ldh	r5,14(r5)
1000b118:	dfc00115 	stw	ra,4(sp)
1000b11c:	000cc900 	call	1000cc90 <_lseek_r>
1000b120:	00ffffc4 	movi	r3,-1
1000b124:	10c00826 	beq	r2,r3,1000b148 <__sseek+0x40>
1000b128:	80c0030b 	ldhu	r3,12(r16)
1000b12c:	80801415 	stw	r2,80(r16)
1000b130:	18c40014 	ori	r3,r3,4096
1000b134:	80c0030d 	sth	r3,12(r16)
1000b138:	dfc00117 	ldw	ra,4(sp)
1000b13c:	dc000017 	ldw	r16,0(sp)
1000b140:	dec00204 	addi	sp,sp,8
1000b144:	f800283a 	ret
1000b148:	80c0030b 	ldhu	r3,12(r16)
1000b14c:	18fbffcc 	andi	r3,r3,61439
1000b150:	80c0030d 	sth	r3,12(r16)
1000b154:	dfc00117 	ldw	ra,4(sp)
1000b158:	dc000017 	ldw	r16,0(sp)
1000b15c:	dec00204 	addi	sp,sp,8
1000b160:	f800283a 	ret

1000b164 <__sclose>:
1000b164:	2940038f 	ldh	r5,14(r5)
1000b168:	000c7c81 	jmpi	1000c7c8 <_close_r>

1000b16c <strcmp>:
1000b16c:	2144b03a 	or	r2,r4,r5
1000b170:	108000cc 	andi	r2,r2,3
1000b174:	1000171e 	bne	r2,zero,1000b1d4 <strcmp+0x68>
1000b178:	20800017 	ldw	r2,0(r4)
1000b17c:	28c00017 	ldw	r3,0(r5)
1000b180:	10c0141e 	bne	r2,r3,1000b1d4 <strcmp+0x68>
1000b184:	027fbff4 	movhi	r9,65279
1000b188:	4a7fbfc4 	addi	r9,r9,-257
1000b18c:	0086303a 	nor	r3,zero,r2
1000b190:	02202074 	movhi	r8,32897
1000b194:	1245883a 	add	r2,r2,r9
1000b198:	42202004 	addi	r8,r8,-32640
1000b19c:	10c4703a 	and	r2,r2,r3
1000b1a0:	1204703a 	and	r2,r2,r8
1000b1a4:	10000226 	beq	r2,zero,1000b1b0 <strcmp+0x44>
1000b1a8:	00001706 	br	1000b208 <strcmp+0x9c>
1000b1ac:	1000161e 	bne	r2,zero,1000b208 <strcmp+0x9c>
1000b1b0:	21000104 	addi	r4,r4,4
1000b1b4:	20c00017 	ldw	r3,0(r4)
1000b1b8:	29400104 	addi	r5,r5,4
1000b1bc:	29800017 	ldw	r6,0(r5)
1000b1c0:	1a4f883a 	add	r7,r3,r9
1000b1c4:	00c4303a 	nor	r2,zero,r3
1000b1c8:	3884703a 	and	r2,r7,r2
1000b1cc:	1204703a 	and	r2,r2,r8
1000b1d0:	19bff626 	beq	r3,r6,1000b1ac <__alt_data_end+0xf800b1ac>
1000b1d4:	20800007 	ldb	r2,0(r4)
1000b1d8:	1000051e 	bne	r2,zero,1000b1f0 <strcmp+0x84>
1000b1dc:	00000606 	br	1000b1f8 <strcmp+0x8c>
1000b1e0:	21000044 	addi	r4,r4,1
1000b1e4:	20800007 	ldb	r2,0(r4)
1000b1e8:	29400044 	addi	r5,r5,1
1000b1ec:	10000226 	beq	r2,zero,1000b1f8 <strcmp+0x8c>
1000b1f0:	28c00007 	ldb	r3,0(r5)
1000b1f4:	10fffa26 	beq	r2,r3,1000b1e0 <__alt_data_end+0xf800b1e0>
1000b1f8:	20800003 	ldbu	r2,0(r4)
1000b1fc:	28c00003 	ldbu	r3,0(r5)
1000b200:	10c5c83a 	sub	r2,r2,r3
1000b204:	f800283a 	ret
1000b208:	0005883a 	mov	r2,zero
1000b20c:	f800283a 	ret

1000b210 <__sprint_r.part.0>:
1000b210:	28801917 	ldw	r2,100(r5)
1000b214:	defff604 	addi	sp,sp,-40
1000b218:	dd400515 	stw	r21,20(sp)
1000b21c:	dcc00315 	stw	r19,12(sp)
1000b220:	dfc00915 	stw	ra,36(sp)
1000b224:	df000815 	stw	fp,32(sp)
1000b228:	ddc00715 	stw	r23,28(sp)
1000b22c:	dd800615 	stw	r22,24(sp)
1000b230:	dd000415 	stw	r20,16(sp)
1000b234:	dc800215 	stw	r18,8(sp)
1000b238:	dc400115 	stw	r17,4(sp)
1000b23c:	dc000015 	stw	r16,0(sp)
1000b240:	1088000c 	andi	r2,r2,8192
1000b244:	2827883a 	mov	r19,r5
1000b248:	302b883a 	mov	r21,r6
1000b24c:	10002d26 	beq	r2,zero,1000b304 <__sprint_r.part.0+0xf4>
1000b250:	30800217 	ldw	r2,8(r6)
1000b254:	35800017 	ldw	r22,0(r6)
1000b258:	10002826 	beq	r2,zero,1000b2fc <__sprint_r.part.0+0xec>
1000b25c:	2029883a 	mov	r20,r4
1000b260:	b5c00104 	addi	r23,r22,4
1000b264:	04bfffc4 	movi	r18,-1
1000b268:	bc400017 	ldw	r17,0(r23)
1000b26c:	b4000017 	ldw	r16,0(r22)
1000b270:	0039883a 	mov	fp,zero
1000b274:	8822d0ba 	srli	r17,r17,2
1000b278:	04400316 	blt	zero,r17,1000b288 <__sprint_r.part.0+0x78>
1000b27c:	00001706 	br	1000b2dc <__sprint_r.part.0+0xcc>
1000b280:	84000104 	addi	r16,r16,4
1000b284:	8f001526 	beq	r17,fp,1000b2dc <__sprint_r.part.0+0xcc>
1000b288:	81400017 	ldw	r5,0(r16)
1000b28c:	a009883a 	mov	r4,r20
1000b290:	980d883a 	mov	r6,r19
1000b294:	000ca080 	call	1000ca08 <_fputwc_r>
1000b298:	e7000044 	addi	fp,fp,1
1000b29c:	14bff81e 	bne	r2,r18,1000b280 <__alt_data_end+0xf800b280>
1000b2a0:	9005883a 	mov	r2,r18
1000b2a4:	a8000215 	stw	zero,8(r21)
1000b2a8:	a8000115 	stw	zero,4(r21)
1000b2ac:	dfc00917 	ldw	ra,36(sp)
1000b2b0:	df000817 	ldw	fp,32(sp)
1000b2b4:	ddc00717 	ldw	r23,28(sp)
1000b2b8:	dd800617 	ldw	r22,24(sp)
1000b2bc:	dd400517 	ldw	r21,20(sp)
1000b2c0:	dd000417 	ldw	r20,16(sp)
1000b2c4:	dcc00317 	ldw	r19,12(sp)
1000b2c8:	dc800217 	ldw	r18,8(sp)
1000b2cc:	dc400117 	ldw	r17,4(sp)
1000b2d0:	dc000017 	ldw	r16,0(sp)
1000b2d4:	dec00a04 	addi	sp,sp,40
1000b2d8:	f800283a 	ret
1000b2dc:	a8c00217 	ldw	r3,8(r21)
1000b2e0:	8c63883a 	add	r17,r17,r17
1000b2e4:	8c63883a 	add	r17,r17,r17
1000b2e8:	1c45c83a 	sub	r2,r3,r17
1000b2ec:	a8800215 	stw	r2,8(r21)
1000b2f0:	b5800204 	addi	r22,r22,8
1000b2f4:	bdc00204 	addi	r23,r23,8
1000b2f8:	103fdb1e 	bne	r2,zero,1000b268 <__alt_data_end+0xf800b268>
1000b2fc:	0005883a 	mov	r2,zero
1000b300:	003fe806 	br	1000b2a4 <__alt_data_end+0xf800b2a4>
1000b304:	000848c0 	call	1000848c <__sfvwrite_r>
1000b308:	003fe606 	br	1000b2a4 <__alt_data_end+0xf800b2a4>

1000b30c <__sprint_r>:
1000b30c:	30c00217 	ldw	r3,8(r6)
1000b310:	18000126 	beq	r3,zero,1000b318 <__sprint_r+0xc>
1000b314:	000b2101 	jmpi	1000b210 <__sprint_r.part.0>
1000b318:	30000115 	stw	zero,4(r6)
1000b31c:	0005883a 	mov	r2,zero
1000b320:	f800283a 	ret

1000b324 <___vfiprintf_internal_r>:
1000b324:	defeca04 	addi	sp,sp,-1240
1000b328:	dcc12f15 	stw	r19,1212(sp)
1000b32c:	dfc13515 	stw	ra,1236(sp)
1000b330:	df013415 	stw	fp,1232(sp)
1000b334:	ddc13315 	stw	r23,1228(sp)
1000b338:	dd813215 	stw	r22,1224(sp)
1000b33c:	dd413115 	stw	r21,1220(sp)
1000b340:	dd013015 	stw	r20,1216(sp)
1000b344:	dc812e15 	stw	r18,1208(sp)
1000b348:	dc412d15 	stw	r17,1204(sp)
1000b34c:	dc012c15 	stw	r16,1200(sp)
1000b350:	d9012115 	stw	r4,1156(sp)
1000b354:	d9412015 	stw	r5,1152(sp)
1000b358:	d9c12315 	stw	r7,1164(sp)
1000b35c:	3027883a 	mov	r19,r6
1000b360:	20000226 	beq	r4,zero,1000b36c <___vfiprintf_internal_r+0x48>
1000b364:	20800e17 	ldw	r2,56(r4)
1000b368:	1000f726 	beq	r2,zero,1000b748 <___vfiprintf_internal_r+0x424>
1000b36c:	d8812017 	ldw	r2,1152(sp)
1000b370:	10c0030b 	ldhu	r3,12(r2)
1000b374:	1908000c 	andi	r4,r3,8192
1000b378:	1805883a 	mov	r2,r3
1000b37c:	2000081e 	bne	r4,zero,1000b3a0 <___vfiprintf_internal_r+0x7c>
1000b380:	d9412017 	ldw	r5,1152(sp)
1000b384:	18880014 	ori	r2,r3,8192
1000b388:	00f7ffc4 	movi	r3,-8193
1000b38c:	29001917 	ldw	r4,100(r5)
1000b390:	2880030d 	sth	r2,12(r5)
1000b394:	20c8703a 	and	r4,r4,r3
1000b398:	29001915 	stw	r4,100(r5)
1000b39c:	1007883a 	mov	r3,r2
1000b3a0:	1100020c 	andi	r4,r2,8
1000b3a4:	2000a726 	beq	r4,zero,1000b644 <___vfiprintf_internal_r+0x320>
1000b3a8:	d9412017 	ldw	r5,1152(sp)
1000b3ac:	29000417 	ldw	r4,16(r5)
1000b3b0:	2000a426 	beq	r4,zero,1000b644 <___vfiprintf_internal_r+0x320>
1000b3b4:	1080068c 	andi	r2,r2,26
1000b3b8:	01000284 	movi	r4,10
1000b3bc:	1100ab26 	beq	r2,r4,1000b66c <___vfiprintf_internal_r+0x348>
1000b3c0:	d9010a04 	addi	r4,sp,1064
1000b3c4:	d94109c4 	addi	r5,sp,1063
1000b3c8:	07040074 	movhi	fp,4097
1000b3cc:	04440074 	movhi	r17,4097
1000b3d0:	2145c83a 	sub	r2,r4,r5
1000b3d4:	e7153004 	addi	fp,fp,21696
1000b3d8:	8c552c04 	addi	r17,r17,21680
1000b3dc:	d9011e15 	stw	r4,1144(sp)
1000b3e0:	d9411f15 	stw	r5,1148(sp)
1000b3e4:	dec11a15 	stw	sp,1128(sp)
1000b3e8:	d8011c15 	stw	zero,1136(sp)
1000b3ec:	d8011b15 	stw	zero,1132(sp)
1000b3f0:	d8012715 	stw	zero,1180(sp)
1000b3f4:	d8012515 	stw	zero,1172(sp)
1000b3f8:	d811883a 	mov	r8,sp
1000b3fc:	d8812815 	stw	r2,1184(sp)
1000b400:	982f883a 	mov	r23,r19
1000b404:	b8800007 	ldb	r2,0(r23)
1000b408:	1003b026 	beq	r2,zero,1000c2cc <___vfiprintf_internal_r+0xfa8>
1000b40c:	01000944 	movi	r4,37
1000b410:	1103ae26 	beq	r2,r4,1000c2cc <___vfiprintf_internal_r+0xfa8>
1000b414:	b805883a 	mov	r2,r23
1000b418:	00000106 	br	1000b420 <___vfiprintf_internal_r+0xfc>
1000b41c:	19000326 	beq	r3,r4,1000b42c <___vfiprintf_internal_r+0x108>
1000b420:	10800044 	addi	r2,r2,1
1000b424:	10c00007 	ldb	r3,0(r2)
1000b428:	183ffc1e 	bne	r3,zero,1000b41c <__alt_data_end+0xf800b41c>
1000b42c:	15e1c83a 	sub	r16,r2,r23
1000b430:	1029883a 	mov	r20,r2
1000b434:	80001026 	beq	r16,zero,1000b478 <___vfiprintf_internal_r+0x154>
1000b438:	d8c11c17 	ldw	r3,1136(sp)
1000b43c:	d8811b17 	ldw	r2,1132(sp)
1000b440:	45c00015 	stw	r23,0(r8)
1000b444:	80c7883a 	add	r3,r16,r3
1000b448:	10800044 	addi	r2,r2,1
1000b44c:	44000115 	stw	r16,4(r8)
1000b450:	d8c11c15 	stw	r3,1136(sp)
1000b454:	d8811b15 	stw	r2,1132(sp)
1000b458:	010001c4 	movi	r4,7
1000b45c:	2080740e 	bge	r4,r2,1000b630 <___vfiprintf_internal_r+0x30c>
1000b460:	1803a71e 	bne	r3,zero,1000c300 <___vfiprintf_internal_r+0xfdc>
1000b464:	d8c12517 	ldw	r3,1172(sp)
1000b468:	d8011b15 	stw	zero,1132(sp)
1000b46c:	d811883a 	mov	r8,sp
1000b470:	1c07883a 	add	r3,r3,r16
1000b474:	d8c12515 	stw	r3,1172(sp)
1000b478:	a0800007 	ldb	r2,0(r20)
1000b47c:	1002bf26 	beq	r2,zero,1000bf7c <___vfiprintf_internal_r+0xc58>
1000b480:	a5c00044 	addi	r23,r20,1
1000b484:	a1800047 	ldb	r6,1(r20)
1000b488:	d8011d85 	stb	zero,1142(sp)
1000b48c:	d8012205 	stb	zero,1160(sp)
1000b490:	043fffc4 	movi	r16,-1
1000b494:	d8012415 	stw	zero,1168(sp)
1000b498:	0025883a 	mov	r18,zero
1000b49c:	05001604 	movi	r20,88
1000b4a0:	05400244 	movi	r21,9
1000b4a4:	4027883a 	mov	r19,r8
1000b4a8:	bdc00044 	addi	r23,r23,1
1000b4ac:	30bff804 	addi	r2,r6,-32
1000b4b0:	a0825636 	bltu	r20,r2,1000be0c <___vfiprintf_internal_r+0xae8>
1000b4b4:	100490ba 	slli	r2,r2,2
1000b4b8:	01040074 	movhi	r4,4097
1000b4bc:	212d3304 	addi	r4,r4,-19252
1000b4c0:	1105883a 	add	r2,r2,r4
1000b4c4:	10800017 	ldw	r2,0(r2)
1000b4c8:	1000683a 	jmp	r2
1000b4cc:	1000bd9c 	xori	zero,r2,758
1000b4d0:	1000be0c 	andi	zero,r2,760
1000b4d4:	1000be0c 	andi	zero,r2,760
1000b4d8:	1000be00 	call	11000be0 <_gp+0xfe1b30>
1000b4dc:	1000be0c 	andi	zero,r2,760
1000b4e0:	1000be0c 	andi	zero,r2,760
1000b4e4:	1000be0c 	andi	zero,r2,760
1000b4e8:	1000be0c 	andi	zero,r2,760
1000b4ec:	1000be0c 	andi	zero,r2,760
1000b4f0:	1000be0c 	andi	zero,r2,760
1000b4f4:	1000bb8c 	andi	zero,r2,750
1000b4f8:	1000bdb4 	orhi	zero,r2,758
1000b4fc:	1000be0c 	andi	zero,r2,760
1000b500:	1000b760 	cmpeqi	zero,r2,733
1000b504:	1000bbb0 	cmpltui	zero,r2,750
1000b508:	1000be0c 	andi	zero,r2,760
1000b50c:	1000b76c 	andhi	zero,r2,733
1000b510:	1000b778 	rdprs	zero,r2,733
1000b514:	1000b778 	rdprs	zero,r2,733
1000b518:	1000b778 	rdprs	zero,r2,733
1000b51c:	1000b778 	rdprs	zero,r2,733
1000b520:	1000b778 	rdprs	zero,r2,733
1000b524:	1000b778 	rdprs	zero,r2,733
1000b528:	1000b778 	rdprs	zero,r2,733
1000b52c:	1000b778 	rdprs	zero,r2,733
1000b530:	1000b778 	rdprs	zero,r2,733
1000b534:	1000be0c 	andi	zero,r2,760
1000b538:	1000be0c 	andi	zero,r2,760
1000b53c:	1000be0c 	andi	zero,r2,760
1000b540:	1000be0c 	andi	zero,r2,760
1000b544:	1000be0c 	andi	zero,r2,760
1000b548:	1000be0c 	andi	zero,r2,760
1000b54c:	1000be0c 	andi	zero,r2,760
1000b550:	1000be0c 	andi	zero,r2,760
1000b554:	1000be0c 	andi	zero,r2,760
1000b558:	1000be0c 	andi	zero,r2,760
1000b55c:	1000b7b8 	rdprs	zero,r2,734
1000b560:	1000be0c 	andi	zero,r2,760
1000b564:	1000be0c 	andi	zero,r2,760
1000b568:	1000be0c 	andi	zero,r2,760
1000b56c:	1000be0c 	andi	zero,r2,760
1000b570:	1000be0c 	andi	zero,r2,760
1000b574:	1000be0c 	andi	zero,r2,760
1000b578:	1000be0c 	andi	zero,r2,760
1000b57c:	1000be0c 	andi	zero,r2,760
1000b580:	1000be0c 	andi	zero,r2,760
1000b584:	1000be0c 	andi	zero,r2,760
1000b588:	1000baa8 	cmpgeui	zero,r2,746
1000b58c:	1000be0c 	andi	zero,r2,760
1000b590:	1000be0c 	andi	zero,r2,760
1000b594:	1000be0c 	andi	zero,r2,760
1000b598:	1000be0c 	andi	zero,r2,760
1000b59c:	1000be0c 	andi	zero,r2,760
1000b5a0:	1000bae8 	cmpgeui	zero,r2,747
1000b5a4:	1000be0c 	andi	zero,r2,760
1000b5a8:	1000be0c 	andi	zero,r2,760
1000b5ac:	1000bb2c 	andhi	zero,r2,748
1000b5b0:	1000be0c 	andi	zero,r2,760
1000b5b4:	1000be0c 	andi	zero,r2,760
1000b5b8:	1000be0c 	andi	zero,r2,760
1000b5bc:	1000be0c 	andi	zero,r2,760
1000b5c0:	1000be0c 	andi	zero,r2,760
1000b5c4:	1000be0c 	andi	zero,r2,760
1000b5c8:	1000be0c 	andi	zero,r2,760
1000b5cc:	1000be0c 	andi	zero,r2,760
1000b5d0:	1000be0c 	andi	zero,r2,760
1000b5d4:	1000be0c 	andi	zero,r2,760
1000b5d8:	1000ba74 	orhi	zero,r2,745
1000b5dc:	1000bdc4 	addi	zero,r2,759
1000b5e0:	1000be0c 	andi	zero,r2,760
1000b5e4:	1000be0c 	andi	zero,r2,760
1000b5e8:	1000be0c 	andi	zero,r2,760
1000b5ec:	1000bc00 	call	11000bc0 <_gp+0xfe1b10>
1000b5f0:	1000bdc4 	addi	zero,r2,759
1000b5f4:	1000be0c 	andi	zero,r2,760
1000b5f8:	1000be0c 	andi	zero,r2,760
1000b5fc:	1000bb18 	cmpnei	zero,r2,748
1000b600:	1000be0c 	andi	zero,r2,760
1000b604:	1000bd64 	muli	zero,r2,757
1000b608:	1000bcec 	andhi	zero,r2,755
1000b60c:	1000bd20 	cmpeqi	zero,r2,756
1000b610:	1000bc0c 	andi	zero,r2,752
1000b614:	1000be0c 	andi	zero,r2,760
1000b618:	1000bc18 	cmpnei	zero,r2,752
1000b61c:	1000be0c 	andi	zero,r2,760
1000b620:	1000bc74 	orhi	zero,r2,753
1000b624:	1000be0c 	andi	zero,r2,760
1000b628:	1000be0c 	andi	zero,r2,760
1000b62c:	1000bca8 	cmpgeui	zero,r2,754
1000b630:	42000204 	addi	r8,r8,8
1000b634:	d8c12517 	ldw	r3,1172(sp)
1000b638:	1c07883a 	add	r3,r3,r16
1000b63c:	d8c12515 	stw	r3,1172(sp)
1000b640:	003f8d06 	br	1000b478 <__alt_data_end+0xf800b478>
1000b644:	d9012117 	ldw	r4,1156(sp)
1000b648:	d9412017 	ldw	r5,1152(sp)
1000b64c:	0005fec0 	call	10005fec <__swsetup_r>
1000b650:	1000301e 	bne	r2,zero,1000b714 <___vfiprintf_internal_r+0x3f0>
1000b654:	d8812017 	ldw	r2,1152(sp)
1000b658:	01000284 	movi	r4,10
1000b65c:	10c0030b 	ldhu	r3,12(r2)
1000b660:	1805883a 	mov	r2,r3
1000b664:	1080068c 	andi	r2,r2,26
1000b668:	113f551e 	bne	r2,r4,1000b3c0 <__alt_data_end+0xf800b3c0>
1000b66c:	d9012017 	ldw	r4,1152(sp)
1000b670:	2080038b 	ldhu	r2,14(r4)
1000b674:	113fffcc 	andi	r4,r2,65535
1000b678:	2120001c 	xori	r4,r4,32768
1000b67c:	21200004 	addi	r4,r4,-32768
1000b680:	203f4f16 	blt	r4,zero,1000b3c0 <__alt_data_end+0xf800b3c0>
1000b684:	d9412017 	ldw	r5,1152(sp)
1000b688:	d9012117 	ldw	r4,1156(sp)
1000b68c:	d9c12317 	ldw	r7,1164(sp)
1000b690:	2b001917 	ldw	r12,100(r5)
1000b694:	2ac00717 	ldw	r11,28(r5)
1000b698:	2a800917 	ldw	r10,36(r5)
1000b69c:	02010004 	movi	r8,1024
1000b6a0:	18ffff4c 	andi	r3,r3,65533
1000b6a4:	da0b883a 	add	r5,sp,r8
1000b6a8:	980d883a 	mov	r6,r19
1000b6ac:	d8c1030d 	sth	r3,1036(sp)
1000b6b0:	db011915 	stw	r12,1124(sp)
1000b6b4:	d881038d 	sth	r2,1038(sp)
1000b6b8:	dac10715 	stw	r11,1052(sp)
1000b6bc:	da810915 	stw	r10,1060(sp)
1000b6c0:	dec10015 	stw	sp,1024(sp)
1000b6c4:	dec10415 	stw	sp,1040(sp)
1000b6c8:	da010215 	stw	r8,1032(sp)
1000b6cc:	da010515 	stw	r8,1044(sp)
1000b6d0:	d8010615 	stw	zero,1048(sp)
1000b6d4:	000b3240 	call	1000b324 <___vfiprintf_internal_r>
1000b6d8:	1021883a 	mov	r16,r2
1000b6dc:	10000416 	blt	r2,zero,1000b6f0 <___vfiprintf_internal_r+0x3cc>
1000b6e0:	d9012117 	ldw	r4,1156(sp)
1000b6e4:	d9410004 	addi	r5,sp,1024
1000b6e8:	0007a6c0 	call	10007a6c <_fflush_r>
1000b6ec:	10040f1e 	bne	r2,zero,1000c72c <___vfiprintf_internal_r+0x1408>
1000b6f0:	d881030b 	ldhu	r2,1036(sp)
1000b6f4:	1080100c 	andi	r2,r2,64
1000b6f8:	10000426 	beq	r2,zero,1000b70c <___vfiprintf_internal_r+0x3e8>
1000b6fc:	d8c12017 	ldw	r3,1152(sp)
1000b700:	1880030b 	ldhu	r2,12(r3)
1000b704:	10801014 	ori	r2,r2,64
1000b708:	1880030d 	sth	r2,12(r3)
1000b70c:	8005883a 	mov	r2,r16
1000b710:	00000106 	br	1000b718 <___vfiprintf_internal_r+0x3f4>
1000b714:	00bfffc4 	movi	r2,-1
1000b718:	dfc13517 	ldw	ra,1236(sp)
1000b71c:	df013417 	ldw	fp,1232(sp)
1000b720:	ddc13317 	ldw	r23,1228(sp)
1000b724:	dd813217 	ldw	r22,1224(sp)
1000b728:	dd413117 	ldw	r21,1220(sp)
1000b72c:	dd013017 	ldw	r20,1216(sp)
1000b730:	dcc12f17 	ldw	r19,1212(sp)
1000b734:	dc812e17 	ldw	r18,1208(sp)
1000b738:	dc412d17 	ldw	r17,1204(sp)
1000b73c:	dc012c17 	ldw	r16,1200(sp)
1000b740:	dec13604 	addi	sp,sp,1240
1000b744:	f800283a 	ret
1000b748:	00080280 	call	10008028 <__sinit>
1000b74c:	003f0706 	br	1000b36c <__alt_data_end+0xf800b36c>
1000b750:	d8c12417 	ldw	r3,1168(sp)
1000b754:	d8812315 	stw	r2,1164(sp)
1000b758:	00c7c83a 	sub	r3,zero,r3
1000b75c:	d8c12415 	stw	r3,1168(sp)
1000b760:	94800114 	ori	r18,r18,4
1000b764:	b9800007 	ldb	r6,0(r23)
1000b768:	003f4f06 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000b76c:	94802014 	ori	r18,r18,128
1000b770:	b9800007 	ldb	r6,0(r23)
1000b774:	003f4c06 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000b778:	dc012615 	stw	r16,1176(sp)
1000b77c:	d8012415 	stw	zero,1168(sp)
1000b780:	35bff404 	addi	r22,r6,-48
1000b784:	0009883a 	mov	r4,zero
1000b788:	b821883a 	mov	r16,r23
1000b78c:	01400284 	movi	r5,10
1000b790:	0003c5c0 	call	10003c5c <__mulsi3>
1000b794:	81800007 	ldb	r6,0(r16)
1000b798:	1589883a 	add	r4,r2,r22
1000b79c:	bdc00044 	addi	r23,r23,1
1000b7a0:	35bff404 	addi	r22,r6,-48
1000b7a4:	b821883a 	mov	r16,r23
1000b7a8:	adbff82e 	bgeu	r21,r22,1000b78c <__alt_data_end+0xf800b78c>
1000b7ac:	d9012415 	stw	r4,1168(sp)
1000b7b0:	dc012617 	ldw	r16,1176(sp)
1000b7b4:	003f3d06 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000b7b8:	d8c12203 	ldbu	r3,1160(sp)
1000b7bc:	94800414 	ori	r18,r18,16
1000b7c0:	9080080c 	andi	r2,r18,32
1000b7c4:	d8c11d85 	stb	r3,1142(sp)
1000b7c8:	9811883a 	mov	r8,r19
1000b7cc:	d8c12317 	ldw	r3,1164(sp)
1000b7d0:	10018226 	beq	r2,zero,1000bddc <___vfiprintf_internal_r+0xab8>
1000b7d4:	d9012317 	ldw	r4,1164(sp)
1000b7d8:	18800117 	ldw	r2,4(r3)
1000b7dc:	1cc00017 	ldw	r19,0(r3)
1000b7e0:	21000204 	addi	r4,r4,8
1000b7e4:	d9012315 	stw	r4,1164(sp)
1000b7e8:	102b883a 	mov	r21,r2
1000b7ec:	10030016 	blt	r2,zero,1000c3f0 <___vfiprintf_internal_r+0x10cc>
1000b7f0:	dd811d83 	ldbu	r22,1142(sp)
1000b7f4:	8029883a 	mov	r20,r16
1000b7f8:	00800044 	movi	r2,1
1000b7fc:	9d46b03a 	or	r3,r19,r21
1000b800:	80000216 	blt	r16,zero,1000b80c <___vfiprintf_internal_r+0x4e8>
1000b804:	013fdfc4 	movi	r4,-129
1000b808:	9124703a 	and	r18,r18,r4
1000b80c:	1801b41e 	bne	r3,zero,1000bee0 <___vfiprintf_internal_r+0xbbc>
1000b810:	80028126 	beq	r16,zero,1000c218 <___vfiprintf_internal_r+0xef4>
1000b814:	10803fcc 	andi	r2,r2,255
1000b818:	00c00044 	movi	r3,1
1000b81c:	10c1d126 	beq	r2,r3,1000bf64 <___vfiprintf_internal_r+0xc40>
1000b820:	00c00084 	movi	r3,2
1000b824:	10c28626 	beq	r2,r3,1000c240 <___vfiprintf_internal_r+0xf1c>
1000b828:	d8c10a04 	addi	r3,sp,1064
1000b82c:	9808d0fa 	srli	r4,r19,3
1000b830:	a80a977a 	slli	r5,r21,29
1000b834:	a82ad0fa 	srli	r21,r21,3
1000b838:	9cc001cc 	andi	r19,r19,7
1000b83c:	98800c04 	addi	r2,r19,48
1000b840:	18ffffc4 	addi	r3,r3,-1
1000b844:	2926b03a 	or	r19,r5,r4
1000b848:	18800005 	stb	r2,0(r3)
1000b84c:	9d48b03a 	or	r4,r19,r21
1000b850:	203ff61e 	bne	r4,zero,1000b82c <__alt_data_end+0xf800b82c>
1000b854:	9100004c 	andi	r4,r18,1
1000b858:	d8c12215 	stw	r3,1160(sp)
1000b85c:	2002b31e 	bne	r4,zero,1000c32c <___vfiprintf_internal_r+0x1008>
1000b860:	d9411e17 	ldw	r5,1144(sp)
1000b864:	28e9c83a 	sub	r20,r5,r3
1000b868:	a02b883a 	mov	r21,r20
1000b86c:	a400010e 	bge	r20,r16,1000b874 <___vfiprintf_internal_r+0x550>
1000b870:	802b883a 	mov	r21,r16
1000b874:	b5803fcc 	andi	r22,r22,255
1000b878:	b580201c 	xori	r22,r22,128
1000b87c:	b5bfe004 	addi	r22,r22,-128
1000b880:	b0000126 	beq	r22,zero,1000b888 <___vfiprintf_internal_r+0x564>
1000b884:	ad400044 	addi	r21,r21,1
1000b888:	9280008c 	andi	r10,r18,2
1000b88c:	50000126 	beq	r10,zero,1000b894 <___vfiprintf_internal_r+0x570>
1000b890:	ad400084 	addi	r21,r21,2
1000b894:	9580210c 	andi	r22,r18,132
1000b898:	b001751e 	bne	r22,zero,1000be70 <___vfiprintf_internal_r+0xb4c>
1000b89c:	d9012417 	ldw	r4,1168(sp)
1000b8a0:	2567c83a 	sub	r19,r4,r21
1000b8a4:	04c1720e 	bge	zero,r19,1000be70 <___vfiprintf_internal_r+0xb4c>
1000b8a8:	01c00404 	movi	r7,16
1000b8ac:	d8c11c17 	ldw	r3,1136(sp)
1000b8b0:	3cc36b0e 	bge	r7,r19,1000c660 <___vfiprintf_internal_r+0x133c>
1000b8b4:	00840074 	movhi	r2,4097
1000b8b8:	10953004 	addi	r2,r2,21696
1000b8bc:	dc012915 	stw	r16,1188(sp)
1000b8c0:	d9011b17 	ldw	r4,1132(sp)
1000b8c4:	9821883a 	mov	r16,r19
1000b8c8:	d8812615 	stw	r2,1176(sp)
1000b8cc:	030001c4 	movi	r12,7
1000b8d0:	5027883a 	mov	r19,r10
1000b8d4:	00000506 	br	1000b8ec <___vfiprintf_internal_r+0x5c8>
1000b8d8:	21400084 	addi	r5,r4,2
1000b8dc:	42000204 	addi	r8,r8,8
1000b8e0:	1009883a 	mov	r4,r2
1000b8e4:	843ffc04 	addi	r16,r16,-16
1000b8e8:	3c000d0e 	bge	r7,r16,1000b920 <___vfiprintf_internal_r+0x5fc>
1000b8ec:	18c00404 	addi	r3,r3,16
1000b8f0:	20800044 	addi	r2,r4,1
1000b8f4:	47000015 	stw	fp,0(r8)
1000b8f8:	41c00115 	stw	r7,4(r8)
1000b8fc:	d8c11c15 	stw	r3,1136(sp)
1000b900:	d8811b15 	stw	r2,1132(sp)
1000b904:	60bff40e 	bge	r12,r2,1000b8d8 <__alt_data_end+0xf800b8d8>
1000b908:	18014b1e 	bne	r3,zero,1000be38 <___vfiprintf_internal_r+0xb14>
1000b90c:	843ffc04 	addi	r16,r16,-16
1000b910:	0009883a 	mov	r4,zero
1000b914:	01400044 	movi	r5,1
1000b918:	d811883a 	mov	r8,sp
1000b91c:	3c3ff316 	blt	r7,r16,1000b8ec <__alt_data_end+0xf800b8ec>
1000b920:	9815883a 	mov	r10,r19
1000b924:	8027883a 	mov	r19,r16
1000b928:	dc012917 	ldw	r16,1188(sp)
1000b92c:	d9012617 	ldw	r4,1176(sp)
1000b930:	98c7883a 	add	r3,r19,r3
1000b934:	44c00115 	stw	r19,4(r8)
1000b938:	41000015 	stw	r4,0(r8)
1000b93c:	d8c11c15 	stw	r3,1136(sp)
1000b940:	d9411b15 	stw	r5,1132(sp)
1000b944:	008001c4 	movi	r2,7
1000b948:	11425116 	blt	r2,r5,1000c290 <___vfiprintf_internal_r+0xf6c>
1000b94c:	d9011d87 	ldb	r4,1142(sp)
1000b950:	42000204 	addi	r8,r8,8
1000b954:	28800044 	addi	r2,r5,1
1000b958:	20014a1e 	bne	r4,zero,1000be84 <___vfiprintf_internal_r+0xb60>
1000b95c:	50000c26 	beq	r10,zero,1000b990 <___vfiprintf_internal_r+0x66c>
1000b960:	d9011d04 	addi	r4,sp,1140
1000b964:	18c00084 	addi	r3,r3,2
1000b968:	41000015 	stw	r4,0(r8)
1000b96c:	01000084 	movi	r4,2
1000b970:	41000115 	stw	r4,4(r8)
1000b974:	d8c11c15 	stw	r3,1136(sp)
1000b978:	d8811b15 	stw	r2,1132(sp)
1000b97c:	010001c4 	movi	r4,7
1000b980:	20822016 	blt	r4,r2,1000c204 <___vfiprintf_internal_r+0xee0>
1000b984:	100b883a 	mov	r5,r2
1000b988:	42000204 	addi	r8,r8,8
1000b98c:	10800044 	addi	r2,r2,1
1000b990:	01002004 	movi	r4,128
1000b994:	b101de26 	beq	r22,r4,1000c110 <___vfiprintf_internal_r+0xdec>
1000b998:	8521c83a 	sub	r16,r16,r20
1000b99c:	0400230e 	bge	zero,r16,1000ba2c <___vfiprintf_internal_r+0x708>
1000b9a0:	04c00404 	movi	r19,16
1000b9a4:	9c030d0e 	bge	r19,r16,1000c5dc <___vfiprintf_internal_r+0x12b8>
1000b9a8:	00840074 	movhi	r2,4097
1000b9ac:	10952c04 	addi	r2,r2,21680
1000b9b0:	d8812615 	stw	r2,1176(sp)
1000b9b4:	058001c4 	movi	r22,7
1000b9b8:	00000506 	br	1000b9d0 <___vfiprintf_internal_r+0x6ac>
1000b9bc:	28800084 	addi	r2,r5,2
1000b9c0:	42000204 	addi	r8,r8,8
1000b9c4:	200b883a 	mov	r5,r4
1000b9c8:	843ffc04 	addi	r16,r16,-16
1000b9cc:	9c000d0e 	bge	r19,r16,1000ba04 <___vfiprintf_internal_r+0x6e0>
1000b9d0:	18c00404 	addi	r3,r3,16
1000b9d4:	29000044 	addi	r4,r5,1
1000b9d8:	44400015 	stw	r17,0(r8)
1000b9dc:	44c00115 	stw	r19,4(r8)
1000b9e0:	d8c11c15 	stw	r3,1136(sp)
1000b9e4:	d9011b15 	stw	r4,1132(sp)
1000b9e8:	b13ff40e 	bge	r22,r4,1000b9bc <__alt_data_end+0xf800b9bc>
1000b9ec:	1801321e 	bne	r3,zero,1000beb8 <___vfiprintf_internal_r+0xb94>
1000b9f0:	843ffc04 	addi	r16,r16,-16
1000b9f4:	000b883a 	mov	r5,zero
1000b9f8:	00800044 	movi	r2,1
1000b9fc:	d811883a 	mov	r8,sp
1000ba00:	9c3ff316 	blt	r19,r16,1000b9d0 <__alt_data_end+0xf800b9d0>
1000ba04:	d9012617 	ldw	r4,1176(sp)
1000ba08:	1c07883a 	add	r3,r3,r16
1000ba0c:	44000115 	stw	r16,4(r8)
1000ba10:	41000015 	stw	r4,0(r8)
1000ba14:	d8c11c15 	stw	r3,1136(sp)
1000ba18:	d8811b15 	stw	r2,1132(sp)
1000ba1c:	010001c4 	movi	r4,7
1000ba20:	20816216 	blt	r4,r2,1000bfac <___vfiprintf_internal_r+0xc88>
1000ba24:	42000204 	addi	r8,r8,8
1000ba28:	10800044 	addi	r2,r2,1
1000ba2c:	d9012217 	ldw	r4,1160(sp)
1000ba30:	1d07883a 	add	r3,r3,r20
1000ba34:	45000115 	stw	r20,4(r8)
1000ba38:	41000015 	stw	r4,0(r8)
1000ba3c:	d8c11c15 	stw	r3,1136(sp)
1000ba40:	d8811b15 	stw	r2,1132(sp)
1000ba44:	010001c4 	movi	r4,7
1000ba48:	2081610e 	bge	r4,r2,1000bfd0 <___vfiprintf_internal_r+0xcac>
1000ba4c:	1802211e 	bne	r3,zero,1000c2d4 <___vfiprintf_internal_r+0xfb0>
1000ba50:	d8011b15 	stw	zero,1132(sp)
1000ba54:	9480010c 	andi	r18,r18,4
1000ba58:	9002171e 	bne	r18,zero,1000c2b8 <___vfiprintf_internal_r+0xf94>
1000ba5c:	d9412417 	ldw	r5,1168(sp)
1000ba60:	a9433716 	blt	r21,r5,1000c740 <___vfiprintf_internal_r+0x141c>
1000ba64:	d8812517 	ldw	r2,1172(sp)
1000ba68:	1545883a 	add	r2,r2,r21
1000ba6c:	d8812515 	stw	r2,1172(sp)
1000ba70:	00019a06 	br	1000c0dc <___vfiprintf_internal_r+0xdb8>
1000ba74:	d8c12317 	ldw	r3,1164(sp)
1000ba78:	05400044 	movi	r21,1
1000ba7c:	9811883a 	mov	r8,r19
1000ba80:	18800017 	ldw	r2,0(r3)
1000ba84:	18c00104 	addi	r3,r3,4
1000ba88:	d8c12315 	stw	r3,1164(sp)
1000ba8c:	d8c10004 	addi	r3,sp,1024
1000ba90:	d8011d85 	stb	zero,1142(sp)
1000ba94:	d8810005 	stb	r2,1024(sp)
1000ba98:	a829883a 	mov	r20,r21
1000ba9c:	d8c12215 	stw	r3,1160(sp)
1000baa0:	0021883a 	mov	r16,zero
1000baa4:	003f7806 	br	1000b888 <__alt_data_end+0xf800b888>
1000baa8:	94800414 	ori	r18,r18,16
1000baac:	9080080c 	andi	r2,r18,32
1000bab0:	9811883a 	mov	r8,r19
1000bab4:	10009026 	beq	r2,zero,1000bcf8 <___vfiprintf_internal_r+0x9d4>
1000bab8:	d8812317 	ldw	r2,1164(sp)
1000babc:	d8c12317 	ldw	r3,1164(sp)
1000bac0:	14c00017 	ldw	r19,0(r2)
1000bac4:	15400117 	ldw	r21,4(r2)
1000bac8:	18c00204 	addi	r3,r3,8
1000bacc:	d8c12315 	stw	r3,1164(sp)
1000bad0:	0005883a 	mov	r2,zero
1000bad4:	9d46b03a 	or	r3,r19,r21
1000bad8:	d8011d85 	stb	zero,1142(sp)
1000badc:	8029883a 	mov	r20,r16
1000bae0:	002d883a 	mov	r22,zero
1000bae4:	003f4606 	br	1000b800 <__alt_data_end+0xf800b800>
1000bae8:	94800414 	ori	r18,r18,16
1000baec:	9080080c 	andi	r2,r18,32
1000baf0:	9811883a 	mov	r8,r19
1000baf4:	10006226 	beq	r2,zero,1000bc80 <___vfiprintf_internal_r+0x95c>
1000baf8:	d9012317 	ldw	r4,1164(sp)
1000bafc:	00800044 	movi	r2,1
1000bb00:	24c00017 	ldw	r19,0(r4)
1000bb04:	25400117 	ldw	r21,4(r4)
1000bb08:	21000204 	addi	r4,r4,8
1000bb0c:	d9012315 	stw	r4,1164(sp)
1000bb10:	9d46b03a 	or	r3,r19,r21
1000bb14:	003ff006 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000bb18:	b9800007 	ldb	r6,0(r23)
1000bb1c:	00801b04 	movi	r2,108
1000bb20:	3082b226 	beq	r6,r2,1000c5ec <___vfiprintf_internal_r+0x12c8>
1000bb24:	94800414 	ori	r18,r18,16
1000bb28:	003e5f06 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000bb2c:	d8c12203 	ldbu	r3,1160(sp)
1000bb30:	01040074 	movhi	r4,4097
1000bb34:	2114c604 	addi	r4,r4,21272
1000bb38:	d8c11d85 	stb	r3,1142(sp)
1000bb3c:	d9012715 	stw	r4,1180(sp)
1000bb40:	90c0080c 	andi	r3,r18,32
1000bb44:	9811883a 	mov	r8,r19
1000bb48:	d8812317 	ldw	r2,1164(sp)
1000bb4c:	18005f26 	beq	r3,zero,1000bccc <___vfiprintf_internal_r+0x9a8>
1000bb50:	d9012317 	ldw	r4,1164(sp)
1000bb54:	14c00017 	ldw	r19,0(r2)
1000bb58:	15400117 	ldw	r21,4(r2)
1000bb5c:	21000204 	addi	r4,r4,8
1000bb60:	d9012315 	stw	r4,1164(sp)
1000bb64:	9080004c 	andi	r2,r18,1
1000bb68:	1001e226 	beq	r2,zero,1000c2f4 <___vfiprintf_internal_r+0xfd0>
1000bb6c:	9d46b03a 	or	r3,r19,r21
1000bb70:	18024e26 	beq	r3,zero,1000c4ac <___vfiprintf_internal_r+0x1188>
1000bb74:	00800c04 	movi	r2,48
1000bb78:	d8811d05 	stb	r2,1140(sp)
1000bb7c:	d9811d45 	stb	r6,1141(sp)
1000bb80:	94800094 	ori	r18,r18,2
1000bb84:	00800084 	movi	r2,2
1000bb88:	003fd306 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000bb8c:	d9012317 	ldw	r4,1164(sp)
1000bb90:	d9412317 	ldw	r5,1164(sp)
1000bb94:	21000017 	ldw	r4,0(r4)
1000bb98:	28800104 	addi	r2,r5,4
1000bb9c:	d9012415 	stw	r4,1168(sp)
1000bba0:	203eeb16 	blt	r4,zero,1000b750 <__alt_data_end+0xf800b750>
1000bba4:	d8812315 	stw	r2,1164(sp)
1000bba8:	b9800007 	ldb	r6,0(r23)
1000bbac:	003e3e06 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000bbb0:	b9800007 	ldb	r6,0(r23)
1000bbb4:	01000a84 	movi	r4,42
1000bbb8:	b8800044 	addi	r2,r23,1
1000bbbc:	3102d226 	beq	r6,r4,1000c708 <___vfiprintf_internal_r+0x13e4>
1000bbc0:	35bff404 	addi	r22,r6,-48
1000bbc4:	102f883a 	mov	r23,r2
1000bbc8:	0021883a 	mov	r16,zero
1000bbcc:	adbe3736 	bltu	r21,r22,1000b4ac <__alt_data_end+0xf800b4ac>
1000bbd0:	0009883a 	mov	r4,zero
1000bbd4:	01400284 	movi	r5,10
1000bbd8:	0003c5c0 	call	10003c5c <__mulsi3>
1000bbdc:	b9800007 	ldb	r6,0(r23)
1000bbe0:	b089883a 	add	r4,r22,r2
1000bbe4:	bdc00044 	addi	r23,r23,1
1000bbe8:	35bff404 	addi	r22,r6,-48
1000bbec:	adbff92e 	bgeu	r21,r22,1000bbd4 <__alt_data_end+0xf800bbd4>
1000bbf0:	2021883a 	mov	r16,r4
1000bbf4:	203e2d0e 	bge	r4,zero,1000b4ac <__alt_data_end+0xf800b4ac>
1000bbf8:	043fffc4 	movi	r16,-1
1000bbfc:	003e2b06 	br	1000b4ac <__alt_data_end+0xf800b4ac>
1000bc00:	94801014 	ori	r18,r18,64
1000bc04:	b9800007 	ldb	r6,0(r23)
1000bc08:	003e2706 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000bc0c:	94800814 	ori	r18,r18,32
1000bc10:	b9800007 	ldb	r6,0(r23)
1000bc14:	003e2406 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000bc18:	d9412317 	ldw	r5,1164(sp)
1000bc1c:	d8812317 	ldw	r2,1164(sp)
1000bc20:	d8011d85 	stb	zero,1142(sp)
1000bc24:	29400017 	ldw	r5,0(r5)
1000bc28:	9811883a 	mov	r8,r19
1000bc2c:	14c00104 	addi	r19,r2,4
1000bc30:	d9412215 	stw	r5,1160(sp)
1000bc34:	28029026 	beq	r5,zero,1000c678 <___vfiprintf_internal_r+0x1354>
1000bc38:	d9012217 	ldw	r4,1160(sp)
1000bc3c:	80027616 	blt	r16,zero,1000c618 <___vfiprintf_internal_r+0x12f4>
1000bc40:	000b883a 	mov	r5,zero
1000bc44:	800d883a 	mov	r6,r16
1000bc48:	da012a15 	stw	r8,1192(sp)
1000bc4c:	00094e00 	call	100094e0 <memchr>
1000bc50:	da012a17 	ldw	r8,1192(sp)
1000bc54:	1002a026 	beq	r2,zero,1000c6d8 <___vfiprintf_internal_r+0x13b4>
1000bc58:	d8c12217 	ldw	r3,1160(sp)
1000bc5c:	10e9c83a 	sub	r20,r2,r3
1000bc60:	85023816 	blt	r16,r20,1000c544 <___vfiprintf_internal_r+0x1220>
1000bc64:	dd811d83 	ldbu	r22,1142(sp)
1000bc68:	dcc12315 	stw	r19,1164(sp)
1000bc6c:	0021883a 	mov	r16,zero
1000bc70:	003efd06 	br	1000b868 <__alt_data_end+0xf800b868>
1000bc74:	9080080c 	andi	r2,r18,32
1000bc78:	9811883a 	mov	r8,r19
1000bc7c:	103f9e1e 	bne	r2,zero,1000baf8 <__alt_data_end+0xf800baf8>
1000bc80:	9080040c 	andi	r2,r18,16
1000bc84:	10021726 	beq	r2,zero,1000c4e4 <___vfiprintf_internal_r+0x11c0>
1000bc88:	d9412317 	ldw	r5,1164(sp)
1000bc8c:	002b883a 	mov	r21,zero
1000bc90:	00800044 	movi	r2,1
1000bc94:	2cc00017 	ldw	r19,0(r5)
1000bc98:	29400104 	addi	r5,r5,4
1000bc9c:	d9412315 	stw	r5,1164(sp)
1000bca0:	9807883a 	mov	r3,r19
1000bca4:	003f8c06 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000bca8:	d8c12203 	ldbu	r3,1160(sp)
1000bcac:	01040074 	movhi	r4,4097
1000bcb0:	2114cb04 	addi	r4,r4,21292
1000bcb4:	d8c11d85 	stb	r3,1142(sp)
1000bcb8:	d9012715 	stw	r4,1180(sp)
1000bcbc:	90c0080c 	andi	r3,r18,32
1000bcc0:	9811883a 	mov	r8,r19
1000bcc4:	d8812317 	ldw	r2,1164(sp)
1000bcc8:	183fa11e 	bne	r3,zero,1000bb50 <__alt_data_end+0xf800bb50>
1000bccc:	90c0040c 	andi	r3,r18,16
1000bcd0:	1801e526 	beq	r3,zero,1000c468 <___vfiprintf_internal_r+0x1144>
1000bcd4:	d9412317 	ldw	r5,1164(sp)
1000bcd8:	14c00017 	ldw	r19,0(r2)
1000bcdc:	002b883a 	mov	r21,zero
1000bce0:	29400104 	addi	r5,r5,4
1000bce4:	d9412315 	stw	r5,1164(sp)
1000bce8:	003f9e06 	br	1000bb64 <__alt_data_end+0xf800bb64>
1000bcec:	9080080c 	andi	r2,r18,32
1000bcf0:	9811883a 	mov	r8,r19
1000bcf4:	103f701e 	bne	r2,zero,1000bab8 <__alt_data_end+0xf800bab8>
1000bcf8:	9080040c 	andi	r2,r18,16
1000bcfc:	1001ef26 	beq	r2,zero,1000c4bc <___vfiprintf_internal_r+0x1198>
1000bd00:	d9012317 	ldw	r4,1164(sp)
1000bd04:	002b883a 	mov	r21,zero
1000bd08:	0005883a 	mov	r2,zero
1000bd0c:	24c00017 	ldw	r19,0(r4)
1000bd10:	21000104 	addi	r4,r4,4
1000bd14:	d9012315 	stw	r4,1164(sp)
1000bd18:	9807883a 	mov	r3,r19
1000bd1c:	003f6e06 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000bd20:	d8c12317 	ldw	r3,1164(sp)
1000bd24:	9811883a 	mov	r8,r19
1000bd28:	00800c04 	movi	r2,48
1000bd2c:	1cc00017 	ldw	r19,0(r3)
1000bd30:	01040074 	movhi	r4,4097
1000bd34:	18c00104 	addi	r3,r3,4
1000bd38:	d8811d05 	stb	r2,1140(sp)
1000bd3c:	2114cb04 	addi	r4,r4,21292
1000bd40:	00801e04 	movi	r2,120
1000bd44:	d8811d45 	stb	r2,1141(sp)
1000bd48:	d8c12315 	stw	r3,1164(sp)
1000bd4c:	002b883a 	mov	r21,zero
1000bd50:	94800094 	ori	r18,r18,2
1000bd54:	d9012715 	stw	r4,1180(sp)
1000bd58:	00800084 	movi	r2,2
1000bd5c:	9807883a 	mov	r3,r19
1000bd60:	003f5d06 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000bd64:	d8c12203 	ldbu	r3,1160(sp)
1000bd68:	9080080c 	andi	r2,r18,32
1000bd6c:	9811883a 	mov	r8,r19
1000bd70:	d8c11d85 	stb	r3,1142(sp)
1000bd74:	1001b126 	beq	r2,zero,1000c43c <___vfiprintf_internal_r+0x1118>
1000bd78:	d9012317 	ldw	r4,1164(sp)
1000bd7c:	d9412517 	ldw	r5,1172(sp)
1000bd80:	20800017 	ldw	r2,0(r4)
1000bd84:	2807d7fa 	srai	r3,r5,31
1000bd88:	21000104 	addi	r4,r4,4
1000bd8c:	d9012315 	stw	r4,1164(sp)
1000bd90:	11400015 	stw	r5,0(r2)
1000bd94:	10c00115 	stw	r3,4(r2)
1000bd98:	003d9a06 	br	1000b404 <__alt_data_end+0xf800b404>
1000bd9c:	d8812207 	ldb	r2,1160(sp)
1000bda0:	1001c41e 	bne	r2,zero,1000c4b4 <___vfiprintf_internal_r+0x1190>
1000bda4:	00c00804 	movi	r3,32
1000bda8:	d8c12205 	stb	r3,1160(sp)
1000bdac:	b9800007 	ldb	r6,0(r23)
1000bdb0:	003dbd06 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000bdb4:	00c00ac4 	movi	r3,43
1000bdb8:	d8c12205 	stb	r3,1160(sp)
1000bdbc:	b9800007 	ldb	r6,0(r23)
1000bdc0:	003db906 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000bdc4:	d8c12203 	ldbu	r3,1160(sp)
1000bdc8:	9080080c 	andi	r2,r18,32
1000bdcc:	9811883a 	mov	r8,r19
1000bdd0:	d8c11d85 	stb	r3,1142(sp)
1000bdd4:	d8c12317 	ldw	r3,1164(sp)
1000bdd8:	103e7e1e 	bne	r2,zero,1000b7d4 <__alt_data_end+0xf800b7d4>
1000bddc:	9080040c 	andi	r2,r18,16
1000bde0:	1001a926 	beq	r2,zero,1000c488 <___vfiprintf_internal_r+0x1164>
1000bde4:	1cc00017 	ldw	r19,0(r3)
1000bde8:	d9412317 	ldw	r5,1164(sp)
1000bdec:	982bd7fa 	srai	r21,r19,31
1000bdf0:	29400104 	addi	r5,r5,4
1000bdf4:	d9412315 	stw	r5,1164(sp)
1000bdf8:	a805883a 	mov	r2,r21
1000bdfc:	003e7b06 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000be00:	94800054 	ori	r18,r18,1
1000be04:	b9800007 	ldb	r6,0(r23)
1000be08:	003da706 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000be0c:	d8c12203 	ldbu	r3,1160(sp)
1000be10:	9811883a 	mov	r8,r19
1000be14:	d8c11d85 	stb	r3,1142(sp)
1000be18:	30005826 	beq	r6,zero,1000bf7c <___vfiprintf_internal_r+0xc58>
1000be1c:	05400044 	movi	r21,1
1000be20:	d8c10004 	addi	r3,sp,1024
1000be24:	d9810005 	stb	r6,1024(sp)
1000be28:	d8011d85 	stb	zero,1142(sp)
1000be2c:	a829883a 	mov	r20,r21
1000be30:	d8c12215 	stw	r3,1160(sp)
1000be34:	003f1a06 	br	1000baa0 <__alt_data_end+0xf800baa0>
1000be38:	d9012117 	ldw	r4,1156(sp)
1000be3c:	d9412017 	ldw	r5,1152(sp)
1000be40:	d9811a04 	addi	r6,sp,1128
1000be44:	d9c12a15 	stw	r7,1192(sp)
1000be48:	db012b15 	stw	r12,1196(sp)
1000be4c:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000be50:	d9c12a17 	ldw	r7,1192(sp)
1000be54:	db012b17 	ldw	r12,1196(sp)
1000be58:	10004e1e 	bne	r2,zero,1000bf94 <___vfiprintf_internal_r+0xc70>
1000be5c:	d9011b17 	ldw	r4,1132(sp)
1000be60:	d8c11c17 	ldw	r3,1136(sp)
1000be64:	d811883a 	mov	r8,sp
1000be68:	21400044 	addi	r5,r4,1
1000be6c:	003e9d06 	br	1000b8e4 <__alt_data_end+0xf800b8e4>
1000be70:	d9411b17 	ldw	r5,1132(sp)
1000be74:	d8c11c17 	ldw	r3,1136(sp)
1000be78:	28800044 	addi	r2,r5,1
1000be7c:	d9011d87 	ldb	r4,1142(sp)
1000be80:	203eb626 	beq	r4,zero,1000b95c <__alt_data_end+0xf800b95c>
1000be84:	01000044 	movi	r4,1
1000be88:	d9411d84 	addi	r5,sp,1142
1000be8c:	1907883a 	add	r3,r3,r4
1000be90:	41400015 	stw	r5,0(r8)
1000be94:	41000115 	stw	r4,4(r8)
1000be98:	d8c11c15 	stw	r3,1136(sp)
1000be9c:	d8811b15 	stw	r2,1132(sp)
1000bea0:	014001c4 	movi	r5,7
1000bea4:	2880ce16 	blt	r5,r2,1000c1e0 <___vfiprintf_internal_r+0xebc>
1000bea8:	100b883a 	mov	r5,r2
1000beac:	42000204 	addi	r8,r8,8
1000beb0:	10800044 	addi	r2,r2,1
1000beb4:	003ea906 	br	1000b95c <__alt_data_end+0xf800b95c>
1000beb8:	d9012117 	ldw	r4,1156(sp)
1000bebc:	d9412017 	ldw	r5,1152(sp)
1000bec0:	d9811a04 	addi	r6,sp,1128
1000bec4:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000bec8:	1000321e 	bne	r2,zero,1000bf94 <___vfiprintf_internal_r+0xc70>
1000becc:	d9411b17 	ldw	r5,1132(sp)
1000bed0:	d8c11c17 	ldw	r3,1136(sp)
1000bed4:	d811883a 	mov	r8,sp
1000bed8:	28800044 	addi	r2,r5,1
1000bedc:	003eba06 	br	1000b9c8 <__alt_data_end+0xf800b9c8>
1000bee0:	10803fcc 	andi	r2,r2,255
1000bee4:	00c00044 	movi	r3,1
1000bee8:	10fe4d1e 	bne	r2,r3,1000b820 <__alt_data_end+0xf800b820>
1000beec:	a800021e 	bne	r21,zero,1000bef8 <___vfiprintf_internal_r+0xbd4>
1000bef0:	00800244 	movi	r2,9
1000bef4:	14c01b2e 	bgeu	r2,r19,1000bf64 <___vfiprintf_internal_r+0xc40>
1000bef8:	dc012215 	stw	r16,1160(sp)
1000befc:	dd010a04 	addi	r20,sp,1064
1000bf00:	a821883a 	mov	r16,r21
1000bf04:	402b883a 	mov	r21,r8
1000bf08:	9809883a 	mov	r4,r19
1000bf0c:	800b883a 	mov	r5,r16
1000bf10:	01800284 	movi	r6,10
1000bf14:	000f883a 	mov	r7,zero
1000bf18:	000d8040 	call	1000d804 <__umoddi3>
1000bf1c:	10800c04 	addi	r2,r2,48
1000bf20:	a53fffc4 	addi	r20,r20,-1
1000bf24:	9809883a 	mov	r4,r19
1000bf28:	800b883a 	mov	r5,r16
1000bf2c:	01800284 	movi	r6,10
1000bf30:	000f883a 	mov	r7,zero
1000bf34:	a0800005 	stb	r2,0(r20)
1000bf38:	000d1c40 	call	1000d1c4 <__udivdi3>
1000bf3c:	1027883a 	mov	r19,r2
1000bf40:	10c4b03a 	or	r2,r2,r3
1000bf44:	1821883a 	mov	r16,r3
1000bf48:	103fef1e 	bne	r2,zero,1000bf08 <__alt_data_end+0xf800bf08>
1000bf4c:	d9011e17 	ldw	r4,1144(sp)
1000bf50:	dc012217 	ldw	r16,1160(sp)
1000bf54:	a811883a 	mov	r8,r21
1000bf58:	dd012215 	stw	r20,1160(sp)
1000bf5c:	2529c83a 	sub	r20,r4,r20
1000bf60:	003e4106 	br	1000b868 <__alt_data_end+0xf800b868>
1000bf64:	9cc00c04 	addi	r19,r19,48
1000bf68:	d8c109c4 	addi	r3,sp,1063
1000bf6c:	dcc109c5 	stb	r19,1063(sp)
1000bf70:	dd012817 	ldw	r20,1184(sp)
1000bf74:	d8c12215 	stw	r3,1160(sp)
1000bf78:	003e3b06 	br	1000b868 <__alt_data_end+0xf800b868>
1000bf7c:	d8811c17 	ldw	r2,1136(sp)
1000bf80:	10000426 	beq	r2,zero,1000bf94 <___vfiprintf_internal_r+0xc70>
1000bf84:	d9012117 	ldw	r4,1156(sp)
1000bf88:	d9412017 	ldw	r5,1152(sp)
1000bf8c:	d9811a04 	addi	r6,sp,1128
1000bf90:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000bf94:	d9412017 	ldw	r5,1152(sp)
1000bf98:	2880030b 	ldhu	r2,12(r5)
1000bf9c:	1080100c 	andi	r2,r2,64
1000bfa0:	103ddc1e 	bne	r2,zero,1000b714 <__alt_data_end+0xf800b714>
1000bfa4:	d8812517 	ldw	r2,1172(sp)
1000bfa8:	003ddb06 	br	1000b718 <__alt_data_end+0xf800b718>
1000bfac:	1801061e 	bne	r3,zero,1000c3c8 <___vfiprintf_internal_r+0x10a4>
1000bfb0:	d8c12217 	ldw	r3,1160(sp)
1000bfb4:	00800044 	movi	r2,1
1000bfb8:	dd000115 	stw	r20,4(sp)
1000bfbc:	d8c00015 	stw	r3,0(sp)
1000bfc0:	dd011c15 	stw	r20,1136(sp)
1000bfc4:	d8811b15 	stw	r2,1132(sp)
1000bfc8:	a007883a 	mov	r3,r20
1000bfcc:	d811883a 	mov	r8,sp
1000bfd0:	42000204 	addi	r8,r8,8
1000bfd4:	9480010c 	andi	r18,r18,4
1000bfd8:	90003426 	beq	r18,zero,1000c0ac <___vfiprintf_internal_r+0xd88>
1000bfdc:	d9412417 	ldw	r5,1168(sp)
1000bfe0:	2d65c83a 	sub	r18,r5,r21
1000bfe4:	0480310e 	bge	zero,r18,1000c0ac <___vfiprintf_internal_r+0xd88>
1000bfe8:	04000404 	movi	r16,16
1000bfec:	8481ad0e 	bge	r16,r18,1000c6a4 <___vfiprintf_internal_r+0x1380>
1000bff0:	01440074 	movhi	r5,4097
1000bff4:	29553004 	addi	r5,r5,21696
1000bff8:	d9011b17 	ldw	r4,1132(sp)
1000bffc:	d9412615 	stw	r5,1176(sp)
1000c000:	04c001c4 	movi	r19,7
1000c004:	dd012117 	ldw	r20,1156(sp)
1000c008:	dd812017 	ldw	r22,1152(sp)
1000c00c:	00000506 	br	1000c024 <___vfiprintf_internal_r+0xd00>
1000c010:	21400084 	addi	r5,r4,2
1000c014:	42000204 	addi	r8,r8,8
1000c018:	1009883a 	mov	r4,r2
1000c01c:	94bffc04 	addi	r18,r18,-16
1000c020:	84800d0e 	bge	r16,r18,1000c058 <___vfiprintf_internal_r+0xd34>
1000c024:	18c00404 	addi	r3,r3,16
1000c028:	20800044 	addi	r2,r4,1
1000c02c:	47000015 	stw	fp,0(r8)
1000c030:	44000115 	stw	r16,4(r8)
1000c034:	d8c11c15 	stw	r3,1136(sp)
1000c038:	d8811b15 	stw	r2,1132(sp)
1000c03c:	98bff40e 	bge	r19,r2,1000c010 <__alt_data_end+0xf800c010>
1000c040:	1800291e 	bne	r3,zero,1000c0e8 <___vfiprintf_internal_r+0xdc4>
1000c044:	94bffc04 	addi	r18,r18,-16
1000c048:	0009883a 	mov	r4,zero
1000c04c:	01400044 	movi	r5,1
1000c050:	d811883a 	mov	r8,sp
1000c054:	84bff316 	blt	r16,r18,1000c024 <__alt_data_end+0xf800c024>
1000c058:	d8812617 	ldw	r2,1176(sp)
1000c05c:	1c87883a 	add	r3,r3,r18
1000c060:	44800115 	stw	r18,4(r8)
1000c064:	40800015 	stw	r2,0(r8)
1000c068:	d8c11c15 	stw	r3,1136(sp)
1000c06c:	d9411b15 	stw	r5,1132(sp)
1000c070:	008001c4 	movi	r2,7
1000c074:	11400d0e 	bge	r2,r5,1000c0ac <___vfiprintf_internal_r+0xd88>
1000c078:	1800061e 	bne	r3,zero,1000c094 <___vfiprintf_internal_r+0xd70>
1000c07c:	d8c12417 	ldw	r3,1168(sp)
1000c080:	a8c12e16 	blt	r21,r3,1000c53c <___vfiprintf_internal_r+0x1218>
1000c084:	d9012517 	ldw	r4,1172(sp)
1000c088:	2549883a 	add	r4,r4,r21
1000c08c:	d9012515 	stw	r4,1172(sp)
1000c090:	00001206 	br	1000c0dc <___vfiprintf_internal_r+0xdb8>
1000c094:	d9012117 	ldw	r4,1156(sp)
1000c098:	d9412017 	ldw	r5,1152(sp)
1000c09c:	d9811a04 	addi	r6,sp,1128
1000c0a0:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c0a4:	103fbb1e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c0a8:	d8c11c17 	ldw	r3,1136(sp)
1000c0ac:	d8812417 	ldw	r2,1168(sp)
1000c0b0:	a880010e 	bge	r21,r2,1000c0b8 <___vfiprintf_internal_r+0xd94>
1000c0b4:	102b883a 	mov	r21,r2
1000c0b8:	d9012517 	ldw	r4,1172(sp)
1000c0bc:	2549883a 	add	r4,r4,r21
1000c0c0:	d9012515 	stw	r4,1172(sp)
1000c0c4:	18000526 	beq	r3,zero,1000c0dc <___vfiprintf_internal_r+0xdb8>
1000c0c8:	d9012117 	ldw	r4,1156(sp)
1000c0cc:	d9412017 	ldw	r5,1152(sp)
1000c0d0:	d9811a04 	addi	r6,sp,1128
1000c0d4:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c0d8:	103fae1e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c0dc:	d8011b15 	stw	zero,1132(sp)
1000c0e0:	d811883a 	mov	r8,sp
1000c0e4:	003cc706 	br	1000b404 <__alt_data_end+0xf800b404>
1000c0e8:	a009883a 	mov	r4,r20
1000c0ec:	b00b883a 	mov	r5,r22
1000c0f0:	d9811a04 	addi	r6,sp,1128
1000c0f4:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c0f8:	103fa61e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c0fc:	d9011b17 	ldw	r4,1132(sp)
1000c100:	d8c11c17 	ldw	r3,1136(sp)
1000c104:	d811883a 	mov	r8,sp
1000c108:	21400044 	addi	r5,r4,1
1000c10c:	003fc306 	br	1000c01c <__alt_data_end+0xf800c01c>
1000c110:	d9012417 	ldw	r4,1168(sp)
1000c114:	256dc83a 	sub	r22,r4,r21
1000c118:	05be1f0e 	bge	zero,r22,1000b998 <__alt_data_end+0xf800b998>
1000c11c:	04c00404 	movi	r19,16
1000c120:	9d81720e 	bge	r19,r22,1000c6ec <___vfiprintf_internal_r+0x13c8>
1000c124:	00840074 	movhi	r2,4097
1000c128:	10952c04 	addi	r2,r2,21680
1000c12c:	d8812615 	stw	r2,1176(sp)
1000c130:	028001c4 	movi	r10,7
1000c134:	00000506 	br	1000c14c <___vfiprintf_internal_r+0xe28>
1000c138:	29000084 	addi	r4,r5,2
1000c13c:	42000204 	addi	r8,r8,8
1000c140:	100b883a 	mov	r5,r2
1000c144:	b5bffc04 	addi	r22,r22,-16
1000c148:	9d800d0e 	bge	r19,r22,1000c180 <___vfiprintf_internal_r+0xe5c>
1000c14c:	18c00404 	addi	r3,r3,16
1000c150:	28800044 	addi	r2,r5,1
1000c154:	44400015 	stw	r17,0(r8)
1000c158:	44c00115 	stw	r19,4(r8)
1000c15c:	d8c11c15 	stw	r3,1136(sp)
1000c160:	d8811b15 	stw	r2,1132(sp)
1000c164:	50bff40e 	bge	r10,r2,1000c138 <__alt_data_end+0xf800c138>
1000c168:	1800111e 	bne	r3,zero,1000c1b0 <___vfiprintf_internal_r+0xe8c>
1000c16c:	b5bffc04 	addi	r22,r22,-16
1000c170:	000b883a 	mov	r5,zero
1000c174:	01000044 	movi	r4,1
1000c178:	d811883a 	mov	r8,sp
1000c17c:	9dbff316 	blt	r19,r22,1000c14c <__alt_data_end+0xf800c14c>
1000c180:	d9412617 	ldw	r5,1176(sp)
1000c184:	1d87883a 	add	r3,r3,r22
1000c188:	45800115 	stw	r22,4(r8)
1000c18c:	41400015 	stw	r5,0(r8)
1000c190:	d8c11c15 	stw	r3,1136(sp)
1000c194:	d9011b15 	stw	r4,1132(sp)
1000c198:	008001c4 	movi	r2,7
1000c19c:	11008516 	blt	r2,r4,1000c3b4 <___vfiprintf_internal_r+0x1090>
1000c1a0:	42000204 	addi	r8,r8,8
1000c1a4:	20800044 	addi	r2,r4,1
1000c1a8:	200b883a 	mov	r5,r4
1000c1ac:	003dfa06 	br	1000b998 <__alt_data_end+0xf800b998>
1000c1b0:	d9012117 	ldw	r4,1156(sp)
1000c1b4:	d9412017 	ldw	r5,1152(sp)
1000c1b8:	d9811a04 	addi	r6,sp,1128
1000c1bc:	da812a15 	stw	r10,1192(sp)
1000c1c0:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c1c4:	da812a17 	ldw	r10,1192(sp)
1000c1c8:	103f721e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c1cc:	d9411b17 	ldw	r5,1132(sp)
1000c1d0:	d8c11c17 	ldw	r3,1136(sp)
1000c1d4:	d811883a 	mov	r8,sp
1000c1d8:	29000044 	addi	r4,r5,1
1000c1dc:	003fd906 	br	1000c144 <__alt_data_end+0xf800c144>
1000c1e0:	1800681e 	bne	r3,zero,1000c384 <___vfiprintf_internal_r+0x1060>
1000c1e4:	50004d26 	beq	r10,zero,1000c31c <___vfiprintf_internal_r+0xff8>
1000c1e8:	d8811d04 	addi	r2,sp,1140
1000c1ec:	00c00084 	movi	r3,2
1000c1f0:	d8800015 	stw	r2,0(sp)
1000c1f4:	d8c00115 	stw	r3,4(sp)
1000c1f8:	2005883a 	mov	r2,r4
1000c1fc:	d811883a 	mov	r8,sp
1000c200:	003de006 	br	1000b984 <__alt_data_end+0xf800b984>
1000c204:	1800551e 	bne	r3,zero,1000c35c <___vfiprintf_internal_r+0x1038>
1000c208:	000b883a 	mov	r5,zero
1000c20c:	00800044 	movi	r2,1
1000c210:	d811883a 	mov	r8,sp
1000c214:	003dde06 	br	1000b990 <__alt_data_end+0xf800b990>
1000c218:	10803fcc 	andi	r2,r2,255
1000c21c:	1000191e 	bne	r2,zero,1000c284 <___vfiprintf_internal_r+0xf60>
1000c220:	9080004c 	andi	r2,r18,1
1000c224:	10001726 	beq	r2,zero,1000c284 <___vfiprintf_internal_r+0xf60>
1000c228:	00800c04 	movi	r2,48
1000c22c:	d8c109c4 	addi	r3,sp,1063
1000c230:	d88109c5 	stb	r2,1063(sp)
1000c234:	dd012817 	ldw	r20,1184(sp)
1000c238:	d8c12215 	stw	r3,1160(sp)
1000c23c:	003d8a06 	br	1000b868 <__alt_data_end+0xf800b868>
1000c240:	d9012717 	ldw	r4,1180(sp)
1000c244:	dd010a04 	addi	r20,sp,1064
1000c248:	988003cc 	andi	r2,r19,15
1000c24c:	a806973a 	slli	r3,r21,28
1000c250:	2085883a 	add	r2,r4,r2
1000c254:	9826d13a 	srli	r19,r19,4
1000c258:	10800003 	ldbu	r2,0(r2)
1000c25c:	a82ad13a 	srli	r21,r21,4
1000c260:	a53fffc4 	addi	r20,r20,-1
1000c264:	1ce6b03a 	or	r19,r3,r19
1000c268:	a0800005 	stb	r2,0(r20)
1000c26c:	9d44b03a 	or	r2,r19,r21
1000c270:	103ff51e 	bne	r2,zero,1000c248 <__alt_data_end+0xf800c248>
1000c274:	d9411e17 	ldw	r5,1144(sp)
1000c278:	dd012215 	stw	r20,1160(sp)
1000c27c:	2d29c83a 	sub	r20,r5,r20
1000c280:	003d7906 	br	1000b868 <__alt_data_end+0xf800b868>
1000c284:	d8c10a04 	addi	r3,sp,1064
1000c288:	d8c12215 	stw	r3,1160(sp)
1000c28c:	003d7606 	br	1000b868 <__alt_data_end+0xf800b868>
1000c290:	18009e1e 	bne	r3,zero,1000c50c <___vfiprintf_internal_r+0x11e8>
1000c294:	d8811d87 	ldb	r2,1142(sp)
1000c298:	10005f26 	beq	r2,zero,1000c418 <___vfiprintf_internal_r+0x10f4>
1000c29c:	00c00044 	movi	r3,1
1000c2a0:	d9011d84 	addi	r4,sp,1142
1000c2a4:	1805883a 	mov	r2,r3
1000c2a8:	d9000015 	stw	r4,0(sp)
1000c2ac:	d8c00115 	stw	r3,4(sp)
1000c2b0:	d811883a 	mov	r8,sp
1000c2b4:	003efc06 	br	1000bea8 <__alt_data_end+0xf800bea8>
1000c2b8:	d9412417 	ldw	r5,1168(sp)
1000c2bc:	d811883a 	mov	r8,sp
1000c2c0:	2d65c83a 	sub	r18,r5,r21
1000c2c4:	04bf4816 	blt	zero,r18,1000bfe8 <__alt_data_end+0xf800bfe8>
1000c2c8:	003f6c06 	br	1000c07c <__alt_data_end+0xf800c07c>
1000c2cc:	b829883a 	mov	r20,r23
1000c2d0:	003c6906 	br	1000b478 <__alt_data_end+0xf800b478>
1000c2d4:	d9012117 	ldw	r4,1156(sp)
1000c2d8:	d9412017 	ldw	r5,1152(sp)
1000c2dc:	d9811a04 	addi	r6,sp,1128
1000c2e0:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c2e4:	103f2b1e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c2e8:	d8c11c17 	ldw	r3,1136(sp)
1000c2ec:	d811883a 	mov	r8,sp
1000c2f0:	003f3806 	br	1000bfd4 <__alt_data_end+0xf800bfd4>
1000c2f4:	00800084 	movi	r2,2
1000c2f8:	9d46b03a 	or	r3,r19,r21
1000c2fc:	003df606 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000c300:	d9012117 	ldw	r4,1156(sp)
1000c304:	d9412017 	ldw	r5,1152(sp)
1000c308:	d9811a04 	addi	r6,sp,1128
1000c30c:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c310:	103f201e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c314:	d811883a 	mov	r8,sp
1000c318:	003cc606 	br	1000b634 <__alt_data_end+0xf800b634>
1000c31c:	000b883a 	mov	r5,zero
1000c320:	2005883a 	mov	r2,r4
1000c324:	d811883a 	mov	r8,sp
1000c328:	003d9906 	br	1000b990 <__alt_data_end+0xf800b990>
1000c32c:	10803fcc 	andi	r2,r2,255
1000c330:	1080201c 	xori	r2,r2,128
1000c334:	10bfe004 	addi	r2,r2,-128
1000c338:	01000c04 	movi	r4,48
1000c33c:	1100b226 	beq	r2,r4,1000c608 <___vfiprintf_internal_r+0x12e4>
1000c340:	d9412217 	ldw	r5,1160(sp)
1000c344:	d8811e17 	ldw	r2,1144(sp)
1000c348:	193fffc5 	stb	r4,-1(r3)
1000c34c:	297fffc4 	addi	r5,r5,-1
1000c350:	d9412215 	stw	r5,1160(sp)
1000c354:	1169c83a 	sub	r20,r2,r5
1000c358:	003d4306 	br	1000b868 <__alt_data_end+0xf800b868>
1000c35c:	d9012117 	ldw	r4,1156(sp)
1000c360:	d9412017 	ldw	r5,1152(sp)
1000c364:	d9811a04 	addi	r6,sp,1128
1000c368:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c36c:	103f091e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c370:	d9411b17 	ldw	r5,1132(sp)
1000c374:	d8c11c17 	ldw	r3,1136(sp)
1000c378:	d811883a 	mov	r8,sp
1000c37c:	28800044 	addi	r2,r5,1
1000c380:	003d8306 	br	1000b990 <__alt_data_end+0xf800b990>
1000c384:	d9012117 	ldw	r4,1156(sp)
1000c388:	d9412017 	ldw	r5,1152(sp)
1000c38c:	d9811a04 	addi	r6,sp,1128
1000c390:	da812a15 	stw	r10,1192(sp)
1000c394:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c398:	da812a17 	ldw	r10,1192(sp)
1000c39c:	103efd1e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c3a0:	d9411b17 	ldw	r5,1132(sp)
1000c3a4:	d8c11c17 	ldw	r3,1136(sp)
1000c3a8:	d811883a 	mov	r8,sp
1000c3ac:	28800044 	addi	r2,r5,1
1000c3b0:	003d6a06 	br	1000b95c <__alt_data_end+0xf800b95c>
1000c3b4:	1800a01e 	bne	r3,zero,1000c638 <___vfiprintf_internal_r+0x1314>
1000c3b8:	000b883a 	mov	r5,zero
1000c3bc:	00800044 	movi	r2,1
1000c3c0:	d811883a 	mov	r8,sp
1000c3c4:	003d7406 	br	1000b998 <__alt_data_end+0xf800b998>
1000c3c8:	d9012117 	ldw	r4,1156(sp)
1000c3cc:	d9412017 	ldw	r5,1152(sp)
1000c3d0:	d9811a04 	addi	r6,sp,1128
1000c3d4:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c3d8:	103eee1e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c3dc:	d8811b17 	ldw	r2,1132(sp)
1000c3e0:	d8c11c17 	ldw	r3,1136(sp)
1000c3e4:	d811883a 	mov	r8,sp
1000c3e8:	10800044 	addi	r2,r2,1
1000c3ec:	003d8f06 	br	1000ba2c <__alt_data_end+0xf800ba2c>
1000c3f0:	04e7c83a 	sub	r19,zero,r19
1000c3f4:	9804c03a 	cmpne	r2,r19,zero
1000c3f8:	056bc83a 	sub	r21,zero,r21
1000c3fc:	a8abc83a 	sub	r21,r21,r2
1000c400:	05800b44 	movi	r22,45
1000c404:	dd811d85 	stb	r22,1142(sp)
1000c408:	8029883a 	mov	r20,r16
1000c40c:	00800044 	movi	r2,1
1000c410:	9d46b03a 	or	r3,r19,r21
1000c414:	003cfa06 	br	1000b800 <__alt_data_end+0xf800b800>
1000c418:	000b883a 	mov	r5,zero
1000c41c:	00800044 	movi	r2,1
1000c420:	d811883a 	mov	r8,sp
1000c424:	503d5a26 	beq	r10,zero,1000b990 <__alt_data_end+0xf800b990>
1000c428:	00c00084 	movi	r3,2
1000c42c:	d9011d04 	addi	r4,sp,1140
1000c430:	d9000015 	stw	r4,0(sp)
1000c434:	d8c00115 	stw	r3,4(sp)
1000c438:	003d5206 	br	1000b984 <__alt_data_end+0xf800b984>
1000c43c:	9080040c 	andi	r2,r18,16
1000c440:	1000421e 	bne	r2,zero,1000c54c <___vfiprintf_internal_r+0x1228>
1000c444:	9480100c 	andi	r18,r18,64
1000c448:	90009c26 	beq	r18,zero,1000c6bc <___vfiprintf_internal_r+0x1398>
1000c44c:	d9412317 	ldw	r5,1164(sp)
1000c450:	d8c12517 	ldw	r3,1172(sp)
1000c454:	28800017 	ldw	r2,0(r5)
1000c458:	29400104 	addi	r5,r5,4
1000c45c:	d9412315 	stw	r5,1164(sp)
1000c460:	10c0000d 	sth	r3,0(r2)
1000c464:	003be706 	br	1000b404 <__alt_data_end+0xf800b404>
1000c468:	90c0100c 	andi	r3,r18,64
1000c46c:	18003e26 	beq	r3,zero,1000c568 <___vfiprintf_internal_r+0x1244>
1000c470:	d8c12317 	ldw	r3,1164(sp)
1000c474:	14c0000b 	ldhu	r19,0(r2)
1000c478:	002b883a 	mov	r21,zero
1000c47c:	18c00104 	addi	r3,r3,4
1000c480:	d8c12315 	stw	r3,1164(sp)
1000c484:	003db706 	br	1000bb64 <__alt_data_end+0xf800bb64>
1000c488:	9080100c 	andi	r2,r18,64
1000c48c:	10004c26 	beq	r2,zero,1000c5c0 <___vfiprintf_internal_r+0x129c>
1000c490:	1cc0000f 	ldh	r19,0(r3)
1000c494:	d8812317 	ldw	r2,1164(sp)
1000c498:	982bd7fa 	srai	r21,r19,31
1000c49c:	10800104 	addi	r2,r2,4
1000c4a0:	d8812315 	stw	r2,1164(sp)
1000c4a4:	a805883a 	mov	r2,r21
1000c4a8:	003cd006 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000c4ac:	00800084 	movi	r2,2
1000c4b0:	003d8906 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000c4b4:	b9800007 	ldb	r6,0(r23)
1000c4b8:	003bfb06 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000c4bc:	9080100c 	andi	r2,r18,64
1000c4c0:	10003726 	beq	r2,zero,1000c5a0 <___vfiprintf_internal_r+0x127c>
1000c4c4:	d9412317 	ldw	r5,1164(sp)
1000c4c8:	002b883a 	mov	r21,zero
1000c4cc:	0005883a 	mov	r2,zero
1000c4d0:	2cc0000b 	ldhu	r19,0(r5)
1000c4d4:	29400104 	addi	r5,r5,4
1000c4d8:	d9412315 	stw	r5,1164(sp)
1000c4dc:	9807883a 	mov	r3,r19
1000c4e0:	003d7d06 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000c4e4:	9080100c 	andi	r2,r18,64
1000c4e8:	10002526 	beq	r2,zero,1000c580 <___vfiprintf_internal_r+0x125c>
1000c4ec:	d8812317 	ldw	r2,1164(sp)
1000c4f0:	002b883a 	mov	r21,zero
1000c4f4:	14c0000b 	ldhu	r19,0(r2)
1000c4f8:	10800104 	addi	r2,r2,4
1000c4fc:	d8812315 	stw	r2,1164(sp)
1000c500:	9807883a 	mov	r3,r19
1000c504:	00800044 	movi	r2,1
1000c508:	003d7306 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000c50c:	d9012117 	ldw	r4,1156(sp)
1000c510:	d9412017 	ldw	r5,1152(sp)
1000c514:	d9811a04 	addi	r6,sp,1128
1000c518:	da812a15 	stw	r10,1192(sp)
1000c51c:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c520:	da812a17 	ldw	r10,1192(sp)
1000c524:	103e9b1e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c528:	d9411b17 	ldw	r5,1132(sp)
1000c52c:	d8c11c17 	ldw	r3,1136(sp)
1000c530:	d811883a 	mov	r8,sp
1000c534:	28800044 	addi	r2,r5,1
1000c538:	003e5006 	br	1000be7c <__alt_data_end+0xf800be7c>
1000c53c:	182b883a 	mov	r21,r3
1000c540:	003ed006 	br	1000c084 <__alt_data_end+0xf800c084>
1000c544:	8029883a 	mov	r20,r16
1000c548:	003dc606 	br	1000bc64 <__alt_data_end+0xf800bc64>
1000c54c:	d8c12317 	ldw	r3,1164(sp)
1000c550:	d9012517 	ldw	r4,1172(sp)
1000c554:	18800017 	ldw	r2,0(r3)
1000c558:	18c00104 	addi	r3,r3,4
1000c55c:	d8c12315 	stw	r3,1164(sp)
1000c560:	11000015 	stw	r4,0(r2)
1000c564:	003ba706 	br	1000b404 <__alt_data_end+0xf800b404>
1000c568:	d9012317 	ldw	r4,1164(sp)
1000c56c:	14c00017 	ldw	r19,0(r2)
1000c570:	002b883a 	mov	r21,zero
1000c574:	21000104 	addi	r4,r4,4
1000c578:	d9012315 	stw	r4,1164(sp)
1000c57c:	003d7906 	br	1000bb64 <__alt_data_end+0xf800bb64>
1000c580:	d8c12317 	ldw	r3,1164(sp)
1000c584:	002b883a 	mov	r21,zero
1000c588:	00800044 	movi	r2,1
1000c58c:	1cc00017 	ldw	r19,0(r3)
1000c590:	18c00104 	addi	r3,r3,4
1000c594:	d8c12315 	stw	r3,1164(sp)
1000c598:	9807883a 	mov	r3,r19
1000c59c:	003d4e06 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000c5a0:	d8812317 	ldw	r2,1164(sp)
1000c5a4:	002b883a 	mov	r21,zero
1000c5a8:	14c00017 	ldw	r19,0(r2)
1000c5ac:	10800104 	addi	r2,r2,4
1000c5b0:	d8812315 	stw	r2,1164(sp)
1000c5b4:	9807883a 	mov	r3,r19
1000c5b8:	0005883a 	mov	r2,zero
1000c5bc:	003d4606 	br	1000bad8 <__alt_data_end+0xf800bad8>
1000c5c0:	1cc00017 	ldw	r19,0(r3)
1000c5c4:	d8c12317 	ldw	r3,1164(sp)
1000c5c8:	982bd7fa 	srai	r21,r19,31
1000c5cc:	18c00104 	addi	r3,r3,4
1000c5d0:	d8c12315 	stw	r3,1164(sp)
1000c5d4:	a805883a 	mov	r2,r21
1000c5d8:	003c8406 	br	1000b7ec <__alt_data_end+0xf800b7ec>
1000c5dc:	01040074 	movhi	r4,4097
1000c5e0:	21152c04 	addi	r4,r4,21680
1000c5e4:	d9012615 	stw	r4,1176(sp)
1000c5e8:	003d0606 	br	1000ba04 <__alt_data_end+0xf800ba04>
1000c5ec:	b9800043 	ldbu	r6,1(r23)
1000c5f0:	94800814 	ori	r18,r18,32
1000c5f4:	bdc00044 	addi	r23,r23,1
1000c5f8:	31803fcc 	andi	r6,r6,255
1000c5fc:	3180201c 	xori	r6,r6,128
1000c600:	31bfe004 	addi	r6,r6,-128
1000c604:	003ba806 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000c608:	d8811e17 	ldw	r2,1144(sp)
1000c60c:	d8c12217 	ldw	r3,1160(sp)
1000c610:	10e9c83a 	sub	r20,r2,r3
1000c614:	003c9406 	br	1000b868 <__alt_data_end+0xf800b868>
1000c618:	da012a15 	stw	r8,1192(sp)
1000c61c:	0003e340 	call	10003e34 <strlen>
1000c620:	1029883a 	mov	r20,r2
1000c624:	dd811d83 	ldbu	r22,1142(sp)
1000c628:	dcc12315 	stw	r19,1164(sp)
1000c62c:	0021883a 	mov	r16,zero
1000c630:	da012a17 	ldw	r8,1192(sp)
1000c634:	003c8c06 	br	1000b868 <__alt_data_end+0xf800b868>
1000c638:	d9012117 	ldw	r4,1156(sp)
1000c63c:	d9412017 	ldw	r5,1152(sp)
1000c640:	d9811a04 	addi	r6,sp,1128
1000c644:	000b2100 	call	1000b210 <__sprint_r.part.0>
1000c648:	103e521e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
1000c64c:	d9411b17 	ldw	r5,1132(sp)
1000c650:	d8c11c17 	ldw	r3,1136(sp)
1000c654:	d811883a 	mov	r8,sp
1000c658:	28800044 	addi	r2,r5,1
1000c65c:	003cce06 	br	1000b998 <__alt_data_end+0xf800b998>
1000c660:	01440074 	movhi	r5,4097
1000c664:	29553004 	addi	r5,r5,21696
1000c668:	d9412615 	stw	r5,1176(sp)
1000c66c:	d9411b17 	ldw	r5,1132(sp)
1000c670:	29400044 	addi	r5,r5,1
1000c674:	003cad06 	br	1000b92c <__alt_data_end+0xf800b92c>
1000c678:	00800184 	movi	r2,6
1000c67c:	1400012e 	bgeu	r2,r16,1000c684 <___vfiprintf_internal_r+0x1360>
1000c680:	1021883a 	mov	r16,r2
1000c684:	8029883a 	mov	r20,r16
1000c688:	802b883a 	mov	r21,r16
1000c68c:	80001c16 	blt	r16,zero,1000c700 <___vfiprintf_internal_r+0x13dc>
1000c690:	00c40074 	movhi	r3,4097
1000c694:	18d4d004 	addi	r3,r3,21312
1000c698:	dcc12315 	stw	r19,1164(sp)
1000c69c:	d8c12215 	stw	r3,1160(sp)
1000c6a0:	003cff06 	br	1000baa0 <__alt_data_end+0xf800baa0>
1000c6a4:	d9411b17 	ldw	r5,1132(sp)
1000c6a8:	00840074 	movhi	r2,4097
1000c6ac:	10953004 	addi	r2,r2,21696
1000c6b0:	d8812615 	stw	r2,1176(sp)
1000c6b4:	29400044 	addi	r5,r5,1
1000c6b8:	003e6706 	br	1000c058 <__alt_data_end+0xf800c058>
1000c6bc:	d9012317 	ldw	r4,1164(sp)
1000c6c0:	d9412517 	ldw	r5,1172(sp)
1000c6c4:	20800017 	ldw	r2,0(r4)
1000c6c8:	21000104 	addi	r4,r4,4
1000c6cc:	d9012315 	stw	r4,1164(sp)
1000c6d0:	11400015 	stw	r5,0(r2)
1000c6d4:	003b4b06 	br	1000b404 <__alt_data_end+0xf800b404>
1000c6d8:	8029883a 	mov	r20,r16
1000c6dc:	dd811d83 	ldbu	r22,1142(sp)
1000c6e0:	dcc12315 	stw	r19,1164(sp)
1000c6e4:	0021883a 	mov	r16,zero
1000c6e8:	003c5f06 	br	1000b868 <__alt_data_end+0xf800b868>
1000c6ec:	01040074 	movhi	r4,4097
1000c6f0:	21152c04 	addi	r4,r4,21680
1000c6f4:	d9012615 	stw	r4,1176(sp)
1000c6f8:	1009883a 	mov	r4,r2
1000c6fc:	003ea006 	br	1000c180 <__alt_data_end+0xf800c180>
1000c700:	002b883a 	mov	r21,zero
1000c704:	003fe206 	br	1000c690 <__alt_data_end+0xf800c690>
1000c708:	d9412317 	ldw	r5,1164(sp)
1000c70c:	b807883a 	mov	r3,r23
1000c710:	102f883a 	mov	r23,r2
1000c714:	2c000017 	ldw	r16,0(r5)
1000c718:	29000104 	addi	r4,r5,4
1000c71c:	d9012315 	stw	r4,1164(sp)
1000c720:	80000416 	blt	r16,zero,1000c734 <___vfiprintf_internal_r+0x1410>
1000c724:	19800047 	ldb	r6,1(r3)
1000c728:	003b5f06 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000c72c:	043fffc4 	movi	r16,-1
1000c730:	003bef06 	br	1000b6f0 <__alt_data_end+0xf800b6f0>
1000c734:	043fffc4 	movi	r16,-1
1000c738:	19800047 	ldb	r6,1(r3)
1000c73c:	003b5a06 	br	1000b4a8 <__alt_data_end+0xf800b4a8>
1000c740:	282b883a 	mov	r21,r5
1000c744:	003cc706 	br	1000ba64 <__alt_data_end+0xf800ba64>

1000c748 <__vfiprintf_internal>:
1000c748:	2007883a 	mov	r3,r4
1000c74c:	01040074 	movhi	r4,4097
1000c750:	211c3104 	addi	r4,r4,28868
1000c754:	21000017 	ldw	r4,0(r4)
1000c758:	2805883a 	mov	r2,r5
1000c75c:	300f883a 	mov	r7,r6
1000c760:	180b883a 	mov	r5,r3
1000c764:	100d883a 	mov	r6,r2
1000c768:	000b3241 	jmpi	1000b324 <___vfiprintf_internal_r>

1000c76c <_write_r>:
1000c76c:	defffd04 	addi	sp,sp,-12
1000c770:	dc000015 	stw	r16,0(sp)
1000c774:	040400b4 	movhi	r16,4098
1000c778:	dc400115 	stw	r17,4(sp)
1000c77c:	84230e04 	addi	r16,r16,-29640
1000c780:	2023883a 	mov	r17,r4
1000c784:	2809883a 	mov	r4,r5
1000c788:	300b883a 	mov	r5,r6
1000c78c:	380d883a 	mov	r6,r7
1000c790:	dfc00215 	stw	ra,8(sp)
1000c794:	80000015 	stw	zero,0(r16)
1000c798:	0010f400 	call	10010f40 <write>
1000c79c:	00ffffc4 	movi	r3,-1
1000c7a0:	10c00526 	beq	r2,r3,1000c7b8 <_write_r+0x4c>
1000c7a4:	dfc00217 	ldw	ra,8(sp)
1000c7a8:	dc400117 	ldw	r17,4(sp)
1000c7ac:	dc000017 	ldw	r16,0(sp)
1000c7b0:	dec00304 	addi	sp,sp,12
1000c7b4:	f800283a 	ret
1000c7b8:	80c00017 	ldw	r3,0(r16)
1000c7bc:	183ff926 	beq	r3,zero,1000c7a4 <__alt_data_end+0xf800c7a4>
1000c7c0:	88c00015 	stw	r3,0(r17)
1000c7c4:	003ff706 	br	1000c7a4 <__alt_data_end+0xf800c7a4>

1000c7c8 <_close_r>:
1000c7c8:	defffd04 	addi	sp,sp,-12
1000c7cc:	dc000015 	stw	r16,0(sp)
1000c7d0:	040400b4 	movhi	r16,4098
1000c7d4:	dc400115 	stw	r17,4(sp)
1000c7d8:	84230e04 	addi	r16,r16,-29640
1000c7dc:	2023883a 	mov	r17,r4
1000c7e0:	2809883a 	mov	r4,r5
1000c7e4:	dfc00215 	stw	ra,8(sp)
1000c7e8:	80000015 	stw	zero,0(r16)
1000c7ec:	001066c0 	call	1001066c <close>
1000c7f0:	00ffffc4 	movi	r3,-1
1000c7f4:	10c00526 	beq	r2,r3,1000c80c <_close_r+0x44>
1000c7f8:	dfc00217 	ldw	ra,8(sp)
1000c7fc:	dc400117 	ldw	r17,4(sp)
1000c800:	dc000017 	ldw	r16,0(sp)
1000c804:	dec00304 	addi	sp,sp,12
1000c808:	f800283a 	ret
1000c80c:	80c00017 	ldw	r3,0(r16)
1000c810:	183ff926 	beq	r3,zero,1000c7f8 <__alt_data_end+0xf800c7f8>
1000c814:	88c00015 	stw	r3,0(r17)
1000c818:	003ff706 	br	1000c7f8 <__alt_data_end+0xf800c7f8>

1000c81c <_calloc_r>:
1000c81c:	defffe04 	addi	sp,sp,-8
1000c820:	dc000015 	stw	r16,0(sp)
1000c824:	2021883a 	mov	r16,r4
1000c828:	2809883a 	mov	r4,r5
1000c82c:	300b883a 	mov	r5,r6
1000c830:	dfc00115 	stw	ra,4(sp)
1000c834:	0003c5c0 	call	10003c5c <__mulsi3>
1000c838:	8009883a 	mov	r4,r16
1000c83c:	100b883a 	mov	r5,r2
1000c840:	0008d380 	call	10008d38 <_malloc_r>
1000c844:	1021883a 	mov	r16,r2
1000c848:	10002826 	beq	r2,zero,1000c8ec <_calloc_r+0xd0>
1000c84c:	11bfff17 	ldw	r6,-4(r2)
1000c850:	00bfff04 	movi	r2,-4
1000c854:	00c00904 	movi	r3,36
1000c858:	308c703a 	and	r6,r6,r2
1000c85c:	308d883a 	add	r6,r6,r2
1000c860:	19801436 	bltu	r3,r6,1000c8b4 <_calloc_r+0x98>
1000c864:	008004c4 	movi	r2,19
1000c868:	11800936 	bltu	r2,r6,1000c890 <_calloc_r+0x74>
1000c86c:	8005883a 	mov	r2,r16
1000c870:	10000015 	stw	zero,0(r2)
1000c874:	10000115 	stw	zero,4(r2)
1000c878:	10000215 	stw	zero,8(r2)
1000c87c:	8005883a 	mov	r2,r16
1000c880:	dfc00117 	ldw	ra,4(sp)
1000c884:	dc000017 	ldw	r16,0(sp)
1000c888:	dec00204 	addi	sp,sp,8
1000c88c:	f800283a 	ret
1000c890:	80000015 	stw	zero,0(r16)
1000c894:	80000115 	stw	zero,4(r16)
1000c898:	008006c4 	movi	r2,27
1000c89c:	11800d2e 	bgeu	r2,r6,1000c8d4 <_calloc_r+0xb8>
1000c8a0:	80000215 	stw	zero,8(r16)
1000c8a4:	80000315 	stw	zero,12(r16)
1000c8a8:	30c00c26 	beq	r6,r3,1000c8dc <_calloc_r+0xc0>
1000c8ac:	80800404 	addi	r2,r16,16
1000c8b0:	003fef06 	br	1000c870 <__alt_data_end+0xf800c870>
1000c8b4:	8009883a 	mov	r4,r16
1000c8b8:	000b883a 	mov	r5,zero
1000c8bc:	000985c0 	call	1000985c <memset>
1000c8c0:	8005883a 	mov	r2,r16
1000c8c4:	dfc00117 	ldw	ra,4(sp)
1000c8c8:	dc000017 	ldw	r16,0(sp)
1000c8cc:	dec00204 	addi	sp,sp,8
1000c8d0:	f800283a 	ret
1000c8d4:	80800204 	addi	r2,r16,8
1000c8d8:	003fe506 	br	1000c870 <__alt_data_end+0xf800c870>
1000c8dc:	80000415 	stw	zero,16(r16)
1000c8e0:	80800604 	addi	r2,r16,24
1000c8e4:	80000515 	stw	zero,20(r16)
1000c8e8:	003fe106 	br	1000c870 <__alt_data_end+0xf800c870>
1000c8ec:	0005883a 	mov	r2,zero
1000c8f0:	003fe306 	br	1000c880 <__alt_data_end+0xf800c880>

1000c8f4 <_fclose_r>:
1000c8f4:	28003226 	beq	r5,zero,1000c9c0 <_fclose_r+0xcc>
1000c8f8:	defffc04 	addi	sp,sp,-16
1000c8fc:	dc400115 	stw	r17,4(sp)
1000c900:	2023883a 	mov	r17,r4
1000c904:	dc000015 	stw	r16,0(sp)
1000c908:	dfc00315 	stw	ra,12(sp)
1000c90c:	dc800215 	stw	r18,8(sp)
1000c910:	2821883a 	mov	r16,r5
1000c914:	00080380 	call	10008038 <__sfp_lock_acquire>
1000c918:	88000226 	beq	r17,zero,1000c924 <_fclose_r+0x30>
1000c91c:	88800e17 	ldw	r2,56(r17)
1000c920:	10002926 	beq	r2,zero,1000c9c8 <_fclose_r+0xd4>
1000c924:	8080030f 	ldh	r2,12(r16)
1000c928:	10002226 	beq	r2,zero,1000c9b4 <_fclose_r+0xc0>
1000c92c:	8809883a 	mov	r4,r17
1000c930:	800b883a 	mov	r5,r16
1000c934:	0007a6c0 	call	10007a6c <_fflush_r>
1000c938:	1025883a 	mov	r18,r2
1000c93c:	80800b17 	ldw	r2,44(r16)
1000c940:	10000426 	beq	r2,zero,1000c954 <_fclose_r+0x60>
1000c944:	81400717 	ldw	r5,28(r16)
1000c948:	8809883a 	mov	r4,r17
1000c94c:	103ee83a 	callr	r2
1000c950:	10002616 	blt	r2,zero,1000c9ec <_fclose_r+0xf8>
1000c954:	8080030b 	ldhu	r2,12(r16)
1000c958:	1080200c 	andi	r2,r2,128
1000c95c:	10001f1e 	bne	r2,zero,1000c9dc <_fclose_r+0xe8>
1000c960:	81400c17 	ldw	r5,48(r16)
1000c964:	28000526 	beq	r5,zero,1000c97c <_fclose_r+0x88>
1000c968:	80801004 	addi	r2,r16,64
1000c96c:	28800226 	beq	r5,r2,1000c978 <_fclose_r+0x84>
1000c970:	8809883a 	mov	r4,r17
1000c974:	000819c0 	call	1000819c <_free_r>
1000c978:	80000c15 	stw	zero,48(r16)
1000c97c:	81401117 	ldw	r5,68(r16)
1000c980:	28000326 	beq	r5,zero,1000c990 <_fclose_r+0x9c>
1000c984:	8809883a 	mov	r4,r17
1000c988:	000819c0 	call	1000819c <_free_r>
1000c98c:	80001115 	stw	zero,68(r16)
1000c990:	8000030d 	sth	zero,12(r16)
1000c994:	000803c0 	call	1000803c <__sfp_lock_release>
1000c998:	9005883a 	mov	r2,r18
1000c99c:	dfc00317 	ldw	ra,12(sp)
1000c9a0:	dc800217 	ldw	r18,8(sp)
1000c9a4:	dc400117 	ldw	r17,4(sp)
1000c9a8:	dc000017 	ldw	r16,0(sp)
1000c9ac:	dec00404 	addi	sp,sp,16
1000c9b0:	f800283a 	ret
1000c9b4:	000803c0 	call	1000803c <__sfp_lock_release>
1000c9b8:	0005883a 	mov	r2,zero
1000c9bc:	003ff706 	br	1000c99c <__alt_data_end+0xf800c99c>
1000c9c0:	0005883a 	mov	r2,zero
1000c9c4:	f800283a 	ret
1000c9c8:	8809883a 	mov	r4,r17
1000c9cc:	00080280 	call	10008028 <__sinit>
1000c9d0:	8080030f 	ldh	r2,12(r16)
1000c9d4:	103fd51e 	bne	r2,zero,1000c92c <__alt_data_end+0xf800c92c>
1000c9d8:	003ff606 	br	1000c9b4 <__alt_data_end+0xf800c9b4>
1000c9dc:	81400417 	ldw	r5,16(r16)
1000c9e0:	8809883a 	mov	r4,r17
1000c9e4:	000819c0 	call	1000819c <_free_r>
1000c9e8:	003fdd06 	br	1000c960 <__alt_data_end+0xf800c960>
1000c9ec:	04bfffc4 	movi	r18,-1
1000c9f0:	003fd806 	br	1000c954 <__alt_data_end+0xf800c954>

1000c9f4 <fclose>:
1000c9f4:	00840074 	movhi	r2,4097
1000c9f8:	109c3104 	addi	r2,r2,28868
1000c9fc:	200b883a 	mov	r5,r4
1000ca00:	11000017 	ldw	r4,0(r2)
1000ca04:	000c8f41 	jmpi	1000c8f4 <_fclose_r>

1000ca08 <_fputwc_r>:
1000ca08:	3080030b 	ldhu	r2,12(r6)
1000ca0c:	defff804 	addi	sp,sp,-32
1000ca10:	dcc00415 	stw	r19,16(sp)
1000ca14:	dc800315 	stw	r18,12(sp)
1000ca18:	dc000115 	stw	r16,4(sp)
1000ca1c:	dfc00715 	stw	ra,28(sp)
1000ca20:	dd400615 	stw	r21,24(sp)
1000ca24:	dd000515 	stw	r20,20(sp)
1000ca28:	dc400215 	stw	r17,8(sp)
1000ca2c:	10c8000c 	andi	r3,r2,8192
1000ca30:	3021883a 	mov	r16,r6
1000ca34:	2027883a 	mov	r19,r4
1000ca38:	2825883a 	mov	r18,r5
1000ca3c:	1800051e 	bne	r3,zero,1000ca54 <_fputwc_r+0x4c>
1000ca40:	30c01917 	ldw	r3,100(r6)
1000ca44:	10880014 	ori	r2,r2,8192
1000ca48:	3080030d 	sth	r2,12(r6)
1000ca4c:	18880014 	ori	r2,r3,8192
1000ca50:	30801915 	stw	r2,100(r6)
1000ca54:	0008b280 	call	10008b28 <__locale_mb_cur_max>
1000ca58:	00c00044 	movi	r3,1
1000ca5c:	10c03e26 	beq	r2,r3,1000cb58 <_fputwc_r+0x150>
1000ca60:	9809883a 	mov	r4,r19
1000ca64:	d80b883a 	mov	r5,sp
1000ca68:	900d883a 	mov	r6,r18
1000ca6c:	81c01704 	addi	r7,r16,92
1000ca70:	000ceb80 	call	1000ceb8 <_wcrtomb_r>
1000ca74:	1029883a 	mov	r20,r2
1000ca78:	00bfffc4 	movi	r2,-1
1000ca7c:	a0802026 	beq	r20,r2,1000cb00 <_fputwc_r+0xf8>
1000ca80:	d9400003 	ldbu	r5,0(sp)
1000ca84:	a0001c26 	beq	r20,zero,1000caf8 <_fputwc_r+0xf0>
1000ca88:	0023883a 	mov	r17,zero
1000ca8c:	05400284 	movi	r21,10
1000ca90:	00000906 	br	1000cab8 <_fputwc_r+0xb0>
1000ca94:	80800017 	ldw	r2,0(r16)
1000ca98:	11400005 	stb	r5,0(r2)
1000ca9c:	80c00017 	ldw	r3,0(r16)
1000caa0:	18c00044 	addi	r3,r3,1
1000caa4:	80c00015 	stw	r3,0(r16)
1000caa8:	8c400044 	addi	r17,r17,1
1000caac:	dc45883a 	add	r2,sp,r17
1000cab0:	8d00112e 	bgeu	r17,r20,1000caf8 <_fputwc_r+0xf0>
1000cab4:	11400003 	ldbu	r5,0(r2)
1000cab8:	80c00217 	ldw	r3,8(r16)
1000cabc:	18ffffc4 	addi	r3,r3,-1
1000cac0:	80c00215 	stw	r3,8(r16)
1000cac4:	183ff30e 	bge	r3,zero,1000ca94 <__alt_data_end+0xf800ca94>
1000cac8:	80800617 	ldw	r2,24(r16)
1000cacc:	18801916 	blt	r3,r2,1000cb34 <_fputwc_r+0x12c>
1000cad0:	80800017 	ldw	r2,0(r16)
1000cad4:	11400005 	stb	r5,0(r2)
1000cad8:	80800017 	ldw	r2,0(r16)
1000cadc:	10c00003 	ldbu	r3,0(r2)
1000cae0:	10800044 	addi	r2,r2,1
1000cae4:	1d402326 	beq	r3,r21,1000cb74 <_fputwc_r+0x16c>
1000cae8:	80800015 	stw	r2,0(r16)
1000caec:	8c400044 	addi	r17,r17,1
1000caf0:	dc45883a 	add	r2,sp,r17
1000caf4:	8d3fef36 	bltu	r17,r20,1000cab4 <__alt_data_end+0xf800cab4>
1000caf8:	9005883a 	mov	r2,r18
1000cafc:	00000406 	br	1000cb10 <_fputwc_r+0x108>
1000cb00:	80c0030b 	ldhu	r3,12(r16)
1000cb04:	a005883a 	mov	r2,r20
1000cb08:	18c01014 	ori	r3,r3,64
1000cb0c:	80c0030d 	sth	r3,12(r16)
1000cb10:	dfc00717 	ldw	ra,28(sp)
1000cb14:	dd400617 	ldw	r21,24(sp)
1000cb18:	dd000517 	ldw	r20,20(sp)
1000cb1c:	dcc00417 	ldw	r19,16(sp)
1000cb20:	dc800317 	ldw	r18,12(sp)
1000cb24:	dc400217 	ldw	r17,8(sp)
1000cb28:	dc000117 	ldw	r16,4(sp)
1000cb2c:	dec00804 	addi	sp,sp,32
1000cb30:	f800283a 	ret
1000cb34:	9809883a 	mov	r4,r19
1000cb38:	29403fcc 	andi	r5,r5,255
1000cb3c:	800d883a 	mov	r6,r16
1000cb40:	000cd480 	call	1000cd48 <__swbuf_r>
1000cb44:	10bfffe0 	cmpeqi	r2,r2,-1
1000cb48:	10803fcc 	andi	r2,r2,255
1000cb4c:	103fd626 	beq	r2,zero,1000caa8 <__alt_data_end+0xf800caa8>
1000cb50:	00bfffc4 	movi	r2,-1
1000cb54:	003fee06 	br	1000cb10 <__alt_data_end+0xf800cb10>
1000cb58:	90ffffc4 	addi	r3,r18,-1
1000cb5c:	01003f84 	movi	r4,254
1000cb60:	20ffbf36 	bltu	r4,r3,1000ca60 <__alt_data_end+0xf800ca60>
1000cb64:	900b883a 	mov	r5,r18
1000cb68:	dc800005 	stb	r18,0(sp)
1000cb6c:	1029883a 	mov	r20,r2
1000cb70:	003fc506 	br	1000ca88 <__alt_data_end+0xf800ca88>
1000cb74:	9809883a 	mov	r4,r19
1000cb78:	a80b883a 	mov	r5,r21
1000cb7c:	800d883a 	mov	r6,r16
1000cb80:	000cd480 	call	1000cd48 <__swbuf_r>
1000cb84:	10bfffe0 	cmpeqi	r2,r2,-1
1000cb88:	003fef06 	br	1000cb48 <__alt_data_end+0xf800cb48>

1000cb8c <fputwc>:
1000cb8c:	defffc04 	addi	sp,sp,-16
1000cb90:	dc000115 	stw	r16,4(sp)
1000cb94:	04040074 	movhi	r16,4097
1000cb98:	841c3104 	addi	r16,r16,28868
1000cb9c:	dc400215 	stw	r17,8(sp)
1000cba0:	2023883a 	mov	r17,r4
1000cba4:	81000017 	ldw	r4,0(r16)
1000cba8:	dfc00315 	stw	ra,12(sp)
1000cbac:	280d883a 	mov	r6,r5
1000cbb0:	20000626 	beq	r4,zero,1000cbcc <fputwc+0x40>
1000cbb4:	20800e17 	ldw	r2,56(r4)
1000cbb8:	1000041e 	bne	r2,zero,1000cbcc <fputwc+0x40>
1000cbbc:	d9400015 	stw	r5,0(sp)
1000cbc0:	00080280 	call	10008028 <__sinit>
1000cbc4:	81000017 	ldw	r4,0(r16)
1000cbc8:	d9800017 	ldw	r6,0(sp)
1000cbcc:	880b883a 	mov	r5,r17
1000cbd0:	dfc00317 	ldw	ra,12(sp)
1000cbd4:	dc400217 	ldw	r17,8(sp)
1000cbd8:	dc000117 	ldw	r16,4(sp)
1000cbdc:	dec00404 	addi	sp,sp,16
1000cbe0:	000ca081 	jmpi	1000ca08 <_fputwc_r>

1000cbe4 <_fstat_r>:
1000cbe4:	defffd04 	addi	sp,sp,-12
1000cbe8:	dc000015 	stw	r16,0(sp)
1000cbec:	040400b4 	movhi	r16,4098
1000cbf0:	dc400115 	stw	r17,4(sp)
1000cbf4:	84230e04 	addi	r16,r16,-29640
1000cbf8:	2023883a 	mov	r17,r4
1000cbfc:	2809883a 	mov	r4,r5
1000cc00:	300b883a 	mov	r5,r6
1000cc04:	dfc00215 	stw	ra,8(sp)
1000cc08:	80000015 	stw	zero,0(r16)
1000cc0c:	00107c00 	call	100107c0 <fstat>
1000cc10:	00ffffc4 	movi	r3,-1
1000cc14:	10c00526 	beq	r2,r3,1000cc2c <_fstat_r+0x48>
1000cc18:	dfc00217 	ldw	ra,8(sp)
1000cc1c:	dc400117 	ldw	r17,4(sp)
1000cc20:	dc000017 	ldw	r16,0(sp)
1000cc24:	dec00304 	addi	sp,sp,12
1000cc28:	f800283a 	ret
1000cc2c:	80c00017 	ldw	r3,0(r16)
1000cc30:	183ff926 	beq	r3,zero,1000cc18 <__alt_data_end+0xf800cc18>
1000cc34:	88c00015 	stw	r3,0(r17)
1000cc38:	003ff706 	br	1000cc18 <__alt_data_end+0xf800cc18>

1000cc3c <_isatty_r>:
1000cc3c:	defffd04 	addi	sp,sp,-12
1000cc40:	dc000015 	stw	r16,0(sp)
1000cc44:	040400b4 	movhi	r16,4098
1000cc48:	dc400115 	stw	r17,4(sp)
1000cc4c:	84230e04 	addi	r16,r16,-29640
1000cc50:	2023883a 	mov	r17,r4
1000cc54:	2809883a 	mov	r4,r5
1000cc58:	dfc00215 	stw	ra,8(sp)
1000cc5c:	80000015 	stw	zero,0(r16)
1000cc60:	00108c80 	call	100108c8 <isatty>
1000cc64:	00ffffc4 	movi	r3,-1
1000cc68:	10c00526 	beq	r2,r3,1000cc80 <_isatty_r+0x44>
1000cc6c:	dfc00217 	ldw	ra,8(sp)
1000cc70:	dc400117 	ldw	r17,4(sp)
1000cc74:	dc000017 	ldw	r16,0(sp)
1000cc78:	dec00304 	addi	sp,sp,12
1000cc7c:	f800283a 	ret
1000cc80:	80c00017 	ldw	r3,0(r16)
1000cc84:	183ff926 	beq	r3,zero,1000cc6c <__alt_data_end+0xf800cc6c>
1000cc88:	88c00015 	stw	r3,0(r17)
1000cc8c:	003ff706 	br	1000cc6c <__alt_data_end+0xf800cc6c>

1000cc90 <_lseek_r>:
1000cc90:	defffd04 	addi	sp,sp,-12
1000cc94:	dc000015 	stw	r16,0(sp)
1000cc98:	040400b4 	movhi	r16,4098
1000cc9c:	dc400115 	stw	r17,4(sp)
1000cca0:	84230e04 	addi	r16,r16,-29640
1000cca4:	2023883a 	mov	r17,r4
1000cca8:	2809883a 	mov	r4,r5
1000ccac:	300b883a 	mov	r5,r6
1000ccb0:	380d883a 	mov	r6,r7
1000ccb4:	dfc00215 	stw	ra,8(sp)
1000ccb8:	80000015 	stw	zero,0(r16)
1000ccbc:	0010aa80 	call	10010aa8 <lseek>
1000ccc0:	00ffffc4 	movi	r3,-1
1000ccc4:	10c00526 	beq	r2,r3,1000ccdc <_lseek_r+0x4c>
1000ccc8:	dfc00217 	ldw	ra,8(sp)
1000cccc:	dc400117 	ldw	r17,4(sp)
1000ccd0:	dc000017 	ldw	r16,0(sp)
1000ccd4:	dec00304 	addi	sp,sp,12
1000ccd8:	f800283a 	ret
1000ccdc:	80c00017 	ldw	r3,0(r16)
1000cce0:	183ff926 	beq	r3,zero,1000ccc8 <__alt_data_end+0xf800ccc8>
1000cce4:	88c00015 	stw	r3,0(r17)
1000cce8:	003ff706 	br	1000ccc8 <__alt_data_end+0xf800ccc8>

1000ccec <_read_r>:
1000ccec:	defffd04 	addi	sp,sp,-12
1000ccf0:	dc000015 	stw	r16,0(sp)
1000ccf4:	040400b4 	movhi	r16,4098
1000ccf8:	dc400115 	stw	r17,4(sp)
1000ccfc:	84230e04 	addi	r16,r16,-29640
1000cd00:	2023883a 	mov	r17,r4
1000cd04:	2809883a 	mov	r4,r5
1000cd08:	300b883a 	mov	r5,r6
1000cd0c:	380d883a 	mov	r6,r7
1000cd10:	dfc00215 	stw	ra,8(sp)
1000cd14:	80000015 	stw	zero,0(r16)
1000cd18:	0010c8c0 	call	10010c8c <read>
1000cd1c:	00ffffc4 	movi	r3,-1
1000cd20:	10c00526 	beq	r2,r3,1000cd38 <_read_r+0x4c>
1000cd24:	dfc00217 	ldw	ra,8(sp)
1000cd28:	dc400117 	ldw	r17,4(sp)
1000cd2c:	dc000017 	ldw	r16,0(sp)
1000cd30:	dec00304 	addi	sp,sp,12
1000cd34:	f800283a 	ret
1000cd38:	80c00017 	ldw	r3,0(r16)
1000cd3c:	183ff926 	beq	r3,zero,1000cd24 <__alt_data_end+0xf800cd24>
1000cd40:	88c00015 	stw	r3,0(r17)
1000cd44:	003ff706 	br	1000cd24 <__alt_data_end+0xf800cd24>

1000cd48 <__swbuf_r>:
1000cd48:	defffc04 	addi	sp,sp,-16
1000cd4c:	dc800215 	stw	r18,8(sp)
1000cd50:	dc400115 	stw	r17,4(sp)
1000cd54:	dc000015 	stw	r16,0(sp)
1000cd58:	dfc00315 	stw	ra,12(sp)
1000cd5c:	2025883a 	mov	r18,r4
1000cd60:	2823883a 	mov	r17,r5
1000cd64:	3021883a 	mov	r16,r6
1000cd68:	20000226 	beq	r4,zero,1000cd74 <__swbuf_r+0x2c>
1000cd6c:	20800e17 	ldw	r2,56(r4)
1000cd70:	10004126 	beq	r2,zero,1000ce78 <__swbuf_r+0x130>
1000cd74:	80c00617 	ldw	r3,24(r16)
1000cd78:	8180030b 	ldhu	r6,12(r16)
1000cd7c:	80c00215 	stw	r3,8(r16)
1000cd80:	30c0020c 	andi	r3,r6,8
1000cd84:	18003526 	beq	r3,zero,1000ce5c <__swbuf_r+0x114>
1000cd88:	80c00417 	ldw	r3,16(r16)
1000cd8c:	18003326 	beq	r3,zero,1000ce5c <__swbuf_r+0x114>
1000cd90:	3088000c 	andi	r2,r6,8192
1000cd94:	8c403fcc 	andi	r17,r17,255
1000cd98:	10001726 	beq	r2,zero,1000cdf8 <__swbuf_r+0xb0>
1000cd9c:	80800017 	ldw	r2,0(r16)
1000cda0:	81000517 	ldw	r4,20(r16)
1000cda4:	10c7c83a 	sub	r3,r2,r3
1000cda8:	19001d0e 	bge	r3,r4,1000ce20 <__swbuf_r+0xd8>
1000cdac:	18c00044 	addi	r3,r3,1
1000cdb0:	81400217 	ldw	r5,8(r16)
1000cdb4:	11000044 	addi	r4,r2,1
1000cdb8:	81000015 	stw	r4,0(r16)
1000cdbc:	297fffc4 	addi	r5,r5,-1
1000cdc0:	81400215 	stw	r5,8(r16)
1000cdc4:	14400005 	stb	r17,0(r2)
1000cdc8:	80800517 	ldw	r2,20(r16)
1000cdcc:	10c01d26 	beq	r2,r3,1000ce44 <__swbuf_r+0xfc>
1000cdd0:	8080030b 	ldhu	r2,12(r16)
1000cdd4:	1080004c 	andi	r2,r2,1
1000cdd8:	1000181e 	bne	r2,zero,1000ce3c <__swbuf_r+0xf4>
1000cddc:	8805883a 	mov	r2,r17
1000cde0:	dfc00317 	ldw	ra,12(sp)
1000cde4:	dc800217 	ldw	r18,8(sp)
1000cde8:	dc400117 	ldw	r17,4(sp)
1000cdec:	dc000017 	ldw	r16,0(sp)
1000cdf0:	dec00404 	addi	sp,sp,16
1000cdf4:	f800283a 	ret
1000cdf8:	81001917 	ldw	r4,100(r16)
1000cdfc:	00b7ffc4 	movi	r2,-8193
1000ce00:	31880014 	ori	r6,r6,8192
1000ce04:	2084703a 	and	r2,r4,r2
1000ce08:	80801915 	stw	r2,100(r16)
1000ce0c:	80800017 	ldw	r2,0(r16)
1000ce10:	81000517 	ldw	r4,20(r16)
1000ce14:	8180030d 	sth	r6,12(r16)
1000ce18:	10c7c83a 	sub	r3,r2,r3
1000ce1c:	193fe316 	blt	r3,r4,1000cdac <__alt_data_end+0xf800cdac>
1000ce20:	9009883a 	mov	r4,r18
1000ce24:	800b883a 	mov	r5,r16
1000ce28:	0007a6c0 	call	10007a6c <_fflush_r>
1000ce2c:	1000091e 	bne	r2,zero,1000ce54 <__swbuf_r+0x10c>
1000ce30:	80800017 	ldw	r2,0(r16)
1000ce34:	00c00044 	movi	r3,1
1000ce38:	003fdd06 	br	1000cdb0 <__alt_data_end+0xf800cdb0>
1000ce3c:	00800284 	movi	r2,10
1000ce40:	88bfe61e 	bne	r17,r2,1000cddc <__alt_data_end+0xf800cddc>
1000ce44:	9009883a 	mov	r4,r18
1000ce48:	800b883a 	mov	r5,r16
1000ce4c:	0007a6c0 	call	10007a6c <_fflush_r>
1000ce50:	103fe226 	beq	r2,zero,1000cddc <__alt_data_end+0xf800cddc>
1000ce54:	00bfffc4 	movi	r2,-1
1000ce58:	003fe106 	br	1000cde0 <__alt_data_end+0xf800cde0>
1000ce5c:	9009883a 	mov	r4,r18
1000ce60:	800b883a 	mov	r5,r16
1000ce64:	0005fec0 	call	10005fec <__swsetup_r>
1000ce68:	1000051e 	bne	r2,zero,1000ce80 <__swbuf_r+0x138>
1000ce6c:	8180030b 	ldhu	r6,12(r16)
1000ce70:	80c00417 	ldw	r3,16(r16)
1000ce74:	003fc606 	br	1000cd90 <__alt_data_end+0xf800cd90>
1000ce78:	00080280 	call	10008028 <__sinit>
1000ce7c:	003fbd06 	br	1000cd74 <__alt_data_end+0xf800cd74>
1000ce80:	80c0030b 	ldhu	r3,12(r16)
1000ce84:	00bfffc4 	movi	r2,-1
1000ce88:	18c01014 	ori	r3,r3,64
1000ce8c:	80c0030d 	sth	r3,12(r16)
1000ce90:	00c00244 	movi	r3,9
1000ce94:	90c00015 	stw	r3,0(r18)
1000ce98:	003fd106 	br	1000cde0 <__alt_data_end+0xf800cde0>

1000ce9c <__swbuf>:
1000ce9c:	00c40074 	movhi	r3,4097
1000cea0:	18dc3104 	addi	r3,r3,28868
1000cea4:	2005883a 	mov	r2,r4
1000cea8:	19000017 	ldw	r4,0(r3)
1000ceac:	280d883a 	mov	r6,r5
1000ceb0:	100b883a 	mov	r5,r2
1000ceb4:	000cd481 	jmpi	1000cd48 <__swbuf_r>

1000ceb8 <_wcrtomb_r>:
1000ceb8:	defff604 	addi	sp,sp,-40
1000cebc:	00840074 	movhi	r2,4097
1000cec0:	dc800815 	stw	r18,32(sp)
1000cec4:	dc400715 	stw	r17,28(sp)
1000cec8:	dc000615 	stw	r16,24(sp)
1000cecc:	109c3504 	addi	r2,r2,28884
1000ced0:	dfc00915 	stw	ra,36(sp)
1000ced4:	2021883a 	mov	r16,r4
1000ced8:	3823883a 	mov	r17,r7
1000cedc:	14800017 	ldw	r18,0(r2)
1000cee0:	28001426 	beq	r5,zero,1000cf34 <_wcrtomb_r+0x7c>
1000cee4:	d9400415 	stw	r5,16(sp)
1000cee8:	d9800515 	stw	r6,20(sp)
1000ceec:	0008b1c0 	call	10008b1c <__locale_charset>
1000cef0:	d9400417 	ldw	r5,16(sp)
1000cef4:	d9800517 	ldw	r6,20(sp)
1000cef8:	8009883a 	mov	r4,r16
1000cefc:	dc400015 	stw	r17,0(sp)
1000cf00:	100f883a 	mov	r7,r2
1000cf04:	903ee83a 	callr	r18
1000cf08:	00ffffc4 	movi	r3,-1
1000cf0c:	10c0031e 	bne	r2,r3,1000cf1c <_wcrtomb_r+0x64>
1000cf10:	88000015 	stw	zero,0(r17)
1000cf14:	00c02284 	movi	r3,138
1000cf18:	80c00015 	stw	r3,0(r16)
1000cf1c:	dfc00917 	ldw	ra,36(sp)
1000cf20:	dc800817 	ldw	r18,32(sp)
1000cf24:	dc400717 	ldw	r17,28(sp)
1000cf28:	dc000617 	ldw	r16,24(sp)
1000cf2c:	dec00a04 	addi	sp,sp,40
1000cf30:	f800283a 	ret
1000cf34:	0008b1c0 	call	10008b1c <__locale_charset>
1000cf38:	8009883a 	mov	r4,r16
1000cf3c:	dc400015 	stw	r17,0(sp)
1000cf40:	d9400104 	addi	r5,sp,4
1000cf44:	000d883a 	mov	r6,zero
1000cf48:	100f883a 	mov	r7,r2
1000cf4c:	903ee83a 	callr	r18
1000cf50:	003fed06 	br	1000cf08 <__alt_data_end+0xf800cf08>

1000cf54 <wcrtomb>:
1000cf54:	defff504 	addi	sp,sp,-44
1000cf58:	dc400515 	stw	r17,20(sp)
1000cf5c:	dc000415 	stw	r16,16(sp)
1000cf60:	dfc00a15 	stw	ra,40(sp)
1000cf64:	dd400915 	stw	r21,36(sp)
1000cf68:	dd000815 	stw	r20,32(sp)
1000cf6c:	dcc00715 	stw	r19,28(sp)
1000cf70:	dc800615 	stw	r18,24(sp)
1000cf74:	2021883a 	mov	r16,r4
1000cf78:	3023883a 	mov	r17,r6
1000cf7c:	20001d26 	beq	r4,zero,1000cff4 <wcrtomb+0xa0>
1000cf80:	04840074 	movhi	r18,4097
1000cf84:	949c3104 	addi	r18,r18,28868
1000cf88:	00840074 	movhi	r2,4097
1000cf8c:	95400017 	ldw	r21,0(r18)
1000cf90:	109c3504 	addi	r2,r2,28884
1000cf94:	15000017 	ldw	r20,0(r2)
1000cf98:	2827883a 	mov	r19,r5
1000cf9c:	0008b1c0 	call	10008b1c <__locale_charset>
1000cfa0:	a809883a 	mov	r4,r21
1000cfa4:	dc400015 	stw	r17,0(sp)
1000cfa8:	800b883a 	mov	r5,r16
1000cfac:	980d883a 	mov	r6,r19
1000cfb0:	100f883a 	mov	r7,r2
1000cfb4:	a03ee83a 	callr	r20
1000cfb8:	00ffffc4 	movi	r3,-1
1000cfbc:	10c0041e 	bne	r2,r3,1000cfd0 <wcrtomb+0x7c>
1000cfc0:	90c00017 	ldw	r3,0(r18)
1000cfc4:	01002284 	movi	r4,138
1000cfc8:	88000015 	stw	zero,0(r17)
1000cfcc:	19000015 	stw	r4,0(r3)
1000cfd0:	dfc00a17 	ldw	ra,40(sp)
1000cfd4:	dd400917 	ldw	r21,36(sp)
1000cfd8:	dd000817 	ldw	r20,32(sp)
1000cfdc:	dcc00717 	ldw	r19,28(sp)
1000cfe0:	dc800617 	ldw	r18,24(sp)
1000cfe4:	dc400517 	ldw	r17,20(sp)
1000cfe8:	dc000417 	ldw	r16,16(sp)
1000cfec:	dec00b04 	addi	sp,sp,44
1000cff0:	f800283a 	ret
1000cff4:	04840074 	movhi	r18,4097
1000cff8:	949c3104 	addi	r18,r18,28868
1000cffc:	00840074 	movhi	r2,4097
1000d000:	94c00017 	ldw	r19,0(r18)
1000d004:	109c3504 	addi	r2,r2,28884
1000d008:	14000017 	ldw	r16,0(r2)
1000d00c:	0008b1c0 	call	10008b1c <__locale_charset>
1000d010:	9809883a 	mov	r4,r19
1000d014:	dc400015 	stw	r17,0(sp)
1000d018:	d9400104 	addi	r5,sp,4
1000d01c:	000d883a 	mov	r6,zero
1000d020:	100f883a 	mov	r7,r2
1000d024:	803ee83a 	callr	r16
1000d028:	003fe306 	br	1000cfb8 <__alt_data_end+0xf800cfb8>

1000d02c <__ascii_wctomb>:
1000d02c:	28000526 	beq	r5,zero,1000d044 <__ascii_wctomb+0x18>
1000d030:	00803fc4 	movi	r2,255
1000d034:	11800536 	bltu	r2,r6,1000d04c <__ascii_wctomb+0x20>
1000d038:	29800005 	stb	r6,0(r5)
1000d03c:	00800044 	movi	r2,1
1000d040:	f800283a 	ret
1000d044:	0005883a 	mov	r2,zero
1000d048:	f800283a 	ret
1000d04c:	00802284 	movi	r2,138
1000d050:	20800015 	stw	r2,0(r4)
1000d054:	00bfffc4 	movi	r2,-1
1000d058:	f800283a 	ret

1000d05c <_wctomb_r>:
1000d05c:	00840074 	movhi	r2,4097
1000d060:	defff904 	addi	sp,sp,-28
1000d064:	109c3504 	addi	r2,r2,28884
1000d068:	dfc00615 	stw	ra,24(sp)
1000d06c:	dc400515 	stw	r17,20(sp)
1000d070:	dc000415 	stw	r16,16(sp)
1000d074:	3823883a 	mov	r17,r7
1000d078:	14000017 	ldw	r16,0(r2)
1000d07c:	d9000115 	stw	r4,4(sp)
1000d080:	d9400215 	stw	r5,8(sp)
1000d084:	d9800315 	stw	r6,12(sp)
1000d088:	0008b1c0 	call	10008b1c <__locale_charset>
1000d08c:	d9000117 	ldw	r4,4(sp)
1000d090:	d9400217 	ldw	r5,8(sp)
1000d094:	d9800317 	ldw	r6,12(sp)
1000d098:	dc400015 	stw	r17,0(sp)
1000d09c:	100f883a 	mov	r7,r2
1000d0a0:	803ee83a 	callr	r16
1000d0a4:	dfc00617 	ldw	ra,24(sp)
1000d0a8:	dc400517 	ldw	r17,20(sp)
1000d0ac:	dc000417 	ldw	r16,16(sp)
1000d0b0:	dec00704 	addi	sp,sp,28
1000d0b4:	f800283a 	ret

1000d0b8 <__muldi3>:
1000d0b8:	defff604 	addi	sp,sp,-40
1000d0bc:	dd800615 	stw	r22,24(sp)
1000d0c0:	dd400515 	stw	r21,20(sp)
1000d0c4:	25bfffcc 	andi	r22,r4,65535
1000d0c8:	357fffcc 	andi	r21,r6,65535
1000d0cc:	dc400115 	stw	r17,4(sp)
1000d0d0:	2022d43a 	srli	r17,r4,16
1000d0d4:	dcc00315 	stw	r19,12(sp)
1000d0d8:	dc800215 	stw	r18,8(sp)
1000d0dc:	2027883a 	mov	r19,r4
1000d0e0:	2825883a 	mov	r18,r5
1000d0e4:	a809883a 	mov	r4,r21
1000d0e8:	b00b883a 	mov	r5,r22
1000d0ec:	dfc00915 	stw	ra,36(sp)
1000d0f0:	df000815 	stw	fp,32(sp)
1000d0f4:	ddc00715 	stw	r23,28(sp)
1000d0f8:	3839883a 	mov	fp,r7
1000d0fc:	302ed43a 	srli	r23,r6,16
1000d100:	dd000415 	stw	r20,16(sp)
1000d104:	dc000015 	stw	r16,0(sp)
1000d108:	3029883a 	mov	r20,r6
1000d10c:	0003c5c0 	call	10003c5c <__mulsi3>
1000d110:	a809883a 	mov	r4,r21
1000d114:	880b883a 	mov	r5,r17
1000d118:	1021883a 	mov	r16,r2
1000d11c:	0003c5c0 	call	10003c5c <__mulsi3>
1000d120:	880b883a 	mov	r5,r17
1000d124:	b809883a 	mov	r4,r23
1000d128:	102b883a 	mov	r21,r2
1000d12c:	0003c5c0 	call	10003c5c <__mulsi3>
1000d130:	b809883a 	mov	r4,r23
1000d134:	b00b883a 	mov	r5,r22
1000d138:	1023883a 	mov	r17,r2
1000d13c:	0003c5c0 	call	10003c5c <__mulsi3>
1000d140:	8012d43a 	srli	r9,r16,16
1000d144:	a885883a 	add	r2,r21,r2
1000d148:	1251883a 	add	r8,r2,r9
1000d14c:	4540022e 	bgeu	r8,r21,1000d158 <__muldi3+0xa0>
1000d150:	00800074 	movhi	r2,1
1000d154:	88a3883a 	add	r17,r17,r2
1000d158:	4006d43a 	srli	r3,r8,16
1000d15c:	4010943a 	slli	r8,r8,16
1000d160:	9809883a 	mov	r4,r19
1000d164:	e00b883a 	mov	r5,fp
1000d168:	843fffcc 	andi	r16,r16,65535
1000d16c:	88e3883a 	add	r17,r17,r3
1000d170:	4421883a 	add	r16,r8,r16
1000d174:	0003c5c0 	call	10003c5c <__mulsi3>
1000d178:	a009883a 	mov	r4,r20
1000d17c:	900b883a 	mov	r5,r18
1000d180:	1027883a 	mov	r19,r2
1000d184:	0003c5c0 	call	10003c5c <__mulsi3>
1000d188:	9885883a 	add	r2,r19,r2
1000d18c:	1447883a 	add	r3,r2,r17
1000d190:	8005883a 	mov	r2,r16
1000d194:	dfc00917 	ldw	ra,36(sp)
1000d198:	df000817 	ldw	fp,32(sp)
1000d19c:	ddc00717 	ldw	r23,28(sp)
1000d1a0:	dd800617 	ldw	r22,24(sp)
1000d1a4:	dd400517 	ldw	r21,20(sp)
1000d1a8:	dd000417 	ldw	r20,16(sp)
1000d1ac:	dcc00317 	ldw	r19,12(sp)
1000d1b0:	dc800217 	ldw	r18,8(sp)
1000d1b4:	dc400117 	ldw	r17,4(sp)
1000d1b8:	dc000017 	ldw	r16,0(sp)
1000d1bc:	dec00a04 	addi	sp,sp,40
1000d1c0:	f800283a 	ret

1000d1c4 <__udivdi3>:
1000d1c4:	defff504 	addi	sp,sp,-44
1000d1c8:	dcc00415 	stw	r19,16(sp)
1000d1cc:	dc000115 	stw	r16,4(sp)
1000d1d0:	dfc00a15 	stw	ra,40(sp)
1000d1d4:	df000915 	stw	fp,36(sp)
1000d1d8:	ddc00815 	stw	r23,32(sp)
1000d1dc:	dd800715 	stw	r22,28(sp)
1000d1e0:	dd400615 	stw	r21,24(sp)
1000d1e4:	dd000515 	stw	r20,20(sp)
1000d1e8:	dc800315 	stw	r18,12(sp)
1000d1ec:	dc400215 	stw	r17,8(sp)
1000d1f0:	2027883a 	mov	r19,r4
1000d1f4:	2821883a 	mov	r16,r5
1000d1f8:	3800471e 	bne	r7,zero,1000d318 <__udivdi3+0x154>
1000d1fc:	3025883a 	mov	r18,r6
1000d200:	2023883a 	mov	r17,r4
1000d204:	2980592e 	bgeu	r5,r6,1000d36c <__udivdi3+0x1a8>
1000d208:	00bfffd4 	movui	r2,65535
1000d20c:	2829883a 	mov	r20,r5
1000d210:	1180b236 	bltu	r2,r6,1000d4dc <__udivdi3+0x318>
1000d214:	00803fc4 	movi	r2,255
1000d218:	1181622e 	bgeu	r2,r6,1000d7a4 <__udivdi3+0x5e0>
1000d21c:	00800204 	movi	r2,8
1000d220:	1007883a 	mov	r3,r2
1000d224:	3084d83a 	srl	r2,r6,r2
1000d228:	01040074 	movhi	r4,4097
1000d22c:	21153404 	addi	r4,r4,21712
1000d230:	2085883a 	add	r2,r4,r2
1000d234:	11000003 	ldbu	r4,0(r2)
1000d238:	20c9883a 	add	r4,r4,r3
1000d23c:	00c00804 	movi	r3,32
1000d240:	1907c83a 	sub	r3,r3,r4
1000d244:	18000526 	beq	r3,zero,1000d25c <__udivdi3+0x98>
1000d248:	80e0983a 	sll	r16,r16,r3
1000d24c:	9908d83a 	srl	r4,r19,r4
1000d250:	30e4983a 	sll	r18,r6,r3
1000d254:	98e2983a 	sll	r17,r19,r3
1000d258:	8128b03a 	or	r20,r16,r4
1000d25c:	902ad43a 	srli	r21,r18,16
1000d260:	a009883a 	mov	r4,r20
1000d264:	95bfffcc 	andi	r22,r18,65535
1000d268:	a80b883a 	mov	r5,r21
1000d26c:	0003c540 	call	10003c54 <__umodsi3>
1000d270:	a009883a 	mov	r4,r20
1000d274:	a80b883a 	mov	r5,r21
1000d278:	102f883a 	mov	r23,r2
1000d27c:	0003c4c0 	call	10003c4c <__udivsi3>
1000d280:	1009883a 	mov	r4,r2
1000d284:	b00b883a 	mov	r5,r22
1000d288:	1021883a 	mov	r16,r2
1000d28c:	0003c5c0 	call	10003c5c <__mulsi3>
1000d290:	b82e943a 	slli	r23,r23,16
1000d294:	8808d43a 	srli	r4,r17,16
1000d298:	b906b03a 	or	r3,r23,r4
1000d29c:	1880052e 	bgeu	r3,r2,1000d2b4 <__udivdi3+0xf0>
1000d2a0:	1c87883a 	add	r3,r3,r18
1000d2a4:	813fffc4 	addi	r4,r16,-1
1000d2a8:	1c800136 	bltu	r3,r18,1000d2b0 <__udivdi3+0xec>
1000d2ac:	18815236 	bltu	r3,r2,1000d7f8 <__udivdi3+0x634>
1000d2b0:	2021883a 	mov	r16,r4
1000d2b4:	18a7c83a 	sub	r19,r3,r2
1000d2b8:	9809883a 	mov	r4,r19
1000d2bc:	a80b883a 	mov	r5,r21
1000d2c0:	0003c540 	call	10003c54 <__umodsi3>
1000d2c4:	1029883a 	mov	r20,r2
1000d2c8:	9809883a 	mov	r4,r19
1000d2cc:	a80b883a 	mov	r5,r21
1000d2d0:	a028943a 	slli	r20,r20,16
1000d2d4:	0003c4c0 	call	10003c4c <__udivsi3>
1000d2d8:	1009883a 	mov	r4,r2
1000d2dc:	b00b883a 	mov	r5,r22
1000d2e0:	8c7fffcc 	andi	r17,r17,65535
1000d2e4:	1027883a 	mov	r19,r2
1000d2e8:	a462b03a 	or	r17,r20,r17
1000d2ec:	0003c5c0 	call	10003c5c <__mulsi3>
1000d2f0:	8880052e 	bgeu	r17,r2,1000d308 <__udivdi3+0x144>
1000d2f4:	8ca3883a 	add	r17,r17,r18
1000d2f8:	98ffffc4 	addi	r3,r19,-1
1000d2fc:	8c811036 	bltu	r17,r18,1000d740 <__udivdi3+0x57c>
1000d300:	88810f2e 	bgeu	r17,r2,1000d740 <__udivdi3+0x57c>
1000d304:	9cffff84 	addi	r19,r19,-2
1000d308:	8020943a 	slli	r16,r16,16
1000d30c:	0007883a 	mov	r3,zero
1000d310:	9c04b03a 	or	r2,r19,r16
1000d314:	00006006 	br	1000d498 <__udivdi3+0x2d4>
1000d318:	29c05d36 	bltu	r5,r7,1000d490 <__udivdi3+0x2cc>
1000d31c:	00bfffd4 	movui	r2,65535
1000d320:	11c0692e 	bgeu	r2,r7,1000d4c8 <__udivdi3+0x304>
1000d324:	00804034 	movhi	r2,256
1000d328:	10bfffc4 	addi	r2,r2,-1
1000d32c:	11c10e2e 	bgeu	r2,r7,1000d768 <__udivdi3+0x5a4>
1000d330:	01400604 	movi	r5,24
1000d334:	2811883a 	mov	r8,r5
1000d338:	394ad83a 	srl	r5,r7,r5
1000d33c:	00840074 	movhi	r2,4097
1000d340:	10953404 	addi	r2,r2,21712
1000d344:	114b883a 	add	r5,r2,r5
1000d348:	29400003 	ldbu	r5,0(r5)
1000d34c:	00c00804 	movi	r3,32
1000d350:	2a0b883a 	add	r5,r5,r8
1000d354:	196fc83a 	sub	r23,r3,r5
1000d358:	b8006b1e 	bne	r23,zero,1000d508 <__udivdi3+0x344>
1000d35c:	3c011436 	bltu	r7,r16,1000d7b0 <__udivdi3+0x5ec>
1000d360:	9985403a 	cmpgeu	r2,r19,r6
1000d364:	0007883a 	mov	r3,zero
1000d368:	00004b06 	br	1000d498 <__udivdi3+0x2d4>
1000d36c:	3000041e 	bne	r6,zero,1000d380 <__udivdi3+0x1bc>
1000d370:	01000044 	movi	r4,1
1000d374:	000b883a 	mov	r5,zero
1000d378:	0003c4c0 	call	10003c4c <__udivsi3>
1000d37c:	1025883a 	mov	r18,r2
1000d380:	00bfffd4 	movui	r2,65535
1000d384:	14805b2e 	bgeu	r2,r18,1000d4f4 <__udivdi3+0x330>
1000d388:	00804034 	movhi	r2,256
1000d38c:	10bfffc4 	addi	r2,r2,-1
1000d390:	1480fe2e 	bgeu	r2,r18,1000d78c <__udivdi3+0x5c8>
1000d394:	00800604 	movi	r2,24
1000d398:	1007883a 	mov	r3,r2
1000d39c:	9084d83a 	srl	r2,r18,r2
1000d3a0:	01040074 	movhi	r4,4097
1000d3a4:	21153404 	addi	r4,r4,21712
1000d3a8:	2085883a 	add	r2,r4,r2
1000d3ac:	11800003 	ldbu	r6,0(r2)
1000d3b0:	01c00804 	movi	r7,32
1000d3b4:	30c7883a 	add	r3,r6,r3
1000d3b8:	38cfc83a 	sub	r7,r7,r3
1000d3bc:	3800a71e 	bne	r7,zero,1000d65c <__udivdi3+0x498>
1000d3c0:	9028d43a 	srli	r20,r18,16
1000d3c4:	84a1c83a 	sub	r16,r16,r18
1000d3c8:	957fffcc 	andi	r21,r18,65535
1000d3cc:	00c00044 	movi	r3,1
1000d3d0:	8009883a 	mov	r4,r16
1000d3d4:	a00b883a 	mov	r5,r20
1000d3d8:	d8c00015 	stw	r3,0(sp)
1000d3dc:	0003c540 	call	10003c54 <__umodsi3>
1000d3e0:	8009883a 	mov	r4,r16
1000d3e4:	a00b883a 	mov	r5,r20
1000d3e8:	102d883a 	mov	r22,r2
1000d3ec:	0003c4c0 	call	10003c4c <__udivsi3>
1000d3f0:	1009883a 	mov	r4,r2
1000d3f4:	a80b883a 	mov	r5,r21
1000d3f8:	1021883a 	mov	r16,r2
1000d3fc:	0003c5c0 	call	10003c5c <__mulsi3>
1000d400:	b02c943a 	slli	r22,r22,16
1000d404:	880ed43a 	srli	r7,r17,16
1000d408:	d8c00017 	ldw	r3,0(sp)
1000d40c:	b1ccb03a 	or	r6,r22,r7
1000d410:	3080052e 	bgeu	r6,r2,1000d428 <__udivdi3+0x264>
1000d414:	348d883a 	add	r6,r6,r18
1000d418:	813fffc4 	addi	r4,r16,-1
1000d41c:	34800136 	bltu	r6,r18,1000d424 <__udivdi3+0x260>
1000d420:	3080f236 	bltu	r6,r2,1000d7ec <__udivdi3+0x628>
1000d424:	2021883a 	mov	r16,r4
1000d428:	30a7c83a 	sub	r19,r6,r2
1000d42c:	9809883a 	mov	r4,r19
1000d430:	a00b883a 	mov	r5,r20
1000d434:	d8c00015 	stw	r3,0(sp)
1000d438:	0003c540 	call	10003c54 <__umodsi3>
1000d43c:	102d883a 	mov	r22,r2
1000d440:	9809883a 	mov	r4,r19
1000d444:	a00b883a 	mov	r5,r20
1000d448:	b02c943a 	slli	r22,r22,16
1000d44c:	0003c4c0 	call	10003c4c <__udivsi3>
1000d450:	1009883a 	mov	r4,r2
1000d454:	a80b883a 	mov	r5,r21
1000d458:	8c7fffcc 	andi	r17,r17,65535
1000d45c:	1027883a 	mov	r19,r2
1000d460:	b462b03a 	or	r17,r22,r17
1000d464:	0003c5c0 	call	10003c5c <__mulsi3>
1000d468:	d8c00017 	ldw	r3,0(sp)
1000d46c:	8880052e 	bgeu	r17,r2,1000d484 <__udivdi3+0x2c0>
1000d470:	8ca3883a 	add	r17,r17,r18
1000d474:	993fffc4 	addi	r4,r19,-1
1000d478:	8c80af36 	bltu	r17,r18,1000d738 <__udivdi3+0x574>
1000d47c:	8880ae2e 	bgeu	r17,r2,1000d738 <__udivdi3+0x574>
1000d480:	9cffff84 	addi	r19,r19,-2
1000d484:	8020943a 	slli	r16,r16,16
1000d488:	9c04b03a 	or	r2,r19,r16
1000d48c:	00000206 	br	1000d498 <__udivdi3+0x2d4>
1000d490:	0007883a 	mov	r3,zero
1000d494:	0005883a 	mov	r2,zero
1000d498:	dfc00a17 	ldw	ra,40(sp)
1000d49c:	df000917 	ldw	fp,36(sp)
1000d4a0:	ddc00817 	ldw	r23,32(sp)
1000d4a4:	dd800717 	ldw	r22,28(sp)
1000d4a8:	dd400617 	ldw	r21,24(sp)
1000d4ac:	dd000517 	ldw	r20,20(sp)
1000d4b0:	dcc00417 	ldw	r19,16(sp)
1000d4b4:	dc800317 	ldw	r18,12(sp)
1000d4b8:	dc400217 	ldw	r17,8(sp)
1000d4bc:	dc000117 	ldw	r16,4(sp)
1000d4c0:	dec00b04 	addi	sp,sp,44
1000d4c4:	f800283a 	ret
1000d4c8:	00803fc4 	movi	r2,255
1000d4cc:	11c0a92e 	bgeu	r2,r7,1000d774 <__udivdi3+0x5b0>
1000d4d0:	01400204 	movi	r5,8
1000d4d4:	2811883a 	mov	r8,r5
1000d4d8:	003f9706 	br	1000d338 <__alt_data_end+0xf800d338>
1000d4dc:	00804034 	movhi	r2,256
1000d4e0:	10bfffc4 	addi	r2,r2,-1
1000d4e4:	1180a62e 	bgeu	r2,r6,1000d780 <__udivdi3+0x5bc>
1000d4e8:	00800604 	movi	r2,24
1000d4ec:	1007883a 	mov	r3,r2
1000d4f0:	003f4c06 	br	1000d224 <__alt_data_end+0xf800d224>
1000d4f4:	00803fc4 	movi	r2,255
1000d4f8:	1480a72e 	bgeu	r2,r18,1000d798 <__udivdi3+0x5d4>
1000d4fc:	00800204 	movi	r2,8
1000d500:	1007883a 	mov	r3,r2
1000d504:	003fa506 	br	1000d39c <__alt_data_end+0xf800d39c>
1000d508:	3178d83a 	srl	fp,r6,r5
1000d50c:	3dce983a 	sll	r7,r7,r23
1000d510:	8168d83a 	srl	r20,r16,r5
1000d514:	9950d83a 	srl	r8,r19,r5
1000d518:	3f38b03a 	or	fp,r7,fp
1000d51c:	e024d43a 	srli	r18,fp,16
1000d520:	85e0983a 	sll	r16,r16,r23
1000d524:	a009883a 	mov	r4,r20
1000d528:	900b883a 	mov	r5,r18
1000d52c:	8220b03a 	or	r16,r16,r8
1000d530:	35ea983a 	sll	r21,r6,r23
1000d534:	0003c540 	call	10003c54 <__umodsi3>
1000d538:	a009883a 	mov	r4,r20
1000d53c:	900b883a 	mov	r5,r18
1000d540:	1023883a 	mov	r17,r2
1000d544:	e5bfffcc 	andi	r22,fp,65535
1000d548:	0003c4c0 	call	10003c4c <__udivsi3>
1000d54c:	1009883a 	mov	r4,r2
1000d550:	b00b883a 	mov	r5,r22
1000d554:	1029883a 	mov	r20,r2
1000d558:	0003c5c0 	call	10003c5c <__mulsi3>
1000d55c:	8806943a 	slli	r3,r17,16
1000d560:	8014d43a 	srli	r10,r16,16
1000d564:	1a92b03a 	or	r9,r3,r10
1000d568:	4880042e 	bgeu	r9,r2,1000d57c <__udivdi3+0x3b8>
1000d56c:	4f13883a 	add	r9,r9,fp
1000d570:	a0ffffc4 	addi	r3,r20,-1
1000d574:	4f00952e 	bgeu	r9,fp,1000d7cc <__udivdi3+0x608>
1000d578:	1829883a 	mov	r20,r3
1000d57c:	48a3c83a 	sub	r17,r9,r2
1000d580:	8809883a 	mov	r4,r17
1000d584:	900b883a 	mov	r5,r18
1000d588:	0003c540 	call	10003c54 <__umodsi3>
1000d58c:	8809883a 	mov	r4,r17
1000d590:	900b883a 	mov	r5,r18
1000d594:	d8800015 	stw	r2,0(sp)
1000d598:	0003c4c0 	call	10003c4c <__udivsi3>
1000d59c:	1009883a 	mov	r4,r2
1000d5a0:	b00b883a 	mov	r5,r22
1000d5a4:	1023883a 	mov	r17,r2
1000d5a8:	0003c5c0 	call	10003c5c <__mulsi3>
1000d5ac:	d8c00017 	ldw	r3,0(sp)
1000d5b0:	823fffcc 	andi	r8,r16,65535
1000d5b4:	1806943a 	slli	r3,r3,16
1000d5b8:	1a20b03a 	or	r16,r3,r8
1000d5bc:	8080042e 	bgeu	r16,r2,1000d5d0 <__udivdi3+0x40c>
1000d5c0:	8721883a 	add	r16,r16,fp
1000d5c4:	88ffffc4 	addi	r3,r17,-1
1000d5c8:	87007c2e 	bgeu	r16,fp,1000d7bc <__udivdi3+0x5f8>
1000d5cc:	1823883a 	mov	r17,r3
1000d5d0:	a028943a 	slli	r20,r20,16
1000d5d4:	acbfffcc 	andi	r18,r21,65535
1000d5d8:	900b883a 	mov	r5,r18
1000d5dc:	8d28b03a 	or	r20,r17,r20
1000d5e0:	a022d43a 	srli	r17,r20,16
1000d5e4:	a5bfffcc 	andi	r22,r20,65535
1000d5e8:	b009883a 	mov	r4,r22
1000d5ec:	a82ad43a 	srli	r21,r21,16
1000d5f0:	80a1c83a 	sub	r16,r16,r2
1000d5f4:	0003c5c0 	call	10003c5c <__mulsi3>
1000d5f8:	8809883a 	mov	r4,r17
1000d5fc:	900b883a 	mov	r5,r18
1000d600:	1039883a 	mov	fp,r2
1000d604:	0003c5c0 	call	10003c5c <__mulsi3>
1000d608:	8809883a 	mov	r4,r17
1000d60c:	a80b883a 	mov	r5,r21
1000d610:	1025883a 	mov	r18,r2
1000d614:	0003c5c0 	call	10003c5c <__mulsi3>
1000d618:	b009883a 	mov	r4,r22
1000d61c:	a80b883a 	mov	r5,r21
1000d620:	1023883a 	mov	r17,r2
1000d624:	0003c5c0 	call	10003c5c <__mulsi3>
1000d628:	e006d43a 	srli	r3,fp,16
1000d62c:	9085883a 	add	r2,r18,r2
1000d630:	10c7883a 	add	r3,r2,r3
1000d634:	1c80022e 	bgeu	r3,r18,1000d640 <__udivdi3+0x47c>
1000d638:	00800074 	movhi	r2,1
1000d63c:	88a3883a 	add	r17,r17,r2
1000d640:	1808d43a 	srli	r4,r3,16
1000d644:	8909883a 	add	r4,r17,r4
1000d648:	81004436 	bltu	r16,r4,1000d75c <__udivdi3+0x598>
1000d64c:	81003e26 	beq	r16,r4,1000d748 <__udivdi3+0x584>
1000d650:	a005883a 	mov	r2,r20
1000d654:	0007883a 	mov	r3,zero
1000d658:	003f8f06 	br	1000d498 <__alt_data_end+0xf800d498>
1000d65c:	91e4983a 	sll	r18,r18,r7
1000d660:	80eed83a 	srl	r23,r16,r3
1000d664:	81cc983a 	sll	r6,r16,r7
1000d668:	9028d43a 	srli	r20,r18,16
1000d66c:	98c6d83a 	srl	r3,r19,r3
1000d670:	b809883a 	mov	r4,r23
1000d674:	a00b883a 	mov	r5,r20
1000d678:	30ecb03a 	or	r22,r6,r3
1000d67c:	99e2983a 	sll	r17,r19,r7
1000d680:	0003c540 	call	10003c54 <__umodsi3>
1000d684:	b809883a 	mov	r4,r23
1000d688:	a00b883a 	mov	r5,r20
1000d68c:	1021883a 	mov	r16,r2
1000d690:	957fffcc 	andi	r21,r18,65535
1000d694:	0003c4c0 	call	10003c4c <__udivsi3>
1000d698:	a80b883a 	mov	r5,r21
1000d69c:	1009883a 	mov	r4,r2
1000d6a0:	102f883a 	mov	r23,r2
1000d6a4:	0003c5c0 	call	10003c5c <__mulsi3>
1000d6a8:	8020943a 	slli	r16,r16,16
1000d6ac:	b00ad43a 	srli	r5,r22,16
1000d6b0:	814cb03a 	or	r6,r16,r5
1000d6b4:	3080062e 	bgeu	r6,r2,1000d6d0 <__udivdi3+0x50c>
1000d6b8:	348d883a 	add	r6,r6,r18
1000d6bc:	b8ffffc4 	addi	r3,r23,-1
1000d6c0:	34804836 	bltu	r6,r18,1000d7e4 <__udivdi3+0x620>
1000d6c4:	3080472e 	bgeu	r6,r2,1000d7e4 <__udivdi3+0x620>
1000d6c8:	bdffff84 	addi	r23,r23,-2
1000d6cc:	348d883a 	add	r6,r6,r18
1000d6d0:	30a7c83a 	sub	r19,r6,r2
1000d6d4:	9809883a 	mov	r4,r19
1000d6d8:	a00b883a 	mov	r5,r20
1000d6dc:	0003c540 	call	10003c54 <__umodsi3>
1000d6e0:	9809883a 	mov	r4,r19
1000d6e4:	a00b883a 	mov	r5,r20
1000d6e8:	1039883a 	mov	fp,r2
1000d6ec:	0003c4c0 	call	10003c4c <__udivsi3>
1000d6f0:	1009883a 	mov	r4,r2
1000d6f4:	a80b883a 	mov	r5,r21
1000d6f8:	e038943a 	slli	fp,fp,16
1000d6fc:	1027883a 	mov	r19,r2
1000d700:	0003c5c0 	call	10003c5c <__mulsi3>
1000d704:	b1bfffcc 	andi	r6,r22,65535
1000d708:	e18cb03a 	or	r6,fp,r6
1000d70c:	3080062e 	bgeu	r6,r2,1000d728 <__udivdi3+0x564>
1000d710:	348d883a 	add	r6,r6,r18
1000d714:	98ffffc4 	addi	r3,r19,-1
1000d718:	34803036 	bltu	r6,r18,1000d7dc <__udivdi3+0x618>
1000d71c:	30802f2e 	bgeu	r6,r2,1000d7dc <__udivdi3+0x618>
1000d720:	9cffff84 	addi	r19,r19,-2
1000d724:	348d883a 	add	r6,r6,r18
1000d728:	b82e943a 	slli	r23,r23,16
1000d72c:	30a1c83a 	sub	r16,r6,r2
1000d730:	9dc6b03a 	or	r3,r19,r23
1000d734:	003f2606 	br	1000d3d0 <__alt_data_end+0xf800d3d0>
1000d738:	2027883a 	mov	r19,r4
1000d73c:	003f5106 	br	1000d484 <__alt_data_end+0xf800d484>
1000d740:	1827883a 	mov	r19,r3
1000d744:	003ef006 	br	1000d308 <__alt_data_end+0xf800d308>
1000d748:	1808943a 	slli	r4,r3,16
1000d74c:	9dc6983a 	sll	r3,r19,r23
1000d750:	e73fffcc 	andi	fp,fp,65535
1000d754:	2709883a 	add	r4,r4,fp
1000d758:	193fbd2e 	bgeu	r3,r4,1000d650 <__alt_data_end+0xf800d650>
1000d75c:	a0bfffc4 	addi	r2,r20,-1
1000d760:	0007883a 	mov	r3,zero
1000d764:	003f4c06 	br	1000d498 <__alt_data_end+0xf800d498>
1000d768:	01400404 	movi	r5,16
1000d76c:	2811883a 	mov	r8,r5
1000d770:	003ef106 	br	1000d338 <__alt_data_end+0xf800d338>
1000d774:	000b883a 	mov	r5,zero
1000d778:	0011883a 	mov	r8,zero
1000d77c:	003eee06 	br	1000d338 <__alt_data_end+0xf800d338>
1000d780:	00800404 	movi	r2,16
1000d784:	1007883a 	mov	r3,r2
1000d788:	003ea606 	br	1000d224 <__alt_data_end+0xf800d224>
1000d78c:	00800404 	movi	r2,16
1000d790:	1007883a 	mov	r3,r2
1000d794:	003f0106 	br	1000d39c <__alt_data_end+0xf800d39c>
1000d798:	0005883a 	mov	r2,zero
1000d79c:	0007883a 	mov	r3,zero
1000d7a0:	003efe06 	br	1000d39c <__alt_data_end+0xf800d39c>
1000d7a4:	0005883a 	mov	r2,zero
1000d7a8:	0007883a 	mov	r3,zero
1000d7ac:	003e9d06 	br	1000d224 <__alt_data_end+0xf800d224>
1000d7b0:	0007883a 	mov	r3,zero
1000d7b4:	00800044 	movi	r2,1
1000d7b8:	003f3706 	br	1000d498 <__alt_data_end+0xf800d498>
1000d7bc:	80bf832e 	bgeu	r16,r2,1000d5cc <__alt_data_end+0xf800d5cc>
1000d7c0:	8c7fff84 	addi	r17,r17,-2
1000d7c4:	8721883a 	add	r16,r16,fp
1000d7c8:	003f8106 	br	1000d5d0 <__alt_data_end+0xf800d5d0>
1000d7cc:	48bf6a2e 	bgeu	r9,r2,1000d578 <__alt_data_end+0xf800d578>
1000d7d0:	a53fff84 	addi	r20,r20,-2
1000d7d4:	4f13883a 	add	r9,r9,fp
1000d7d8:	003f6806 	br	1000d57c <__alt_data_end+0xf800d57c>
1000d7dc:	1827883a 	mov	r19,r3
1000d7e0:	003fd106 	br	1000d728 <__alt_data_end+0xf800d728>
1000d7e4:	182f883a 	mov	r23,r3
1000d7e8:	003fb906 	br	1000d6d0 <__alt_data_end+0xf800d6d0>
1000d7ec:	843fff84 	addi	r16,r16,-2
1000d7f0:	348d883a 	add	r6,r6,r18
1000d7f4:	003f0c06 	br	1000d428 <__alt_data_end+0xf800d428>
1000d7f8:	843fff84 	addi	r16,r16,-2
1000d7fc:	1c87883a 	add	r3,r3,r18
1000d800:	003eac06 	br	1000d2b4 <__alt_data_end+0xf800d2b4>

1000d804 <__umoddi3>:
1000d804:	defff404 	addi	sp,sp,-48
1000d808:	dd800815 	stw	r22,32(sp)
1000d80c:	dc400315 	stw	r17,12(sp)
1000d810:	dc000215 	stw	r16,8(sp)
1000d814:	dfc00b15 	stw	ra,44(sp)
1000d818:	df000a15 	stw	fp,40(sp)
1000d81c:	ddc00915 	stw	r23,36(sp)
1000d820:	dd400715 	stw	r21,28(sp)
1000d824:	dd000615 	stw	r20,24(sp)
1000d828:	dcc00515 	stw	r19,20(sp)
1000d82c:	dc800415 	stw	r18,16(sp)
1000d830:	2021883a 	mov	r16,r4
1000d834:	2823883a 	mov	r17,r5
1000d838:	282d883a 	mov	r22,r5
1000d83c:	38003c1e 	bne	r7,zero,1000d930 <__umoddi3+0x12c>
1000d840:	3027883a 	mov	r19,r6
1000d844:	2029883a 	mov	r20,r4
1000d848:	2980522e 	bgeu	r5,r6,1000d994 <__umoddi3+0x190>
1000d84c:	00bfffd4 	movui	r2,65535
1000d850:	1180a436 	bltu	r2,r6,1000dae4 <__umoddi3+0x2e0>
1000d854:	00803fc4 	movi	r2,255
1000d858:	11815e2e 	bgeu	r2,r6,1000ddd4 <__umoddi3+0x5d0>
1000d85c:	01400204 	movi	r5,8
1000d860:	2805883a 	mov	r2,r5
1000d864:	314ad83a 	srl	r5,r6,r5
1000d868:	00c40074 	movhi	r3,4097
1000d86c:	18d53404 	addi	r3,r3,21712
1000d870:	194b883a 	add	r5,r3,r5
1000d874:	29000003 	ldbu	r4,0(r5)
1000d878:	2089883a 	add	r4,r4,r2
1000d87c:	00800804 	movi	r2,32
1000d880:	1105c83a 	sub	r2,r2,r4
1000d884:	10010c26 	beq	r2,zero,1000dcb8 <__umoddi3+0x4b4>
1000d888:	88a2983a 	sll	r17,r17,r2
1000d88c:	8108d83a 	srl	r4,r16,r4
1000d890:	30a6983a 	sll	r19,r6,r2
1000d894:	80a8983a 	sll	r20,r16,r2
1000d898:	1025883a 	mov	r18,r2
1000d89c:	892cb03a 	or	r22,r17,r4
1000d8a0:	9822d43a 	srli	r17,r19,16
1000d8a4:	b009883a 	mov	r4,r22
1000d8a8:	9d7fffcc 	andi	r21,r19,65535
1000d8ac:	880b883a 	mov	r5,r17
1000d8b0:	0003c540 	call	10003c54 <__umodsi3>
1000d8b4:	b009883a 	mov	r4,r22
1000d8b8:	880b883a 	mov	r5,r17
1000d8bc:	102f883a 	mov	r23,r2
1000d8c0:	0003c4c0 	call	10003c4c <__udivsi3>
1000d8c4:	1009883a 	mov	r4,r2
1000d8c8:	a80b883a 	mov	r5,r21
1000d8cc:	0003c5c0 	call	10003c5c <__mulsi3>
1000d8d0:	b82e943a 	slli	r23,r23,16
1000d8d4:	a008d43a 	srli	r4,r20,16
1000d8d8:	b906b03a 	or	r3,r23,r4
1000d8dc:	1880042e 	bgeu	r3,r2,1000d8f0 <__umoddi3+0xec>
1000d8e0:	1cc7883a 	add	r3,r3,r19
1000d8e4:	1cc00236 	bltu	r3,r19,1000d8f0 <__umoddi3+0xec>
1000d8e8:	1880012e 	bgeu	r3,r2,1000d8f0 <__umoddi3+0xec>
1000d8ec:	1cc7883a 	add	r3,r3,r19
1000d8f0:	18a1c83a 	sub	r16,r3,r2
1000d8f4:	8009883a 	mov	r4,r16
1000d8f8:	880b883a 	mov	r5,r17
1000d8fc:	0003c540 	call	10003c54 <__umodsi3>
1000d900:	8009883a 	mov	r4,r16
1000d904:	880b883a 	mov	r5,r17
1000d908:	102d883a 	mov	r22,r2
1000d90c:	0003c4c0 	call	10003c4c <__udivsi3>
1000d910:	1009883a 	mov	r4,r2
1000d914:	a80b883a 	mov	r5,r21
1000d918:	b02c943a 	slli	r22,r22,16
1000d91c:	0003c5c0 	call	10003c5c <__mulsi3>
1000d920:	a13fffcc 	andi	r4,r20,65535
1000d924:	b106b03a 	or	r3,r22,r4
1000d928:	1880572e 	bgeu	r3,r2,1000da88 <__umoddi3+0x284>
1000d92c:	00005206 	br	1000da78 <__umoddi3+0x274>
1000d930:	29c05936 	bltu	r5,r7,1000da98 <__umoddi3+0x294>
1000d934:	00bfffd4 	movui	r2,65535
1000d938:	11c0652e 	bgeu	r2,r7,1000dad0 <__umoddi3+0x2cc>
1000d93c:	00804034 	movhi	r2,256
1000d940:	10bfffc4 	addi	r2,r2,-1
1000d944:	11c1172e 	bgeu	r2,r7,1000dda4 <__umoddi3+0x5a0>
1000d948:	01400604 	movi	r5,24
1000d94c:	282b883a 	mov	r21,r5
1000d950:	394ad83a 	srl	r5,r7,r5
1000d954:	00c40074 	movhi	r3,4097
1000d958:	18d53404 	addi	r3,r3,21712
1000d95c:	194b883a 	add	r5,r3,r5
1000d960:	28800003 	ldbu	r2,0(r5)
1000d964:	00c00804 	movi	r3,32
1000d968:	156b883a 	add	r21,r2,r21
1000d96c:	1d69c83a 	sub	r20,r3,r21
1000d970:	a000671e 	bne	r20,zero,1000db10 <__umoddi3+0x30c>
1000d974:	3c400136 	bltu	r7,r17,1000d97c <__umoddi3+0x178>
1000d978:	81812336 	bltu	r16,r6,1000de08 <__umoddi3+0x604>
1000d97c:	8185c83a 	sub	r2,r16,r6
1000d980:	89e3c83a 	sub	r17,r17,r7
1000d984:	8087803a 	cmpltu	r3,r16,r2
1000d988:	88edc83a 	sub	r22,r17,r3
1000d98c:	b007883a 	mov	r3,r22
1000d990:	00004306 	br	1000daa0 <__umoddi3+0x29c>
1000d994:	3000041e 	bne	r6,zero,1000d9a8 <__umoddi3+0x1a4>
1000d998:	01000044 	movi	r4,1
1000d99c:	000b883a 	mov	r5,zero
1000d9a0:	0003c4c0 	call	10003c4c <__udivsi3>
1000d9a4:	1027883a 	mov	r19,r2
1000d9a8:	00bfffd4 	movui	r2,65535
1000d9ac:	14c0532e 	bgeu	r2,r19,1000dafc <__umoddi3+0x2f8>
1000d9b0:	00804034 	movhi	r2,256
1000d9b4:	10bfffc4 	addi	r2,r2,-1
1000d9b8:	14c1032e 	bgeu	r2,r19,1000ddc8 <__umoddi3+0x5c4>
1000d9bc:	00800604 	movi	r2,24
1000d9c0:	1007883a 	mov	r3,r2
1000d9c4:	9884d83a 	srl	r2,r19,r2
1000d9c8:	01040074 	movhi	r4,4097
1000d9cc:	21153404 	addi	r4,r4,21712
1000d9d0:	2085883a 	add	r2,r4,r2
1000d9d4:	11000003 	ldbu	r4,0(r2)
1000d9d8:	00800804 	movi	r2,32
1000d9dc:	20c7883a 	add	r3,r4,r3
1000d9e0:	10c5c83a 	sub	r2,r2,r3
1000d9e4:	1000b61e 	bne	r2,zero,1000dcc0 <__umoddi3+0x4bc>
1000d9e8:	982ad43a 	srli	r21,r19,16
1000d9ec:	8ce3c83a 	sub	r17,r17,r19
1000d9f0:	9dbfffcc 	andi	r22,r19,65535
1000d9f4:	0025883a 	mov	r18,zero
1000d9f8:	8809883a 	mov	r4,r17
1000d9fc:	a80b883a 	mov	r5,r21
1000da00:	0003c540 	call	10003c54 <__umodsi3>
1000da04:	8809883a 	mov	r4,r17
1000da08:	a80b883a 	mov	r5,r21
1000da0c:	102f883a 	mov	r23,r2
1000da10:	0003c4c0 	call	10003c4c <__udivsi3>
1000da14:	1009883a 	mov	r4,r2
1000da18:	b00b883a 	mov	r5,r22
1000da1c:	0003c5c0 	call	10003c5c <__mulsi3>
1000da20:	b82e943a 	slli	r23,r23,16
1000da24:	a008d43a 	srli	r4,r20,16
1000da28:	b906b03a 	or	r3,r23,r4
1000da2c:	1880032e 	bgeu	r3,r2,1000da3c <__umoddi3+0x238>
1000da30:	1cc7883a 	add	r3,r3,r19
1000da34:	1cc00136 	bltu	r3,r19,1000da3c <__umoddi3+0x238>
1000da38:	1880f136 	bltu	r3,r2,1000de00 <__umoddi3+0x5fc>
1000da3c:	18a1c83a 	sub	r16,r3,r2
1000da40:	8009883a 	mov	r4,r16
1000da44:	a80b883a 	mov	r5,r21
1000da48:	0003c540 	call	10003c54 <__umodsi3>
1000da4c:	8009883a 	mov	r4,r16
1000da50:	a80b883a 	mov	r5,r21
1000da54:	1023883a 	mov	r17,r2
1000da58:	0003c4c0 	call	10003c4c <__udivsi3>
1000da5c:	1009883a 	mov	r4,r2
1000da60:	b00b883a 	mov	r5,r22
1000da64:	8822943a 	slli	r17,r17,16
1000da68:	0003c5c0 	call	10003c5c <__mulsi3>
1000da6c:	a13fffcc 	andi	r4,r20,65535
1000da70:	8906b03a 	or	r3,r17,r4
1000da74:	1880042e 	bgeu	r3,r2,1000da88 <__umoddi3+0x284>
1000da78:	1cc7883a 	add	r3,r3,r19
1000da7c:	1cc00236 	bltu	r3,r19,1000da88 <__umoddi3+0x284>
1000da80:	1880012e 	bgeu	r3,r2,1000da88 <__umoddi3+0x284>
1000da84:	1cc7883a 	add	r3,r3,r19
1000da88:	1887c83a 	sub	r3,r3,r2
1000da8c:	1c84d83a 	srl	r2,r3,r18
1000da90:	0007883a 	mov	r3,zero
1000da94:	00000206 	br	1000daa0 <__umoddi3+0x29c>
1000da98:	2005883a 	mov	r2,r4
1000da9c:	2807883a 	mov	r3,r5
1000daa0:	dfc00b17 	ldw	ra,44(sp)
1000daa4:	df000a17 	ldw	fp,40(sp)
1000daa8:	ddc00917 	ldw	r23,36(sp)
1000daac:	dd800817 	ldw	r22,32(sp)
1000dab0:	dd400717 	ldw	r21,28(sp)
1000dab4:	dd000617 	ldw	r20,24(sp)
1000dab8:	dcc00517 	ldw	r19,20(sp)
1000dabc:	dc800417 	ldw	r18,16(sp)
1000dac0:	dc400317 	ldw	r17,12(sp)
1000dac4:	dc000217 	ldw	r16,8(sp)
1000dac8:	dec00c04 	addi	sp,sp,48
1000dacc:	f800283a 	ret
1000dad0:	00803fc4 	movi	r2,255
1000dad4:	11c0b02e 	bgeu	r2,r7,1000dd98 <__umoddi3+0x594>
1000dad8:	01400204 	movi	r5,8
1000dadc:	282b883a 	mov	r21,r5
1000dae0:	003f9b06 	br	1000d950 <__alt_data_end+0xf800d950>
1000dae4:	00804034 	movhi	r2,256
1000dae8:	10bfffc4 	addi	r2,r2,-1
1000daec:	1180b02e 	bgeu	r2,r6,1000ddb0 <__umoddi3+0x5ac>
1000daf0:	01400604 	movi	r5,24
1000daf4:	2805883a 	mov	r2,r5
1000daf8:	003f5a06 	br	1000d864 <__alt_data_end+0xf800d864>
1000dafc:	00803fc4 	movi	r2,255
1000db00:	14c0ae2e 	bgeu	r2,r19,1000ddbc <__umoddi3+0x5b8>
1000db04:	00800204 	movi	r2,8
1000db08:	1007883a 	mov	r3,r2
1000db0c:	003fad06 	br	1000d9c4 <__alt_data_end+0xf800d9c4>
1000db10:	3d0a983a 	sll	r5,r7,r20
1000db14:	356cd83a 	srl	r22,r6,r21
1000db18:	8d78d83a 	srl	fp,r17,r21
1000db1c:	8d10983a 	sll	r8,r17,r20
1000db20:	2dacb03a 	or	r22,r5,r22
1000db24:	b02ed43a 	srli	r23,r22,16
1000db28:	8564d83a 	srl	r18,r16,r21
1000db2c:	e009883a 	mov	r4,fp
1000db30:	b80b883a 	mov	r5,r23
1000db34:	44a4b03a 	or	r18,r8,r18
1000db38:	3526983a 	sll	r19,r6,r20
1000db3c:	0003c540 	call	10003c54 <__umodsi3>
1000db40:	e009883a 	mov	r4,fp
1000db44:	b80b883a 	mov	r5,r23
1000db48:	b47fffcc 	andi	r17,r22,65535
1000db4c:	d8800015 	stw	r2,0(sp)
1000db50:	0003c4c0 	call	10003c4c <__udivsi3>
1000db54:	1009883a 	mov	r4,r2
1000db58:	880b883a 	mov	r5,r17
1000db5c:	1039883a 	mov	fp,r2
1000db60:	0003c5c0 	call	10003c5c <__mulsi3>
1000db64:	d9800017 	ldw	r6,0(sp)
1000db68:	9008d43a 	srli	r4,r18,16
1000db6c:	8520983a 	sll	r16,r16,r20
1000db70:	300c943a 	slli	r6,r6,16
1000db74:	3106b03a 	or	r3,r6,r4
1000db78:	1880042e 	bgeu	r3,r2,1000db8c <__umoddi3+0x388>
1000db7c:	1d87883a 	add	r3,r3,r22
1000db80:	e13fffc4 	addi	r4,fp,-1
1000db84:	1d809a2e 	bgeu	r3,r22,1000ddf0 <__umoddi3+0x5ec>
1000db88:	2039883a 	mov	fp,r4
1000db8c:	1887c83a 	sub	r3,r3,r2
1000db90:	1809883a 	mov	r4,r3
1000db94:	b80b883a 	mov	r5,r23
1000db98:	d8c00115 	stw	r3,4(sp)
1000db9c:	0003c540 	call	10003c54 <__umodsi3>
1000dba0:	d8c00117 	ldw	r3,4(sp)
1000dba4:	b80b883a 	mov	r5,r23
1000dba8:	d8800015 	stw	r2,0(sp)
1000dbac:	1809883a 	mov	r4,r3
1000dbb0:	0003c4c0 	call	10003c4c <__udivsi3>
1000dbb4:	880b883a 	mov	r5,r17
1000dbb8:	1009883a 	mov	r4,r2
1000dbbc:	102f883a 	mov	r23,r2
1000dbc0:	0003c5c0 	call	10003c5c <__mulsi3>
1000dbc4:	d9800017 	ldw	r6,0(sp)
1000dbc8:	947fffcc 	andi	r17,r18,65535
1000dbcc:	300c943a 	slli	r6,r6,16
1000dbd0:	3464b03a 	or	r18,r6,r17
1000dbd4:	9080042e 	bgeu	r18,r2,1000dbe8 <__umoddi3+0x3e4>
1000dbd8:	95a5883a 	add	r18,r18,r22
1000dbdc:	b8ffffc4 	addi	r3,r23,-1
1000dbe0:	95807f2e 	bgeu	r18,r22,1000dde0 <__umoddi3+0x5dc>
1000dbe4:	182f883a 	mov	r23,r3
1000dbe8:	e038943a 	slli	fp,fp,16
1000dbec:	980cd43a 	srli	r6,r19,16
1000dbf0:	98ffffcc 	andi	r3,r19,65535
1000dbf4:	bf38b03a 	or	fp,r23,fp
1000dbf8:	e02ed43a 	srli	r23,fp,16
1000dbfc:	e73fffcc 	andi	fp,fp,65535
1000dc00:	180b883a 	mov	r5,r3
1000dc04:	e009883a 	mov	r4,fp
1000dc08:	d9800015 	stw	r6,0(sp)
1000dc0c:	d8c00115 	stw	r3,4(sp)
1000dc10:	90a5c83a 	sub	r18,r18,r2
1000dc14:	0003c5c0 	call	10003c5c <__mulsi3>
1000dc18:	d8c00117 	ldw	r3,4(sp)
1000dc1c:	b809883a 	mov	r4,r23
1000dc20:	1023883a 	mov	r17,r2
1000dc24:	180b883a 	mov	r5,r3
1000dc28:	0003c5c0 	call	10003c5c <__mulsi3>
1000dc2c:	d9800017 	ldw	r6,0(sp)
1000dc30:	b809883a 	mov	r4,r23
1000dc34:	d8800115 	stw	r2,4(sp)
1000dc38:	300b883a 	mov	r5,r6
1000dc3c:	302f883a 	mov	r23,r6
1000dc40:	0003c5c0 	call	10003c5c <__mulsi3>
1000dc44:	e009883a 	mov	r4,fp
1000dc48:	b80b883a 	mov	r5,r23
1000dc4c:	d8800015 	stw	r2,0(sp)
1000dc50:	0003c5c0 	call	10003c5c <__mulsi3>
1000dc54:	d8c00117 	ldw	r3,4(sp)
1000dc58:	880cd43a 	srli	r6,r17,16
1000dc5c:	d9c00017 	ldw	r7,0(sp)
1000dc60:	1885883a 	add	r2,r3,r2
1000dc64:	118d883a 	add	r6,r2,r6
1000dc68:	30c0022e 	bgeu	r6,r3,1000dc74 <__umoddi3+0x470>
1000dc6c:	00800074 	movhi	r2,1
1000dc70:	388f883a 	add	r7,r7,r2
1000dc74:	3006d43a 	srli	r3,r6,16
1000dc78:	300c943a 	slli	r6,r6,16
1000dc7c:	8c7fffcc 	andi	r17,r17,65535
1000dc80:	38c7883a 	add	r3,r7,r3
1000dc84:	3463883a 	add	r17,r6,r17
1000dc88:	90c03d36 	bltu	r18,r3,1000dd80 <__umoddi3+0x57c>
1000dc8c:	90c06026 	beq	r18,r3,1000de10 <__umoddi3+0x60c>
1000dc90:	90c9c83a 	sub	r4,r18,r3
1000dc94:	880f883a 	mov	r7,r17
1000dc98:	81cfc83a 	sub	r7,r16,r7
1000dc9c:	81c7803a 	cmpltu	r3,r16,r7
1000dca0:	20c7c83a 	sub	r3,r4,r3
1000dca4:	1d44983a 	sll	r2,r3,r21
1000dca8:	3d0ed83a 	srl	r7,r7,r20
1000dcac:	1d06d83a 	srl	r3,r3,r20
1000dcb0:	11c4b03a 	or	r2,r2,r7
1000dcb4:	003f7a06 	br	1000daa0 <__alt_data_end+0xf800daa0>
1000dcb8:	0025883a 	mov	r18,zero
1000dcbc:	003ef806 	br	1000d8a0 <__alt_data_end+0xf800d8a0>
1000dcc0:	98a6983a 	sll	r19,r19,r2
1000dcc4:	88e8d83a 	srl	r20,r17,r3
1000dcc8:	80c6d83a 	srl	r3,r16,r3
1000dccc:	982ad43a 	srli	r21,r19,16
1000dcd0:	88a2983a 	sll	r17,r17,r2
1000dcd4:	a009883a 	mov	r4,r20
1000dcd8:	a80b883a 	mov	r5,r21
1000dcdc:	88eeb03a 	or	r23,r17,r3
1000dce0:	1025883a 	mov	r18,r2
1000dce4:	0003c540 	call	10003c54 <__umodsi3>
1000dce8:	a009883a 	mov	r4,r20
1000dcec:	a80b883a 	mov	r5,r21
1000dcf0:	1023883a 	mov	r17,r2
1000dcf4:	9dbfffcc 	andi	r22,r19,65535
1000dcf8:	0003c4c0 	call	10003c4c <__udivsi3>
1000dcfc:	1009883a 	mov	r4,r2
1000dd00:	b00b883a 	mov	r5,r22
1000dd04:	0003c5c0 	call	10003c5c <__mulsi3>
1000dd08:	8822943a 	slli	r17,r17,16
1000dd0c:	b808d43a 	srli	r4,r23,16
1000dd10:	84a8983a 	sll	r20,r16,r18
1000dd14:	8906b03a 	or	r3,r17,r4
1000dd18:	1880042e 	bgeu	r3,r2,1000dd2c <__umoddi3+0x528>
1000dd1c:	1cc7883a 	add	r3,r3,r19
1000dd20:	1cc00236 	bltu	r3,r19,1000dd2c <__umoddi3+0x528>
1000dd24:	1880012e 	bgeu	r3,r2,1000dd2c <__umoddi3+0x528>
1000dd28:	1cc7883a 	add	r3,r3,r19
1000dd2c:	18a1c83a 	sub	r16,r3,r2
1000dd30:	8009883a 	mov	r4,r16
1000dd34:	a80b883a 	mov	r5,r21
1000dd38:	0003c540 	call	10003c54 <__umodsi3>
1000dd3c:	8009883a 	mov	r4,r16
1000dd40:	a80b883a 	mov	r5,r21
1000dd44:	1039883a 	mov	fp,r2
1000dd48:	0003c4c0 	call	10003c4c <__udivsi3>
1000dd4c:	1009883a 	mov	r4,r2
1000dd50:	b00b883a 	mov	r5,r22
1000dd54:	0003c5c0 	call	10003c5c <__mulsi3>
1000dd58:	e006943a 	slli	r3,fp,16
1000dd5c:	b93fffcc 	andi	r4,r23,65535
1000dd60:	1906b03a 	or	r3,r3,r4
1000dd64:	1880042e 	bgeu	r3,r2,1000dd78 <__umoddi3+0x574>
1000dd68:	1cc7883a 	add	r3,r3,r19
1000dd6c:	1cc00236 	bltu	r3,r19,1000dd78 <__umoddi3+0x574>
1000dd70:	1880012e 	bgeu	r3,r2,1000dd78 <__umoddi3+0x574>
1000dd74:	1cc7883a 	add	r3,r3,r19
1000dd78:	18a3c83a 	sub	r17,r3,r2
1000dd7c:	003f1e06 	br	1000d9f8 <__alt_data_end+0xf800d9f8>
1000dd80:	8ccfc83a 	sub	r7,r17,r19
1000dd84:	1d89c83a 	sub	r4,r3,r22
1000dd88:	89e3803a 	cmpltu	r17,r17,r7
1000dd8c:	2463c83a 	sub	r17,r4,r17
1000dd90:	9449c83a 	sub	r4,r18,r17
1000dd94:	003fc006 	br	1000dc98 <__alt_data_end+0xf800dc98>
1000dd98:	000b883a 	mov	r5,zero
1000dd9c:	002b883a 	mov	r21,zero
1000dda0:	003eeb06 	br	1000d950 <__alt_data_end+0xf800d950>
1000dda4:	01400404 	movi	r5,16
1000dda8:	282b883a 	mov	r21,r5
1000ddac:	003ee806 	br	1000d950 <__alt_data_end+0xf800d950>
1000ddb0:	01400404 	movi	r5,16
1000ddb4:	2805883a 	mov	r2,r5
1000ddb8:	003eaa06 	br	1000d864 <__alt_data_end+0xf800d864>
1000ddbc:	0005883a 	mov	r2,zero
1000ddc0:	0007883a 	mov	r3,zero
1000ddc4:	003eff06 	br	1000d9c4 <__alt_data_end+0xf800d9c4>
1000ddc8:	00800404 	movi	r2,16
1000ddcc:	1007883a 	mov	r3,r2
1000ddd0:	003efc06 	br	1000d9c4 <__alt_data_end+0xf800d9c4>
1000ddd4:	000b883a 	mov	r5,zero
1000ddd8:	0005883a 	mov	r2,zero
1000dddc:	003ea106 	br	1000d864 <__alt_data_end+0xf800d864>
1000dde0:	90bf802e 	bgeu	r18,r2,1000dbe4 <__alt_data_end+0xf800dbe4>
1000dde4:	bdffff84 	addi	r23,r23,-2
1000dde8:	95a5883a 	add	r18,r18,r22
1000ddec:	003f7e06 	br	1000dbe8 <__alt_data_end+0xf800dbe8>
1000ddf0:	18bf652e 	bgeu	r3,r2,1000db88 <__alt_data_end+0xf800db88>
1000ddf4:	e73fff84 	addi	fp,fp,-2
1000ddf8:	1d87883a 	add	r3,r3,r22
1000ddfc:	003f6306 	br	1000db8c <__alt_data_end+0xf800db8c>
1000de00:	1cc7883a 	add	r3,r3,r19
1000de04:	003f0d06 	br	1000da3c <__alt_data_end+0xf800da3c>
1000de08:	8005883a 	mov	r2,r16
1000de0c:	003edf06 	br	1000d98c <__alt_data_end+0xf800d98c>
1000de10:	847fdb36 	bltu	r16,r17,1000dd80 <__alt_data_end+0xf800dd80>
1000de14:	880f883a 	mov	r7,r17
1000de18:	0009883a 	mov	r4,zero
1000de1c:	003f9e06 	br	1000dc98 <__alt_data_end+0xf800dc98>

1000de20 <__adddf3>:
1000de20:	02000434 	movhi	r8,16
1000de24:	423fffc4 	addi	r8,r8,-1
1000de28:	defffb04 	addi	sp,sp,-20
1000de2c:	2a12703a 	and	r9,r5,r8
1000de30:	2806d7fa 	srli	r3,r5,31
1000de34:	3a10703a 	and	r8,r7,r8
1000de38:	3804d53a 	srli	r2,r7,20
1000de3c:	3014d77a 	srli	r10,r6,29
1000de40:	dc000015 	stw	r16,0(sp)
1000de44:	481290fa 	slli	r9,r9,3
1000de48:	2820d53a 	srli	r16,r5,20
1000de4c:	401090fa 	slli	r8,r8,3
1000de50:	200ad77a 	srli	r5,r4,29
1000de54:	380ed7fa 	srli	r7,r7,31
1000de58:	dc800215 	stw	r18,8(sp)
1000de5c:	dc400115 	stw	r17,4(sp)
1000de60:	dfc00415 	stw	ra,16(sp)
1000de64:	dcc00315 	stw	r19,12(sp)
1000de68:	1c803fcc 	andi	r18,r3,255
1000de6c:	8401ffcc 	andi	r16,r16,2047
1000de70:	494ab03a 	or	r5,r9,r5
1000de74:	202290fa 	slli	r17,r4,3
1000de78:	1081ffcc 	andi	r2,r2,2047
1000de7c:	4290b03a 	or	r8,r8,r10
1000de80:	300c90fa 	slli	r6,r6,3
1000de84:	91c07026 	beq	r18,r7,1000e048 <__adddf3+0x228>
1000de88:	8087c83a 	sub	r3,r16,r2
1000de8c:	00c0b30e 	bge	zero,r3,1000e15c <__adddf3+0x33c>
1000de90:	10002a1e 	bne	r2,zero,1000df3c <__adddf3+0x11c>
1000de94:	4184b03a 	or	r2,r8,r6
1000de98:	1000991e 	bne	r2,zero,1000e100 <__adddf3+0x2e0>
1000de9c:	888001cc 	andi	r2,r17,7
1000dea0:	10005b26 	beq	r2,zero,1000e010 <__adddf3+0x1f0>
1000dea4:	88c003cc 	andi	r3,r17,15
1000dea8:	00800104 	movi	r2,4
1000deac:	18805826 	beq	r3,r2,1000e010 <__adddf3+0x1f0>
1000deb0:	89800104 	addi	r6,r17,4
1000deb4:	3463803a 	cmpltu	r17,r6,r17
1000deb8:	2c4b883a 	add	r5,r5,r17
1000debc:	2880202c 	andhi	r2,r5,128
1000dec0:	9007883a 	mov	r3,r18
1000dec4:	3023883a 	mov	r17,r6
1000dec8:	10005426 	beq	r2,zero,1000e01c <__adddf3+0x1fc>
1000decc:	84000044 	addi	r16,r16,1
1000ded0:	0081ffc4 	movi	r2,2047
1000ded4:	8080c126 	beq	r16,r2,1000e1dc <__adddf3+0x3bc>
1000ded8:	013fe034 	movhi	r4,65408
1000dedc:	213fffc4 	addi	r4,r4,-1
1000dee0:	290a703a 	and	r5,r5,r4
1000dee4:	2804977a 	slli	r2,r5,29
1000dee8:	280a927a 	slli	r5,r5,9
1000deec:	8822d0fa 	srli	r17,r17,3
1000def0:	8401ffcc 	andi	r16,r16,2047
1000def4:	2808d33a 	srli	r4,r5,12
1000def8:	1444b03a 	or	r2,r2,r17
1000defc:	8401ffcc 	andi	r16,r16,2047
1000df00:	800a953a 	slli	r5,r16,20
1000df04:	18c03fcc 	andi	r3,r3,255
1000df08:	04000434 	movhi	r16,16
1000df0c:	180697fa 	slli	r3,r3,31
1000df10:	843fffc4 	addi	r16,r16,-1
1000df14:	2420703a 	and	r16,r4,r16
1000df18:	8160b03a 	or	r16,r16,r5
1000df1c:	80c6b03a 	or	r3,r16,r3
1000df20:	dfc00417 	ldw	ra,16(sp)
1000df24:	dcc00317 	ldw	r19,12(sp)
1000df28:	dc800217 	ldw	r18,8(sp)
1000df2c:	dc400117 	ldw	r17,4(sp)
1000df30:	dc000017 	ldw	r16,0(sp)
1000df34:	dec00504 	addi	sp,sp,20
1000df38:	f800283a 	ret
1000df3c:	0081ffc4 	movi	r2,2047
1000df40:	80bfd626 	beq	r16,r2,1000de9c <__alt_data_end+0xf800de9c>
1000df44:	42002034 	orhi	r8,r8,128
1000df48:	00800e04 	movi	r2,56
1000df4c:	10c0a616 	blt	r2,r3,1000e1e8 <__adddf3+0x3c8>
1000df50:	008007c4 	movi	r2,31
1000df54:	10c0c916 	blt	r2,r3,1000e27c <__adddf3+0x45c>
1000df58:	00800804 	movi	r2,32
1000df5c:	10c5c83a 	sub	r2,r2,r3
1000df60:	408e983a 	sll	r7,r8,r2
1000df64:	30c8d83a 	srl	r4,r6,r3
1000df68:	3084983a 	sll	r2,r6,r2
1000df6c:	40c6d83a 	srl	r3,r8,r3
1000df70:	390cb03a 	or	r6,r7,r4
1000df74:	1004c03a 	cmpne	r2,r2,zero
1000df78:	308cb03a 	or	r6,r6,r2
1000df7c:	898dc83a 	sub	r6,r17,r6
1000df80:	89a3803a 	cmpltu	r17,r17,r6
1000df84:	28cbc83a 	sub	r5,r5,r3
1000df88:	2c4bc83a 	sub	r5,r5,r17
1000df8c:	3023883a 	mov	r17,r6
1000df90:	2880202c 	andhi	r2,r5,128
1000df94:	10006d26 	beq	r2,zero,1000e14c <__adddf3+0x32c>
1000df98:	04c02034 	movhi	r19,128
1000df9c:	9cffffc4 	addi	r19,r19,-1
1000dfa0:	2ce6703a 	and	r19,r5,r19
1000dfa4:	98007e26 	beq	r19,zero,1000e1a0 <__adddf3+0x380>
1000dfa8:	9809883a 	mov	r4,r19
1000dfac:	00105b80 	call	100105b8 <__clzsi2>
1000dfb0:	10fffe04 	addi	r3,r2,-8
1000dfb4:	010007c4 	movi	r4,31
1000dfb8:	20c07f16 	blt	r4,r3,1000e1b8 <__adddf3+0x398>
1000dfbc:	01400a04 	movi	r5,40
1000dfc0:	2885c83a 	sub	r2,r5,r2
1000dfc4:	888ad83a 	srl	r5,r17,r2
1000dfc8:	98e6983a 	sll	r19,r19,r3
1000dfcc:	88e2983a 	sll	r17,r17,r3
1000dfd0:	2ce6b03a 	or	r19,r5,r19
1000dfd4:	1c007c16 	blt	r3,r16,1000e1c8 <__adddf3+0x3a8>
1000dfd8:	1c21c83a 	sub	r16,r3,r16
1000dfdc:	81400044 	addi	r5,r16,1
1000dfe0:	00c007c4 	movi	r3,31
1000dfe4:	19409816 	blt	r3,r5,1000e248 <__adddf3+0x428>
1000dfe8:	1c21c83a 	sub	r16,r3,r16
1000dfec:	8c08983a 	sll	r4,r17,r16
1000dff0:	8946d83a 	srl	r3,r17,r5
1000dff4:	9c20983a 	sll	r16,r19,r16
1000dff8:	2008c03a 	cmpne	r4,r4,zero
1000dffc:	994ad83a 	srl	r5,r19,r5
1000e000:	1c06b03a 	or	r3,r3,r16
1000e004:	1922b03a 	or	r17,r3,r4
1000e008:	0021883a 	mov	r16,zero
1000e00c:	003fa306 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e010:	2880202c 	andhi	r2,r5,128
1000e014:	9007883a 	mov	r3,r18
1000e018:	103fac1e 	bne	r2,zero,1000decc <__alt_data_end+0xf800decc>
1000e01c:	2804977a 	slli	r2,r5,29
1000e020:	8822d0fa 	srli	r17,r17,3
1000e024:	0101ffc4 	movi	r4,2047
1000e028:	280ad0fa 	srli	r5,r5,3
1000e02c:	1444b03a 	or	r2,r2,r17
1000e030:	81002c26 	beq	r16,r4,1000e0e4 <__adddf3+0x2c4>
1000e034:	8120703a 	and	r16,r16,r4
1000e038:	01000434 	movhi	r4,16
1000e03c:	213fffc4 	addi	r4,r4,-1
1000e040:	2908703a 	and	r4,r5,r4
1000e044:	003fad06 	br	1000defc <__alt_data_end+0xf800defc>
1000e048:	8089c83a 	sub	r4,r16,r2
1000e04c:	01006a0e 	bge	zero,r4,1000e1f8 <__adddf3+0x3d8>
1000e050:	10003326 	beq	r2,zero,1000e120 <__adddf3+0x300>
1000e054:	0081ffc4 	movi	r2,2047
1000e058:	80bf9026 	beq	r16,r2,1000de9c <__alt_data_end+0xf800de9c>
1000e05c:	42002034 	orhi	r8,r8,128
1000e060:	00800e04 	movi	r2,56
1000e064:	1100b116 	blt	r2,r4,1000e32c <__adddf3+0x50c>
1000e068:	008007c4 	movi	r2,31
1000e06c:	1100e216 	blt	r2,r4,1000e3f8 <__adddf3+0x5d8>
1000e070:	00800804 	movi	r2,32
1000e074:	1105c83a 	sub	r2,r2,r4
1000e078:	4092983a 	sll	r9,r8,r2
1000e07c:	310ed83a 	srl	r7,r6,r4
1000e080:	3084983a 	sll	r2,r6,r2
1000e084:	4110d83a 	srl	r8,r8,r4
1000e088:	49ccb03a 	or	r6,r9,r7
1000e08c:	1004c03a 	cmpne	r2,r2,zero
1000e090:	308cb03a 	or	r6,r6,r2
1000e094:	344d883a 	add	r6,r6,r17
1000e098:	3463803a 	cmpltu	r17,r6,r17
1000e09c:	414b883a 	add	r5,r8,r5
1000e0a0:	2c4b883a 	add	r5,r5,r17
1000e0a4:	3023883a 	mov	r17,r6
1000e0a8:	2880202c 	andhi	r2,r5,128
1000e0ac:	10002726 	beq	r2,zero,1000e14c <__adddf3+0x32c>
1000e0b0:	84000044 	addi	r16,r16,1
1000e0b4:	0081ffc4 	movi	r2,2047
1000e0b8:	8080ae26 	beq	r16,r2,1000e374 <__adddf3+0x554>
1000e0bc:	00bfe034 	movhi	r2,65408
1000e0c0:	10bfffc4 	addi	r2,r2,-1
1000e0c4:	288a703a 	and	r5,r5,r2
1000e0c8:	880cd07a 	srli	r6,r17,1
1000e0cc:	280897fa 	slli	r4,r5,31
1000e0d0:	88c0004c 	andi	r3,r17,1
1000e0d4:	30e2b03a 	or	r17,r6,r3
1000e0d8:	280ad07a 	srli	r5,r5,1
1000e0dc:	8922b03a 	or	r17,r17,r4
1000e0e0:	003f6e06 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e0e4:	1148b03a 	or	r4,r2,r5
1000e0e8:	20003c26 	beq	r4,zero,1000e1dc <__adddf3+0x3bc>
1000e0ec:	29000234 	orhi	r4,r5,8
1000e0f0:	01400434 	movhi	r5,16
1000e0f4:	297fffc4 	addi	r5,r5,-1
1000e0f8:	2148703a 	and	r4,r4,r5
1000e0fc:	003f7f06 	br	1000defc <__alt_data_end+0xf800defc>
1000e100:	18ffffc4 	addi	r3,r3,-1
1000e104:	18004d1e 	bne	r3,zero,1000e23c <__adddf3+0x41c>
1000e108:	898dc83a 	sub	r6,r17,r6
1000e10c:	89a3803a 	cmpltu	r17,r17,r6
1000e110:	2a0bc83a 	sub	r5,r5,r8
1000e114:	2c4bc83a 	sub	r5,r5,r17
1000e118:	3023883a 	mov	r17,r6
1000e11c:	003f9c06 	br	1000df90 <__alt_data_end+0xf800df90>
1000e120:	4184b03a 	or	r2,r8,r6
1000e124:	103f5d26 	beq	r2,zero,1000de9c <__alt_data_end+0xf800de9c>
1000e128:	213fffc4 	addi	r4,r4,-1
1000e12c:	203fd926 	beq	r4,zero,1000e094 <__alt_data_end+0xf800e094>
1000e130:	0081ffc4 	movi	r2,2047
1000e134:	80bfca1e 	bne	r16,r2,1000e060 <__alt_data_end+0xf800e060>
1000e138:	003f5806 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e13c:	10c8b03a 	or	r4,r2,r3
1000e140:	20008b26 	beq	r4,zero,1000e370 <__adddf3+0x550>
1000e144:	100b883a 	mov	r5,r2
1000e148:	1823883a 	mov	r17,r3
1000e14c:	888001cc 	andi	r2,r17,7
1000e150:	103f541e 	bne	r2,zero,1000dea4 <__alt_data_end+0xf800dea4>
1000e154:	9007883a 	mov	r3,r18
1000e158:	003fb006 	br	1000e01c <__alt_data_end+0xf800e01c>
1000e15c:	1800531e 	bne	r3,zero,1000e2ac <__adddf3+0x48c>
1000e160:	80800044 	addi	r2,r16,1
1000e164:	1081ffcc 	andi	r2,r2,2047
1000e168:	00c00044 	movi	r3,1
1000e16c:	1880990e 	bge	r3,r2,1000e3d4 <__adddf3+0x5b4>
1000e170:	8985c83a 	sub	r2,r17,r6
1000e174:	8887803a 	cmpltu	r3,r17,r2
1000e178:	2a27c83a 	sub	r19,r5,r8
1000e17c:	98e7c83a 	sub	r19,r19,r3
1000e180:	98c0202c 	andhi	r3,r19,128
1000e184:	18006226 	beq	r3,zero,1000e310 <__adddf3+0x4f0>
1000e188:	3463c83a 	sub	r17,r6,r17
1000e18c:	4151c83a 	sub	r8,r8,r5
1000e190:	344d803a 	cmpltu	r6,r6,r17
1000e194:	41a7c83a 	sub	r19,r8,r6
1000e198:	3825883a 	mov	r18,r7
1000e19c:	983f821e 	bne	r19,zero,1000dfa8 <__alt_data_end+0xf800dfa8>
1000e1a0:	8809883a 	mov	r4,r17
1000e1a4:	00105b80 	call	100105b8 <__clzsi2>
1000e1a8:	10800804 	addi	r2,r2,32
1000e1ac:	10fffe04 	addi	r3,r2,-8
1000e1b0:	010007c4 	movi	r4,31
1000e1b4:	20ff810e 	bge	r4,r3,1000dfbc <__alt_data_end+0xf800dfbc>
1000e1b8:	14fff604 	addi	r19,r2,-40
1000e1bc:	8ce6983a 	sll	r19,r17,r19
1000e1c0:	0023883a 	mov	r17,zero
1000e1c4:	1c3f840e 	bge	r3,r16,1000dfd8 <__alt_data_end+0xf800dfd8>
1000e1c8:	017fe034 	movhi	r5,65408
1000e1cc:	297fffc4 	addi	r5,r5,-1
1000e1d0:	80e1c83a 	sub	r16,r16,r3
1000e1d4:	994a703a 	and	r5,r19,r5
1000e1d8:	003f3006 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e1dc:	0009883a 	mov	r4,zero
1000e1e0:	0005883a 	mov	r2,zero
1000e1e4:	003f4506 	br	1000defc <__alt_data_end+0xf800defc>
1000e1e8:	418cb03a 	or	r6,r8,r6
1000e1ec:	300cc03a 	cmpne	r6,r6,zero
1000e1f0:	0007883a 	mov	r3,zero
1000e1f4:	003f6106 	br	1000df7c <__alt_data_end+0xf800df7c>
1000e1f8:	2000921e 	bne	r4,zero,1000e444 <__adddf3+0x624>
1000e1fc:	80800044 	addi	r2,r16,1
1000e200:	11c1ffcc 	andi	r7,r2,2047
1000e204:	01000044 	movi	r4,1
1000e208:	21c0610e 	bge	r4,r7,1000e390 <__adddf3+0x570>
1000e20c:	0101ffc4 	movi	r4,2047
1000e210:	1100a326 	beq	r2,r4,1000e4a0 <__adddf3+0x680>
1000e214:	344d883a 	add	r6,r6,r17
1000e218:	3463803a 	cmpltu	r17,r6,r17
1000e21c:	414b883a 	add	r5,r8,r5
1000e220:	2c4b883a 	add	r5,r5,r17
1000e224:	282297fa 	slli	r17,r5,31
1000e228:	300cd07a 	srli	r6,r6,1
1000e22c:	280ad07a 	srli	r5,r5,1
1000e230:	1021883a 	mov	r16,r2
1000e234:	89a2b03a 	or	r17,r17,r6
1000e238:	003f1806 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e23c:	0081ffc4 	movi	r2,2047
1000e240:	80bf411e 	bne	r16,r2,1000df48 <__alt_data_end+0xf800df48>
1000e244:	003f1506 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e248:	80bff844 	addi	r2,r16,-31
1000e24c:	00c00804 	movi	r3,32
1000e250:	9884d83a 	srl	r2,r19,r2
1000e254:	28c04a26 	beq	r5,r3,1000e380 <__adddf3+0x560>
1000e258:	00c00fc4 	movi	r3,63
1000e25c:	1c21c83a 	sub	r16,r3,r16
1000e260:	9c26983a 	sll	r19,r19,r16
1000e264:	9c62b03a 	or	r17,r19,r17
1000e268:	8822c03a 	cmpne	r17,r17,zero
1000e26c:	88a2b03a 	or	r17,r17,r2
1000e270:	000b883a 	mov	r5,zero
1000e274:	0021883a 	mov	r16,zero
1000e278:	003fb406 	br	1000e14c <__alt_data_end+0xf800e14c>
1000e27c:	18bff804 	addi	r2,r3,-32
1000e280:	01000804 	movi	r4,32
1000e284:	4084d83a 	srl	r2,r8,r2
1000e288:	19003f26 	beq	r3,r4,1000e388 <__adddf3+0x568>
1000e28c:	01001004 	movi	r4,64
1000e290:	20c7c83a 	sub	r3,r4,r3
1000e294:	40d0983a 	sll	r8,r8,r3
1000e298:	418cb03a 	or	r6,r8,r6
1000e29c:	300cc03a 	cmpne	r6,r6,zero
1000e2a0:	308cb03a 	or	r6,r6,r2
1000e2a4:	0007883a 	mov	r3,zero
1000e2a8:	003f3406 	br	1000df7c <__alt_data_end+0xf800df7c>
1000e2ac:	80002326 	beq	r16,zero,1000e33c <__adddf3+0x51c>
1000e2b0:	0101ffc4 	movi	r4,2047
1000e2b4:	11005e26 	beq	r2,r4,1000e430 <__adddf3+0x610>
1000e2b8:	00c7c83a 	sub	r3,zero,r3
1000e2bc:	29402034 	orhi	r5,r5,128
1000e2c0:	01000e04 	movi	r4,56
1000e2c4:	20c07216 	blt	r4,r3,1000e490 <__adddf3+0x670>
1000e2c8:	010007c4 	movi	r4,31
1000e2cc:	20c0ce16 	blt	r4,r3,1000e608 <__adddf3+0x7e8>
1000e2d0:	01000804 	movi	r4,32
1000e2d4:	20c9c83a 	sub	r4,r4,r3
1000e2d8:	2914983a 	sll	r10,r5,r4
1000e2dc:	88d2d83a 	srl	r9,r17,r3
1000e2e0:	8908983a 	sll	r4,r17,r4
1000e2e4:	28c6d83a 	srl	r3,r5,r3
1000e2e8:	5262b03a 	or	r17,r10,r9
1000e2ec:	2008c03a 	cmpne	r4,r4,zero
1000e2f0:	8922b03a 	or	r17,r17,r4
1000e2f4:	3463c83a 	sub	r17,r6,r17
1000e2f8:	40c7c83a 	sub	r3,r8,r3
1000e2fc:	344d803a 	cmpltu	r6,r6,r17
1000e300:	198bc83a 	sub	r5,r3,r6
1000e304:	1021883a 	mov	r16,r2
1000e308:	3825883a 	mov	r18,r7
1000e30c:	003f2006 	br	1000df90 <__alt_data_end+0xf800df90>
1000e310:	9886b03a 	or	r3,r19,r2
1000e314:	1800141e 	bne	r3,zero,1000e368 <__adddf3+0x548>
1000e318:	0007883a 	mov	r3,zero
1000e31c:	000b883a 	mov	r5,zero
1000e320:	0023883a 	mov	r17,zero
1000e324:	0021883a 	mov	r16,zero
1000e328:	003f3c06 	br	1000e01c <__alt_data_end+0xf800e01c>
1000e32c:	418cb03a 	or	r6,r8,r6
1000e330:	300cc03a 	cmpne	r6,r6,zero
1000e334:	0011883a 	mov	r8,zero
1000e338:	003f5606 	br	1000e094 <__alt_data_end+0xf800e094>
1000e33c:	2c48b03a 	or	r4,r5,r17
1000e340:	20003b26 	beq	r4,zero,1000e430 <__adddf3+0x610>
1000e344:	00c6303a 	nor	r3,zero,r3
1000e348:	1800371e 	bne	r3,zero,1000e428 <__adddf3+0x608>
1000e34c:	3463c83a 	sub	r17,r6,r17
1000e350:	414bc83a 	sub	r5,r8,r5
1000e354:	344d803a 	cmpltu	r6,r6,r17
1000e358:	298bc83a 	sub	r5,r5,r6
1000e35c:	1021883a 	mov	r16,r2
1000e360:	3825883a 	mov	r18,r7
1000e364:	003f0a06 	br	1000df90 <__alt_data_end+0xf800df90>
1000e368:	1023883a 	mov	r17,r2
1000e36c:	003f0d06 	br	1000dfa4 <__alt_data_end+0xf800dfa4>
1000e370:	0007883a 	mov	r3,zero
1000e374:	000b883a 	mov	r5,zero
1000e378:	0023883a 	mov	r17,zero
1000e37c:	003f2706 	br	1000e01c <__alt_data_end+0xf800e01c>
1000e380:	0027883a 	mov	r19,zero
1000e384:	003fb706 	br	1000e264 <__alt_data_end+0xf800e264>
1000e388:	0011883a 	mov	r8,zero
1000e38c:	003fc206 	br	1000e298 <__alt_data_end+0xf800e298>
1000e390:	2c44b03a 	or	r2,r5,r17
1000e394:	8000871e 	bne	r16,zero,1000e5b4 <__adddf3+0x794>
1000e398:	1000b126 	beq	r2,zero,1000e660 <__adddf3+0x840>
1000e39c:	4184b03a 	or	r2,r8,r6
1000e3a0:	103ebe26 	beq	r2,zero,1000de9c <__alt_data_end+0xf800de9c>
1000e3a4:	3445883a 	add	r2,r6,r17
1000e3a8:	1463803a 	cmpltu	r17,r2,r17
1000e3ac:	414b883a 	add	r5,r8,r5
1000e3b0:	2c4b883a 	add	r5,r5,r17
1000e3b4:	28c0202c 	andhi	r3,r5,128
1000e3b8:	1023883a 	mov	r17,r2
1000e3bc:	183f6326 	beq	r3,zero,1000e14c <__alt_data_end+0xf800e14c>
1000e3c0:	00bfe034 	movhi	r2,65408
1000e3c4:	10bfffc4 	addi	r2,r2,-1
1000e3c8:	2021883a 	mov	r16,r4
1000e3cc:	288a703a 	and	r5,r5,r2
1000e3d0:	003eb206 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e3d4:	2c44b03a 	or	r2,r5,r17
1000e3d8:	8000251e 	bne	r16,zero,1000e470 <__adddf3+0x650>
1000e3dc:	10004b1e 	bne	r2,zero,1000e50c <__adddf3+0x6ec>
1000e3e0:	4184b03a 	or	r2,r8,r6
1000e3e4:	103fe226 	beq	r2,zero,1000e370 <__alt_data_end+0xf800e370>
1000e3e8:	400b883a 	mov	r5,r8
1000e3ec:	3023883a 	mov	r17,r6
1000e3f0:	3825883a 	mov	r18,r7
1000e3f4:	003ea906 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e3f8:	20bff804 	addi	r2,r4,-32
1000e3fc:	01c00804 	movi	r7,32
1000e400:	4084d83a 	srl	r2,r8,r2
1000e404:	21c07e26 	beq	r4,r7,1000e600 <__adddf3+0x7e0>
1000e408:	01c01004 	movi	r7,64
1000e40c:	3909c83a 	sub	r4,r7,r4
1000e410:	4110983a 	sll	r8,r8,r4
1000e414:	418cb03a 	or	r6,r8,r6
1000e418:	300cc03a 	cmpne	r6,r6,zero
1000e41c:	308cb03a 	or	r6,r6,r2
1000e420:	0011883a 	mov	r8,zero
1000e424:	003f1b06 	br	1000e094 <__alt_data_end+0xf800e094>
1000e428:	0101ffc4 	movi	r4,2047
1000e42c:	113fa41e 	bne	r2,r4,1000e2c0 <__alt_data_end+0xf800e2c0>
1000e430:	400b883a 	mov	r5,r8
1000e434:	3023883a 	mov	r17,r6
1000e438:	1021883a 	mov	r16,r2
1000e43c:	3825883a 	mov	r18,r7
1000e440:	003e9606 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e444:	80001a1e 	bne	r16,zero,1000e4b0 <__adddf3+0x690>
1000e448:	2c4eb03a 	or	r7,r5,r17
1000e44c:	38005526 	beq	r7,zero,1000e5a4 <__adddf3+0x784>
1000e450:	0108303a 	nor	r4,zero,r4
1000e454:	2000511e 	bne	r4,zero,1000e59c <__adddf3+0x77c>
1000e458:	89a3883a 	add	r17,r17,r6
1000e45c:	414b883a 	add	r5,r8,r5
1000e460:	898d803a 	cmpltu	r6,r17,r6
1000e464:	298b883a 	add	r5,r5,r6
1000e468:	1021883a 	mov	r16,r2
1000e46c:	003f0e06 	br	1000e0a8 <__alt_data_end+0xf800e0a8>
1000e470:	1000341e 	bne	r2,zero,1000e544 <__adddf3+0x724>
1000e474:	4184b03a 	or	r2,r8,r6
1000e478:	10006f26 	beq	r2,zero,1000e638 <__adddf3+0x818>
1000e47c:	400b883a 	mov	r5,r8
1000e480:	3023883a 	mov	r17,r6
1000e484:	3825883a 	mov	r18,r7
1000e488:	0401ffc4 	movi	r16,2047
1000e48c:	003e8306 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e490:	2c62b03a 	or	r17,r5,r17
1000e494:	8822c03a 	cmpne	r17,r17,zero
1000e498:	0007883a 	mov	r3,zero
1000e49c:	003f9506 	br	1000e2f4 <__alt_data_end+0xf800e2f4>
1000e4a0:	1021883a 	mov	r16,r2
1000e4a4:	000b883a 	mov	r5,zero
1000e4a8:	0023883a 	mov	r17,zero
1000e4ac:	003edb06 	br	1000e01c <__alt_data_end+0xf800e01c>
1000e4b0:	01c1ffc4 	movi	r7,2047
1000e4b4:	11c03b26 	beq	r2,r7,1000e5a4 <__adddf3+0x784>
1000e4b8:	0109c83a 	sub	r4,zero,r4
1000e4bc:	29402034 	orhi	r5,r5,128
1000e4c0:	01c00e04 	movi	r7,56
1000e4c4:	39006216 	blt	r7,r4,1000e650 <__adddf3+0x830>
1000e4c8:	01c007c4 	movi	r7,31
1000e4cc:	39006b16 	blt	r7,r4,1000e67c <__adddf3+0x85c>
1000e4d0:	01c00804 	movi	r7,32
1000e4d4:	390fc83a 	sub	r7,r7,r4
1000e4d8:	29d4983a 	sll	r10,r5,r7
1000e4dc:	8912d83a 	srl	r9,r17,r4
1000e4e0:	89ce983a 	sll	r7,r17,r7
1000e4e4:	2908d83a 	srl	r4,r5,r4
1000e4e8:	5262b03a 	or	r17,r10,r9
1000e4ec:	380ac03a 	cmpne	r5,r7,zero
1000e4f0:	8962b03a 	or	r17,r17,r5
1000e4f4:	89a3883a 	add	r17,r17,r6
1000e4f8:	2211883a 	add	r8,r4,r8
1000e4fc:	898d803a 	cmpltu	r6,r17,r6
1000e500:	418b883a 	add	r5,r8,r6
1000e504:	1021883a 	mov	r16,r2
1000e508:	003ee706 	br	1000e0a8 <__alt_data_end+0xf800e0a8>
1000e50c:	4184b03a 	or	r2,r8,r6
1000e510:	103e6226 	beq	r2,zero,1000de9c <__alt_data_end+0xf800de9c>
1000e514:	8987c83a 	sub	r3,r17,r6
1000e518:	88c9803a 	cmpltu	r4,r17,r3
1000e51c:	2a05c83a 	sub	r2,r5,r8
1000e520:	1105c83a 	sub	r2,r2,r4
1000e524:	1100202c 	andhi	r4,r2,128
1000e528:	203f0426 	beq	r4,zero,1000e13c <__alt_data_end+0xf800e13c>
1000e52c:	3463c83a 	sub	r17,r6,r17
1000e530:	414bc83a 	sub	r5,r8,r5
1000e534:	344d803a 	cmpltu	r6,r6,r17
1000e538:	298bc83a 	sub	r5,r5,r6
1000e53c:	3825883a 	mov	r18,r7
1000e540:	003e5606 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e544:	4184b03a 	or	r2,r8,r6
1000e548:	10002b26 	beq	r2,zero,1000e5f8 <__adddf3+0x7d8>
1000e54c:	2804d0fa 	srli	r2,r5,3
1000e550:	8822d0fa 	srli	r17,r17,3
1000e554:	280a977a 	slli	r5,r5,29
1000e558:	10c0022c 	andhi	r3,r2,8
1000e55c:	2c62b03a 	or	r17,r5,r17
1000e560:	18000826 	beq	r3,zero,1000e584 <__adddf3+0x764>
1000e564:	4008d0fa 	srli	r4,r8,3
1000e568:	20c0022c 	andhi	r3,r4,8
1000e56c:	1800051e 	bne	r3,zero,1000e584 <__adddf3+0x764>
1000e570:	300cd0fa 	srli	r6,r6,3
1000e574:	4010977a 	slli	r8,r8,29
1000e578:	2005883a 	mov	r2,r4
1000e57c:	3825883a 	mov	r18,r7
1000e580:	41a2b03a 	or	r17,r8,r6
1000e584:	880ad77a 	srli	r5,r17,29
1000e588:	100490fa 	slli	r2,r2,3
1000e58c:	882290fa 	slli	r17,r17,3
1000e590:	0401ffc4 	movi	r16,2047
1000e594:	288ab03a 	or	r5,r5,r2
1000e598:	003e4006 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e59c:	01c1ffc4 	movi	r7,2047
1000e5a0:	11ffc71e 	bne	r2,r7,1000e4c0 <__alt_data_end+0xf800e4c0>
1000e5a4:	400b883a 	mov	r5,r8
1000e5a8:	3023883a 	mov	r17,r6
1000e5ac:	1021883a 	mov	r16,r2
1000e5b0:	003e3a06 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e5b4:	10002d26 	beq	r2,zero,1000e66c <__adddf3+0x84c>
1000e5b8:	4184b03a 	or	r2,r8,r6
1000e5bc:	10000e26 	beq	r2,zero,1000e5f8 <__adddf3+0x7d8>
1000e5c0:	2804d0fa 	srli	r2,r5,3
1000e5c4:	8822d0fa 	srli	r17,r17,3
1000e5c8:	280a977a 	slli	r5,r5,29
1000e5cc:	10c0022c 	andhi	r3,r2,8
1000e5d0:	2c62b03a 	or	r17,r5,r17
1000e5d4:	183feb26 	beq	r3,zero,1000e584 <__alt_data_end+0xf800e584>
1000e5d8:	4008d0fa 	srli	r4,r8,3
1000e5dc:	20c0022c 	andhi	r3,r4,8
1000e5e0:	183fe81e 	bne	r3,zero,1000e584 <__alt_data_end+0xf800e584>
1000e5e4:	300cd0fa 	srli	r6,r6,3
1000e5e8:	4010977a 	slli	r8,r8,29
1000e5ec:	2005883a 	mov	r2,r4
1000e5f0:	41a2b03a 	or	r17,r8,r6
1000e5f4:	003fe306 	br	1000e584 <__alt_data_end+0xf800e584>
1000e5f8:	0401ffc4 	movi	r16,2047
1000e5fc:	003e2706 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e600:	0011883a 	mov	r8,zero
1000e604:	003f8306 	br	1000e414 <__alt_data_end+0xf800e414>
1000e608:	193ff804 	addi	r4,r3,-32
1000e60c:	02400804 	movi	r9,32
1000e610:	2908d83a 	srl	r4,r5,r4
1000e614:	1a402526 	beq	r3,r9,1000e6ac <__adddf3+0x88c>
1000e618:	02401004 	movi	r9,64
1000e61c:	48c7c83a 	sub	r3,r9,r3
1000e620:	28ca983a 	sll	r5,r5,r3
1000e624:	2c62b03a 	or	r17,r5,r17
1000e628:	8822c03a 	cmpne	r17,r17,zero
1000e62c:	8922b03a 	or	r17,r17,r4
1000e630:	0007883a 	mov	r3,zero
1000e634:	003f2f06 	br	1000e2f4 <__alt_data_end+0xf800e2f4>
1000e638:	01402034 	movhi	r5,128
1000e63c:	0007883a 	mov	r3,zero
1000e640:	297fffc4 	addi	r5,r5,-1
1000e644:	047ffe04 	movi	r17,-8
1000e648:	0401ffc4 	movi	r16,2047
1000e64c:	003e7306 	br	1000e01c <__alt_data_end+0xf800e01c>
1000e650:	2c62b03a 	or	r17,r5,r17
1000e654:	8822c03a 	cmpne	r17,r17,zero
1000e658:	0009883a 	mov	r4,zero
1000e65c:	003fa506 	br	1000e4f4 <__alt_data_end+0xf800e4f4>
1000e660:	400b883a 	mov	r5,r8
1000e664:	3023883a 	mov	r17,r6
1000e668:	003e0c06 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e66c:	400b883a 	mov	r5,r8
1000e670:	3023883a 	mov	r17,r6
1000e674:	0401ffc4 	movi	r16,2047
1000e678:	003e0806 	br	1000de9c <__alt_data_end+0xf800de9c>
1000e67c:	21fff804 	addi	r7,r4,-32
1000e680:	02400804 	movi	r9,32
1000e684:	29ced83a 	srl	r7,r5,r7
1000e688:	22400a26 	beq	r4,r9,1000e6b4 <__adddf3+0x894>
1000e68c:	02401004 	movi	r9,64
1000e690:	4909c83a 	sub	r4,r9,r4
1000e694:	290a983a 	sll	r5,r5,r4
1000e698:	2c62b03a 	or	r17,r5,r17
1000e69c:	8822c03a 	cmpne	r17,r17,zero
1000e6a0:	89e2b03a 	or	r17,r17,r7
1000e6a4:	0009883a 	mov	r4,zero
1000e6a8:	003f9206 	br	1000e4f4 <__alt_data_end+0xf800e4f4>
1000e6ac:	000b883a 	mov	r5,zero
1000e6b0:	003fdc06 	br	1000e624 <__alt_data_end+0xf800e624>
1000e6b4:	000b883a 	mov	r5,zero
1000e6b8:	003ff706 	br	1000e698 <__alt_data_end+0xf800e698>

1000e6bc <__divdf3>:
1000e6bc:	defff004 	addi	sp,sp,-64
1000e6c0:	dc800815 	stw	r18,32(sp)
1000e6c4:	2824d53a 	srli	r18,r5,20
1000e6c8:	dd800c15 	stw	r22,48(sp)
1000e6cc:	282cd7fa 	srli	r22,r5,31
1000e6d0:	dc000615 	stw	r16,24(sp)
1000e6d4:	04000434 	movhi	r16,16
1000e6d8:	df000e15 	stw	fp,56(sp)
1000e6dc:	dd000a15 	stw	r20,40(sp)
1000e6e0:	dcc00915 	stw	r19,36(sp)
1000e6e4:	dc400715 	stw	r17,28(sp)
1000e6e8:	843fffc4 	addi	r16,r16,-1
1000e6ec:	dfc00f15 	stw	ra,60(sp)
1000e6f0:	ddc00d15 	stw	r23,52(sp)
1000e6f4:	dd400b15 	stw	r21,44(sp)
1000e6f8:	9481ffcc 	andi	r18,r18,2047
1000e6fc:	2029883a 	mov	r20,r4
1000e700:	2027883a 	mov	r19,r4
1000e704:	2c22703a 	and	r17,r5,r16
1000e708:	b7003fcc 	andi	fp,r22,255
1000e70c:	90005e26 	beq	r18,zero,1000e888 <__divdf3+0x1cc>
1000e710:	0081ffc4 	movi	r2,2047
1000e714:	90803526 	beq	r18,r2,1000e7ec <__divdf3+0x130>
1000e718:	8c000434 	orhi	r16,r17,16
1000e71c:	2004d77a 	srli	r2,r4,29
1000e720:	802090fa 	slli	r16,r16,3
1000e724:	202690fa 	slli	r19,r4,3
1000e728:	94bf0044 	addi	r18,r18,-1023
1000e72c:	80a2b03a 	or	r17,r16,r2
1000e730:	0029883a 	mov	r20,zero
1000e734:	0011883a 	mov	r8,zero
1000e738:	380ad53a 	srli	r5,r7,20
1000e73c:	382ed7fa 	srli	r23,r7,31
1000e740:	04000434 	movhi	r16,16
1000e744:	843fffc4 	addi	r16,r16,-1
1000e748:	2941ffcc 	andi	r5,r5,2047
1000e74c:	302b883a 	mov	r21,r6
1000e750:	3c20703a 	and	r16,r7,r16
1000e754:	ba403fcc 	andi	r9,r23,255
1000e758:	28006726 	beq	r5,zero,1000e8f8 <__divdf3+0x23c>
1000e75c:	0081ffc4 	movi	r2,2047
1000e760:	28805f26 	beq	r5,r2,1000e8e0 <__divdf3+0x224>
1000e764:	84000434 	orhi	r16,r16,16
1000e768:	3004d77a 	srli	r2,r6,29
1000e76c:	802090fa 	slli	r16,r16,3
1000e770:	302a90fa 	slli	r21,r6,3
1000e774:	297f0044 	addi	r5,r5,-1023
1000e778:	80a0b03a 	or	r16,r16,r2
1000e77c:	000f883a 	mov	r7,zero
1000e780:	3d06b03a 	or	r3,r7,r20
1000e784:	180690ba 	slli	r3,r3,2
1000e788:	00840074 	movhi	r2,4097
1000e78c:	10b9eb04 	addi	r2,r2,-6228
1000e790:	1885883a 	add	r2,r3,r2
1000e794:	10800017 	ldw	r2,0(r2)
1000e798:	b5c8f03a 	xor	r4,r22,r23
1000e79c:	200d883a 	mov	r6,r4
1000e7a0:	25003fcc 	andi	r20,r4,255
1000e7a4:	9165c83a 	sub	r18,r18,r5
1000e7a8:	1000683a 	jmp	r2
1000e7ac:	1000e9f4 	orhi	zero,r2,935
1000e7b0:	1000e824 	muli	zero,r2,928
1000e7b4:	1000e9b8 	rdprs	zero,r2,934
1000e7b8:	1000e808 	cmpgei	zero,r2,928
1000e7bc:	1000e9b8 	rdprs	zero,r2,934
1000e7c0:	1000e98c 	andi	zero,r2,934
1000e7c4:	1000e9b8 	rdprs	zero,r2,934
1000e7c8:	1000e808 	cmpgei	zero,r2,928
1000e7cc:	1000e824 	muli	zero,r2,928
1000e7d0:	1000e824 	muli	zero,r2,928
1000e7d4:	1000e98c 	andi	zero,r2,934
1000e7d8:	1000e808 	cmpgei	zero,r2,928
1000e7dc:	1000e818 	cmpnei	zero,r2,928
1000e7e0:	1000e818 	cmpnei	zero,r2,928
1000e7e4:	1000e818 	cmpnei	zero,r2,928
1000e7e8:	1000e9c8 	cmpgei	zero,r2,935
1000e7ec:	8904b03a 	or	r2,r17,r4
1000e7f0:	1000631e 	bne	r2,zero,1000e980 <__divdf3+0x2c4>
1000e7f4:	05000204 	movi	r20,8
1000e7f8:	0023883a 	mov	r17,zero
1000e7fc:	0027883a 	mov	r19,zero
1000e800:	02000084 	movi	r8,2
1000e804:	003fcc06 	br	1000e738 <__alt_data_end+0xf800e738>
1000e808:	8023883a 	mov	r17,r16
1000e80c:	a827883a 	mov	r19,r21
1000e810:	4839883a 	mov	fp,r9
1000e814:	3811883a 	mov	r8,r7
1000e818:	00800084 	movi	r2,2
1000e81c:	4081531e 	bne	r8,r2,1000ed6c <__divdf3+0x6b0>
1000e820:	e029883a 	mov	r20,fp
1000e824:	a180004c 	andi	r6,r20,1
1000e828:	0201ffc4 	movi	r8,2047
1000e82c:	000b883a 	mov	r5,zero
1000e830:	0027883a 	mov	r19,zero
1000e834:	4010953a 	slli	r8,r8,20
1000e838:	30c03fcc 	andi	r3,r6,255
1000e83c:	04000434 	movhi	r16,16
1000e840:	180697fa 	slli	r3,r3,31
1000e844:	843fffc4 	addi	r16,r16,-1
1000e848:	2c20703a 	and	r16,r5,r16
1000e84c:	8220b03a 	or	r16,r16,r8
1000e850:	80c6b03a 	or	r3,r16,r3
1000e854:	9805883a 	mov	r2,r19
1000e858:	dfc00f17 	ldw	ra,60(sp)
1000e85c:	df000e17 	ldw	fp,56(sp)
1000e860:	ddc00d17 	ldw	r23,52(sp)
1000e864:	dd800c17 	ldw	r22,48(sp)
1000e868:	dd400b17 	ldw	r21,44(sp)
1000e86c:	dd000a17 	ldw	r20,40(sp)
1000e870:	dcc00917 	ldw	r19,36(sp)
1000e874:	dc800817 	ldw	r18,32(sp)
1000e878:	dc400717 	ldw	r17,28(sp)
1000e87c:	dc000617 	ldw	r16,24(sp)
1000e880:	dec01004 	addi	sp,sp,64
1000e884:	f800283a 	ret
1000e888:	8904b03a 	or	r2,r17,r4
1000e88c:	10003726 	beq	r2,zero,1000e96c <__divdf3+0x2b0>
1000e890:	88014d26 	beq	r17,zero,1000edc8 <__divdf3+0x70c>
1000e894:	8809883a 	mov	r4,r17
1000e898:	d9800215 	stw	r6,8(sp)
1000e89c:	d9c00515 	stw	r7,20(sp)
1000e8a0:	00105b80 	call	100105b8 <__clzsi2>
1000e8a4:	d9800217 	ldw	r6,8(sp)
1000e8a8:	d9c00517 	ldw	r7,20(sp)
1000e8ac:	1007883a 	mov	r3,r2
1000e8b0:	01000a04 	movi	r4,40
1000e8b4:	1cfffe04 	addi	r19,r3,-8
1000e8b8:	20c9c83a 	sub	r4,r4,r3
1000e8bc:	8cca983a 	sll	r5,r17,r19
1000e8c0:	a108d83a 	srl	r4,r20,r4
1000e8c4:	a4e6983a 	sll	r19,r20,r19
1000e8c8:	2162b03a 	or	r17,r4,r5
1000e8cc:	04bf0344 	movi	r18,-1011
1000e8d0:	90e5c83a 	sub	r18,r18,r3
1000e8d4:	0029883a 	mov	r20,zero
1000e8d8:	0011883a 	mov	r8,zero
1000e8dc:	003f9606 	br	1000e738 <__alt_data_end+0xf800e738>
1000e8e0:	8184b03a 	or	r2,r16,r6
1000e8e4:	10001f1e 	bne	r2,zero,1000e964 <__divdf3+0x2a8>
1000e8e8:	0021883a 	mov	r16,zero
1000e8ec:	002b883a 	mov	r21,zero
1000e8f0:	01c00084 	movi	r7,2
1000e8f4:	003fa206 	br	1000e780 <__alt_data_end+0xf800e780>
1000e8f8:	8184b03a 	or	r2,r16,r6
1000e8fc:	10001526 	beq	r2,zero,1000e954 <__divdf3+0x298>
1000e900:	80013d26 	beq	r16,zero,1000edf8 <__divdf3+0x73c>
1000e904:	8009883a 	mov	r4,r16
1000e908:	d9800215 	stw	r6,8(sp)
1000e90c:	da000315 	stw	r8,12(sp)
1000e910:	da400415 	stw	r9,16(sp)
1000e914:	00105b80 	call	100105b8 <__clzsi2>
1000e918:	d9800217 	ldw	r6,8(sp)
1000e91c:	da000317 	ldw	r8,12(sp)
1000e920:	da400417 	ldw	r9,16(sp)
1000e924:	1007883a 	mov	r3,r2
1000e928:	01000a04 	movi	r4,40
1000e92c:	1d7ffe04 	addi	r21,r3,-8
1000e930:	20c9c83a 	sub	r4,r4,r3
1000e934:	8560983a 	sll	r16,r16,r21
1000e938:	3108d83a 	srl	r4,r6,r4
1000e93c:	356a983a 	sll	r21,r6,r21
1000e940:	2420b03a 	or	r16,r4,r16
1000e944:	017f0344 	movi	r5,-1011
1000e948:	28cbc83a 	sub	r5,r5,r3
1000e94c:	000f883a 	mov	r7,zero
1000e950:	003f8b06 	br	1000e780 <__alt_data_end+0xf800e780>
1000e954:	0021883a 	mov	r16,zero
1000e958:	002b883a 	mov	r21,zero
1000e95c:	01c00044 	movi	r7,1
1000e960:	003f8706 	br	1000e780 <__alt_data_end+0xf800e780>
1000e964:	01c000c4 	movi	r7,3
1000e968:	003f8506 	br	1000e780 <__alt_data_end+0xf800e780>
1000e96c:	05000104 	movi	r20,4
1000e970:	0023883a 	mov	r17,zero
1000e974:	0027883a 	mov	r19,zero
1000e978:	02000044 	movi	r8,1
1000e97c:	003f6e06 	br	1000e738 <__alt_data_end+0xf800e738>
1000e980:	05000304 	movi	r20,12
1000e984:	020000c4 	movi	r8,3
1000e988:	003f6b06 	br	1000e738 <__alt_data_end+0xf800e738>
1000e98c:	01400434 	movhi	r5,16
1000e990:	000d883a 	mov	r6,zero
1000e994:	297fffc4 	addi	r5,r5,-1
1000e998:	04ffffc4 	movi	r19,-1
1000e99c:	0201ffc4 	movi	r8,2047
1000e9a0:	003fa406 	br	1000e834 <__alt_data_end+0xf800e834>
1000e9a4:	043f0084 	movi	r16,-1022
1000e9a8:	84a1c83a 	sub	r16,r16,r18
1000e9ac:	00800e04 	movi	r2,56
1000e9b0:	14014d0e 	bge	r2,r16,1000eee8 <__divdf3+0x82c>
1000e9b4:	a180004c 	andi	r6,r20,1
1000e9b8:	0011883a 	mov	r8,zero
1000e9bc:	000b883a 	mov	r5,zero
1000e9c0:	0027883a 	mov	r19,zero
1000e9c4:	003f9b06 	br	1000e834 <__alt_data_end+0xf800e834>
1000e9c8:	8880022c 	andhi	r2,r17,8
1000e9cc:	1000f026 	beq	r2,zero,1000ed90 <__divdf3+0x6d4>
1000e9d0:	8080022c 	andhi	r2,r16,8
1000e9d4:	1000ee1e 	bne	r2,zero,1000ed90 <__divdf3+0x6d4>
1000e9d8:	00800434 	movhi	r2,16
1000e9dc:	81400234 	orhi	r5,r16,8
1000e9e0:	10bfffc4 	addi	r2,r2,-1
1000e9e4:	b80d883a 	mov	r6,r23
1000e9e8:	288a703a 	and	r5,r5,r2
1000e9ec:	a827883a 	mov	r19,r21
1000e9f0:	003fea06 	br	1000e99c <__alt_data_end+0xf800e99c>
1000e9f4:	84411c36 	bltu	r16,r17,1000ee68 <__divdf3+0x7ac>
1000e9f8:	8c011a26 	beq	r17,r16,1000ee64 <__divdf3+0x7a8>
1000e9fc:	94bfffc4 	addi	r18,r18,-1
1000ea00:	dcc00015 	stw	r19,0(sp)
1000ea04:	8811883a 	mov	r8,r17
1000ea08:	002d883a 	mov	r22,zero
1000ea0c:	a80cd63a 	srli	r6,r21,24
1000ea10:	8020923a 	slli	r16,r16,8
1000ea14:	a82a923a 	slli	r21,r21,8
1000ea18:	4009883a 	mov	r4,r8
1000ea1c:	342eb03a 	or	r23,r6,r16
1000ea20:	dd400115 	stw	r21,4(sp)
1000ea24:	b82ad43a 	srli	r21,r23,16
1000ea28:	da000315 	stw	r8,12(sp)
1000ea2c:	bcffffcc 	andi	r19,r23,65535
1000ea30:	a80b883a 	mov	r5,r21
1000ea34:	0003c4c0 	call	10003c4c <__udivsi3>
1000ea38:	1009883a 	mov	r4,r2
1000ea3c:	980b883a 	mov	r5,r19
1000ea40:	1023883a 	mov	r17,r2
1000ea44:	0003c5c0 	call	10003c5c <__mulsi3>
1000ea48:	da000317 	ldw	r8,12(sp)
1000ea4c:	a80b883a 	mov	r5,r21
1000ea50:	1039883a 	mov	fp,r2
1000ea54:	4009883a 	mov	r4,r8
1000ea58:	0003c540 	call	10003c54 <__umodsi3>
1000ea5c:	d8c00017 	ldw	r3,0(sp)
1000ea60:	1004943a 	slli	r2,r2,16
1000ea64:	1810d43a 	srli	r8,r3,16
1000ea68:	120eb03a 	or	r7,r2,r8
1000ea6c:	3f00062e 	bgeu	r7,fp,1000ea88 <__divdf3+0x3cc>
1000ea70:	3dcf883a 	add	r7,r7,r23
1000ea74:	88bfffc4 	addi	r2,r17,-1
1000ea78:	3dc10a36 	bltu	r7,r23,1000eea4 <__divdf3+0x7e8>
1000ea7c:	3f01092e 	bgeu	r7,fp,1000eea4 <__divdf3+0x7e8>
1000ea80:	8c7fff84 	addi	r17,r17,-2
1000ea84:	3dcf883a 	add	r7,r7,r23
1000ea88:	3f39c83a 	sub	fp,r7,fp
1000ea8c:	e009883a 	mov	r4,fp
1000ea90:	a80b883a 	mov	r5,r21
1000ea94:	0003c4c0 	call	10003c4c <__udivsi3>
1000ea98:	1009883a 	mov	r4,r2
1000ea9c:	980b883a 	mov	r5,r19
1000eaa0:	1021883a 	mov	r16,r2
1000eaa4:	0003c5c0 	call	10003c5c <__mulsi3>
1000eaa8:	e009883a 	mov	r4,fp
1000eaac:	a80b883a 	mov	r5,r21
1000eab0:	d8800315 	stw	r2,12(sp)
1000eab4:	0003c540 	call	10003c54 <__umodsi3>
1000eab8:	d9000017 	ldw	r4,0(sp)
1000eabc:	1004943a 	slli	r2,r2,16
1000eac0:	da000317 	ldw	r8,12(sp)
1000eac4:	20ffffcc 	andi	r3,r4,65535
1000eac8:	10ceb03a 	or	r7,r2,r3
1000eacc:	3a00062e 	bgeu	r7,r8,1000eae8 <__divdf3+0x42c>
1000ead0:	3dcf883a 	add	r7,r7,r23
1000ead4:	80bfffc4 	addi	r2,r16,-1
1000ead8:	3dc0f036 	bltu	r7,r23,1000ee9c <__divdf3+0x7e0>
1000eadc:	3a00ef2e 	bgeu	r7,r8,1000ee9c <__divdf3+0x7e0>
1000eae0:	843fff84 	addi	r16,r16,-2
1000eae4:	3dcf883a 	add	r7,r7,r23
1000eae8:	d8c00117 	ldw	r3,4(sp)
1000eaec:	8822943a 	slli	r17,r17,16
1000eaf0:	3a0fc83a 	sub	r7,r7,r8
1000eaf4:	1806d43a 	srli	r3,r3,16
1000eaf8:	8462b03a 	or	r17,r16,r17
1000eafc:	8affffcc 	andi	r11,r17,65535
1000eb00:	d8c00015 	stw	r3,0(sp)
1000eb04:	d8c00117 	ldw	r3,4(sp)
1000eb08:	8820d43a 	srli	r16,r17,16
1000eb0c:	5809883a 	mov	r4,r11
1000eb10:	1f3fffcc 	andi	fp,r3,65535
1000eb14:	e00b883a 	mov	r5,fp
1000eb18:	d9c00515 	stw	r7,20(sp)
1000eb1c:	dac00215 	stw	r11,8(sp)
1000eb20:	0003c5c0 	call	10003c5c <__mulsi3>
1000eb24:	8009883a 	mov	r4,r16
1000eb28:	e00b883a 	mov	r5,fp
1000eb2c:	d8800415 	stw	r2,16(sp)
1000eb30:	0003c5c0 	call	10003c5c <__mulsi3>
1000eb34:	d9400017 	ldw	r5,0(sp)
1000eb38:	8009883a 	mov	r4,r16
1000eb3c:	d8800315 	stw	r2,12(sp)
1000eb40:	0003c5c0 	call	10003c5c <__mulsi3>
1000eb44:	dac00217 	ldw	r11,8(sp)
1000eb48:	d9400017 	ldw	r5,0(sp)
1000eb4c:	d8800215 	stw	r2,8(sp)
1000eb50:	5809883a 	mov	r4,r11
1000eb54:	0003c5c0 	call	10003c5c <__mulsi3>
1000eb58:	da400417 	ldw	r9,16(sp)
1000eb5c:	da800317 	ldw	r10,12(sp)
1000eb60:	d9c00517 	ldw	r7,20(sp)
1000eb64:	480ad43a 	srli	r5,r9,16
1000eb68:	5085883a 	add	r2,r10,r2
1000eb6c:	db000217 	ldw	r12,8(sp)
1000eb70:	1151883a 	add	r8,r2,r5
1000eb74:	4280022e 	bgeu	r8,r10,1000eb80 <__divdf3+0x4c4>
1000eb78:	00800074 	movhi	r2,1
1000eb7c:	6099883a 	add	r12,r12,r2
1000eb80:	400ad43a 	srli	r5,r8,16
1000eb84:	4010943a 	slli	r8,r8,16
1000eb88:	4c3fffcc 	andi	r16,r9,65535
1000eb8c:	6149883a 	add	r4,r12,r5
1000eb90:	4411883a 	add	r8,r8,r16
1000eb94:	3900a736 	bltu	r7,r4,1000ee34 <__divdf3+0x778>
1000eb98:	3900c426 	beq	r7,r4,1000eeac <__divdf3+0x7f0>
1000eb9c:	3909c83a 	sub	r4,r7,r4
1000eba0:	b221c83a 	sub	r16,r22,r8
1000eba4:	b42d803a 	cmpltu	r22,r22,r16
1000eba8:	25adc83a 	sub	r22,r4,r22
1000ebac:	b5c0c626 	beq	r22,r23,1000eec8 <__divdf3+0x80c>
1000ebb0:	b009883a 	mov	r4,r22
1000ebb4:	a80b883a 	mov	r5,r21
1000ebb8:	0003c4c0 	call	10003c4c <__udivsi3>
1000ebbc:	1009883a 	mov	r4,r2
1000ebc0:	980b883a 	mov	r5,r19
1000ebc4:	d8800315 	stw	r2,12(sp)
1000ebc8:	0003c5c0 	call	10003c5c <__mulsi3>
1000ebcc:	a80b883a 	mov	r5,r21
1000ebd0:	b009883a 	mov	r4,r22
1000ebd4:	d8800415 	stw	r2,16(sp)
1000ebd8:	0003c540 	call	10003c54 <__umodsi3>
1000ebdc:	1004943a 	slli	r2,r2,16
1000ebe0:	800ed43a 	srli	r7,r16,16
1000ebe4:	da400417 	ldw	r9,16(sp)
1000ebe8:	da000317 	ldw	r8,12(sp)
1000ebec:	11cab03a 	or	r5,r2,r7
1000ebf0:	2a40062e 	bgeu	r5,r9,1000ec0c <__divdf3+0x550>
1000ebf4:	2dcb883a 	add	r5,r5,r23
1000ebf8:	40bfffc4 	addi	r2,r8,-1
1000ebfc:	2dc0b436 	bltu	r5,r23,1000eed0 <__divdf3+0x814>
1000ec00:	2a40b32e 	bgeu	r5,r9,1000eed0 <__divdf3+0x814>
1000ec04:	423fff84 	addi	r8,r8,-2
1000ec08:	2dcb883a 	add	r5,r5,r23
1000ec0c:	2a6dc83a 	sub	r22,r5,r9
1000ec10:	b009883a 	mov	r4,r22
1000ec14:	a80b883a 	mov	r5,r21
1000ec18:	da000315 	stw	r8,12(sp)
1000ec1c:	0003c4c0 	call	10003c4c <__udivsi3>
1000ec20:	980b883a 	mov	r5,r19
1000ec24:	1009883a 	mov	r4,r2
1000ec28:	d8800415 	stw	r2,16(sp)
1000ec2c:	0003c5c0 	call	10003c5c <__mulsi3>
1000ec30:	b009883a 	mov	r4,r22
1000ec34:	a80b883a 	mov	r5,r21
1000ec38:	1027883a 	mov	r19,r2
1000ec3c:	0003c540 	call	10003c54 <__umodsi3>
1000ec40:	1004943a 	slli	r2,r2,16
1000ec44:	843fffcc 	andi	r16,r16,65535
1000ec48:	da000317 	ldw	r8,12(sp)
1000ec4c:	140eb03a 	or	r7,r2,r16
1000ec50:	da400417 	ldw	r9,16(sp)
1000ec54:	3cc0062e 	bgeu	r7,r19,1000ec70 <__divdf3+0x5b4>
1000ec58:	3dcf883a 	add	r7,r7,r23
1000ec5c:	48bfffc4 	addi	r2,r9,-1
1000ec60:	3dc09d36 	bltu	r7,r23,1000eed8 <__divdf3+0x81c>
1000ec64:	3cc09c2e 	bgeu	r7,r19,1000eed8 <__divdf3+0x81c>
1000ec68:	4a7fff84 	addi	r9,r9,-2
1000ec6c:	3dcf883a 	add	r7,r7,r23
1000ec70:	4010943a 	slli	r8,r8,16
1000ec74:	3cebc83a 	sub	r21,r7,r19
1000ec78:	e00b883a 	mov	r5,fp
1000ec7c:	4a26b03a 	or	r19,r9,r8
1000ec80:	99ffffcc 	andi	r7,r19,65535
1000ec84:	9820d43a 	srli	r16,r19,16
1000ec88:	3809883a 	mov	r4,r7
1000ec8c:	d9c00515 	stw	r7,20(sp)
1000ec90:	0003c5c0 	call	10003c5c <__mulsi3>
1000ec94:	8009883a 	mov	r4,r16
1000ec98:	e00b883a 	mov	r5,fp
1000ec9c:	102d883a 	mov	r22,r2
1000eca0:	0003c5c0 	call	10003c5c <__mulsi3>
1000eca4:	d9400017 	ldw	r5,0(sp)
1000eca8:	8009883a 	mov	r4,r16
1000ecac:	1039883a 	mov	fp,r2
1000ecb0:	0003c5c0 	call	10003c5c <__mulsi3>
1000ecb4:	d9c00517 	ldw	r7,20(sp)
1000ecb8:	d9400017 	ldw	r5,0(sp)
1000ecbc:	1021883a 	mov	r16,r2
1000ecc0:	3809883a 	mov	r4,r7
1000ecc4:	0003c5c0 	call	10003c5c <__mulsi3>
1000ecc8:	b008d43a 	srli	r4,r22,16
1000eccc:	e085883a 	add	r2,fp,r2
1000ecd0:	1109883a 	add	r4,r2,r4
1000ecd4:	2700022e 	bgeu	r4,fp,1000ece0 <__divdf3+0x624>
1000ecd8:	00800074 	movhi	r2,1
1000ecdc:	80a1883a 	add	r16,r16,r2
1000ece0:	200ad43a 	srli	r5,r4,16
1000ece4:	2008943a 	slli	r4,r4,16
1000ece8:	b5bfffcc 	andi	r22,r22,65535
1000ecec:	8145883a 	add	r2,r16,r5
1000ecf0:	2589883a 	add	r4,r4,r22
1000ecf4:	a8802c36 	bltu	r21,r2,1000eda8 <__divdf3+0x6ec>
1000ecf8:	a880a426 	beq	r21,r2,1000ef8c <__divdf3+0x8d0>
1000ecfc:	9cc00054 	ori	r19,r19,1
1000ed00:	9200ffc4 	addi	r8,r18,1023
1000ed04:	023f270e 	bge	zero,r8,1000e9a4 <__alt_data_end+0xf800e9a4>
1000ed08:	988001cc 	andi	r2,r19,7
1000ed0c:	10000726 	beq	r2,zero,1000ed2c <__divdf3+0x670>
1000ed10:	990003cc 	andi	r4,r19,15
1000ed14:	00800104 	movi	r2,4
1000ed18:	20800426 	beq	r4,r2,1000ed2c <__divdf3+0x670>
1000ed1c:	9885883a 	add	r2,r19,r2
1000ed20:	14e7803a 	cmpltu	r19,r2,r19
1000ed24:	8ce3883a 	add	r17,r17,r19
1000ed28:	1027883a 	mov	r19,r2
1000ed2c:	8880402c 	andhi	r2,r17,256
1000ed30:	10000426 	beq	r2,zero,1000ed44 <__divdf3+0x688>
1000ed34:	00bfc034 	movhi	r2,65280
1000ed38:	10bfffc4 	addi	r2,r2,-1
1000ed3c:	92010004 	addi	r8,r18,1024
1000ed40:	88a2703a 	and	r17,r17,r2
1000ed44:	0081ff84 	movi	r2,2046
1000ed48:	123eb616 	blt	r2,r8,1000e824 <__alt_data_end+0xf800e824>
1000ed4c:	9826d0fa 	srli	r19,r19,3
1000ed50:	8804977a 	slli	r2,r17,29
1000ed54:	8820927a 	slli	r16,r17,9
1000ed58:	4201ffcc 	andi	r8,r8,2047
1000ed5c:	14e6b03a 	or	r19,r2,r19
1000ed60:	800ad33a 	srli	r5,r16,12
1000ed64:	a180004c 	andi	r6,r20,1
1000ed68:	003eb206 	br	1000e834 <__alt_data_end+0xf800e834>
1000ed6c:	008000c4 	movi	r2,3
1000ed70:	4080ac26 	beq	r8,r2,1000f024 <__divdf3+0x968>
1000ed74:	00800044 	movi	r2,1
1000ed78:	4080591e 	bne	r8,r2,1000eee0 <__divdf3+0x824>
1000ed7c:	e00d883a 	mov	r6,fp
1000ed80:	0011883a 	mov	r8,zero
1000ed84:	000b883a 	mov	r5,zero
1000ed88:	0027883a 	mov	r19,zero
1000ed8c:	003ea906 	br	1000e834 <__alt_data_end+0xf800e834>
1000ed90:	00800434 	movhi	r2,16
1000ed94:	89400234 	orhi	r5,r17,8
1000ed98:	10bfffc4 	addi	r2,r2,-1
1000ed9c:	b00d883a 	mov	r6,r22
1000eda0:	288a703a 	and	r5,r5,r2
1000eda4:	003efd06 	br	1000e99c <__alt_data_end+0xf800e99c>
1000eda8:	adcf883a 	add	r7,r21,r23
1000edac:	997fffc4 	addi	r5,r19,-1
1000edb0:	3dc0412e 	bgeu	r7,r23,1000eeb8 <__divdf3+0x7fc>
1000edb4:	2827883a 	mov	r19,r5
1000edb8:	38bfd01e 	bne	r7,r2,1000ecfc <__alt_data_end+0xf800ecfc>
1000edbc:	d8c00117 	ldw	r3,4(sp)
1000edc0:	193fce1e 	bne	r3,r4,1000ecfc <__alt_data_end+0xf800ecfc>
1000edc4:	003fce06 	br	1000ed00 <__alt_data_end+0xf800ed00>
1000edc8:	d9800215 	stw	r6,8(sp)
1000edcc:	d9c00515 	stw	r7,20(sp)
1000edd0:	00105b80 	call	100105b8 <__clzsi2>
1000edd4:	10c00804 	addi	r3,r2,32
1000edd8:	010009c4 	movi	r4,39
1000eddc:	d9800217 	ldw	r6,8(sp)
1000ede0:	d9c00517 	ldw	r7,20(sp)
1000ede4:	20feb20e 	bge	r4,r3,1000e8b0 <__alt_data_end+0xf800e8b0>
1000ede8:	117ffe04 	addi	r5,r2,-8
1000edec:	a162983a 	sll	r17,r20,r5
1000edf0:	0027883a 	mov	r19,zero
1000edf4:	003eb506 	br	1000e8cc <__alt_data_end+0xf800e8cc>
1000edf8:	3009883a 	mov	r4,r6
1000edfc:	d9800215 	stw	r6,8(sp)
1000ee00:	da000315 	stw	r8,12(sp)
1000ee04:	da400415 	stw	r9,16(sp)
1000ee08:	00105b80 	call	100105b8 <__clzsi2>
1000ee0c:	10c00804 	addi	r3,r2,32
1000ee10:	010009c4 	movi	r4,39
1000ee14:	d9800217 	ldw	r6,8(sp)
1000ee18:	da000317 	ldw	r8,12(sp)
1000ee1c:	da400417 	ldw	r9,16(sp)
1000ee20:	20fec10e 	bge	r4,r3,1000e928 <__alt_data_end+0xf800e928>
1000ee24:	10bffe04 	addi	r2,r2,-8
1000ee28:	a8a0983a 	sll	r16,r21,r2
1000ee2c:	002b883a 	mov	r21,zero
1000ee30:	003ec406 	br	1000e944 <__alt_data_end+0xf800e944>
1000ee34:	d8c00117 	ldw	r3,4(sp)
1000ee38:	b0ed883a 	add	r22,r22,r3
1000ee3c:	b0c5803a 	cmpltu	r2,r22,r3
1000ee40:	15c5883a 	add	r2,r2,r23
1000ee44:	11cf883a 	add	r7,r2,r7
1000ee48:	88bfffc4 	addi	r2,r17,-1
1000ee4c:	b9c00d2e 	bgeu	r23,r7,1000ee84 <__divdf3+0x7c8>
1000ee50:	39003f36 	bltu	r7,r4,1000ef50 <__divdf3+0x894>
1000ee54:	21c06a26 	beq	r4,r7,1000f000 <__divdf3+0x944>
1000ee58:	3909c83a 	sub	r4,r7,r4
1000ee5c:	1023883a 	mov	r17,r2
1000ee60:	003f4f06 	br	1000eba0 <__alt_data_end+0xf800eba0>
1000ee64:	9d7ee536 	bltu	r19,r21,1000e9fc <__alt_data_end+0xf800e9fc>
1000ee68:	982ed07a 	srli	r23,r19,1
1000ee6c:	880497fa 	slli	r2,r17,31
1000ee70:	8810d07a 	srli	r8,r17,1
1000ee74:	982c97fa 	slli	r22,r19,31
1000ee78:	b884b03a 	or	r2,r23,r2
1000ee7c:	d8800015 	stw	r2,0(sp)
1000ee80:	003ee206 	br	1000ea0c <__alt_data_end+0xf800ea0c>
1000ee84:	3dfff41e 	bne	r7,r23,1000ee58 <__alt_data_end+0xf800ee58>
1000ee88:	d8c00117 	ldw	r3,4(sp)
1000ee8c:	b0fff02e 	bgeu	r22,r3,1000ee50 <__alt_data_end+0xf800ee50>
1000ee90:	b909c83a 	sub	r4,r23,r4
1000ee94:	1023883a 	mov	r17,r2
1000ee98:	003f4106 	br	1000eba0 <__alt_data_end+0xf800eba0>
1000ee9c:	1021883a 	mov	r16,r2
1000eea0:	003f1106 	br	1000eae8 <__alt_data_end+0xf800eae8>
1000eea4:	1023883a 	mov	r17,r2
1000eea8:	003ef706 	br	1000ea88 <__alt_data_end+0xf800ea88>
1000eeac:	b23fe136 	bltu	r22,r8,1000ee34 <__alt_data_end+0xf800ee34>
1000eeb0:	0009883a 	mov	r4,zero
1000eeb4:	003f3a06 	br	1000eba0 <__alt_data_end+0xf800eba0>
1000eeb8:	38802c36 	bltu	r7,r2,1000ef6c <__divdf3+0x8b0>
1000eebc:	11c05326 	beq	r2,r7,1000f00c <__divdf3+0x950>
1000eec0:	2827883a 	mov	r19,r5
1000eec4:	003f8d06 	br	1000ecfc <__alt_data_end+0xf800ecfc>
1000eec8:	04ffffc4 	movi	r19,-1
1000eecc:	003f8c06 	br	1000ed00 <__alt_data_end+0xf800ed00>
1000eed0:	1011883a 	mov	r8,r2
1000eed4:	003f4d06 	br	1000ec0c <__alt_data_end+0xf800ec0c>
1000eed8:	1013883a 	mov	r9,r2
1000eedc:	003f6406 	br	1000ec70 <__alt_data_end+0xf800ec70>
1000eee0:	e029883a 	mov	r20,fp
1000eee4:	003f8606 	br	1000ed00 <__alt_data_end+0xf800ed00>
1000eee8:	008007c4 	movi	r2,31
1000eeec:	14002a16 	blt	r2,r16,1000ef98 <__divdf3+0x8dc>
1000eef0:	91410784 	addi	r5,r18,1054
1000eef4:	9c0cd83a 	srl	r6,r19,r16
1000eef8:	8948983a 	sll	r4,r17,r5
1000eefc:	9944983a 	sll	r2,r19,r5
1000ef00:	8c20d83a 	srl	r16,r17,r16
1000ef04:	3108b03a 	or	r4,r6,r4
1000ef08:	1004c03a 	cmpne	r2,r2,zero
1000ef0c:	2084b03a 	or	r2,r4,r2
1000ef10:	110001cc 	andi	r4,r2,7
1000ef14:	20000726 	beq	r4,zero,1000ef34 <__divdf3+0x878>
1000ef18:	114003cc 	andi	r5,r2,15
1000ef1c:	01000104 	movi	r4,4
1000ef20:	29000426 	beq	r5,r4,1000ef34 <__divdf3+0x878>
1000ef24:	11000104 	addi	r4,r2,4
1000ef28:	2085803a 	cmpltu	r2,r4,r2
1000ef2c:	80a1883a 	add	r16,r16,r2
1000ef30:	2005883a 	mov	r2,r4
1000ef34:	8100202c 	andhi	r4,r16,128
1000ef38:	20002d26 	beq	r4,zero,1000eff0 <__divdf3+0x934>
1000ef3c:	a180004c 	andi	r6,r20,1
1000ef40:	02000044 	movi	r8,1
1000ef44:	000b883a 	mov	r5,zero
1000ef48:	0027883a 	mov	r19,zero
1000ef4c:	003e3906 	br	1000e834 <__alt_data_end+0xf800e834>
1000ef50:	d8c00117 	ldw	r3,4(sp)
1000ef54:	8c7fff84 	addi	r17,r17,-2
1000ef58:	b0ed883a 	add	r22,r22,r3
1000ef5c:	b0c5803a 	cmpltu	r2,r22,r3
1000ef60:	15c5883a 	add	r2,r2,r23
1000ef64:	11cf883a 	add	r7,r2,r7
1000ef68:	003f0c06 	br	1000eb9c <__alt_data_end+0xf800eb9c>
1000ef6c:	d8c00117 	ldw	r3,4(sp)
1000ef70:	997fff84 	addi	r5,r19,-2
1000ef74:	18d1883a 	add	r8,r3,r3
1000ef78:	40c7803a 	cmpltu	r3,r8,r3
1000ef7c:	1dcd883a 	add	r6,r3,r23
1000ef80:	398f883a 	add	r7,r7,r6
1000ef84:	da000115 	stw	r8,4(sp)
1000ef88:	003f8a06 	br	1000edb4 <__alt_data_end+0xf800edb4>
1000ef8c:	203f861e 	bne	r4,zero,1000eda8 <__alt_data_end+0xf800eda8>
1000ef90:	d8000115 	stw	zero,4(sp)
1000ef94:	003f8906 	br	1000edbc <__alt_data_end+0xf800edbc>
1000ef98:	00bef884 	movi	r2,-1054
1000ef9c:	1485c83a 	sub	r2,r2,r18
1000efa0:	01000804 	movi	r4,32
1000efa4:	8884d83a 	srl	r2,r17,r2
1000efa8:	81001c26 	beq	r16,r4,1000f01c <__divdf3+0x960>
1000efac:	91010f84 	addi	r4,r18,1086
1000efb0:	8908983a 	sll	r4,r17,r4
1000efb4:	24c8b03a 	or	r4,r4,r19
1000efb8:	2008c03a 	cmpne	r4,r4,zero
1000efbc:	2084b03a 	or	r2,r4,r2
1000efc0:	140001cc 	andi	r16,r2,7
1000efc4:	8000061e 	bne	r16,zero,1000efe0 <__divdf3+0x924>
1000efc8:	000b883a 	mov	r5,zero
1000efcc:	1004d0fa 	srli	r2,r2,3
1000efd0:	a180004c 	andi	r6,r20,1
1000efd4:	0011883a 	mov	r8,zero
1000efd8:	1426b03a 	or	r19,r2,r16
1000efdc:	003e1506 	br	1000e834 <__alt_data_end+0xf800e834>
1000efe0:	114003cc 	andi	r5,r2,15
1000efe4:	01000104 	movi	r4,4
1000efe8:	0021883a 	mov	r16,zero
1000efec:	293fcd1e 	bne	r5,r4,1000ef24 <__alt_data_end+0xf800ef24>
1000eff0:	800a927a 	slli	r5,r16,9
1000eff4:	8020977a 	slli	r16,r16,29
1000eff8:	280ad33a 	srli	r5,r5,12
1000effc:	003ff306 	br	1000efcc <__alt_data_end+0xf800efcc>
1000f000:	b23fd336 	bltu	r22,r8,1000ef50 <__alt_data_end+0xf800ef50>
1000f004:	1023883a 	mov	r17,r2
1000f008:	003fa906 	br	1000eeb0 <__alt_data_end+0xf800eeb0>
1000f00c:	d8c00117 	ldw	r3,4(sp)
1000f010:	193fd636 	bltu	r3,r4,1000ef6c <__alt_data_end+0xf800ef6c>
1000f014:	2827883a 	mov	r19,r5
1000f018:	003f6806 	br	1000edbc <__alt_data_end+0xf800edbc>
1000f01c:	0009883a 	mov	r4,zero
1000f020:	003fe406 	br	1000efb4 <__alt_data_end+0xf800efb4>
1000f024:	00800434 	movhi	r2,16
1000f028:	89400234 	orhi	r5,r17,8
1000f02c:	10bfffc4 	addi	r2,r2,-1
1000f030:	e00d883a 	mov	r6,fp
1000f034:	288a703a 	and	r5,r5,r2
1000f038:	003e5806 	br	1000e99c <__alt_data_end+0xf800e99c>

1000f03c <__eqdf2>:
1000f03c:	2804d53a 	srli	r2,r5,20
1000f040:	3806d53a 	srli	r3,r7,20
1000f044:	02000434 	movhi	r8,16
1000f048:	423fffc4 	addi	r8,r8,-1
1000f04c:	1081ffcc 	andi	r2,r2,2047
1000f050:	0241ffc4 	movi	r9,2047
1000f054:	2a14703a 	and	r10,r5,r8
1000f058:	18c1ffcc 	andi	r3,r3,2047
1000f05c:	3a10703a 	and	r8,r7,r8
1000f060:	280ad7fa 	srli	r5,r5,31
1000f064:	380ed7fa 	srli	r7,r7,31
1000f068:	12400f26 	beq	r2,r9,1000f0a8 <__eqdf2+0x6c>
1000f06c:	0241ffc4 	movi	r9,2047
1000f070:	1a400326 	beq	r3,r9,1000f080 <__eqdf2+0x44>
1000f074:	10c00526 	beq	r2,r3,1000f08c <__eqdf2+0x50>
1000f078:	00800044 	movi	r2,1
1000f07c:	f800283a 	ret
1000f080:	4192b03a 	or	r9,r8,r6
1000f084:	483ffc1e 	bne	r9,zero,1000f078 <__alt_data_end+0xf800f078>
1000f088:	10fffb1e 	bne	r2,r3,1000f078 <__alt_data_end+0xf800f078>
1000f08c:	523ffa1e 	bne	r10,r8,1000f078 <__alt_data_end+0xf800f078>
1000f090:	21bff91e 	bne	r4,r6,1000f078 <__alt_data_end+0xf800f078>
1000f094:	29c00826 	beq	r5,r7,1000f0b8 <__eqdf2+0x7c>
1000f098:	103ff71e 	bne	r2,zero,1000f078 <__alt_data_end+0xf800f078>
1000f09c:	5104b03a 	or	r2,r10,r4
1000f0a0:	1004c03a 	cmpne	r2,r2,zero
1000f0a4:	f800283a 	ret
1000f0a8:	5112b03a 	or	r9,r10,r4
1000f0ac:	483fef26 	beq	r9,zero,1000f06c <__alt_data_end+0xf800f06c>
1000f0b0:	00800044 	movi	r2,1
1000f0b4:	f800283a 	ret
1000f0b8:	0005883a 	mov	r2,zero
1000f0bc:	f800283a 	ret

1000f0c0 <__gedf2>:
1000f0c0:	2804d53a 	srli	r2,r5,20
1000f0c4:	3806d53a 	srli	r3,r7,20
1000f0c8:	02000434 	movhi	r8,16
1000f0cc:	423fffc4 	addi	r8,r8,-1
1000f0d0:	0241ffc4 	movi	r9,2047
1000f0d4:	1081ffcc 	andi	r2,r2,2047
1000f0d8:	2a14703a 	and	r10,r5,r8
1000f0dc:	1a46703a 	and	r3,r3,r9
1000f0e0:	3a10703a 	and	r8,r7,r8
1000f0e4:	280ad7fa 	srli	r5,r5,31
1000f0e8:	380ed7fa 	srli	r7,r7,31
1000f0ec:	12400b26 	beq	r2,r9,1000f11c <__gedf2+0x5c>
1000f0f0:	1a401626 	beq	r3,r9,1000f14c <__gedf2+0x8c>
1000f0f4:	10000c1e 	bne	r2,zero,1000f128 <__gedf2+0x68>
1000f0f8:	5112b03a 	or	r9,r10,r4
1000f0fc:	4813003a 	cmpeq	r9,r9,zero
1000f100:	4817883a 	mov	r11,r9
1000f104:	18000c1e 	bne	r3,zero,1000f138 <__gedf2+0x78>
1000f108:	4198b03a 	or	r12,r8,r6
1000f10c:	60000a1e 	bne	r12,zero,1000f138 <__gedf2+0x78>
1000f110:	48001326 	beq	r9,zero,1000f160 <__gedf2+0xa0>
1000f114:	0005883a 	mov	r2,zero
1000f118:	f800283a 	ret
1000f11c:	5112b03a 	or	r9,r10,r4
1000f120:	4800191e 	bne	r9,zero,1000f188 <__gedf2+0xc8>
1000f124:	18800926 	beq	r3,r2,1000f14c <__gedf2+0x8c>
1000f128:	18000b1e 	bne	r3,zero,1000f158 <__gedf2+0x98>
1000f12c:	4192b03a 	or	r9,r8,r6
1000f130:	0017883a 	mov	r11,zero
1000f134:	48000a26 	beq	r9,zero,1000f160 <__gedf2+0xa0>
1000f138:	39c03fcc 	andi	r7,r7,255
1000f13c:	58000726 	beq	r11,zero,1000f15c <__gedf2+0x9c>
1000f140:	3800081e 	bne	r7,zero,1000f164 <__gedf2+0xa4>
1000f144:	00bfffc4 	movi	r2,-1
1000f148:	f800283a 	ret
1000f14c:	4192b03a 	or	r9,r8,r6
1000f150:	48000d1e 	bne	r9,zero,1000f188 <__gedf2+0xc8>
1000f154:	103fe826 	beq	r2,zero,1000f0f8 <__alt_data_end+0xf800f0f8>
1000f158:	39c03fcc 	andi	r7,r7,255
1000f15c:	29c00326 	beq	r5,r7,1000f16c <__gedf2+0xac>
1000f160:	283ff81e 	bne	r5,zero,1000f144 <__alt_data_end+0xf800f144>
1000f164:	00800044 	movi	r2,1
1000f168:	f800283a 	ret
1000f16c:	18bffc16 	blt	r3,r2,1000f160 <__alt_data_end+0xf800f160>
1000f170:	10c00316 	blt	r2,r3,1000f180 <__gedf2+0xc0>
1000f174:	42bffa36 	bltu	r8,r10,1000f160 <__alt_data_end+0xf800f160>
1000f178:	52000526 	beq	r10,r8,1000f190 <__gedf2+0xd0>
1000f17c:	523fe52e 	bgeu	r10,r8,1000f114 <__alt_data_end+0xf800f114>
1000f180:	283ff026 	beq	r5,zero,1000f144 <__alt_data_end+0xf800f144>
1000f184:	003ff706 	br	1000f164 <__alt_data_end+0xf800f164>
1000f188:	00bfff84 	movi	r2,-2
1000f18c:	f800283a 	ret
1000f190:	313ff336 	bltu	r6,r4,1000f160 <__alt_data_end+0xf800f160>
1000f194:	21bfdf2e 	bgeu	r4,r6,1000f114 <__alt_data_end+0xf800f114>
1000f198:	283fea26 	beq	r5,zero,1000f144 <__alt_data_end+0xf800f144>
1000f19c:	003ff106 	br	1000f164 <__alt_data_end+0xf800f164>

1000f1a0 <__ledf2>:
1000f1a0:	2804d53a 	srli	r2,r5,20
1000f1a4:	3810d53a 	srli	r8,r7,20
1000f1a8:	00c00434 	movhi	r3,16
1000f1ac:	18ffffc4 	addi	r3,r3,-1
1000f1b0:	0241ffc4 	movi	r9,2047
1000f1b4:	1081ffcc 	andi	r2,r2,2047
1000f1b8:	28d4703a 	and	r10,r5,r3
1000f1bc:	4250703a 	and	r8,r8,r9
1000f1c0:	38c6703a 	and	r3,r7,r3
1000f1c4:	280ad7fa 	srli	r5,r5,31
1000f1c8:	380ed7fa 	srli	r7,r7,31
1000f1cc:	12400b26 	beq	r2,r9,1000f1fc <__ledf2+0x5c>
1000f1d0:	42401926 	beq	r8,r9,1000f238 <__ledf2+0x98>
1000f1d4:	10000c1e 	bne	r2,zero,1000f208 <__ledf2+0x68>
1000f1d8:	5112b03a 	or	r9,r10,r4
1000f1dc:	4813003a 	cmpeq	r9,r9,zero
1000f1e0:	4817883a 	mov	r11,r9
1000f1e4:	40000f26 	beq	r8,zero,1000f224 <__ledf2+0x84>
1000f1e8:	39c03fcc 	andi	r7,r7,255
1000f1ec:	58001826 	beq	r11,zero,1000f250 <__ledf2+0xb0>
1000f1f0:	38000a1e 	bne	r7,zero,1000f21c <__ledf2+0x7c>
1000f1f4:	00bfffc4 	movi	r2,-1
1000f1f8:	f800283a 	ret
1000f1fc:	5112b03a 	or	r9,r10,r4
1000f200:	48000f1e 	bne	r9,zero,1000f240 <__ledf2+0xa0>
1000f204:	40800c26 	beq	r8,r2,1000f238 <__ledf2+0x98>
1000f208:	4000101e 	bne	r8,zero,1000f24c <__ledf2+0xac>
1000f20c:	1992b03a 	or	r9,r3,r6
1000f210:	0017883a 	mov	r11,zero
1000f214:	483ff41e 	bne	r9,zero,1000f1e8 <__alt_data_end+0xf800f1e8>
1000f218:	283ff61e 	bne	r5,zero,1000f1f4 <__alt_data_end+0xf800f1f4>
1000f21c:	00800044 	movi	r2,1
1000f220:	f800283a 	ret
1000f224:	1998b03a 	or	r12,r3,r6
1000f228:	603fef1e 	bne	r12,zero,1000f1e8 <__alt_data_end+0xf800f1e8>
1000f22c:	483ffa26 	beq	r9,zero,1000f218 <__alt_data_end+0xf800f218>
1000f230:	0005883a 	mov	r2,zero
1000f234:	f800283a 	ret
1000f238:	1992b03a 	or	r9,r3,r6
1000f23c:	48000226 	beq	r9,zero,1000f248 <__ledf2+0xa8>
1000f240:	00800084 	movi	r2,2
1000f244:	f800283a 	ret
1000f248:	103fe326 	beq	r2,zero,1000f1d8 <__alt_data_end+0xf800f1d8>
1000f24c:	39c03fcc 	andi	r7,r7,255
1000f250:	29fff11e 	bne	r5,r7,1000f218 <__alt_data_end+0xf800f218>
1000f254:	40bff016 	blt	r8,r2,1000f218 <__alt_data_end+0xf800f218>
1000f258:	12000316 	blt	r2,r8,1000f268 <__ledf2+0xc8>
1000f25c:	1abfee36 	bltu	r3,r10,1000f218 <__alt_data_end+0xf800f218>
1000f260:	50c00326 	beq	r10,r3,1000f270 <__ledf2+0xd0>
1000f264:	50fff22e 	bgeu	r10,r3,1000f230 <__alt_data_end+0xf800f230>
1000f268:	283fe226 	beq	r5,zero,1000f1f4 <__alt_data_end+0xf800f1f4>
1000f26c:	003feb06 	br	1000f21c <__alt_data_end+0xf800f21c>
1000f270:	313fe936 	bltu	r6,r4,1000f218 <__alt_data_end+0xf800f218>
1000f274:	21bfee2e 	bgeu	r4,r6,1000f230 <__alt_data_end+0xf800f230>
1000f278:	283fde26 	beq	r5,zero,1000f1f4 <__alt_data_end+0xf800f1f4>
1000f27c:	003fe706 	br	1000f21c <__alt_data_end+0xf800f21c>

1000f280 <__muldf3>:
1000f280:	deffee04 	addi	sp,sp,-72
1000f284:	dd000c15 	stw	r20,48(sp)
1000f288:	2828d53a 	srli	r20,r5,20
1000f28c:	dd400d15 	stw	r21,52(sp)
1000f290:	282ad7fa 	srli	r21,r5,31
1000f294:	dc000815 	stw	r16,32(sp)
1000f298:	04000434 	movhi	r16,16
1000f29c:	ddc00f15 	stw	r23,60(sp)
1000f2a0:	dcc00b15 	stw	r19,44(sp)
1000f2a4:	dc800a15 	stw	r18,40(sp)
1000f2a8:	843fffc4 	addi	r16,r16,-1
1000f2ac:	dfc01115 	stw	ra,68(sp)
1000f2b0:	df001015 	stw	fp,64(sp)
1000f2b4:	dd800e15 	stw	r22,56(sp)
1000f2b8:	dc400915 	stw	r17,36(sp)
1000f2bc:	a501ffcc 	andi	r20,r20,2047
1000f2c0:	2025883a 	mov	r18,r4
1000f2c4:	202f883a 	mov	r23,r4
1000f2c8:	2c20703a 	and	r16,r5,r16
1000f2cc:	a827883a 	mov	r19,r21
1000f2d0:	aa403fcc 	andi	r9,r21,255
1000f2d4:	a0005926 	beq	r20,zero,1000f43c <__muldf3+0x1bc>
1000f2d8:	0081ffc4 	movi	r2,2047
1000f2dc:	a0803426 	beq	r20,r2,1000f3b0 <__muldf3+0x130>
1000f2e0:	84000434 	orhi	r16,r16,16
1000f2e4:	2004d77a 	srli	r2,r4,29
1000f2e8:	802090fa 	slli	r16,r16,3
1000f2ec:	202e90fa 	slli	r23,r4,3
1000f2f0:	a53f0044 	addi	r20,r20,-1023
1000f2f4:	80a0b03a 	or	r16,r16,r2
1000f2f8:	000b883a 	mov	r5,zero
1000f2fc:	0039883a 	mov	fp,zero
1000f300:	3806d53a 	srli	r3,r7,20
1000f304:	382cd7fa 	srli	r22,r7,31
1000f308:	00800434 	movhi	r2,16
1000f30c:	10bfffc4 	addi	r2,r2,-1
1000f310:	18c1ffcc 	andi	r3,r3,2047
1000f314:	3025883a 	mov	r18,r6
1000f318:	38a2703a 	and	r17,r7,r2
1000f31c:	b2803fcc 	andi	r10,r22,255
1000f320:	18006426 	beq	r3,zero,1000f4b4 <__muldf3+0x234>
1000f324:	0081ffc4 	movi	r2,2047
1000f328:	18805c26 	beq	r3,r2,1000f49c <__muldf3+0x21c>
1000f32c:	8c400434 	orhi	r17,r17,16
1000f330:	3004d77a 	srli	r2,r6,29
1000f334:	882290fa 	slli	r17,r17,3
1000f338:	302490fa 	slli	r18,r6,3
1000f33c:	18ff0044 	addi	r3,r3,-1023
1000f340:	88a2b03a 	or	r17,r17,r2
1000f344:	000f883a 	mov	r7,zero
1000f348:	394ab03a 	or	r5,r7,r5
1000f34c:	280a90ba 	slli	r5,r5,2
1000f350:	00840074 	movhi	r2,4097
1000f354:	10bcdc04 	addi	r2,r2,-3216
1000f358:	288b883a 	add	r5,r5,r2
1000f35c:	28800017 	ldw	r2,0(r5)
1000f360:	a0c7883a 	add	r3,r20,r3
1000f364:	b54cf03a 	xor	r6,r22,r21
1000f368:	1a000044 	addi	r8,r3,1
1000f36c:	1000683a 	jmp	r2
1000f370:	1000f5b4 	orhi	zero,r2,982
1000f374:	1000f5a0 	cmpeqi	zero,r2,982
1000f378:	1000f5a0 	cmpeqi	zero,r2,982
1000f37c:	1000f58c 	andi	zero,r2,982
1000f380:	1000f3cc 	andi	zero,r2,975
1000f384:	1000f3cc 	andi	zero,r2,975
1000f388:	1000f574 	orhi	zero,r2,981
1000f38c:	1000f58c 	andi	zero,r2,982
1000f390:	1000f3cc 	andi	zero,r2,975
1000f394:	1000f574 	orhi	zero,r2,981
1000f398:	1000f3cc 	andi	zero,r2,975
1000f39c:	1000f58c 	andi	zero,r2,982
1000f3a0:	1000f3d0 	cmplti	zero,r2,975
1000f3a4:	1000f3d0 	cmplti	zero,r2,975
1000f3a8:	1000f3d0 	cmplti	zero,r2,975
1000f3ac:	1000f8f0 	cmpltui	zero,r2,995
1000f3b0:	8104b03a 	or	r2,r16,r4
1000f3b4:	10006c1e 	bne	r2,zero,1000f568 <__muldf3+0x2e8>
1000f3b8:	01400204 	movi	r5,8
1000f3bc:	0021883a 	mov	r16,zero
1000f3c0:	002f883a 	mov	r23,zero
1000f3c4:	07000084 	movi	fp,2
1000f3c8:	003fcd06 	br	1000f300 <__alt_data_end+0xf800f300>
1000f3cc:	3013883a 	mov	r9,r6
1000f3d0:	00800084 	movi	r2,2
1000f3d4:	e080501e 	bne	fp,r2,1000f518 <__muldf3+0x298>
1000f3d8:	4cc0004c 	andi	r19,r9,1
1000f3dc:	0101ffc4 	movi	r4,2047
1000f3e0:	0021883a 	mov	r16,zero
1000f3e4:	002f883a 	mov	r23,zero
1000f3e8:	2008953a 	slli	r4,r4,20
1000f3ec:	98c03fcc 	andi	r3,r19,255
1000f3f0:	04400434 	movhi	r17,16
1000f3f4:	8c7fffc4 	addi	r17,r17,-1
1000f3f8:	180697fa 	slli	r3,r3,31
1000f3fc:	8460703a 	and	r16,r16,r17
1000f400:	8120b03a 	or	r16,r16,r4
1000f404:	80c6b03a 	or	r3,r16,r3
1000f408:	b805883a 	mov	r2,r23
1000f40c:	dfc01117 	ldw	ra,68(sp)
1000f410:	df001017 	ldw	fp,64(sp)
1000f414:	ddc00f17 	ldw	r23,60(sp)
1000f418:	dd800e17 	ldw	r22,56(sp)
1000f41c:	dd400d17 	ldw	r21,52(sp)
1000f420:	dd000c17 	ldw	r20,48(sp)
1000f424:	dcc00b17 	ldw	r19,44(sp)
1000f428:	dc800a17 	ldw	r18,40(sp)
1000f42c:	dc400917 	ldw	r17,36(sp)
1000f430:	dc000817 	ldw	r16,32(sp)
1000f434:	dec01204 	addi	sp,sp,72
1000f438:	f800283a 	ret
1000f43c:	8104b03a 	or	r2,r16,r4
1000f440:	10004426 	beq	r2,zero,1000f554 <__muldf3+0x2d4>
1000f444:	80014b26 	beq	r16,zero,1000f974 <__muldf3+0x6f4>
1000f448:	8009883a 	mov	r4,r16
1000f44c:	d9800715 	stw	r6,28(sp)
1000f450:	d9c00215 	stw	r7,8(sp)
1000f454:	da400415 	stw	r9,16(sp)
1000f458:	00105b80 	call	100105b8 <__clzsi2>
1000f45c:	d9800717 	ldw	r6,28(sp)
1000f460:	d9c00217 	ldw	r7,8(sp)
1000f464:	da400417 	ldw	r9,16(sp)
1000f468:	1007883a 	mov	r3,r2
1000f46c:	01000a04 	movi	r4,40
1000f470:	1dfffe04 	addi	r23,r3,-8
1000f474:	20c9c83a 	sub	r4,r4,r3
1000f478:	85e0983a 	sll	r16,r16,r23
1000f47c:	9108d83a 	srl	r4,r18,r4
1000f480:	95ee983a 	sll	r23,r18,r23
1000f484:	2420b03a 	or	r16,r4,r16
1000f488:	053f0344 	movi	r20,-1011
1000f48c:	a0e9c83a 	sub	r20,r20,r3
1000f490:	000b883a 	mov	r5,zero
1000f494:	0039883a 	mov	fp,zero
1000f498:	003f9906 	br	1000f300 <__alt_data_end+0xf800f300>
1000f49c:	8984b03a 	or	r2,r17,r6
1000f4a0:	10002a1e 	bne	r2,zero,1000f54c <__muldf3+0x2cc>
1000f4a4:	0023883a 	mov	r17,zero
1000f4a8:	0025883a 	mov	r18,zero
1000f4ac:	01c00084 	movi	r7,2
1000f4b0:	003fa506 	br	1000f348 <__alt_data_end+0xf800f348>
1000f4b4:	8984b03a 	or	r2,r17,r6
1000f4b8:	10002026 	beq	r2,zero,1000f53c <__muldf3+0x2bc>
1000f4bc:	88011c26 	beq	r17,zero,1000f930 <__muldf3+0x6b0>
1000f4c0:	8809883a 	mov	r4,r17
1000f4c4:	d9400215 	stw	r5,8(sp)
1000f4c8:	d9800715 	stw	r6,28(sp)
1000f4cc:	da400415 	stw	r9,16(sp)
1000f4d0:	da800315 	stw	r10,12(sp)
1000f4d4:	00105b80 	call	100105b8 <__clzsi2>
1000f4d8:	d9400217 	ldw	r5,8(sp)
1000f4dc:	d9800717 	ldw	r6,28(sp)
1000f4e0:	da400417 	ldw	r9,16(sp)
1000f4e4:	da800317 	ldw	r10,12(sp)
1000f4e8:	1007883a 	mov	r3,r2
1000f4ec:	01000a04 	movi	r4,40
1000f4f0:	1cbffe04 	addi	r18,r3,-8
1000f4f4:	20c9c83a 	sub	r4,r4,r3
1000f4f8:	8ca2983a 	sll	r17,r17,r18
1000f4fc:	3108d83a 	srl	r4,r6,r4
1000f500:	34a4983a 	sll	r18,r6,r18
1000f504:	2462b03a 	or	r17,r4,r17
1000f508:	00bf0344 	movi	r2,-1011
1000f50c:	10c7c83a 	sub	r3,r2,r3
1000f510:	000f883a 	mov	r7,zero
1000f514:	003f8c06 	br	1000f348 <__alt_data_end+0xf800f348>
1000f518:	008000c4 	movi	r2,3
1000f51c:	e0816d26 	beq	fp,r2,1000fad4 <__muldf3+0x854>
1000f520:	00800044 	movi	r2,1
1000f524:	e081321e 	bne	fp,r2,1000f9f0 <__muldf3+0x770>
1000f528:	48a6703a 	and	r19,r9,r2
1000f52c:	0009883a 	mov	r4,zero
1000f530:	0021883a 	mov	r16,zero
1000f534:	002f883a 	mov	r23,zero
1000f538:	003fab06 	br	1000f3e8 <__alt_data_end+0xf800f3e8>
1000f53c:	0023883a 	mov	r17,zero
1000f540:	0025883a 	mov	r18,zero
1000f544:	01c00044 	movi	r7,1
1000f548:	003f7f06 	br	1000f348 <__alt_data_end+0xf800f348>
1000f54c:	01c000c4 	movi	r7,3
1000f550:	003f7d06 	br	1000f348 <__alt_data_end+0xf800f348>
1000f554:	01400104 	movi	r5,4
1000f558:	0021883a 	mov	r16,zero
1000f55c:	002f883a 	mov	r23,zero
1000f560:	07000044 	movi	fp,1
1000f564:	003f6606 	br	1000f300 <__alt_data_end+0xf800f300>
1000f568:	01400304 	movi	r5,12
1000f56c:	070000c4 	movi	fp,3
1000f570:	003f6306 	br	1000f300 <__alt_data_end+0xf800f300>
1000f574:	04000434 	movhi	r16,16
1000f578:	0027883a 	mov	r19,zero
1000f57c:	843fffc4 	addi	r16,r16,-1
1000f580:	05ffffc4 	movi	r23,-1
1000f584:	0101ffc4 	movi	r4,2047
1000f588:	003f9706 	br	1000f3e8 <__alt_data_end+0xf800f3e8>
1000f58c:	8821883a 	mov	r16,r17
1000f590:	902f883a 	mov	r23,r18
1000f594:	5013883a 	mov	r9,r10
1000f598:	3839883a 	mov	fp,r7
1000f59c:	003f8c06 	br	1000f3d0 <__alt_data_end+0xf800f3d0>
1000f5a0:	8821883a 	mov	r16,r17
1000f5a4:	902f883a 	mov	r23,r18
1000f5a8:	3013883a 	mov	r9,r6
1000f5ac:	3839883a 	mov	fp,r7
1000f5b0:	003f8706 	br	1000f3d0 <__alt_data_end+0xf800f3d0>
1000f5b4:	b82ad43a 	srli	r21,r23,16
1000f5b8:	9038d43a 	srli	fp,r18,16
1000f5bc:	bdffffcc 	andi	r23,r23,65535
1000f5c0:	94bfffcc 	andi	r18,r18,65535
1000f5c4:	9009883a 	mov	r4,r18
1000f5c8:	b80b883a 	mov	r5,r23
1000f5cc:	d8c00515 	stw	r3,20(sp)
1000f5d0:	d9800715 	stw	r6,28(sp)
1000f5d4:	da000615 	stw	r8,24(sp)
1000f5d8:	0003c5c0 	call	10003c5c <__mulsi3>
1000f5dc:	9009883a 	mov	r4,r18
1000f5e0:	a80b883a 	mov	r5,r21
1000f5e4:	1029883a 	mov	r20,r2
1000f5e8:	0003c5c0 	call	10003c5c <__mulsi3>
1000f5ec:	e009883a 	mov	r4,fp
1000f5f0:	a80b883a 	mov	r5,r21
1000f5f4:	102d883a 	mov	r22,r2
1000f5f8:	0003c5c0 	call	10003c5c <__mulsi3>
1000f5fc:	e009883a 	mov	r4,fp
1000f600:	b80b883a 	mov	r5,r23
1000f604:	1027883a 	mov	r19,r2
1000f608:	0003c5c0 	call	10003c5c <__mulsi3>
1000f60c:	a008d43a 	srli	r4,r20,16
1000f610:	b085883a 	add	r2,r22,r2
1000f614:	d8c00517 	ldw	r3,20(sp)
1000f618:	110f883a 	add	r7,r2,r4
1000f61c:	d9800717 	ldw	r6,28(sp)
1000f620:	da000617 	ldw	r8,24(sp)
1000f624:	3d80022e 	bgeu	r7,r22,1000f630 <__muldf3+0x3b0>
1000f628:	00800074 	movhi	r2,1
1000f62c:	98a7883a 	add	r19,r19,r2
1000f630:	3804943a 	slli	r2,r7,16
1000f634:	380ed43a 	srli	r7,r7,16
1000f638:	882cd43a 	srli	r22,r17,16
1000f63c:	a53fffcc 	andi	r20,r20,65535
1000f640:	8c7fffcc 	andi	r17,r17,65535
1000f644:	1529883a 	add	r20,r2,r20
1000f648:	8809883a 	mov	r4,r17
1000f64c:	b80b883a 	mov	r5,r23
1000f650:	d8c00515 	stw	r3,20(sp)
1000f654:	d9800715 	stw	r6,28(sp)
1000f658:	da000615 	stw	r8,24(sp)
1000f65c:	d9c00015 	stw	r7,0(sp)
1000f660:	dd000115 	stw	r20,4(sp)
1000f664:	0003c5c0 	call	10003c5c <__mulsi3>
1000f668:	a80b883a 	mov	r5,r21
1000f66c:	8809883a 	mov	r4,r17
1000f670:	d8800415 	stw	r2,16(sp)
1000f674:	0003c5c0 	call	10003c5c <__mulsi3>
1000f678:	a80b883a 	mov	r5,r21
1000f67c:	b009883a 	mov	r4,r22
1000f680:	1029883a 	mov	r20,r2
1000f684:	0003c5c0 	call	10003c5c <__mulsi3>
1000f688:	b009883a 	mov	r4,r22
1000f68c:	b80b883a 	mov	r5,r23
1000f690:	102b883a 	mov	r21,r2
1000f694:	0003c5c0 	call	10003c5c <__mulsi3>
1000f698:	da400417 	ldw	r9,16(sp)
1000f69c:	a085883a 	add	r2,r20,r2
1000f6a0:	d8c00517 	ldw	r3,20(sp)
1000f6a4:	4808d43a 	srli	r4,r9,16
1000f6a8:	d9800717 	ldw	r6,28(sp)
1000f6ac:	da000617 	ldw	r8,24(sp)
1000f6b0:	1109883a 	add	r4,r2,r4
1000f6b4:	2500022e 	bgeu	r4,r20,1000f6c0 <__muldf3+0x440>
1000f6b8:	00800074 	movhi	r2,1
1000f6bc:	a8ab883a 	add	r21,r21,r2
1000f6c0:	200e943a 	slli	r7,r4,16
1000f6c4:	2004d43a 	srli	r2,r4,16
1000f6c8:	802ed43a 	srli	r23,r16,16
1000f6cc:	843fffcc 	andi	r16,r16,65535
1000f6d0:	4d3fffcc 	andi	r20,r9,65535
1000f6d4:	9009883a 	mov	r4,r18
1000f6d8:	800b883a 	mov	r5,r16
1000f6dc:	3d29883a 	add	r20,r7,r20
1000f6e0:	d8c00515 	stw	r3,20(sp)
1000f6e4:	d9800715 	stw	r6,28(sp)
1000f6e8:	da000615 	stw	r8,24(sp)
1000f6ec:	a8ab883a 	add	r21,r21,r2
1000f6f0:	0003c5c0 	call	10003c5c <__mulsi3>
1000f6f4:	9009883a 	mov	r4,r18
1000f6f8:	b80b883a 	mov	r5,r23
1000f6fc:	d8800315 	stw	r2,12(sp)
1000f700:	0003c5c0 	call	10003c5c <__mulsi3>
1000f704:	e009883a 	mov	r4,fp
1000f708:	b80b883a 	mov	r5,r23
1000f70c:	1025883a 	mov	r18,r2
1000f710:	0003c5c0 	call	10003c5c <__mulsi3>
1000f714:	e009883a 	mov	r4,fp
1000f718:	800b883a 	mov	r5,r16
1000f71c:	d8800215 	stw	r2,8(sp)
1000f720:	0003c5c0 	call	10003c5c <__mulsi3>
1000f724:	da800317 	ldw	r10,12(sp)
1000f728:	d9400017 	ldw	r5,0(sp)
1000f72c:	9085883a 	add	r2,r18,r2
1000f730:	5008d43a 	srli	r4,r10,16
1000f734:	a153883a 	add	r9,r20,r5
1000f738:	d8c00517 	ldw	r3,20(sp)
1000f73c:	1109883a 	add	r4,r2,r4
1000f740:	d9800717 	ldw	r6,28(sp)
1000f744:	da000617 	ldw	r8,24(sp)
1000f748:	dac00217 	ldw	r11,8(sp)
1000f74c:	2480022e 	bgeu	r4,r18,1000f758 <__muldf3+0x4d8>
1000f750:	00800074 	movhi	r2,1
1000f754:	5897883a 	add	r11,r11,r2
1000f758:	200e943a 	slli	r7,r4,16
1000f75c:	2038d43a 	srli	fp,r4,16
1000f760:	52bfffcc 	andi	r10,r10,65535
1000f764:	3a8f883a 	add	r7,r7,r10
1000f768:	8809883a 	mov	r4,r17
1000f76c:	800b883a 	mov	r5,r16
1000f770:	d8c00515 	stw	r3,20(sp)
1000f774:	d9800715 	stw	r6,28(sp)
1000f778:	d9c00215 	stw	r7,8(sp)
1000f77c:	da000615 	stw	r8,24(sp)
1000f780:	da400415 	stw	r9,16(sp)
1000f784:	5f39883a 	add	fp,r11,fp
1000f788:	0003c5c0 	call	10003c5c <__mulsi3>
1000f78c:	8809883a 	mov	r4,r17
1000f790:	b80b883a 	mov	r5,r23
1000f794:	1025883a 	mov	r18,r2
1000f798:	0003c5c0 	call	10003c5c <__mulsi3>
1000f79c:	b009883a 	mov	r4,r22
1000f7a0:	b80b883a 	mov	r5,r23
1000f7a4:	d8800315 	stw	r2,12(sp)
1000f7a8:	0003c5c0 	call	10003c5c <__mulsi3>
1000f7ac:	b009883a 	mov	r4,r22
1000f7b0:	800b883a 	mov	r5,r16
1000f7b4:	1023883a 	mov	r17,r2
1000f7b8:	0003c5c0 	call	10003c5c <__mulsi3>
1000f7bc:	da800317 	ldw	r10,12(sp)
1000f7c0:	9008d43a 	srli	r4,r18,16
1000f7c4:	d8c00517 	ldw	r3,20(sp)
1000f7c8:	5085883a 	add	r2,r10,r2
1000f7cc:	1109883a 	add	r4,r2,r4
1000f7d0:	d9800717 	ldw	r6,28(sp)
1000f7d4:	d9c00217 	ldw	r7,8(sp)
1000f7d8:	da000617 	ldw	r8,24(sp)
1000f7dc:	da400417 	ldw	r9,16(sp)
1000f7e0:	2280022e 	bgeu	r4,r10,1000f7ec <__muldf3+0x56c>
1000f7e4:	00800074 	movhi	r2,1
1000f7e8:	88a3883a 	add	r17,r17,r2
1000f7ec:	2004943a 	slli	r2,r4,16
1000f7f0:	94bfffcc 	andi	r18,r18,65535
1000f7f4:	4ce7883a 	add	r19,r9,r19
1000f7f8:	14a5883a 	add	r18,r2,r18
1000f7fc:	9d29803a 	cmpltu	r20,r19,r20
1000f800:	9565883a 	add	r18,r18,r21
1000f804:	9505883a 	add	r2,r18,r20
1000f808:	99e7883a 	add	r19,r19,r7
1000f80c:	99cf803a 	cmpltu	r7,r19,r7
1000f810:	e08b883a 	add	r5,fp,r2
1000f814:	2008d43a 	srli	r4,r4,16
1000f818:	29ef883a 	add	r23,r5,r7
1000f81c:	1529803a 	cmpltu	r20,r2,r20
1000f820:	956b803a 	cmpltu	r21,r18,r21
1000f824:	b9cf803a 	cmpltu	r7,r23,r7
1000f828:	a564b03a 	or	r18,r20,r21
1000f82c:	2f39803a 	cmpltu	fp,r5,fp
1000f830:	9125883a 	add	r18,r18,r4
1000f834:	3f38b03a 	or	fp,r7,fp
1000f838:	9725883a 	add	r18,r18,fp
1000f83c:	9804927a 	slli	r2,r19,9
1000f840:	9463883a 	add	r17,r18,r17
1000f844:	d9000117 	ldw	r4,4(sp)
1000f848:	b820d5fa 	srli	r16,r23,23
1000f84c:	8822927a 	slli	r17,r17,9
1000f850:	9826d5fa 	srli	r19,r19,23
1000f854:	1104b03a 	or	r2,r2,r4
1000f858:	b82e927a 	slli	r23,r23,9
1000f85c:	1004c03a 	cmpne	r2,r2,zero
1000f860:	8c20b03a 	or	r16,r17,r16
1000f864:	14e6b03a 	or	r19,r2,r19
1000f868:	8080402c 	andhi	r2,r16,256
1000f86c:	9deeb03a 	or	r23,r19,r23
1000f870:	10000726 	beq	r2,zero,1000f890 <__muldf3+0x610>
1000f874:	b804d07a 	srli	r2,r23,1
1000f878:	800697fa 	slli	r3,r16,31
1000f87c:	bdc0004c 	andi	r23,r23,1
1000f880:	8020d07a 	srli	r16,r16,1
1000f884:	b8aeb03a 	or	r23,r23,r2
1000f888:	b8eeb03a 	or	r23,r23,r3
1000f88c:	4007883a 	mov	r3,r8
1000f890:	1900ffc4 	addi	r4,r3,1023
1000f894:	01004d0e 	bge	zero,r4,1000f9cc <__muldf3+0x74c>
1000f898:	b88001cc 	andi	r2,r23,7
1000f89c:	10000726 	beq	r2,zero,1000f8bc <__muldf3+0x63c>
1000f8a0:	b94003cc 	andi	r5,r23,15
1000f8a4:	00800104 	movi	r2,4
1000f8a8:	28800426 	beq	r5,r2,1000f8bc <__muldf3+0x63c>
1000f8ac:	b885883a 	add	r2,r23,r2
1000f8b0:	15ef803a 	cmpltu	r23,r2,r23
1000f8b4:	85e1883a 	add	r16,r16,r23
1000f8b8:	102f883a 	mov	r23,r2
1000f8bc:	8080402c 	andhi	r2,r16,256
1000f8c0:	10000426 	beq	r2,zero,1000f8d4 <__muldf3+0x654>
1000f8c4:	00bfc034 	movhi	r2,65280
1000f8c8:	10bfffc4 	addi	r2,r2,-1
1000f8cc:	19010004 	addi	r4,r3,1024
1000f8d0:	80a0703a 	and	r16,r16,r2
1000f8d4:	0081ff84 	movi	r2,2046
1000f8d8:	1100340e 	bge	r2,r4,1000f9ac <__muldf3+0x72c>
1000f8dc:	34c0004c 	andi	r19,r6,1
1000f8e0:	0101ffc4 	movi	r4,2047
1000f8e4:	0021883a 	mov	r16,zero
1000f8e8:	002f883a 	mov	r23,zero
1000f8ec:	003ebe06 	br	1000f3e8 <__alt_data_end+0xf800f3e8>
1000f8f0:	8080022c 	andhi	r2,r16,8
1000f8f4:	10000926 	beq	r2,zero,1000f91c <__muldf3+0x69c>
1000f8f8:	8880022c 	andhi	r2,r17,8
1000f8fc:	1000071e 	bne	r2,zero,1000f91c <__muldf3+0x69c>
1000f900:	00800434 	movhi	r2,16
1000f904:	8c000234 	orhi	r16,r17,8
1000f908:	10bfffc4 	addi	r2,r2,-1
1000f90c:	b027883a 	mov	r19,r22
1000f910:	80a0703a 	and	r16,r16,r2
1000f914:	902f883a 	mov	r23,r18
1000f918:	003f1a06 	br	1000f584 <__alt_data_end+0xf800f584>
1000f91c:	00800434 	movhi	r2,16
1000f920:	84000234 	orhi	r16,r16,8
1000f924:	10bfffc4 	addi	r2,r2,-1
1000f928:	80a0703a 	and	r16,r16,r2
1000f92c:	003f1506 	br	1000f584 <__alt_data_end+0xf800f584>
1000f930:	3009883a 	mov	r4,r6
1000f934:	d9400215 	stw	r5,8(sp)
1000f938:	d9800715 	stw	r6,28(sp)
1000f93c:	da400415 	stw	r9,16(sp)
1000f940:	da800315 	stw	r10,12(sp)
1000f944:	00105b80 	call	100105b8 <__clzsi2>
1000f948:	10c00804 	addi	r3,r2,32
1000f94c:	010009c4 	movi	r4,39
1000f950:	d9400217 	ldw	r5,8(sp)
1000f954:	d9800717 	ldw	r6,28(sp)
1000f958:	da400417 	ldw	r9,16(sp)
1000f95c:	da800317 	ldw	r10,12(sp)
1000f960:	20fee20e 	bge	r4,r3,1000f4ec <__alt_data_end+0xf800f4ec>
1000f964:	147ffe04 	addi	r17,r2,-8
1000f968:	9462983a 	sll	r17,r18,r17
1000f96c:	0025883a 	mov	r18,zero
1000f970:	003ee506 	br	1000f508 <__alt_data_end+0xf800f508>
1000f974:	d9800715 	stw	r6,28(sp)
1000f978:	d9c00215 	stw	r7,8(sp)
1000f97c:	da400415 	stw	r9,16(sp)
1000f980:	00105b80 	call	100105b8 <__clzsi2>
1000f984:	10c00804 	addi	r3,r2,32
1000f988:	010009c4 	movi	r4,39
1000f98c:	d9800717 	ldw	r6,28(sp)
1000f990:	d9c00217 	ldw	r7,8(sp)
1000f994:	da400417 	ldw	r9,16(sp)
1000f998:	20feb40e 	bge	r4,r3,1000f46c <__alt_data_end+0xf800f46c>
1000f99c:	143ffe04 	addi	r16,r2,-8
1000f9a0:	9420983a 	sll	r16,r18,r16
1000f9a4:	002f883a 	mov	r23,zero
1000f9a8:	003eb706 	br	1000f488 <__alt_data_end+0xf800f488>
1000f9ac:	8004977a 	slli	r2,r16,29
1000f9b0:	b82ed0fa 	srli	r23,r23,3
1000f9b4:	8020927a 	slli	r16,r16,9
1000f9b8:	2101ffcc 	andi	r4,r4,2047
1000f9bc:	15eeb03a 	or	r23,r2,r23
1000f9c0:	8020d33a 	srli	r16,r16,12
1000f9c4:	34c0004c 	andi	r19,r6,1
1000f9c8:	003e8706 	br	1000f3e8 <__alt_data_end+0xf800f3e8>
1000f9cc:	00bf0084 	movi	r2,-1022
1000f9d0:	10c5c83a 	sub	r2,r2,r3
1000f9d4:	01000e04 	movi	r4,56
1000f9d8:	2080080e 	bge	r4,r2,1000f9fc <__muldf3+0x77c>
1000f9dc:	34c0004c 	andi	r19,r6,1
1000f9e0:	0009883a 	mov	r4,zero
1000f9e4:	0021883a 	mov	r16,zero
1000f9e8:	002f883a 	mov	r23,zero
1000f9ec:	003e7e06 	br	1000f3e8 <__alt_data_end+0xf800f3e8>
1000f9f0:	4007883a 	mov	r3,r8
1000f9f4:	480d883a 	mov	r6,r9
1000f9f8:	003fa506 	br	1000f890 <__alt_data_end+0xf800f890>
1000f9fc:	010007c4 	movi	r4,31
1000fa00:	20801816 	blt	r4,r2,1000fa64 <__muldf3+0x7e4>
1000fa04:	18c10784 	addi	r3,r3,1054
1000fa08:	80c8983a 	sll	r4,r16,r3
1000fa0c:	b88ad83a 	srl	r5,r23,r2
1000fa10:	b8c6983a 	sll	r3,r23,r3
1000fa14:	80a0d83a 	srl	r16,r16,r2
1000fa18:	2908b03a 	or	r4,r5,r4
1000fa1c:	1804c03a 	cmpne	r2,r3,zero
1000fa20:	2088b03a 	or	r4,r4,r2
1000fa24:	208001cc 	andi	r2,r4,7
1000fa28:	10000726 	beq	r2,zero,1000fa48 <__muldf3+0x7c8>
1000fa2c:	20c003cc 	andi	r3,r4,15
1000fa30:	00800104 	movi	r2,4
1000fa34:	18800426 	beq	r3,r2,1000fa48 <__muldf3+0x7c8>
1000fa38:	20c00104 	addi	r3,r4,4
1000fa3c:	1905803a 	cmpltu	r2,r3,r4
1000fa40:	80a1883a 	add	r16,r16,r2
1000fa44:	1809883a 	mov	r4,r3
1000fa48:	8080202c 	andhi	r2,r16,128
1000fa4c:	10001b26 	beq	r2,zero,1000fabc <__muldf3+0x83c>
1000fa50:	34c0004c 	andi	r19,r6,1
1000fa54:	01000044 	movi	r4,1
1000fa58:	0021883a 	mov	r16,zero
1000fa5c:	002f883a 	mov	r23,zero
1000fa60:	003e6106 	br	1000f3e8 <__alt_data_end+0xf800f3e8>
1000fa64:	013ef884 	movi	r4,-1054
1000fa68:	20c9c83a 	sub	r4,r4,r3
1000fa6c:	01400804 	movi	r5,32
1000fa70:	8108d83a 	srl	r4,r16,r4
1000fa74:	11401526 	beq	r2,r5,1000facc <__muldf3+0x84c>
1000fa78:	18c10f84 	addi	r3,r3,1086
1000fa7c:	80e0983a 	sll	r16,r16,r3
1000fa80:	85eeb03a 	or	r23,r16,r23
1000fa84:	b804c03a 	cmpne	r2,r23,zero
1000fa88:	1108b03a 	or	r4,r2,r4
1000fa8c:	20c001cc 	andi	r3,r4,7
1000fa90:	1800061e 	bne	r3,zero,1000faac <__muldf3+0x82c>
1000fa94:	0021883a 	mov	r16,zero
1000fa98:	202ed0fa 	srli	r23,r4,3
1000fa9c:	34c0004c 	andi	r19,r6,1
1000faa0:	0009883a 	mov	r4,zero
1000faa4:	b8eeb03a 	or	r23,r23,r3
1000faa8:	003e4f06 	br	1000f3e8 <__alt_data_end+0xf800f3e8>
1000faac:	20c003cc 	andi	r3,r4,15
1000fab0:	00800104 	movi	r2,4
1000fab4:	0021883a 	mov	r16,zero
1000fab8:	18bfdf1e 	bne	r3,r2,1000fa38 <__alt_data_end+0xf800fa38>
1000fabc:	8004927a 	slli	r2,r16,9
1000fac0:	8006977a 	slli	r3,r16,29
1000fac4:	1020d33a 	srli	r16,r2,12
1000fac8:	003ff306 	br	1000fa98 <__alt_data_end+0xf800fa98>
1000facc:	0021883a 	mov	r16,zero
1000fad0:	003feb06 	br	1000fa80 <__alt_data_end+0xf800fa80>
1000fad4:	00800434 	movhi	r2,16
1000fad8:	84000234 	orhi	r16,r16,8
1000fadc:	10bfffc4 	addi	r2,r2,-1
1000fae0:	4cc0004c 	andi	r19,r9,1
1000fae4:	80a0703a 	and	r16,r16,r2
1000fae8:	003ea606 	br	1000f584 <__alt_data_end+0xf800f584>

1000faec <__subdf3>:
1000faec:	00c00434 	movhi	r3,16
1000faf0:	18ffffc4 	addi	r3,r3,-1
1000faf4:	defffb04 	addi	sp,sp,-20
1000faf8:	28d2703a 	and	r9,r5,r3
1000fafc:	3814d53a 	srli	r10,r7,20
1000fb00:	38c6703a 	and	r3,r7,r3
1000fb04:	3004d77a 	srli	r2,r6,29
1000fb08:	dc800215 	stw	r18,8(sp)
1000fb0c:	dc000015 	stw	r16,0(sp)
1000fb10:	2824d7fa 	srli	r18,r5,31
1000fb14:	2820d53a 	srli	r16,r5,20
1000fb18:	481290fa 	slli	r9,r9,3
1000fb1c:	200ad77a 	srli	r5,r4,29
1000fb20:	180690fa 	slli	r3,r3,3
1000fb24:	dc400115 	stw	r17,4(sp)
1000fb28:	dfc00415 	stw	ra,16(sp)
1000fb2c:	202290fa 	slli	r17,r4,3
1000fb30:	dcc00315 	stw	r19,12(sp)
1000fb34:	5281ffcc 	andi	r10,r10,2047
1000fb38:	0101ffc4 	movi	r4,2047
1000fb3c:	9011883a 	mov	r8,r18
1000fb40:	8401ffcc 	andi	r16,r16,2047
1000fb44:	94803fcc 	andi	r18,r18,255
1000fb48:	494ab03a 	or	r5,r9,r5
1000fb4c:	380ed7fa 	srli	r7,r7,31
1000fb50:	1886b03a 	or	r3,r3,r2
1000fb54:	300c90fa 	slli	r6,r6,3
1000fb58:	51009026 	beq	r10,r4,1000fd9c <__subdf3+0x2b0>
1000fb5c:	39c0005c 	xori	r7,r7,1
1000fb60:	8285c83a 	sub	r2,r16,r10
1000fb64:	91c06f26 	beq	r18,r7,1000fd24 <__subdf3+0x238>
1000fb68:	0080b10e 	bge	zero,r2,1000fe30 <__subdf3+0x344>
1000fb6c:	50002a1e 	bne	r10,zero,1000fc18 <__subdf3+0x12c>
1000fb70:	1988b03a 	or	r4,r3,r6
1000fb74:	2000941e 	bne	r4,zero,1000fdc8 <__subdf3+0x2dc>
1000fb78:	888001cc 	andi	r2,r17,7
1000fb7c:	10005b26 	beq	r2,zero,1000fcec <__subdf3+0x200>
1000fb80:	88c003cc 	andi	r3,r17,15
1000fb84:	00800104 	movi	r2,4
1000fb88:	18805826 	beq	r3,r2,1000fcec <__subdf3+0x200>
1000fb8c:	88c00104 	addi	r3,r17,4
1000fb90:	1c63803a 	cmpltu	r17,r3,r17
1000fb94:	2c4b883a 	add	r5,r5,r17
1000fb98:	2880202c 	andhi	r2,r5,128
1000fb9c:	9200004c 	andi	r8,r18,1
1000fba0:	1823883a 	mov	r17,r3
1000fba4:	10005426 	beq	r2,zero,1000fcf8 <__subdf3+0x20c>
1000fba8:	84000044 	addi	r16,r16,1
1000fbac:	0081ffc4 	movi	r2,2047
1000fbb0:	8080bf26 	beq	r16,r2,1000feb0 <__subdf3+0x3c4>
1000fbb4:	013fe034 	movhi	r4,65408
1000fbb8:	213fffc4 	addi	r4,r4,-1
1000fbbc:	290a703a 	and	r5,r5,r4
1000fbc0:	2804977a 	slli	r2,r5,29
1000fbc4:	280a927a 	slli	r5,r5,9
1000fbc8:	8822d0fa 	srli	r17,r17,3
1000fbcc:	8401ffcc 	andi	r16,r16,2047
1000fbd0:	2808d33a 	srli	r4,r5,12
1000fbd4:	1444b03a 	or	r2,r2,r17
1000fbd8:	8401ffcc 	andi	r16,r16,2047
1000fbdc:	800a953a 	slli	r5,r16,20
1000fbe0:	40c03fcc 	andi	r3,r8,255
1000fbe4:	04000434 	movhi	r16,16
1000fbe8:	180697fa 	slli	r3,r3,31
1000fbec:	843fffc4 	addi	r16,r16,-1
1000fbf0:	2420703a 	and	r16,r4,r16
1000fbf4:	8160b03a 	or	r16,r16,r5
1000fbf8:	80c6b03a 	or	r3,r16,r3
1000fbfc:	dfc00417 	ldw	ra,16(sp)
1000fc00:	dcc00317 	ldw	r19,12(sp)
1000fc04:	dc800217 	ldw	r18,8(sp)
1000fc08:	dc400117 	ldw	r17,4(sp)
1000fc0c:	dc000017 	ldw	r16,0(sp)
1000fc10:	dec00504 	addi	sp,sp,20
1000fc14:	f800283a 	ret
1000fc18:	0101ffc4 	movi	r4,2047
1000fc1c:	813fd626 	beq	r16,r4,1000fb78 <__alt_data_end+0xf800fb78>
1000fc20:	18c02034 	orhi	r3,r3,128
1000fc24:	01000e04 	movi	r4,56
1000fc28:	2080a416 	blt	r4,r2,1000febc <__subdf3+0x3d0>
1000fc2c:	010007c4 	movi	r4,31
1000fc30:	2080c716 	blt	r4,r2,1000ff50 <__subdf3+0x464>
1000fc34:	01000804 	movi	r4,32
1000fc38:	2089c83a 	sub	r4,r4,r2
1000fc3c:	1910983a 	sll	r8,r3,r4
1000fc40:	308ed83a 	srl	r7,r6,r2
1000fc44:	3108983a 	sll	r4,r6,r4
1000fc48:	1884d83a 	srl	r2,r3,r2
1000fc4c:	41ccb03a 	or	r6,r8,r7
1000fc50:	2008c03a 	cmpne	r4,r4,zero
1000fc54:	310cb03a 	or	r6,r6,r4
1000fc58:	898dc83a 	sub	r6,r17,r6
1000fc5c:	89a3803a 	cmpltu	r17,r17,r6
1000fc60:	288bc83a 	sub	r5,r5,r2
1000fc64:	2c4bc83a 	sub	r5,r5,r17
1000fc68:	3023883a 	mov	r17,r6
1000fc6c:	2880202c 	andhi	r2,r5,128
1000fc70:	10006b26 	beq	r2,zero,1000fe20 <__subdf3+0x334>
1000fc74:	04c02034 	movhi	r19,128
1000fc78:	9cffffc4 	addi	r19,r19,-1
1000fc7c:	2ce6703a 	and	r19,r5,r19
1000fc80:	98007c26 	beq	r19,zero,1000fe74 <__subdf3+0x388>
1000fc84:	9809883a 	mov	r4,r19
1000fc88:	00105b80 	call	100105b8 <__clzsi2>
1000fc8c:	10fffe04 	addi	r3,r2,-8
1000fc90:	010007c4 	movi	r4,31
1000fc94:	20c07d16 	blt	r4,r3,1000fe8c <__subdf3+0x3a0>
1000fc98:	01400a04 	movi	r5,40
1000fc9c:	2885c83a 	sub	r2,r5,r2
1000fca0:	888ad83a 	srl	r5,r17,r2
1000fca4:	98e6983a 	sll	r19,r19,r3
1000fca8:	88e2983a 	sll	r17,r17,r3
1000fcac:	2ce6b03a 	or	r19,r5,r19
1000fcb0:	1c007a16 	blt	r3,r16,1000fe9c <__subdf3+0x3b0>
1000fcb4:	1c21c83a 	sub	r16,r3,r16
1000fcb8:	81400044 	addi	r5,r16,1
1000fcbc:	00c007c4 	movi	r3,31
1000fcc0:	19409616 	blt	r3,r5,1000ff1c <__subdf3+0x430>
1000fcc4:	1c21c83a 	sub	r16,r3,r16
1000fcc8:	8c08983a 	sll	r4,r17,r16
1000fccc:	8946d83a 	srl	r3,r17,r5
1000fcd0:	9c20983a 	sll	r16,r19,r16
1000fcd4:	2008c03a 	cmpne	r4,r4,zero
1000fcd8:	994ad83a 	srl	r5,r19,r5
1000fcdc:	1c06b03a 	or	r3,r3,r16
1000fce0:	1922b03a 	or	r17,r3,r4
1000fce4:	0021883a 	mov	r16,zero
1000fce8:	003fa306 	br	1000fb78 <__alt_data_end+0xf800fb78>
1000fcec:	2880202c 	andhi	r2,r5,128
1000fcf0:	9200004c 	andi	r8,r18,1
1000fcf4:	103fac1e 	bne	r2,zero,1000fba8 <__alt_data_end+0xf800fba8>
1000fcf8:	2804977a 	slli	r2,r5,29
1000fcfc:	8822d0fa 	srli	r17,r17,3
1000fd00:	00c1ffc4 	movi	r3,2047
1000fd04:	280ad0fa 	srli	r5,r5,3
1000fd08:	1444b03a 	or	r2,r2,r17
1000fd0c:	80c02726 	beq	r16,r3,1000fdac <__subdf3+0x2c0>
1000fd10:	01000434 	movhi	r4,16
1000fd14:	213fffc4 	addi	r4,r4,-1
1000fd18:	80e0703a 	and	r16,r16,r3
1000fd1c:	2908703a 	and	r4,r5,r4
1000fd20:	003fad06 	br	1000fbd8 <__alt_data_end+0xf800fbd8>
1000fd24:	0080690e 	bge	zero,r2,1000fecc <__subdf3+0x3e0>
1000fd28:	50002f26 	beq	r10,zero,1000fde8 <__subdf3+0x2fc>
1000fd2c:	0101ffc4 	movi	r4,2047
1000fd30:	813f9126 	beq	r16,r4,1000fb78 <__alt_data_end+0xf800fb78>
1000fd34:	18c02034 	orhi	r3,r3,128
1000fd38:	01000e04 	movi	r4,56
1000fd3c:	2080b00e 	bge	r4,r2,10010000 <__subdf3+0x514>
1000fd40:	198cb03a 	or	r6,r3,r6
1000fd44:	300ec03a 	cmpne	r7,r6,zero
1000fd48:	0005883a 	mov	r2,zero
1000fd4c:	3c4f883a 	add	r7,r7,r17
1000fd50:	3c63803a 	cmpltu	r17,r7,r17
1000fd54:	114b883a 	add	r5,r2,r5
1000fd58:	2c4b883a 	add	r5,r5,r17
1000fd5c:	3823883a 	mov	r17,r7
1000fd60:	2880202c 	andhi	r2,r5,128
1000fd64:	10002e26 	beq	r2,zero,1000fe20 <__subdf3+0x334>
1000fd68:	84000044 	addi	r16,r16,1
1000fd6c:	0081ffc4 	movi	r2,2047
1000fd70:	8080de26 	beq	r16,r2,100100ec <__subdf3+0x600>
1000fd74:	00bfe034 	movhi	r2,65408
1000fd78:	10bfffc4 	addi	r2,r2,-1
1000fd7c:	288a703a 	and	r5,r5,r2
1000fd80:	880cd07a 	srli	r6,r17,1
1000fd84:	280897fa 	slli	r4,r5,31
1000fd88:	88c0004c 	andi	r3,r17,1
1000fd8c:	30e2b03a 	or	r17,r6,r3
1000fd90:	280ad07a 	srli	r5,r5,1
1000fd94:	8922b03a 	or	r17,r17,r4
1000fd98:	003f7706 	br	1000fb78 <__alt_data_end+0xf800fb78>
1000fd9c:	1984b03a 	or	r2,r3,r6
1000fda0:	103f6e26 	beq	r2,zero,1000fb5c <__alt_data_end+0xf800fb5c>
1000fda4:	39c03fcc 	andi	r7,r7,255
1000fda8:	003f6d06 	br	1000fb60 <__alt_data_end+0xf800fb60>
1000fdac:	1146b03a 	or	r3,r2,r5
1000fdb0:	18003f26 	beq	r3,zero,1000feb0 <__subdf3+0x3c4>
1000fdb4:	00c00434 	movhi	r3,16
1000fdb8:	29000234 	orhi	r4,r5,8
1000fdbc:	18ffffc4 	addi	r3,r3,-1
1000fdc0:	20c8703a 	and	r4,r4,r3
1000fdc4:	003f8406 	br	1000fbd8 <__alt_data_end+0xf800fbd8>
1000fdc8:	10bfffc4 	addi	r2,r2,-1
1000fdcc:	1000501e 	bne	r2,zero,1000ff10 <__subdf3+0x424>
1000fdd0:	898fc83a 	sub	r7,r17,r6
1000fdd4:	89e3803a 	cmpltu	r17,r17,r7
1000fdd8:	28cbc83a 	sub	r5,r5,r3
1000fddc:	2c4bc83a 	sub	r5,r5,r17
1000fde0:	3823883a 	mov	r17,r7
1000fde4:	003fa106 	br	1000fc6c <__alt_data_end+0xf800fc6c>
1000fde8:	1988b03a 	or	r4,r3,r6
1000fdec:	203f6226 	beq	r4,zero,1000fb78 <__alt_data_end+0xf800fb78>
1000fdf0:	10bfffc4 	addi	r2,r2,-1
1000fdf4:	10009b1e 	bne	r2,zero,10010064 <__subdf3+0x578>
1000fdf8:	344d883a 	add	r6,r6,r17
1000fdfc:	3463803a 	cmpltu	r17,r6,r17
1000fe00:	194b883a 	add	r5,r3,r5
1000fe04:	2c4b883a 	add	r5,r5,r17
1000fe08:	3023883a 	mov	r17,r6
1000fe0c:	003fd406 	br	1000fd60 <__alt_data_end+0xf800fd60>
1000fe10:	1106b03a 	or	r3,r2,r4
1000fe14:	1800b426 	beq	r3,zero,100100e8 <__subdf3+0x5fc>
1000fe18:	100b883a 	mov	r5,r2
1000fe1c:	2023883a 	mov	r17,r4
1000fe20:	888001cc 	andi	r2,r17,7
1000fe24:	103f561e 	bne	r2,zero,1000fb80 <__alt_data_end+0xf800fb80>
1000fe28:	9200004c 	andi	r8,r18,1
1000fe2c:	003fb206 	br	1000fcf8 <__alt_data_end+0xf800fcf8>
1000fe30:	1000531e 	bne	r2,zero,1000ff80 <__subdf3+0x494>
1000fe34:	80800044 	addi	r2,r16,1
1000fe38:	1081ffcc 	andi	r2,r2,2047
1000fe3c:	01000044 	movi	r4,1
1000fe40:	2080a00e 	bge	r4,r2,100100c4 <__subdf3+0x5d8>
1000fe44:	8985c83a 	sub	r2,r17,r6
1000fe48:	8889803a 	cmpltu	r4,r17,r2
1000fe4c:	28e7c83a 	sub	r19,r5,r3
1000fe50:	9927c83a 	sub	r19,r19,r4
1000fe54:	9900202c 	andhi	r4,r19,128
1000fe58:	20006226 	beq	r4,zero,1000ffe4 <__subdf3+0x4f8>
1000fe5c:	3463c83a 	sub	r17,r6,r17
1000fe60:	194bc83a 	sub	r5,r3,r5
1000fe64:	344d803a 	cmpltu	r6,r6,r17
1000fe68:	29a7c83a 	sub	r19,r5,r6
1000fe6c:	3825883a 	mov	r18,r7
1000fe70:	983f841e 	bne	r19,zero,1000fc84 <__alt_data_end+0xf800fc84>
1000fe74:	8809883a 	mov	r4,r17
1000fe78:	00105b80 	call	100105b8 <__clzsi2>
1000fe7c:	10800804 	addi	r2,r2,32
1000fe80:	10fffe04 	addi	r3,r2,-8
1000fe84:	010007c4 	movi	r4,31
1000fe88:	20ff830e 	bge	r4,r3,1000fc98 <__alt_data_end+0xf800fc98>
1000fe8c:	14fff604 	addi	r19,r2,-40
1000fe90:	8ce6983a 	sll	r19,r17,r19
1000fe94:	0023883a 	mov	r17,zero
1000fe98:	1c3f860e 	bge	r3,r16,1000fcb4 <__alt_data_end+0xf800fcb4>
1000fe9c:	017fe034 	movhi	r5,65408
1000fea0:	297fffc4 	addi	r5,r5,-1
1000fea4:	80e1c83a 	sub	r16,r16,r3
1000fea8:	994a703a 	and	r5,r19,r5
1000feac:	003f3206 	br	1000fb78 <__alt_data_end+0xf800fb78>
1000feb0:	0009883a 	mov	r4,zero
1000feb4:	0005883a 	mov	r2,zero
1000feb8:	003f4706 	br	1000fbd8 <__alt_data_end+0xf800fbd8>
1000febc:	198cb03a 	or	r6,r3,r6
1000fec0:	300cc03a 	cmpne	r6,r6,zero
1000fec4:	0005883a 	mov	r2,zero
1000fec8:	003f6306 	br	1000fc58 <__alt_data_end+0xf800fc58>
1000fecc:	10009d1e 	bne	r2,zero,10010144 <__subdf3+0x658>
1000fed0:	81c00044 	addi	r7,r16,1
1000fed4:	3881ffcc 	andi	r2,r7,2047
1000fed8:	02400044 	movi	r9,1
1000fedc:	4880680e 	bge	r9,r2,10010080 <__subdf3+0x594>
1000fee0:	0081ffc4 	movi	r2,2047
1000fee4:	3880ae26 	beq	r7,r2,100101a0 <__subdf3+0x6b4>
1000fee8:	344d883a 	add	r6,r6,r17
1000feec:	3463803a 	cmpltu	r17,r6,r17
1000fef0:	194b883a 	add	r5,r3,r5
1000fef4:	2c4b883a 	add	r5,r5,r17
1000fef8:	282297fa 	slli	r17,r5,31
1000fefc:	300cd07a 	srli	r6,r6,1
1000ff00:	280ad07a 	srli	r5,r5,1
1000ff04:	3821883a 	mov	r16,r7
1000ff08:	89a2b03a 	or	r17,r17,r6
1000ff0c:	003f1a06 	br	1000fb78 <__alt_data_end+0xf800fb78>
1000ff10:	0101ffc4 	movi	r4,2047
1000ff14:	813f431e 	bne	r16,r4,1000fc24 <__alt_data_end+0xf800fc24>
1000ff18:	003f1706 	br	1000fb78 <__alt_data_end+0xf800fb78>
1000ff1c:	80bff844 	addi	r2,r16,-31
1000ff20:	00c00804 	movi	r3,32
1000ff24:	9884d83a 	srl	r2,r19,r2
1000ff28:	28c05126 	beq	r5,r3,10010070 <__subdf3+0x584>
1000ff2c:	00c00fc4 	movi	r3,63
1000ff30:	1c21c83a 	sub	r16,r3,r16
1000ff34:	9c26983a 	sll	r19,r19,r16
1000ff38:	9c62b03a 	or	r17,r19,r17
1000ff3c:	8822c03a 	cmpne	r17,r17,zero
1000ff40:	88a2b03a 	or	r17,r17,r2
1000ff44:	000b883a 	mov	r5,zero
1000ff48:	0021883a 	mov	r16,zero
1000ff4c:	003fb406 	br	1000fe20 <__alt_data_end+0xf800fe20>
1000ff50:	113ff804 	addi	r4,r2,-32
1000ff54:	01c00804 	movi	r7,32
1000ff58:	1908d83a 	srl	r4,r3,r4
1000ff5c:	11c04626 	beq	r2,r7,10010078 <__subdf3+0x58c>
1000ff60:	01c01004 	movi	r7,64
1000ff64:	3885c83a 	sub	r2,r7,r2
1000ff68:	1884983a 	sll	r2,r3,r2
1000ff6c:	118cb03a 	or	r6,r2,r6
1000ff70:	300cc03a 	cmpne	r6,r6,zero
1000ff74:	310cb03a 	or	r6,r6,r4
1000ff78:	0005883a 	mov	r2,zero
1000ff7c:	003f3606 	br	1000fc58 <__alt_data_end+0xf800fc58>
1000ff80:	80002b26 	beq	r16,zero,10010030 <__subdf3+0x544>
1000ff84:	0101ffc4 	movi	r4,2047
1000ff88:	51006926 	beq	r10,r4,10010130 <__subdf3+0x644>
1000ff8c:	0085c83a 	sub	r2,zero,r2
1000ff90:	29402034 	orhi	r5,r5,128
1000ff94:	01000e04 	movi	r4,56
1000ff98:	20807d16 	blt	r4,r2,10010190 <__subdf3+0x6a4>
1000ff9c:	010007c4 	movi	r4,31
1000ffa0:	2080d916 	blt	r4,r2,10010308 <__subdf3+0x81c>
1000ffa4:	01000804 	movi	r4,32
1000ffa8:	2089c83a 	sub	r4,r4,r2
1000ffac:	2912983a 	sll	r9,r5,r4
1000ffb0:	8890d83a 	srl	r8,r17,r2
1000ffb4:	8908983a 	sll	r4,r17,r4
1000ffb8:	2884d83a 	srl	r2,r5,r2
1000ffbc:	4a22b03a 	or	r17,r9,r8
1000ffc0:	2008c03a 	cmpne	r4,r4,zero
1000ffc4:	8922b03a 	or	r17,r17,r4
1000ffc8:	3463c83a 	sub	r17,r6,r17
1000ffcc:	1885c83a 	sub	r2,r3,r2
1000ffd0:	344d803a 	cmpltu	r6,r6,r17
1000ffd4:	118bc83a 	sub	r5,r2,r6
1000ffd8:	5021883a 	mov	r16,r10
1000ffdc:	3825883a 	mov	r18,r7
1000ffe0:	003f2206 	br	1000fc6c <__alt_data_end+0xf800fc6c>
1000ffe4:	9886b03a 	or	r3,r19,r2
1000ffe8:	18001c1e 	bne	r3,zero,1001005c <__subdf3+0x570>
1000ffec:	0011883a 	mov	r8,zero
1000fff0:	000b883a 	mov	r5,zero
1000fff4:	0023883a 	mov	r17,zero
1000fff8:	0021883a 	mov	r16,zero
1000fffc:	003f3e06 	br	1000fcf8 <__alt_data_end+0xf800fcf8>
10010000:	010007c4 	movi	r4,31
10010004:	20803c16 	blt	r4,r2,100100f8 <__subdf3+0x60c>
10010008:	01000804 	movi	r4,32
1001000c:	2089c83a 	sub	r4,r4,r2
10010010:	1912983a 	sll	r9,r3,r4
10010014:	308ed83a 	srl	r7,r6,r2
10010018:	3108983a 	sll	r4,r6,r4
1001001c:	1884d83a 	srl	r2,r3,r2
10010020:	49ceb03a 	or	r7,r9,r7
10010024:	2008c03a 	cmpne	r4,r4,zero
10010028:	390eb03a 	or	r7,r7,r4
1001002c:	003f4706 	br	1000fd4c <__alt_data_end+0xf800fd4c>
10010030:	2c48b03a 	or	r4,r5,r17
10010034:	20003e26 	beq	r4,zero,10010130 <__subdf3+0x644>
10010038:	0084303a 	nor	r2,zero,r2
1001003c:	10003a1e 	bne	r2,zero,10010128 <__subdf3+0x63c>
10010040:	3463c83a 	sub	r17,r6,r17
10010044:	194bc83a 	sub	r5,r3,r5
10010048:	344d803a 	cmpltu	r6,r6,r17
1001004c:	298bc83a 	sub	r5,r5,r6
10010050:	5021883a 	mov	r16,r10
10010054:	3825883a 	mov	r18,r7
10010058:	003f0406 	br	1000fc6c <__alt_data_end+0xf800fc6c>
1001005c:	1023883a 	mov	r17,r2
10010060:	003f0706 	br	1000fc80 <__alt_data_end+0xf800fc80>
10010064:	0101ffc4 	movi	r4,2047
10010068:	813f331e 	bne	r16,r4,1000fd38 <__alt_data_end+0xf800fd38>
1001006c:	003ec206 	br	1000fb78 <__alt_data_end+0xf800fb78>
10010070:	0027883a 	mov	r19,zero
10010074:	003fb006 	br	1000ff38 <__alt_data_end+0xf800ff38>
10010078:	0005883a 	mov	r2,zero
1001007c:	003fbb06 	br	1000ff6c <__alt_data_end+0xf800ff6c>
10010080:	2c44b03a 	or	r2,r5,r17
10010084:	80008b1e 	bne	r16,zero,100102b4 <__subdf3+0x7c8>
10010088:	1000b526 	beq	r2,zero,10010360 <__subdf3+0x874>
1001008c:	1984b03a 	or	r2,r3,r6
10010090:	103eb926 	beq	r2,zero,1000fb78 <__alt_data_end+0xf800fb78>
10010094:	3449883a 	add	r4,r6,r17
10010098:	2463803a 	cmpltu	r17,r4,r17
1001009c:	194b883a 	add	r5,r3,r5
100100a0:	2c4b883a 	add	r5,r5,r17
100100a4:	2880202c 	andhi	r2,r5,128
100100a8:	2023883a 	mov	r17,r4
100100ac:	103f5c26 	beq	r2,zero,1000fe20 <__alt_data_end+0xf800fe20>
100100b0:	00bfe034 	movhi	r2,65408
100100b4:	10bfffc4 	addi	r2,r2,-1
100100b8:	4821883a 	mov	r16,r9
100100bc:	288a703a 	and	r5,r5,r2
100100c0:	003ead06 	br	1000fb78 <__alt_data_end+0xf800fb78>
100100c4:	2c44b03a 	or	r2,r5,r17
100100c8:	8000291e 	bne	r16,zero,10010170 <__subdf3+0x684>
100100cc:	10004f1e 	bne	r2,zero,1001020c <__subdf3+0x720>
100100d0:	1984b03a 	or	r2,r3,r6
100100d4:	10000426 	beq	r2,zero,100100e8 <__subdf3+0x5fc>
100100d8:	180b883a 	mov	r5,r3
100100dc:	3023883a 	mov	r17,r6
100100e0:	3825883a 	mov	r18,r7
100100e4:	003ea406 	br	1000fb78 <__alt_data_end+0xf800fb78>
100100e8:	0011883a 	mov	r8,zero
100100ec:	000b883a 	mov	r5,zero
100100f0:	0023883a 	mov	r17,zero
100100f4:	003f0006 	br	1000fcf8 <__alt_data_end+0xf800fcf8>
100100f8:	11fff804 	addi	r7,r2,-32
100100fc:	19c8d83a 	srl	r4,r3,r7
10010100:	01c00804 	movi	r7,32
10010104:	11c07e26 	beq	r2,r7,10010300 <__subdf3+0x814>
10010108:	01c01004 	movi	r7,64
1001010c:	3885c83a 	sub	r2,r7,r2
10010110:	1884983a 	sll	r2,r3,r2
10010114:	118cb03a 	or	r6,r2,r6
10010118:	300ec03a 	cmpne	r7,r6,zero
1001011c:	390eb03a 	or	r7,r7,r4
10010120:	0005883a 	mov	r2,zero
10010124:	003f0906 	br	1000fd4c <__alt_data_end+0xf800fd4c>
10010128:	0101ffc4 	movi	r4,2047
1001012c:	513f991e 	bne	r10,r4,1000ff94 <__alt_data_end+0xf800ff94>
10010130:	180b883a 	mov	r5,r3
10010134:	3023883a 	mov	r17,r6
10010138:	5021883a 	mov	r16,r10
1001013c:	3825883a 	mov	r18,r7
10010140:	003e8d06 	br	1000fb78 <__alt_data_end+0xf800fb78>
10010144:	80001a1e 	bne	r16,zero,100101b0 <__subdf3+0x6c4>
10010148:	2c48b03a 	or	r4,r5,r17
1001014c:	20005526 	beq	r4,zero,100102a4 <__subdf3+0x7b8>
10010150:	0084303a 	nor	r2,zero,r2
10010154:	1000511e 	bne	r2,zero,1001029c <__subdf3+0x7b0>
10010158:	89a3883a 	add	r17,r17,r6
1001015c:	194b883a 	add	r5,r3,r5
10010160:	898d803a 	cmpltu	r6,r17,r6
10010164:	298b883a 	add	r5,r5,r6
10010168:	5021883a 	mov	r16,r10
1001016c:	003efc06 	br	1000fd60 <__alt_data_end+0xf800fd60>
10010170:	1000341e 	bne	r2,zero,10010244 <__subdf3+0x758>
10010174:	1984b03a 	or	r2,r3,r6
10010178:	10006f26 	beq	r2,zero,10010338 <__subdf3+0x84c>
1001017c:	180b883a 	mov	r5,r3
10010180:	3023883a 	mov	r17,r6
10010184:	3825883a 	mov	r18,r7
10010188:	0401ffc4 	movi	r16,2047
1001018c:	003e7a06 	br	1000fb78 <__alt_data_end+0xf800fb78>
10010190:	2c62b03a 	or	r17,r5,r17
10010194:	8822c03a 	cmpne	r17,r17,zero
10010198:	0005883a 	mov	r2,zero
1001019c:	003f8a06 	br	1000ffc8 <__alt_data_end+0xf800ffc8>
100101a0:	3821883a 	mov	r16,r7
100101a4:	000b883a 	mov	r5,zero
100101a8:	0023883a 	mov	r17,zero
100101ac:	003ed206 	br	1000fcf8 <__alt_data_end+0xf800fcf8>
100101b0:	0101ffc4 	movi	r4,2047
100101b4:	51003b26 	beq	r10,r4,100102a4 <__subdf3+0x7b8>
100101b8:	0085c83a 	sub	r2,zero,r2
100101bc:	29402034 	orhi	r5,r5,128
100101c0:	01000e04 	movi	r4,56
100101c4:	20806216 	blt	r4,r2,10010350 <__subdf3+0x864>
100101c8:	010007c4 	movi	r4,31
100101cc:	20806b16 	blt	r4,r2,1001037c <__subdf3+0x890>
100101d0:	01000804 	movi	r4,32
100101d4:	2089c83a 	sub	r4,r4,r2
100101d8:	2912983a 	sll	r9,r5,r4
100101dc:	888ed83a 	srl	r7,r17,r2
100101e0:	8908983a 	sll	r4,r17,r4
100101e4:	2884d83a 	srl	r2,r5,r2
100101e8:	49e2b03a 	or	r17,r9,r7
100101ec:	2008c03a 	cmpne	r4,r4,zero
100101f0:	8922b03a 	or	r17,r17,r4
100101f4:	89a3883a 	add	r17,r17,r6
100101f8:	10c5883a 	add	r2,r2,r3
100101fc:	898d803a 	cmpltu	r6,r17,r6
10010200:	118b883a 	add	r5,r2,r6
10010204:	5021883a 	mov	r16,r10
10010208:	003ed506 	br	1000fd60 <__alt_data_end+0xf800fd60>
1001020c:	1984b03a 	or	r2,r3,r6
10010210:	103e5926 	beq	r2,zero,1000fb78 <__alt_data_end+0xf800fb78>
10010214:	8989c83a 	sub	r4,r17,r6
10010218:	8911803a 	cmpltu	r8,r17,r4
1001021c:	28c5c83a 	sub	r2,r5,r3
10010220:	1205c83a 	sub	r2,r2,r8
10010224:	1200202c 	andhi	r8,r2,128
10010228:	403ef926 	beq	r8,zero,1000fe10 <__alt_data_end+0xf800fe10>
1001022c:	3463c83a 	sub	r17,r6,r17
10010230:	194bc83a 	sub	r5,r3,r5
10010234:	344d803a 	cmpltu	r6,r6,r17
10010238:	298bc83a 	sub	r5,r5,r6
1001023c:	3825883a 	mov	r18,r7
10010240:	003e4d06 	br	1000fb78 <__alt_data_end+0xf800fb78>
10010244:	1984b03a 	or	r2,r3,r6
10010248:	10002b26 	beq	r2,zero,100102f8 <__subdf3+0x80c>
1001024c:	2808d0fa 	srli	r4,r5,3
10010250:	8822d0fa 	srli	r17,r17,3
10010254:	280a977a 	slli	r5,r5,29
10010258:	2080022c 	andhi	r2,r4,8
1001025c:	2c62b03a 	or	r17,r5,r17
10010260:	10000826 	beq	r2,zero,10010284 <__subdf3+0x798>
10010264:	1810d0fa 	srli	r8,r3,3
10010268:	4080022c 	andhi	r2,r8,8
1001026c:	1000051e 	bne	r2,zero,10010284 <__subdf3+0x798>
10010270:	300cd0fa 	srli	r6,r6,3
10010274:	1804977a 	slli	r2,r3,29
10010278:	4009883a 	mov	r4,r8
1001027c:	3825883a 	mov	r18,r7
10010280:	11a2b03a 	or	r17,r2,r6
10010284:	880ad77a 	srli	r5,r17,29
10010288:	200890fa 	slli	r4,r4,3
1001028c:	882290fa 	slli	r17,r17,3
10010290:	0401ffc4 	movi	r16,2047
10010294:	290ab03a 	or	r5,r5,r4
10010298:	003e3706 	br	1000fb78 <__alt_data_end+0xf800fb78>
1001029c:	0101ffc4 	movi	r4,2047
100102a0:	513fc71e 	bne	r10,r4,100101c0 <__alt_data_end+0xf80101c0>
100102a4:	180b883a 	mov	r5,r3
100102a8:	3023883a 	mov	r17,r6
100102ac:	5021883a 	mov	r16,r10
100102b0:	003e3106 	br	1000fb78 <__alt_data_end+0xf800fb78>
100102b4:	10002d26 	beq	r2,zero,1001036c <__subdf3+0x880>
100102b8:	1984b03a 	or	r2,r3,r6
100102bc:	10000e26 	beq	r2,zero,100102f8 <__subdf3+0x80c>
100102c0:	2808d0fa 	srli	r4,r5,3
100102c4:	8822d0fa 	srli	r17,r17,3
100102c8:	280a977a 	slli	r5,r5,29
100102cc:	2080022c 	andhi	r2,r4,8
100102d0:	2c62b03a 	or	r17,r5,r17
100102d4:	103feb26 	beq	r2,zero,10010284 <__alt_data_end+0xf8010284>
100102d8:	180ed0fa 	srli	r7,r3,3
100102dc:	3880022c 	andhi	r2,r7,8
100102e0:	103fe81e 	bne	r2,zero,10010284 <__alt_data_end+0xf8010284>
100102e4:	300cd0fa 	srli	r6,r6,3
100102e8:	1804977a 	slli	r2,r3,29
100102ec:	3809883a 	mov	r4,r7
100102f0:	11a2b03a 	or	r17,r2,r6
100102f4:	003fe306 	br	10010284 <__alt_data_end+0xf8010284>
100102f8:	0401ffc4 	movi	r16,2047
100102fc:	003e1e06 	br	1000fb78 <__alt_data_end+0xf800fb78>
10010300:	0005883a 	mov	r2,zero
10010304:	003f8306 	br	10010114 <__alt_data_end+0xf8010114>
10010308:	113ff804 	addi	r4,r2,-32
1001030c:	02000804 	movi	r8,32
10010310:	2908d83a 	srl	r4,r5,r4
10010314:	12002526 	beq	r2,r8,100103ac <__subdf3+0x8c0>
10010318:	02001004 	movi	r8,64
1001031c:	4085c83a 	sub	r2,r8,r2
10010320:	288a983a 	sll	r5,r5,r2
10010324:	2c62b03a 	or	r17,r5,r17
10010328:	8822c03a 	cmpne	r17,r17,zero
1001032c:	8922b03a 	or	r17,r17,r4
10010330:	0005883a 	mov	r2,zero
10010334:	003f2406 	br	1000ffc8 <__alt_data_end+0xf800ffc8>
10010338:	01402034 	movhi	r5,128
1001033c:	0011883a 	mov	r8,zero
10010340:	297fffc4 	addi	r5,r5,-1
10010344:	047ffe04 	movi	r17,-8
10010348:	0401ffc4 	movi	r16,2047
1001034c:	003e6a06 	br	1000fcf8 <__alt_data_end+0xf800fcf8>
10010350:	2c62b03a 	or	r17,r5,r17
10010354:	8822c03a 	cmpne	r17,r17,zero
10010358:	0005883a 	mov	r2,zero
1001035c:	003fa506 	br	100101f4 <__alt_data_end+0xf80101f4>
10010360:	180b883a 	mov	r5,r3
10010364:	3023883a 	mov	r17,r6
10010368:	003e0306 	br	1000fb78 <__alt_data_end+0xf800fb78>
1001036c:	180b883a 	mov	r5,r3
10010370:	3023883a 	mov	r17,r6
10010374:	0401ffc4 	movi	r16,2047
10010378:	003dff06 	br	1000fb78 <__alt_data_end+0xf800fb78>
1001037c:	113ff804 	addi	r4,r2,-32
10010380:	01c00804 	movi	r7,32
10010384:	2908d83a 	srl	r4,r5,r4
10010388:	11c00a26 	beq	r2,r7,100103b4 <__subdf3+0x8c8>
1001038c:	01c01004 	movi	r7,64
10010390:	3885c83a 	sub	r2,r7,r2
10010394:	288a983a 	sll	r5,r5,r2
10010398:	2c62b03a 	or	r17,r5,r17
1001039c:	8822c03a 	cmpne	r17,r17,zero
100103a0:	8922b03a 	or	r17,r17,r4
100103a4:	0005883a 	mov	r2,zero
100103a8:	003f9206 	br	100101f4 <__alt_data_end+0xf80101f4>
100103ac:	000b883a 	mov	r5,zero
100103b0:	003fdc06 	br	10010324 <__alt_data_end+0xf8010324>
100103b4:	000b883a 	mov	r5,zero
100103b8:	003ff706 	br	10010398 <__alt_data_end+0xf8010398>

100103bc <__fixdfsi>:
100103bc:	2806d53a 	srli	r3,r5,20
100103c0:	00800434 	movhi	r2,16
100103c4:	10bfffc4 	addi	r2,r2,-1
100103c8:	18c1ffcc 	andi	r3,r3,2047
100103cc:	0180ff84 	movi	r6,1022
100103d0:	2884703a 	and	r2,r5,r2
100103d4:	280ad7fa 	srli	r5,r5,31
100103d8:	30c0130e 	bge	r6,r3,10010428 <__fixdfsi+0x6c>
100103dc:	01810744 	movi	r6,1053
100103e0:	30c00d16 	blt	r6,r3,10010418 <__fixdfsi+0x5c>
100103e4:	01810cc4 	movi	r6,1075
100103e8:	30cdc83a 	sub	r6,r6,r3
100103ec:	01c007c4 	movi	r7,31
100103f0:	10800434 	orhi	r2,r2,16
100103f4:	39800e0e 	bge	r7,r6,10010430 <__fixdfsi+0x74>
100103f8:	010104c4 	movi	r4,1043
100103fc:	20c7c83a 	sub	r3,r4,r3
10010400:	10c6d83a 	srl	r3,r2,r3
10010404:	29403fcc 	andi	r5,r5,255
10010408:	0145c83a 	sub	r2,zero,r5
1001040c:	1884f03a 	xor	r2,r3,r2
10010410:	1145883a 	add	r2,r2,r5
10010414:	f800283a 	ret
10010418:	00a00034 	movhi	r2,32768
1001041c:	10bfffc4 	addi	r2,r2,-1
10010420:	2885883a 	add	r2,r5,r2
10010424:	f800283a 	ret
10010428:	0005883a 	mov	r2,zero
1001042c:	f800283a 	ret
10010430:	18fefb44 	addi	r3,r3,-1043
10010434:	2188d83a 	srl	r4,r4,r6
10010438:	10c6983a 	sll	r3,r2,r3
1001043c:	20c6b03a 	or	r3,r4,r3
10010440:	003ff006 	br	10010404 <__alt_data_end+0xf8010404>

10010444 <__floatsidf>:
10010444:	defffd04 	addi	sp,sp,-12
10010448:	dc400115 	stw	r17,4(sp)
1001044c:	dfc00215 	stw	ra,8(sp)
10010450:	dc000015 	stw	r16,0(sp)
10010454:	2023883a 	mov	r17,r4
10010458:	20001426 	beq	r4,zero,100104ac <__floatsidf+0x68>
1001045c:	2020d7fa 	srli	r16,r4,31
10010460:	80000126 	beq	r16,zero,10010468 <__floatsidf+0x24>
10010464:	0123c83a 	sub	r17,zero,r4
10010468:	8809883a 	mov	r4,r17
1001046c:	00105b80 	call	100105b8 <__clzsi2>
10010470:	01410784 	movi	r5,1054
10010474:	00c00284 	movi	r3,10
10010478:	288bc83a 	sub	r5,r5,r2
1001047c:	18801c16 	blt	r3,r2,100104f0 <__floatsidf+0xac>
10010480:	00c002c4 	movi	r3,11
10010484:	1887c83a 	sub	r3,r3,r2
10010488:	88c8d83a 	srl	r4,r17,r3
1001048c:	00c00434 	movhi	r3,16
10010490:	18ffffc4 	addi	r3,r3,-1
10010494:	10800544 	addi	r2,r2,21
10010498:	20c8703a 	and	r4,r4,r3
1001049c:	8884983a 	sll	r2,r17,r2
100104a0:	28c1ffcc 	andi	r3,r5,2047
100104a4:	800d883a 	mov	r6,r16
100104a8:	00000406 	br	100104bc <__floatsidf+0x78>
100104ac:	000d883a 	mov	r6,zero
100104b0:	0007883a 	mov	r3,zero
100104b4:	0009883a 	mov	r4,zero
100104b8:	0005883a 	mov	r2,zero
100104bc:	180a953a 	slli	r5,r3,20
100104c0:	31803fcc 	andi	r6,r6,255
100104c4:	00c00434 	movhi	r3,16
100104c8:	300c97fa 	slli	r6,r6,31
100104cc:	18ffffc4 	addi	r3,r3,-1
100104d0:	20c6703a 	and	r3,r4,r3
100104d4:	1946b03a 	or	r3,r3,r5
100104d8:	1986b03a 	or	r3,r3,r6
100104dc:	dfc00217 	ldw	ra,8(sp)
100104e0:	dc400117 	ldw	r17,4(sp)
100104e4:	dc000017 	ldw	r16,0(sp)
100104e8:	dec00304 	addi	sp,sp,12
100104ec:	f800283a 	ret
100104f0:	10fffd44 	addi	r3,r2,-11
100104f4:	88c8983a 	sll	r4,r17,r3
100104f8:	00800434 	movhi	r2,16
100104fc:	10bfffc4 	addi	r2,r2,-1
10010500:	2088703a 	and	r4,r4,r2
10010504:	28c1ffcc 	andi	r3,r5,2047
10010508:	800d883a 	mov	r6,r16
1001050c:	0005883a 	mov	r2,zero
10010510:	003fea06 	br	100104bc <__alt_data_end+0xf80104bc>

10010514 <__floatunsidf>:
10010514:	defffe04 	addi	sp,sp,-8
10010518:	dc000015 	stw	r16,0(sp)
1001051c:	dfc00115 	stw	ra,4(sp)
10010520:	2021883a 	mov	r16,r4
10010524:	20001026 	beq	r4,zero,10010568 <__floatunsidf+0x54>
10010528:	00105b80 	call	100105b8 <__clzsi2>
1001052c:	01410784 	movi	r5,1054
10010530:	100d883a 	mov	r6,r2
10010534:	288bc83a 	sub	r5,r5,r2
10010538:	00800284 	movi	r2,10
1001053c:	11801616 	blt	r2,r6,10010598 <__floatunsidf+0x84>
10010540:	008002c4 	movi	r2,11
10010544:	1185c83a 	sub	r2,r2,r6
10010548:	8084d83a 	srl	r2,r16,r2
1001054c:	00c00434 	movhi	r3,16
10010550:	31c00544 	addi	r7,r6,21
10010554:	18ffffc4 	addi	r3,r3,-1
10010558:	81e0983a 	sll	r16,r16,r7
1001055c:	10cc703a 	and	r6,r2,r3
10010560:	2941ffcc 	andi	r5,r5,2047
10010564:	00000206 	br	10010570 <__floatunsidf+0x5c>
10010568:	000b883a 	mov	r5,zero
1001056c:	000d883a 	mov	r6,zero
10010570:	280a953a 	slli	r5,r5,20
10010574:	00c00434 	movhi	r3,16
10010578:	18ffffc4 	addi	r3,r3,-1
1001057c:	30c6703a 	and	r3,r6,r3
10010580:	8005883a 	mov	r2,r16
10010584:	1946b03a 	or	r3,r3,r5
10010588:	dfc00117 	ldw	ra,4(sp)
1001058c:	dc000017 	ldw	r16,0(sp)
10010590:	dec00204 	addi	sp,sp,8
10010594:	f800283a 	ret
10010598:	31bffd44 	addi	r6,r6,-11
1001059c:	818c983a 	sll	r6,r16,r6
100105a0:	00800434 	movhi	r2,16
100105a4:	10bfffc4 	addi	r2,r2,-1
100105a8:	2941ffcc 	andi	r5,r5,2047
100105ac:	0021883a 	mov	r16,zero
100105b0:	308c703a 	and	r6,r6,r2
100105b4:	003fee06 	br	10010570 <__alt_data_end+0xf8010570>

100105b8 <__clzsi2>:
100105b8:	00bfffd4 	movui	r2,65535
100105bc:	11000b36 	bltu	r2,r4,100105ec <__clzsi2+0x34>
100105c0:	00803fc4 	movi	r2,255
100105c4:	1100122e 	bgeu	r2,r4,10010610 <__clzsi2+0x58>
100105c8:	00c00204 	movi	r3,8
100105cc:	01400604 	movi	r5,24
100105d0:	20c8d83a 	srl	r4,r4,r3
100105d4:	00840074 	movhi	r2,4097
100105d8:	10953404 	addi	r2,r2,21712
100105dc:	1109883a 	add	r4,r2,r4
100105e0:	20800003 	ldbu	r2,0(r4)
100105e4:	2885c83a 	sub	r2,r5,r2
100105e8:	f800283a 	ret
100105ec:	00804034 	movhi	r2,256
100105f0:	10bfffc4 	addi	r2,r2,-1
100105f4:	11000336 	bltu	r2,r4,10010604 <__clzsi2+0x4c>
100105f8:	00c00404 	movi	r3,16
100105fc:	180b883a 	mov	r5,r3
10010600:	003ff306 	br	100105d0 <__alt_data_end+0xf80105d0>
10010604:	00c00604 	movi	r3,24
10010608:	01400204 	movi	r5,8
1001060c:	003ff006 	br	100105d0 <__alt_data_end+0xf80105d0>
10010610:	0007883a 	mov	r3,zero
10010614:	01400804 	movi	r5,32
10010618:	003fed06 	br	100105d0 <__alt_data_end+0xf80105d0>

1001061c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001061c:	defffe04 	addi	sp,sp,-8
10010620:	dfc00115 	stw	ra,4(sp)
10010624:	df000015 	stw	fp,0(sp)
10010628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001062c:	00840074 	movhi	r2,4097
10010630:	109c3b04 	addi	r2,r2,28908
10010634:	10800017 	ldw	r2,0(r2)
10010638:	10000526 	beq	r2,zero,10010650 <alt_get_errno+0x34>
1001063c:	00840074 	movhi	r2,4097
10010640:	109c3b04 	addi	r2,r2,28908
10010644:	10800017 	ldw	r2,0(r2)
10010648:	103ee83a 	callr	r2
1001064c:	00000206 	br	10010658 <alt_get_errno+0x3c>
10010650:	008400b4 	movhi	r2,4098
10010654:	10a30e04 	addi	r2,r2,-29640
}
10010658:	e037883a 	mov	sp,fp
1001065c:	dfc00117 	ldw	ra,4(sp)
10010660:	df000017 	ldw	fp,0(sp)
10010664:	dec00204 	addi	sp,sp,8
10010668:	f800283a 	ret

1001066c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1001066c:	defffb04 	addi	sp,sp,-20
10010670:	dfc00415 	stw	ra,16(sp)
10010674:	df000315 	stw	fp,12(sp)
10010678:	df000304 	addi	fp,sp,12
1001067c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10010680:	e0bfff17 	ldw	r2,-4(fp)
10010684:	10000816 	blt	r2,zero,100106a8 <close+0x3c>
10010688:	e13fff17 	ldw	r4,-4(fp)
1001068c:	01400304 	movi	r5,12
10010690:	0003c5c0 	call	10003c5c <__mulsi3>
10010694:	1007883a 	mov	r3,r2
10010698:	00840074 	movhi	r2,4097
1001069c:	1097b404 	addi	r2,r2,24272
100106a0:	1885883a 	add	r2,r3,r2
100106a4:	00000106 	br	100106ac <close+0x40>
100106a8:	0005883a 	mov	r2,zero
100106ac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100106b0:	e0bffd17 	ldw	r2,-12(fp)
100106b4:	10001926 	beq	r2,zero,1001071c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100106b8:	e0bffd17 	ldw	r2,-12(fp)
100106bc:	10800017 	ldw	r2,0(r2)
100106c0:	10800417 	ldw	r2,16(r2)
100106c4:	10000626 	beq	r2,zero,100106e0 <close+0x74>
100106c8:	e0bffd17 	ldw	r2,-12(fp)
100106cc:	10800017 	ldw	r2,0(r2)
100106d0:	10800417 	ldw	r2,16(r2)
100106d4:	e13ffd17 	ldw	r4,-12(fp)
100106d8:	103ee83a 	callr	r2
100106dc:	00000106 	br	100106e4 <close+0x78>
100106e0:	0005883a 	mov	r2,zero
100106e4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100106e8:	e13fff17 	ldw	r4,-4(fp)
100106ec:	0010d900 	call	10010d90 <alt_release_fd>
    if (rval < 0)
100106f0:	e0bffe17 	ldw	r2,-8(fp)
100106f4:	1000070e 	bge	r2,zero,10010714 <close+0xa8>
    {
      ALT_ERRNO = -rval;
100106f8:	001061c0 	call	1001061c <alt_get_errno>
100106fc:	1007883a 	mov	r3,r2
10010700:	e0bffe17 	ldw	r2,-8(fp)
10010704:	0085c83a 	sub	r2,zero,r2
10010708:	18800015 	stw	r2,0(r3)
      return -1;
1001070c:	00bfffc4 	movi	r2,-1
10010710:	00000706 	br	10010730 <close+0xc4>
    }
    return 0;
10010714:	0005883a 	mov	r2,zero
10010718:	00000506 	br	10010730 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001071c:	001061c0 	call	1001061c <alt_get_errno>
10010720:	1007883a 	mov	r3,r2
10010724:	00801444 	movi	r2,81
10010728:	18800015 	stw	r2,0(r3)
    return -1;
1001072c:	00bfffc4 	movi	r2,-1
  }
}
10010730:	e037883a 	mov	sp,fp
10010734:	dfc00117 	ldw	ra,4(sp)
10010738:	df000017 	ldw	fp,0(sp)
1001073c:	dec00204 	addi	sp,sp,8
10010740:	f800283a 	ret

10010744 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10010744:	defffc04 	addi	sp,sp,-16
10010748:	df000315 	stw	fp,12(sp)
1001074c:	df000304 	addi	fp,sp,12
10010750:	e13ffd15 	stw	r4,-12(fp)
10010754:	e17ffe15 	stw	r5,-8(fp)
10010758:	e1bfff15 	stw	r6,-4(fp)
  return len;
1001075c:	e0bfff17 	ldw	r2,-4(fp)
}
10010760:	e037883a 	mov	sp,fp
10010764:	df000017 	ldw	fp,0(sp)
10010768:	dec00104 	addi	sp,sp,4
1001076c:	f800283a 	ret

10010770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010770:	defffe04 	addi	sp,sp,-8
10010774:	dfc00115 	stw	ra,4(sp)
10010778:	df000015 	stw	fp,0(sp)
1001077c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010780:	00840074 	movhi	r2,4097
10010784:	109c3b04 	addi	r2,r2,28908
10010788:	10800017 	ldw	r2,0(r2)
1001078c:	10000526 	beq	r2,zero,100107a4 <alt_get_errno+0x34>
10010790:	00840074 	movhi	r2,4097
10010794:	109c3b04 	addi	r2,r2,28908
10010798:	10800017 	ldw	r2,0(r2)
1001079c:	103ee83a 	callr	r2
100107a0:	00000206 	br	100107ac <alt_get_errno+0x3c>
100107a4:	008400b4 	movhi	r2,4098
100107a8:	10a30e04 	addi	r2,r2,-29640
}
100107ac:	e037883a 	mov	sp,fp
100107b0:	dfc00117 	ldw	ra,4(sp)
100107b4:	df000017 	ldw	fp,0(sp)
100107b8:	dec00204 	addi	sp,sp,8
100107bc:	f800283a 	ret

100107c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100107c0:	defffb04 	addi	sp,sp,-20
100107c4:	dfc00415 	stw	ra,16(sp)
100107c8:	df000315 	stw	fp,12(sp)
100107cc:	df000304 	addi	fp,sp,12
100107d0:	e13ffe15 	stw	r4,-8(fp)
100107d4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100107d8:	e0bffe17 	ldw	r2,-8(fp)
100107dc:	10000816 	blt	r2,zero,10010800 <fstat+0x40>
100107e0:	e13ffe17 	ldw	r4,-8(fp)
100107e4:	01400304 	movi	r5,12
100107e8:	0003c5c0 	call	10003c5c <__mulsi3>
100107ec:	1007883a 	mov	r3,r2
100107f0:	00840074 	movhi	r2,4097
100107f4:	1097b404 	addi	r2,r2,24272
100107f8:	1885883a 	add	r2,r3,r2
100107fc:	00000106 	br	10010804 <fstat+0x44>
10010800:	0005883a 	mov	r2,zero
10010804:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10010808:	e0bffd17 	ldw	r2,-12(fp)
1001080c:	10001026 	beq	r2,zero,10010850 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10010810:	e0bffd17 	ldw	r2,-12(fp)
10010814:	10800017 	ldw	r2,0(r2)
10010818:	10800817 	ldw	r2,32(r2)
1001081c:	10000726 	beq	r2,zero,1001083c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10010820:	e0bffd17 	ldw	r2,-12(fp)
10010824:	10800017 	ldw	r2,0(r2)
10010828:	10800817 	ldw	r2,32(r2)
1001082c:	e13ffd17 	ldw	r4,-12(fp)
10010830:	e17fff17 	ldw	r5,-4(fp)
10010834:	103ee83a 	callr	r2
10010838:	00000a06 	br	10010864 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1001083c:	e0bfff17 	ldw	r2,-4(fp)
10010840:	00c80004 	movi	r3,8192
10010844:	10c00115 	stw	r3,4(r2)
      return 0;
10010848:	0005883a 	mov	r2,zero
1001084c:	00000506 	br	10010864 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10010850:	00107700 	call	10010770 <alt_get_errno>
10010854:	1007883a 	mov	r3,r2
10010858:	00801444 	movi	r2,81
1001085c:	18800015 	stw	r2,0(r3)
    return -1;
10010860:	00bfffc4 	movi	r2,-1
  }
}
10010864:	e037883a 	mov	sp,fp
10010868:	dfc00117 	ldw	ra,4(sp)
1001086c:	df000017 	ldw	fp,0(sp)
10010870:	dec00204 	addi	sp,sp,8
10010874:	f800283a 	ret

10010878 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010878:	defffe04 	addi	sp,sp,-8
1001087c:	dfc00115 	stw	ra,4(sp)
10010880:	df000015 	stw	fp,0(sp)
10010884:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010888:	00840074 	movhi	r2,4097
1001088c:	109c3b04 	addi	r2,r2,28908
10010890:	10800017 	ldw	r2,0(r2)
10010894:	10000526 	beq	r2,zero,100108ac <alt_get_errno+0x34>
10010898:	00840074 	movhi	r2,4097
1001089c:	109c3b04 	addi	r2,r2,28908
100108a0:	10800017 	ldw	r2,0(r2)
100108a4:	103ee83a 	callr	r2
100108a8:	00000206 	br	100108b4 <alt_get_errno+0x3c>
100108ac:	008400b4 	movhi	r2,4098
100108b0:	10a30e04 	addi	r2,r2,-29640
}
100108b4:	e037883a 	mov	sp,fp
100108b8:	dfc00117 	ldw	ra,4(sp)
100108bc:	df000017 	ldw	fp,0(sp)
100108c0:	dec00204 	addi	sp,sp,8
100108c4:	f800283a 	ret

100108c8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100108c8:	deffed04 	addi	sp,sp,-76
100108cc:	dfc01215 	stw	ra,72(sp)
100108d0:	df001115 	stw	fp,68(sp)
100108d4:	df001104 	addi	fp,sp,68
100108d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100108dc:	e0bfff17 	ldw	r2,-4(fp)
100108e0:	10000816 	blt	r2,zero,10010904 <isatty+0x3c>
100108e4:	e13fff17 	ldw	r4,-4(fp)
100108e8:	01400304 	movi	r5,12
100108ec:	0003c5c0 	call	10003c5c <__mulsi3>
100108f0:	1007883a 	mov	r3,r2
100108f4:	00840074 	movhi	r2,4097
100108f8:	1097b404 	addi	r2,r2,24272
100108fc:	1885883a 	add	r2,r3,r2
10010900:	00000106 	br	10010908 <isatty+0x40>
10010904:	0005883a 	mov	r2,zero
10010908:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1001090c:	e0bfef17 	ldw	r2,-68(fp)
10010910:	10000e26 	beq	r2,zero,1001094c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10010914:	e0bfef17 	ldw	r2,-68(fp)
10010918:	10800017 	ldw	r2,0(r2)
1001091c:	10800817 	ldw	r2,32(r2)
10010920:	1000021e 	bne	r2,zero,1001092c <isatty+0x64>
    {
      return 1;
10010924:	00800044 	movi	r2,1
10010928:	00000d06 	br	10010960 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1001092c:	e0bff004 	addi	r2,fp,-64
10010930:	e13fff17 	ldw	r4,-4(fp)
10010934:	100b883a 	mov	r5,r2
10010938:	00107c00 	call	100107c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1001093c:	e0bff117 	ldw	r2,-60(fp)
10010940:	10880020 	cmpeqi	r2,r2,8192
10010944:	10803fcc 	andi	r2,r2,255
10010948:	00000506 	br	10010960 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001094c:	00108780 	call	10010878 <alt_get_errno>
10010950:	1007883a 	mov	r3,r2
10010954:	00801444 	movi	r2,81
10010958:	18800015 	stw	r2,0(r3)
    return 0;
1001095c:	0005883a 	mov	r2,zero
  }
}
10010960:	e037883a 	mov	sp,fp
10010964:	dfc00117 	ldw	ra,4(sp)
10010968:	df000017 	ldw	fp,0(sp)
1001096c:	dec00204 	addi	sp,sp,8
10010970:	f800283a 	ret

10010974 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10010974:	defffc04 	addi	sp,sp,-16
10010978:	df000315 	stw	fp,12(sp)
1001097c:	df000304 	addi	fp,sp,12
10010980:	e13ffd15 	stw	r4,-12(fp)
10010984:	e17ffe15 	stw	r5,-8(fp)
10010988:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1001098c:	e0fffe17 	ldw	r3,-8(fp)
10010990:	e0bffd17 	ldw	r2,-12(fp)
10010994:	18800c26 	beq	r3,r2,100109c8 <alt_load_section+0x54>
  {
    while( to != end )
10010998:	00000806 	br	100109bc <alt_load_section+0x48>
    {
      *to++ = *from++;
1001099c:	e0bffe17 	ldw	r2,-8(fp)
100109a0:	10c00104 	addi	r3,r2,4
100109a4:	e0fffe15 	stw	r3,-8(fp)
100109a8:	e0fffd17 	ldw	r3,-12(fp)
100109ac:	19000104 	addi	r4,r3,4
100109b0:	e13ffd15 	stw	r4,-12(fp)
100109b4:	18c00017 	ldw	r3,0(r3)
100109b8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
100109bc:	e0fffe17 	ldw	r3,-8(fp)
100109c0:	e0bfff17 	ldw	r2,-4(fp)
100109c4:	18bff51e 	bne	r3,r2,1001099c <__alt_data_end+0xf801099c>
    {
      *to++ = *from++;
    }
  }
}
100109c8:	e037883a 	mov	sp,fp
100109cc:	df000017 	ldw	fp,0(sp)
100109d0:	dec00104 	addi	sp,sp,4
100109d4:	f800283a 	ret

100109d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
100109d8:	defffe04 	addi	sp,sp,-8
100109dc:	dfc00115 	stw	ra,4(sp)
100109e0:	df000015 	stw	fp,0(sp)
100109e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
100109e8:	01040074 	movhi	r4,4097
100109ec:	211c4004 	addi	r4,r4,28928
100109f0:	01440074 	movhi	r5,4097
100109f4:	29558104 	addi	r5,r5,22020
100109f8:	01840074 	movhi	r6,4097
100109fc:	319c4004 	addi	r6,r6,28928
10010a00:	00109740 	call	10010974 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10010a04:	01040034 	movhi	r4,4096
10010a08:	21000804 	addi	r4,r4,32
10010a0c:	01440034 	movhi	r5,4096
10010a10:	29400804 	addi	r5,r5,32
10010a14:	01840034 	movhi	r6,4096
10010a18:	31806f04 	addi	r6,r6,444
10010a1c:	00109740 	call	10010974 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10010a20:	01040074 	movhi	r4,4097
10010a24:	210b9804 	addi	r4,r4,11872
10010a28:	01440074 	movhi	r5,4097
10010a2c:	294b9804 	addi	r5,r5,11872
10010a30:	01840074 	movhi	r6,4097
10010a34:	31958104 	addi	r6,r6,22020
10010a38:	00109740 	call	10010974 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10010a3c:	0011dd80 	call	10011dd8 <alt_dcache_flush_all>
  alt_icache_flush_all();
10010a40:	0011fa00 	call	10011fa0 <alt_icache_flush_all>
}
10010a44:	e037883a 	mov	sp,fp
10010a48:	dfc00117 	ldw	ra,4(sp)
10010a4c:	df000017 	ldw	fp,0(sp)
10010a50:	dec00204 	addi	sp,sp,8
10010a54:	f800283a 	ret

10010a58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010a58:	defffe04 	addi	sp,sp,-8
10010a5c:	dfc00115 	stw	ra,4(sp)
10010a60:	df000015 	stw	fp,0(sp)
10010a64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010a68:	00840074 	movhi	r2,4097
10010a6c:	109c3b04 	addi	r2,r2,28908
10010a70:	10800017 	ldw	r2,0(r2)
10010a74:	10000526 	beq	r2,zero,10010a8c <alt_get_errno+0x34>
10010a78:	00840074 	movhi	r2,4097
10010a7c:	109c3b04 	addi	r2,r2,28908
10010a80:	10800017 	ldw	r2,0(r2)
10010a84:	103ee83a 	callr	r2
10010a88:	00000206 	br	10010a94 <alt_get_errno+0x3c>
10010a8c:	008400b4 	movhi	r2,4098
10010a90:	10a30e04 	addi	r2,r2,-29640
}
10010a94:	e037883a 	mov	sp,fp
10010a98:	dfc00117 	ldw	ra,4(sp)
10010a9c:	df000017 	ldw	fp,0(sp)
10010aa0:	dec00204 	addi	sp,sp,8
10010aa4:	f800283a 	ret

10010aa8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10010aa8:	defff904 	addi	sp,sp,-28
10010aac:	dfc00615 	stw	ra,24(sp)
10010ab0:	df000515 	stw	fp,20(sp)
10010ab4:	df000504 	addi	fp,sp,20
10010ab8:	e13ffd15 	stw	r4,-12(fp)
10010abc:	e17ffe15 	stw	r5,-8(fp)
10010ac0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10010ac4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010ac8:	e0bffd17 	ldw	r2,-12(fp)
10010acc:	10000816 	blt	r2,zero,10010af0 <lseek+0x48>
10010ad0:	e13ffd17 	ldw	r4,-12(fp)
10010ad4:	01400304 	movi	r5,12
10010ad8:	0003c5c0 	call	10003c5c <__mulsi3>
10010adc:	1007883a 	mov	r3,r2
10010ae0:	00840074 	movhi	r2,4097
10010ae4:	1097b404 	addi	r2,r2,24272
10010ae8:	1885883a 	add	r2,r3,r2
10010aec:	00000106 	br	10010af4 <lseek+0x4c>
10010af0:	0005883a 	mov	r2,zero
10010af4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10010af8:	e0bffc17 	ldw	r2,-16(fp)
10010afc:	10001026 	beq	r2,zero,10010b40 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10010b00:	e0bffc17 	ldw	r2,-16(fp)
10010b04:	10800017 	ldw	r2,0(r2)
10010b08:	10800717 	ldw	r2,28(r2)
10010b0c:	10000926 	beq	r2,zero,10010b34 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10010b10:	e0bffc17 	ldw	r2,-16(fp)
10010b14:	10800017 	ldw	r2,0(r2)
10010b18:	10800717 	ldw	r2,28(r2)
10010b1c:	e13ffc17 	ldw	r4,-16(fp)
10010b20:	e17ffe17 	ldw	r5,-8(fp)
10010b24:	e1bfff17 	ldw	r6,-4(fp)
10010b28:	103ee83a 	callr	r2
10010b2c:	e0bffb15 	stw	r2,-20(fp)
10010b30:	00000506 	br	10010b48 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10010b34:	00bfde84 	movi	r2,-134
10010b38:	e0bffb15 	stw	r2,-20(fp)
10010b3c:	00000206 	br	10010b48 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10010b40:	00bfebc4 	movi	r2,-81
10010b44:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10010b48:	e0bffb17 	ldw	r2,-20(fp)
10010b4c:	1000070e 	bge	r2,zero,10010b6c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10010b50:	0010a580 	call	10010a58 <alt_get_errno>
10010b54:	1007883a 	mov	r3,r2
10010b58:	e0bffb17 	ldw	r2,-20(fp)
10010b5c:	0085c83a 	sub	r2,zero,r2
10010b60:	18800015 	stw	r2,0(r3)
    rc = -1;
10010b64:	00bfffc4 	movi	r2,-1
10010b68:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10010b6c:	e0bffb17 	ldw	r2,-20(fp)
}
10010b70:	e037883a 	mov	sp,fp
10010b74:	dfc00117 	ldw	ra,4(sp)
10010b78:	df000017 	ldw	fp,0(sp)
10010b7c:	dec00204 	addi	sp,sp,8
10010b80:	f800283a 	ret

10010b84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10010b84:	defffd04 	addi	sp,sp,-12
10010b88:	dfc00215 	stw	ra,8(sp)
10010b8c:	df000115 	stw	fp,4(sp)
10010b90:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10010b94:	0009883a 	mov	r4,zero
10010b98:	00110780 	call	10011078 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10010b9c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10010ba0:	00110ac0 	call	100110ac <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10010ba4:	01040074 	movhi	r4,4097
10010ba8:	21157704 	addi	r4,r4,21980
10010bac:	01440074 	movhi	r5,4097
10010bb0:	29557704 	addi	r5,r5,21980
10010bb4:	01840074 	movhi	r6,4097
10010bb8:	31957704 	addi	r6,r6,21980
10010bbc:	001236c0 	call	1001236c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10010bc0:	0011ee80 	call	10011ee8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10010bc4:	01040074 	movhi	r4,4097
10010bc8:	2107d104 	addi	r4,r4,8004
10010bcc:	0012abc0 	call	10012abc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10010bd0:	d126e317 	ldw	r4,-25716(gp)
10010bd4:	d0e6e417 	ldw	r3,-25712(gp)
10010bd8:	d0a6e517 	ldw	r2,-25708(gp)
10010bdc:	180b883a 	mov	r5,r3
10010be0:	100d883a 	mov	r6,r2
10010be4:	00003380 	call	10000338 <main>
10010be8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10010bec:	01000044 	movi	r4,1
10010bf0:	001066c0 	call	1001066c <close>
  exit (result);
10010bf4:	e13fff17 	ldw	r4,-4(fp)
10010bf8:	0012ad00 	call	10012ad0 <exit>

10010bfc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10010bfc:	defffe04 	addi	sp,sp,-8
10010c00:	df000115 	stw	fp,4(sp)
10010c04:	df000104 	addi	fp,sp,4
10010c08:	e13fff15 	stw	r4,-4(fp)
}
10010c0c:	e037883a 	mov	sp,fp
10010c10:	df000017 	ldw	fp,0(sp)
10010c14:	dec00104 	addi	sp,sp,4
10010c18:	f800283a 	ret

10010c1c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10010c1c:	defffe04 	addi	sp,sp,-8
10010c20:	df000115 	stw	fp,4(sp)
10010c24:	df000104 	addi	fp,sp,4
10010c28:	e13fff15 	stw	r4,-4(fp)
}
10010c2c:	e037883a 	mov	sp,fp
10010c30:	df000017 	ldw	fp,0(sp)
10010c34:	dec00104 	addi	sp,sp,4
10010c38:	f800283a 	ret

10010c3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010c3c:	defffe04 	addi	sp,sp,-8
10010c40:	dfc00115 	stw	ra,4(sp)
10010c44:	df000015 	stw	fp,0(sp)
10010c48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010c4c:	00840074 	movhi	r2,4097
10010c50:	109c3b04 	addi	r2,r2,28908
10010c54:	10800017 	ldw	r2,0(r2)
10010c58:	10000526 	beq	r2,zero,10010c70 <alt_get_errno+0x34>
10010c5c:	00840074 	movhi	r2,4097
10010c60:	109c3b04 	addi	r2,r2,28908
10010c64:	10800017 	ldw	r2,0(r2)
10010c68:	103ee83a 	callr	r2
10010c6c:	00000206 	br	10010c78 <alt_get_errno+0x3c>
10010c70:	008400b4 	movhi	r2,4098
10010c74:	10a30e04 	addi	r2,r2,-29640
}
10010c78:	e037883a 	mov	sp,fp
10010c7c:	dfc00117 	ldw	ra,4(sp)
10010c80:	df000017 	ldw	fp,0(sp)
10010c84:	dec00204 	addi	sp,sp,8
10010c88:	f800283a 	ret

10010c8c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10010c8c:	defff904 	addi	sp,sp,-28
10010c90:	dfc00615 	stw	ra,24(sp)
10010c94:	df000515 	stw	fp,20(sp)
10010c98:	df000504 	addi	fp,sp,20
10010c9c:	e13ffd15 	stw	r4,-12(fp)
10010ca0:	e17ffe15 	stw	r5,-8(fp)
10010ca4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010ca8:	e0bffd17 	ldw	r2,-12(fp)
10010cac:	10000816 	blt	r2,zero,10010cd0 <read+0x44>
10010cb0:	e13ffd17 	ldw	r4,-12(fp)
10010cb4:	01400304 	movi	r5,12
10010cb8:	0003c5c0 	call	10003c5c <__mulsi3>
10010cbc:	1007883a 	mov	r3,r2
10010cc0:	00840074 	movhi	r2,4097
10010cc4:	1097b404 	addi	r2,r2,24272
10010cc8:	1885883a 	add	r2,r3,r2
10010ccc:	00000106 	br	10010cd4 <read+0x48>
10010cd0:	0005883a 	mov	r2,zero
10010cd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010cd8:	e0bffb17 	ldw	r2,-20(fp)
10010cdc:	10002226 	beq	r2,zero,10010d68 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10010ce0:	e0bffb17 	ldw	r2,-20(fp)
10010ce4:	10800217 	ldw	r2,8(r2)
10010ce8:	108000cc 	andi	r2,r2,3
10010cec:	10800060 	cmpeqi	r2,r2,1
10010cf0:	1000181e 	bne	r2,zero,10010d54 <read+0xc8>
        (fd->dev->read))
10010cf4:	e0bffb17 	ldw	r2,-20(fp)
10010cf8:	10800017 	ldw	r2,0(r2)
10010cfc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10010d00:	10001426 	beq	r2,zero,10010d54 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10010d04:	e0bffb17 	ldw	r2,-20(fp)
10010d08:	10800017 	ldw	r2,0(r2)
10010d0c:	10800517 	ldw	r2,20(r2)
10010d10:	e0ffff17 	ldw	r3,-4(fp)
10010d14:	e13ffb17 	ldw	r4,-20(fp)
10010d18:	e17ffe17 	ldw	r5,-8(fp)
10010d1c:	180d883a 	mov	r6,r3
10010d20:	103ee83a 	callr	r2
10010d24:	e0bffc15 	stw	r2,-16(fp)
10010d28:	e0bffc17 	ldw	r2,-16(fp)
10010d2c:	1000070e 	bge	r2,zero,10010d4c <read+0xc0>
        {
          ALT_ERRNO = -rval;
10010d30:	0010c3c0 	call	10010c3c <alt_get_errno>
10010d34:	1007883a 	mov	r3,r2
10010d38:	e0bffc17 	ldw	r2,-16(fp)
10010d3c:	0085c83a 	sub	r2,zero,r2
10010d40:	18800015 	stw	r2,0(r3)
          return -1;
10010d44:	00bfffc4 	movi	r2,-1
10010d48:	00000c06 	br	10010d7c <read+0xf0>
        }
        return rval;
10010d4c:	e0bffc17 	ldw	r2,-16(fp)
10010d50:	00000a06 	br	10010d7c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10010d54:	0010c3c0 	call	10010c3c <alt_get_errno>
10010d58:	1007883a 	mov	r3,r2
10010d5c:	00800344 	movi	r2,13
10010d60:	18800015 	stw	r2,0(r3)
10010d64:	00000406 	br	10010d78 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10010d68:	0010c3c0 	call	10010c3c <alt_get_errno>
10010d6c:	1007883a 	mov	r3,r2
10010d70:	00801444 	movi	r2,81
10010d74:	18800015 	stw	r2,0(r3)
  }
  return -1;
10010d78:	00bfffc4 	movi	r2,-1
}
10010d7c:	e037883a 	mov	sp,fp
10010d80:	dfc00117 	ldw	ra,4(sp)
10010d84:	df000017 	ldw	fp,0(sp)
10010d88:	dec00204 	addi	sp,sp,8
10010d8c:	f800283a 	ret

10010d90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10010d90:	defffc04 	addi	sp,sp,-16
10010d94:	dfc00315 	stw	ra,12(sp)
10010d98:	df000215 	stw	fp,8(sp)
10010d9c:	dc000115 	stw	r16,4(sp)
10010da0:	df000204 	addi	fp,sp,8
10010da4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10010da8:	e0bffe17 	ldw	r2,-8(fp)
10010dac:	108000d0 	cmplti	r2,r2,3
10010db0:	1000111e 	bne	r2,zero,10010df8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10010db4:	04040074 	movhi	r16,4097
10010db8:	8417b404 	addi	r16,r16,24272
10010dbc:	e0bffe17 	ldw	r2,-8(fp)
10010dc0:	1009883a 	mov	r4,r2
10010dc4:	01400304 	movi	r5,12
10010dc8:	0003c5c0 	call	10003c5c <__mulsi3>
10010dcc:	8085883a 	add	r2,r16,r2
10010dd0:	10800204 	addi	r2,r2,8
10010dd4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10010dd8:	04040074 	movhi	r16,4097
10010ddc:	8417b404 	addi	r16,r16,24272
10010de0:	e0bffe17 	ldw	r2,-8(fp)
10010de4:	1009883a 	mov	r4,r2
10010de8:	01400304 	movi	r5,12
10010dec:	0003c5c0 	call	10003c5c <__mulsi3>
10010df0:	8085883a 	add	r2,r16,r2
10010df4:	10000015 	stw	zero,0(r2)
  }
}
10010df8:	e6ffff04 	addi	sp,fp,-4
10010dfc:	dfc00217 	ldw	ra,8(sp)
10010e00:	df000117 	ldw	fp,4(sp)
10010e04:	dc000017 	ldw	r16,0(sp)
10010e08:	dec00304 	addi	sp,sp,12
10010e0c:	f800283a 	ret

10010e10 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10010e10:	defff904 	addi	sp,sp,-28
10010e14:	df000615 	stw	fp,24(sp)
10010e18:	df000604 	addi	fp,sp,24
10010e1c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010e20:	0005303a 	rdctl	r2,status
10010e24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010e28:	e0fffc17 	ldw	r3,-16(fp)
10010e2c:	00bfff84 	movi	r2,-2
10010e30:	1884703a 	and	r2,r3,r2
10010e34:	1001703a 	wrctl	status,r2
  
  return context;
10010e38:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10010e3c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10010e40:	d0a01017 	ldw	r2,-32704(gp)
10010e44:	10c000c4 	addi	r3,r2,3
10010e48:	00bfff04 	movi	r2,-4
10010e4c:	1884703a 	and	r2,r3,r2
10010e50:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10010e54:	d0e01017 	ldw	r3,-32704(gp)
10010e58:	e0bfff17 	ldw	r2,-4(fp)
10010e5c:	1887883a 	add	r3,r3,r2
10010e60:	00860034 	movhi	r2,6144
10010e64:	10800004 	addi	r2,r2,0
10010e68:	10c0062e 	bgeu	r2,r3,10010e84 <sbrk+0x74>
10010e6c:	e0bffa17 	ldw	r2,-24(fp)
10010e70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010e74:	e0bffd17 	ldw	r2,-12(fp)
10010e78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10010e7c:	00bfffc4 	movi	r2,-1
10010e80:	00000b06 	br	10010eb0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10010e84:	d0a01017 	ldw	r2,-32704(gp)
10010e88:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10010e8c:	d0e01017 	ldw	r3,-32704(gp)
10010e90:	e0bfff17 	ldw	r2,-4(fp)
10010e94:	1885883a 	add	r2,r3,r2
10010e98:	d0a01015 	stw	r2,-32704(gp)
10010e9c:	e0bffa17 	ldw	r2,-24(fp)
10010ea0:	e0bffe15 	stw	r2,-8(fp)
10010ea4:	e0bffe17 	ldw	r2,-8(fp)
10010ea8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10010eac:	e0bffb17 	ldw	r2,-20(fp)
} 
10010eb0:	e037883a 	mov	sp,fp
10010eb4:	df000017 	ldw	fp,0(sp)
10010eb8:	dec00104 	addi	sp,sp,4
10010ebc:	f800283a 	ret

10010ec0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10010ec0:	defffd04 	addi	sp,sp,-12
10010ec4:	dfc00215 	stw	ra,8(sp)
10010ec8:	df000115 	stw	fp,4(sp)
10010ecc:	df000104 	addi	fp,sp,4
10010ed0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10010ed4:	e13fff17 	ldw	r4,-4(fp)
10010ed8:	0011c800 	call	10011c80 <alt_busy_sleep>
}
10010edc:	e037883a 	mov	sp,fp
10010ee0:	dfc00117 	ldw	ra,4(sp)
10010ee4:	df000017 	ldw	fp,0(sp)
10010ee8:	dec00204 	addi	sp,sp,8
10010eec:	f800283a 	ret

10010ef0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010ef0:	defffe04 	addi	sp,sp,-8
10010ef4:	dfc00115 	stw	ra,4(sp)
10010ef8:	df000015 	stw	fp,0(sp)
10010efc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010f00:	00840074 	movhi	r2,4097
10010f04:	109c3b04 	addi	r2,r2,28908
10010f08:	10800017 	ldw	r2,0(r2)
10010f0c:	10000526 	beq	r2,zero,10010f24 <alt_get_errno+0x34>
10010f10:	00840074 	movhi	r2,4097
10010f14:	109c3b04 	addi	r2,r2,28908
10010f18:	10800017 	ldw	r2,0(r2)
10010f1c:	103ee83a 	callr	r2
10010f20:	00000206 	br	10010f2c <alt_get_errno+0x3c>
10010f24:	008400b4 	movhi	r2,4098
10010f28:	10a30e04 	addi	r2,r2,-29640
}
10010f2c:	e037883a 	mov	sp,fp
10010f30:	dfc00117 	ldw	ra,4(sp)
10010f34:	df000017 	ldw	fp,0(sp)
10010f38:	dec00204 	addi	sp,sp,8
10010f3c:	f800283a 	ret

10010f40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10010f40:	defff904 	addi	sp,sp,-28
10010f44:	dfc00615 	stw	ra,24(sp)
10010f48:	df000515 	stw	fp,20(sp)
10010f4c:	df000504 	addi	fp,sp,20
10010f50:	e13ffd15 	stw	r4,-12(fp)
10010f54:	e17ffe15 	stw	r5,-8(fp)
10010f58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10010f5c:	e0bffd17 	ldw	r2,-12(fp)
10010f60:	10000816 	blt	r2,zero,10010f84 <write+0x44>
10010f64:	e13ffd17 	ldw	r4,-12(fp)
10010f68:	01400304 	movi	r5,12
10010f6c:	0003c5c0 	call	10003c5c <__mulsi3>
10010f70:	1007883a 	mov	r3,r2
10010f74:	00840074 	movhi	r2,4097
10010f78:	1097b404 	addi	r2,r2,24272
10010f7c:	1885883a 	add	r2,r3,r2
10010f80:	00000106 	br	10010f88 <write+0x48>
10010f84:	0005883a 	mov	r2,zero
10010f88:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10010f8c:	e0bffb17 	ldw	r2,-20(fp)
10010f90:	10002126 	beq	r2,zero,10011018 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10010f94:	e0bffb17 	ldw	r2,-20(fp)
10010f98:	10800217 	ldw	r2,8(r2)
10010f9c:	108000cc 	andi	r2,r2,3
10010fa0:	10001826 	beq	r2,zero,10011004 <write+0xc4>
10010fa4:	e0bffb17 	ldw	r2,-20(fp)
10010fa8:	10800017 	ldw	r2,0(r2)
10010fac:	10800617 	ldw	r2,24(r2)
10010fb0:	10001426 	beq	r2,zero,10011004 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10010fb4:	e0bffb17 	ldw	r2,-20(fp)
10010fb8:	10800017 	ldw	r2,0(r2)
10010fbc:	10800617 	ldw	r2,24(r2)
10010fc0:	e0ffff17 	ldw	r3,-4(fp)
10010fc4:	e13ffb17 	ldw	r4,-20(fp)
10010fc8:	e17ffe17 	ldw	r5,-8(fp)
10010fcc:	180d883a 	mov	r6,r3
10010fd0:	103ee83a 	callr	r2
10010fd4:	e0bffc15 	stw	r2,-16(fp)
10010fd8:	e0bffc17 	ldw	r2,-16(fp)
10010fdc:	1000070e 	bge	r2,zero,10010ffc <write+0xbc>
      {
        ALT_ERRNO = -rval;
10010fe0:	0010ef00 	call	10010ef0 <alt_get_errno>
10010fe4:	1007883a 	mov	r3,r2
10010fe8:	e0bffc17 	ldw	r2,-16(fp)
10010fec:	0085c83a 	sub	r2,zero,r2
10010ff0:	18800015 	stw	r2,0(r3)
        return -1;
10010ff4:	00bfffc4 	movi	r2,-1
10010ff8:	00000c06 	br	1001102c <write+0xec>
      }
      return rval;
10010ffc:	e0bffc17 	ldw	r2,-16(fp)
10011000:	00000a06 	br	1001102c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10011004:	0010ef00 	call	10010ef0 <alt_get_errno>
10011008:	1007883a 	mov	r3,r2
1001100c:	00800344 	movi	r2,13
10011010:	18800015 	stw	r2,0(r3)
10011014:	00000406 	br	10011028 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10011018:	0010ef00 	call	10010ef0 <alt_get_errno>
1001101c:	1007883a 	mov	r3,r2
10011020:	00801444 	movi	r2,81
10011024:	18800015 	stw	r2,0(r3)
  }
  return -1;
10011028:	00bfffc4 	movi	r2,-1
}
1001102c:	e037883a 	mov	sp,fp
10011030:	dfc00117 	ldw	ra,4(sp)
10011034:	df000017 	ldw	fp,0(sp)
10011038:	dec00204 	addi	sp,sp,8
1001103c:	f800283a 	ret

10011040 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10011040:	defffd04 	addi	sp,sp,-12
10011044:	dfc00215 	stw	ra,8(sp)
10011048:	df000115 	stw	fp,4(sp)
1001104c:	df000104 	addi	fp,sp,4
10011050:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10011054:	e13fff17 	ldw	r4,-4(fp)
10011058:	01440074 	movhi	r5,4097
1001105c:	295c3804 	addi	r5,r5,28896
10011060:	0011e440 	call	10011e44 <alt_dev_llist_insert>
}
10011064:	e037883a 	mov	sp,fp
10011068:	dfc00117 	ldw	ra,4(sp)
1001106c:	df000017 	ldw	fp,0(sp)
10011070:	dec00204 	addi	sp,sp,8
10011074:	f800283a 	ret

10011078 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10011078:	defffd04 	addi	sp,sp,-12
1001107c:	dfc00215 	stw	ra,8(sp)
10011080:	df000115 	stw	fp,4(sp)
10011084:	df000104 	addi	fp,sp,4
10011088:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1001108c:	00128240 	call	10012824 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10011090:	00800044 	movi	r2,1
10011094:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10011098:	e037883a 	mov	sp,fp
1001109c:	dfc00117 	ldw	ra,4(sp)
100110a0:	df000017 	ldw	fp,0(sp)
100110a4:	dec00204 	addi	sp,sp,8
100110a8:	f800283a 	ret

100110ac <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100110ac:	defffe04 	addi	sp,sp,-8
100110b0:	dfc00115 	stw	ra,4(sp)
100110b4:	df000015 	stw	fp,0(sp)
100110b8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100110bc:	01040074 	movhi	r4,4097
100110c0:	21181e04 	addi	r4,r4,24696
100110c4:	000b883a 	mov	r5,zero
100110c8:	01800144 	movi	r6,5
100110cc:	00112580 	call	10011258 <altera_avalon_jtag_uart_init>
100110d0:	01040074 	movhi	r4,4097
100110d4:	21181404 	addi	r4,r4,24656
100110d8:	00110400 	call	10011040 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100110dc:	0001883a 	nop
}
100110e0:	e037883a 	mov	sp,fp
100110e4:	dfc00117 	ldw	ra,4(sp)
100110e8:	df000017 	ldw	fp,0(sp)
100110ec:	dec00204 	addi	sp,sp,8
100110f0:	f800283a 	ret

100110f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100110f4:	defffa04 	addi	sp,sp,-24
100110f8:	dfc00515 	stw	ra,20(sp)
100110fc:	df000415 	stw	fp,16(sp)
10011100:	df000404 	addi	fp,sp,16
10011104:	e13ffd15 	stw	r4,-12(fp)
10011108:	e17ffe15 	stw	r5,-8(fp)
1001110c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10011110:	e0bffd17 	ldw	r2,-12(fp)
10011114:	10800017 	ldw	r2,0(r2)
10011118:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1001111c:	e0bffc17 	ldw	r2,-16(fp)
10011120:	10c00a04 	addi	r3,r2,40
10011124:	e0bffd17 	ldw	r2,-12(fp)
10011128:	10800217 	ldw	r2,8(r2)
1001112c:	1809883a 	mov	r4,r3
10011130:	e17ffe17 	ldw	r5,-8(fp)
10011134:	e1bfff17 	ldw	r6,-4(fp)
10011138:	100f883a 	mov	r7,r2
1001113c:	001171c0 	call	1001171c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10011140:	e037883a 	mov	sp,fp
10011144:	dfc00117 	ldw	ra,4(sp)
10011148:	df000017 	ldw	fp,0(sp)
1001114c:	dec00204 	addi	sp,sp,8
10011150:	f800283a 	ret

10011154 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10011154:	defffa04 	addi	sp,sp,-24
10011158:	dfc00515 	stw	ra,20(sp)
1001115c:	df000415 	stw	fp,16(sp)
10011160:	df000404 	addi	fp,sp,16
10011164:	e13ffd15 	stw	r4,-12(fp)
10011168:	e17ffe15 	stw	r5,-8(fp)
1001116c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10011170:	e0bffd17 	ldw	r2,-12(fp)
10011174:	10800017 	ldw	r2,0(r2)
10011178:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1001117c:	e0bffc17 	ldw	r2,-16(fp)
10011180:	10c00a04 	addi	r3,r2,40
10011184:	e0bffd17 	ldw	r2,-12(fp)
10011188:	10800217 	ldw	r2,8(r2)
1001118c:	1809883a 	mov	r4,r3
10011190:	e17ffe17 	ldw	r5,-8(fp)
10011194:	e1bfff17 	ldw	r6,-4(fp)
10011198:	100f883a 	mov	r7,r2
1001119c:	00119280 	call	10011928 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100111a0:	e037883a 	mov	sp,fp
100111a4:	dfc00117 	ldw	ra,4(sp)
100111a8:	df000017 	ldw	fp,0(sp)
100111ac:	dec00204 	addi	sp,sp,8
100111b0:	f800283a 	ret

100111b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100111b4:	defffc04 	addi	sp,sp,-16
100111b8:	dfc00315 	stw	ra,12(sp)
100111bc:	df000215 	stw	fp,8(sp)
100111c0:	df000204 	addi	fp,sp,8
100111c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100111c8:	e0bfff17 	ldw	r2,-4(fp)
100111cc:	10800017 	ldw	r2,0(r2)
100111d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100111d4:	e0bffe17 	ldw	r2,-8(fp)
100111d8:	10c00a04 	addi	r3,r2,40
100111dc:	e0bfff17 	ldw	r2,-4(fp)
100111e0:	10800217 	ldw	r2,8(r2)
100111e4:	1809883a 	mov	r4,r3
100111e8:	100b883a 	mov	r5,r2
100111ec:	00115c80 	call	100115c8 <altera_avalon_jtag_uart_close>
}
100111f0:	e037883a 	mov	sp,fp
100111f4:	dfc00117 	ldw	ra,4(sp)
100111f8:	df000017 	ldw	fp,0(sp)
100111fc:	dec00204 	addi	sp,sp,8
10011200:	f800283a 	ret

10011204 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
10011204:	defffa04 	addi	sp,sp,-24
10011208:	dfc00515 	stw	ra,20(sp)
1001120c:	df000415 	stw	fp,16(sp)
10011210:	df000404 	addi	fp,sp,16
10011214:	e13ffd15 	stw	r4,-12(fp)
10011218:	e17ffe15 	stw	r5,-8(fp)
1001121c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10011220:	e0bffd17 	ldw	r2,-12(fp)
10011224:	10800017 	ldw	r2,0(r2)
10011228:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1001122c:	e0bffc17 	ldw	r2,-16(fp)
10011230:	10800a04 	addi	r2,r2,40
10011234:	1009883a 	mov	r4,r2
10011238:	e17ffe17 	ldw	r5,-8(fp)
1001123c:	e1bfff17 	ldw	r6,-4(fp)
10011240:	00116300 	call	10011630 <altera_avalon_jtag_uart_ioctl>
}
10011244:	e037883a 	mov	sp,fp
10011248:	dfc00117 	ldw	ra,4(sp)
1001124c:	df000017 	ldw	fp,0(sp)
10011250:	dec00204 	addi	sp,sp,8
10011254:	f800283a 	ret

10011258 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10011258:	defffa04 	addi	sp,sp,-24
1001125c:	dfc00515 	stw	ra,20(sp)
10011260:	df000415 	stw	fp,16(sp)
10011264:	df000404 	addi	fp,sp,16
10011268:	e13ffd15 	stw	r4,-12(fp)
1001126c:	e17ffe15 	stw	r5,-8(fp)
10011270:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011274:	e0bffd17 	ldw	r2,-12(fp)
10011278:	00c00044 	movi	r3,1
1001127c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10011280:	e0bffd17 	ldw	r2,-12(fp)
10011284:	10800017 	ldw	r2,0(r2)
10011288:	10800104 	addi	r2,r2,4
1001128c:	1007883a 	mov	r3,r2
10011290:	e0bffd17 	ldw	r2,-12(fp)
10011294:	10800817 	ldw	r2,32(r2)
10011298:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1001129c:	e0fffe17 	ldw	r3,-8(fp)
100112a0:	e0bfff17 	ldw	r2,-4(fp)
100112a4:	d8000015 	stw	zero,0(sp)
100112a8:	1809883a 	mov	r4,r3
100112ac:	100b883a 	mov	r5,r2
100112b0:	01840074 	movhi	r6,4097
100112b4:	3184c704 	addi	r6,r6,4892
100112b8:	e1fffd17 	ldw	r7,-12(fp)
100112bc:	0011fbc0 	call	10011fbc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100112c0:	e0bffd17 	ldw	r2,-12(fp)
100112c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100112c8:	e0bffd17 	ldw	r2,-12(fp)
100112cc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100112d0:	008400b4 	movhi	r2,4098
100112d4:	10a31304 	addi	r2,r2,-29620
100112d8:	10800017 	ldw	r2,0(r2)
100112dc:	1809883a 	mov	r4,r3
100112e0:	100b883a 	mov	r5,r2
100112e4:	01840074 	movhi	r6,4097
100112e8:	31854804 	addi	r6,r6,5408
100112ec:	e1fffd17 	ldw	r7,-12(fp)
100112f0:	0011b400 	call	10011b40 <alt_alarm_start>
100112f4:	1000040e 	bge	r2,zero,10011308 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100112f8:	e0fffd17 	ldw	r3,-12(fp)
100112fc:	00a00034 	movhi	r2,32768
10011300:	10bfffc4 	addi	r2,r2,-1
10011304:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10011308:	e037883a 	mov	sp,fp
1001130c:	dfc00117 	ldw	ra,4(sp)
10011310:	df000017 	ldw	fp,0(sp)
10011314:	dec00204 	addi	sp,sp,8
10011318:	f800283a 	ret

1001131c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1001131c:	defff804 	addi	sp,sp,-32
10011320:	df000715 	stw	fp,28(sp)
10011324:	df000704 	addi	fp,sp,28
10011328:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1001132c:	e0bfff17 	ldw	r2,-4(fp)
10011330:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10011334:	e0bffb17 	ldw	r2,-20(fp)
10011338:	10800017 	ldw	r2,0(r2)
1001133c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011340:	e0bffc17 	ldw	r2,-16(fp)
10011344:	10800104 	addi	r2,r2,4
10011348:	10800037 	ldwio	r2,0(r2)
1001134c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10011350:	e0bffd17 	ldw	r2,-12(fp)
10011354:	1080c00c 	andi	r2,r2,768
10011358:	1000011e 	bne	r2,zero,10011360 <altera_avalon_jtag_uart_irq+0x44>
      break;
1001135c:	00006c06 	br	10011510 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10011360:	e0bffd17 	ldw	r2,-12(fp)
10011364:	1080400c 	andi	r2,r2,256
10011368:	10003426 	beq	r2,zero,1001143c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1001136c:	00800074 	movhi	r2,1
10011370:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011374:	e0bffb17 	ldw	r2,-20(fp)
10011378:	10800a17 	ldw	r2,40(r2)
1001137c:	10800044 	addi	r2,r2,1
10011380:	1081ffcc 	andi	r2,r2,2047
10011384:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10011388:	e0bffb17 	ldw	r2,-20(fp)
1001138c:	10c00b17 	ldw	r3,44(r2)
10011390:	e0bffe17 	ldw	r2,-8(fp)
10011394:	1880011e 	bne	r3,r2,1001139c <altera_avalon_jtag_uart_irq+0x80>
          break;
10011398:	00001606 	br	100113f4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1001139c:	e0bffc17 	ldw	r2,-16(fp)
100113a0:	10800037 	ldwio	r2,0(r2)
100113a4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100113a8:	e0bff917 	ldw	r2,-28(fp)
100113ac:	10a0000c 	andi	r2,r2,32768
100113b0:	1000011e 	bne	r2,zero,100113b8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
100113b4:	00000f06 	br	100113f4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100113b8:	e0bffb17 	ldw	r2,-20(fp)
100113bc:	10800a17 	ldw	r2,40(r2)
100113c0:	e0fff917 	ldw	r3,-28(fp)
100113c4:	1809883a 	mov	r4,r3
100113c8:	e0fffb17 	ldw	r3,-20(fp)
100113cc:	1885883a 	add	r2,r3,r2
100113d0:	10800e04 	addi	r2,r2,56
100113d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100113d8:	e0bffb17 	ldw	r2,-20(fp)
100113dc:	10800a17 	ldw	r2,40(r2)
100113e0:	10800044 	addi	r2,r2,1
100113e4:	10c1ffcc 	andi	r3,r2,2047
100113e8:	e0bffb17 	ldw	r2,-20(fp)
100113ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100113f0:	003fe006 	br	10011374 <__alt_data_end+0xf8011374>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100113f4:	e0bff917 	ldw	r2,-28(fp)
100113f8:	10bfffec 	andhi	r2,r2,65535
100113fc:	10000f26 	beq	r2,zero,1001143c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10011400:	e0bffb17 	ldw	r2,-20(fp)
10011404:	10c00817 	ldw	r3,32(r2)
10011408:	00bfff84 	movi	r2,-2
1001140c:	1886703a 	and	r3,r3,r2
10011410:	e0bffb17 	ldw	r2,-20(fp)
10011414:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10011418:	e0bffc17 	ldw	r2,-16(fp)
1001141c:	10800104 	addi	r2,r2,4
10011420:	1007883a 	mov	r3,r2
10011424:	e0bffb17 	ldw	r2,-20(fp)
10011428:	10800817 	ldw	r2,32(r2)
1001142c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011430:	e0bffc17 	ldw	r2,-16(fp)
10011434:	10800104 	addi	r2,r2,4
10011438:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1001143c:	e0bffd17 	ldw	r2,-12(fp)
10011440:	1080800c 	andi	r2,r2,512
10011444:	10003126 	beq	r2,zero,1001150c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10011448:	e0bffd17 	ldw	r2,-12(fp)
1001144c:	1004d43a 	srli	r2,r2,16
10011450:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10011454:	00001406 	br	100114a8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10011458:	e0bffc17 	ldw	r2,-16(fp)
1001145c:	e0fffb17 	ldw	r3,-20(fp)
10011460:	18c00d17 	ldw	r3,52(r3)
10011464:	e13ffb17 	ldw	r4,-20(fp)
10011468:	20c7883a 	add	r3,r4,r3
1001146c:	18c20e04 	addi	r3,r3,2104
10011470:	18c00003 	ldbu	r3,0(r3)
10011474:	18c03fcc 	andi	r3,r3,255
10011478:	18c0201c 	xori	r3,r3,128
1001147c:	18ffe004 	addi	r3,r3,-128
10011480:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011484:	e0bffb17 	ldw	r2,-20(fp)
10011488:	10800d17 	ldw	r2,52(r2)
1001148c:	10800044 	addi	r2,r2,1
10011490:	10c1ffcc 	andi	r3,r2,2047
10011494:	e0bffb17 	ldw	r2,-20(fp)
10011498:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1001149c:	e0bffa17 	ldw	r2,-24(fp)
100114a0:	10bfffc4 	addi	r2,r2,-1
100114a4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100114a8:	e0bffa17 	ldw	r2,-24(fp)
100114ac:	10000526 	beq	r2,zero,100114c4 <altera_avalon_jtag_uart_irq+0x1a8>
100114b0:	e0bffb17 	ldw	r2,-20(fp)
100114b4:	10c00d17 	ldw	r3,52(r2)
100114b8:	e0bffb17 	ldw	r2,-20(fp)
100114bc:	10800c17 	ldw	r2,48(r2)
100114c0:	18bfe51e 	bne	r3,r2,10011458 <__alt_data_end+0xf8011458>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100114c4:	e0bffa17 	ldw	r2,-24(fp)
100114c8:	10001026 	beq	r2,zero,1001150c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100114cc:	e0bffb17 	ldw	r2,-20(fp)
100114d0:	10c00817 	ldw	r3,32(r2)
100114d4:	00bfff44 	movi	r2,-3
100114d8:	1886703a 	and	r3,r3,r2
100114dc:	e0bffb17 	ldw	r2,-20(fp)
100114e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100114e4:	e0bffb17 	ldw	r2,-20(fp)
100114e8:	10800017 	ldw	r2,0(r2)
100114ec:	10800104 	addi	r2,r2,4
100114f0:	1007883a 	mov	r3,r2
100114f4:	e0bffb17 	ldw	r2,-20(fp)
100114f8:	10800817 	ldw	r2,32(r2)
100114fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10011500:	e0bffc17 	ldw	r2,-16(fp)
10011504:	10800104 	addi	r2,r2,4
10011508:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1001150c:	003f8c06 	br	10011340 <__alt_data_end+0xf8011340>
}
10011510:	e037883a 	mov	sp,fp
10011514:	df000017 	ldw	fp,0(sp)
10011518:	dec00104 	addi	sp,sp,4
1001151c:	f800283a 	ret

10011520 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10011520:	defff804 	addi	sp,sp,-32
10011524:	df000715 	stw	fp,28(sp)
10011528:	df000704 	addi	fp,sp,28
1001152c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10011530:	e0bffb17 	ldw	r2,-20(fp)
10011534:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10011538:	e0bff917 	ldw	r2,-28(fp)
1001153c:	10800017 	ldw	r2,0(r2)
10011540:	10800104 	addi	r2,r2,4
10011544:	10800037 	ldwio	r2,0(r2)
10011548:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1001154c:	e0bffa17 	ldw	r2,-24(fp)
10011550:	1081000c 	andi	r2,r2,1024
10011554:	10000b26 	beq	r2,zero,10011584 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10011558:	e0bff917 	ldw	r2,-28(fp)
1001155c:	10800017 	ldw	r2,0(r2)
10011560:	10800104 	addi	r2,r2,4
10011564:	1007883a 	mov	r3,r2
10011568:	e0bff917 	ldw	r2,-28(fp)
1001156c:	10800817 	ldw	r2,32(r2)
10011570:	10810014 	ori	r2,r2,1024
10011574:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10011578:	e0bff917 	ldw	r2,-28(fp)
1001157c:	10000915 	stw	zero,36(r2)
10011580:	00000a06 	br	100115ac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10011584:	e0bff917 	ldw	r2,-28(fp)
10011588:	10c00917 	ldw	r3,36(r2)
1001158c:	00a00034 	movhi	r2,32768
10011590:	10bfff04 	addi	r2,r2,-4
10011594:	10c00536 	bltu	r2,r3,100115ac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10011598:	e0bff917 	ldw	r2,-28(fp)
1001159c:	10800917 	ldw	r2,36(r2)
100115a0:	10c00044 	addi	r3,r2,1
100115a4:	e0bff917 	ldw	r2,-28(fp)
100115a8:	10c00915 	stw	r3,36(r2)
100115ac:	008400b4 	movhi	r2,4098
100115b0:	10a31304 	addi	r2,r2,-29620
100115b4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100115b8:	e037883a 	mov	sp,fp
100115bc:	df000017 	ldw	fp,0(sp)
100115c0:	dec00104 	addi	sp,sp,4
100115c4:	f800283a 	ret

100115c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100115c8:	defffd04 	addi	sp,sp,-12
100115cc:	df000215 	stw	fp,8(sp)
100115d0:	df000204 	addi	fp,sp,8
100115d4:	e13ffe15 	stw	r4,-8(fp)
100115d8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100115dc:	00000506 	br	100115f4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100115e0:	e0bfff17 	ldw	r2,-4(fp)
100115e4:	1090000c 	andi	r2,r2,16384
100115e8:	10000226 	beq	r2,zero,100115f4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100115ec:	00bffd44 	movi	r2,-11
100115f0:	00000b06 	br	10011620 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100115f4:	e0bffe17 	ldw	r2,-8(fp)
100115f8:	10c00d17 	ldw	r3,52(r2)
100115fc:	e0bffe17 	ldw	r2,-8(fp)
10011600:	10800c17 	ldw	r2,48(r2)
10011604:	18800526 	beq	r3,r2,1001161c <altera_avalon_jtag_uart_close+0x54>
10011608:	e0bffe17 	ldw	r2,-8(fp)
1001160c:	10c00917 	ldw	r3,36(r2)
10011610:	e0bffe17 	ldw	r2,-8(fp)
10011614:	10800117 	ldw	r2,4(r2)
10011618:	18bff136 	bltu	r3,r2,100115e0 <__alt_data_end+0xf80115e0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1001161c:	0005883a 	mov	r2,zero
}
10011620:	e037883a 	mov	sp,fp
10011624:	df000017 	ldw	fp,0(sp)
10011628:	dec00104 	addi	sp,sp,4
1001162c:	f800283a 	ret

10011630 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10011630:	defffa04 	addi	sp,sp,-24
10011634:	df000515 	stw	fp,20(sp)
10011638:	df000504 	addi	fp,sp,20
1001163c:	e13ffd15 	stw	r4,-12(fp)
10011640:	e17ffe15 	stw	r5,-8(fp)
10011644:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10011648:	00bff9c4 	movi	r2,-25
1001164c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10011650:	e0bffe17 	ldw	r2,-8(fp)
10011654:	10da8060 	cmpeqi	r3,r2,27137
10011658:	1800031e 	bne	r3,zero,10011668 <altera_avalon_jtag_uart_ioctl+0x38>
1001165c:	109a80a0 	cmpeqi	r2,r2,27138
10011660:	1000191e 	bne	r2,zero,100116c8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10011664:	00002806 	br	10011708 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10011668:	e0bffd17 	ldw	r2,-12(fp)
1001166c:	10c00117 	ldw	r3,4(r2)
10011670:	00a00034 	movhi	r2,32768
10011674:	10bfffc4 	addi	r2,r2,-1
10011678:	18801226 	beq	r3,r2,100116c4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1001167c:	e0bfff17 	ldw	r2,-4(fp)
10011680:	10800017 	ldw	r2,0(r2)
10011684:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10011688:	e0bffc17 	ldw	r2,-16(fp)
1001168c:	10800090 	cmplti	r2,r2,2
10011690:	1000061e 	bne	r2,zero,100116ac <altera_avalon_jtag_uart_ioctl+0x7c>
10011694:	e0fffc17 	ldw	r3,-16(fp)
10011698:	00a00034 	movhi	r2,32768
1001169c:	10bfffc4 	addi	r2,r2,-1
100116a0:	18800226 	beq	r3,r2,100116ac <altera_avalon_jtag_uart_ioctl+0x7c>
100116a4:	e0bffc17 	ldw	r2,-16(fp)
100116a8:	00000206 	br	100116b4 <altera_avalon_jtag_uart_ioctl+0x84>
100116ac:	00a00034 	movhi	r2,32768
100116b0:	10bfff84 	addi	r2,r2,-2
100116b4:	e0fffd17 	ldw	r3,-12(fp)
100116b8:	18800115 	stw	r2,4(r3)
      rc = 0;
100116bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100116c0:	00001106 	br	10011708 <altera_avalon_jtag_uart_ioctl+0xd8>
100116c4:	00001006 	br	10011708 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100116c8:	e0bffd17 	ldw	r2,-12(fp)
100116cc:	10c00117 	ldw	r3,4(r2)
100116d0:	00a00034 	movhi	r2,32768
100116d4:	10bfffc4 	addi	r2,r2,-1
100116d8:	18800a26 	beq	r3,r2,10011704 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100116dc:	e0bffd17 	ldw	r2,-12(fp)
100116e0:	10c00917 	ldw	r3,36(r2)
100116e4:	e0bffd17 	ldw	r2,-12(fp)
100116e8:	10800117 	ldw	r2,4(r2)
100116ec:	1885803a 	cmpltu	r2,r3,r2
100116f0:	10c03fcc 	andi	r3,r2,255
100116f4:	e0bfff17 	ldw	r2,-4(fp)
100116f8:	10c00015 	stw	r3,0(r2)
      rc = 0;
100116fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10011700:	00000006 	br	10011704 <altera_avalon_jtag_uart_ioctl+0xd4>
10011704:	0001883a 	nop

  default:
    break;
  }

  return rc;
10011708:	e0bffb17 	ldw	r2,-20(fp)
}
1001170c:	e037883a 	mov	sp,fp
10011710:	df000017 	ldw	fp,0(sp)
10011714:	dec00104 	addi	sp,sp,4
10011718:	f800283a 	ret

1001171c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1001171c:	defff304 	addi	sp,sp,-52
10011720:	dfc00c15 	stw	ra,48(sp)
10011724:	df000b15 	stw	fp,44(sp)
10011728:	df000b04 	addi	fp,sp,44
1001172c:	e13ffc15 	stw	r4,-16(fp)
10011730:	e17ffd15 	stw	r5,-12(fp)
10011734:	e1bffe15 	stw	r6,-8(fp)
10011738:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1001173c:	e0bffd17 	ldw	r2,-12(fp)
10011740:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10011744:	00004906 	br	1001186c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10011748:	e0bffc17 	ldw	r2,-16(fp)
1001174c:	10800a17 	ldw	r2,40(r2)
10011750:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10011754:	e0bffc17 	ldw	r2,-16(fp)
10011758:	10800b17 	ldw	r2,44(r2)
1001175c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10011760:	e0fff717 	ldw	r3,-36(fp)
10011764:	e0bff817 	ldw	r2,-32(fp)
10011768:	18800536 	bltu	r3,r2,10011780 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1001176c:	e0fff717 	ldw	r3,-36(fp)
10011770:	e0bff817 	ldw	r2,-32(fp)
10011774:	1885c83a 	sub	r2,r3,r2
10011778:	e0bff615 	stw	r2,-40(fp)
1001177c:	00000406 	br	10011790 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10011780:	00c20004 	movi	r3,2048
10011784:	e0bff817 	ldw	r2,-32(fp)
10011788:	1885c83a 	sub	r2,r3,r2
1001178c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10011790:	e0bff617 	ldw	r2,-40(fp)
10011794:	1000011e 	bne	r2,zero,1001179c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
10011798:	00001d06 	br	10011810 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1001179c:	e0fffe17 	ldw	r3,-8(fp)
100117a0:	e0bff617 	ldw	r2,-40(fp)
100117a4:	1880022e 	bgeu	r3,r2,100117b0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
100117a8:	e0bffe17 	ldw	r2,-8(fp)
100117ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
100117b0:	e0bff817 	ldw	r2,-32(fp)
100117b4:	10800e04 	addi	r2,r2,56
100117b8:	e0fffc17 	ldw	r3,-16(fp)
100117bc:	1885883a 	add	r2,r3,r2
100117c0:	e13ff517 	ldw	r4,-44(fp)
100117c4:	100b883a 	mov	r5,r2
100117c8:	e1bff617 	ldw	r6,-40(fp)
100117cc:	00095c80 	call	100095c8 <memcpy>
      ptr   += n;
100117d0:	e0fff517 	ldw	r3,-44(fp)
100117d4:	e0bff617 	ldw	r2,-40(fp)
100117d8:	1885883a 	add	r2,r3,r2
100117dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
100117e0:	e0fffe17 	ldw	r3,-8(fp)
100117e4:	e0bff617 	ldw	r2,-40(fp)
100117e8:	1885c83a 	sub	r2,r3,r2
100117ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100117f0:	e0fff817 	ldw	r3,-32(fp)
100117f4:	e0bff617 	ldw	r2,-40(fp)
100117f8:	1885883a 	add	r2,r3,r2
100117fc:	10c1ffcc 	andi	r3,r2,2047
10011800:	e0bffc17 	ldw	r2,-16(fp)
10011804:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10011808:	e0bffe17 	ldw	r2,-8(fp)
1001180c:	00bfce16 	blt	zero,r2,10011748 <__alt_data_end+0xf8011748>

    /* If we read any data then return it */
    if (ptr != buffer)
10011810:	e0fff517 	ldw	r3,-44(fp)
10011814:	e0bffd17 	ldw	r2,-12(fp)
10011818:	18800126 	beq	r3,r2,10011820 <altera_avalon_jtag_uart_read+0x104>
      break;
1001181c:	00001506 	br	10011874 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10011820:	e0bfff17 	ldw	r2,-4(fp)
10011824:	1090000c 	andi	r2,r2,16384
10011828:	10000126 	beq	r2,zero,10011830 <altera_avalon_jtag_uart_read+0x114>
      break;
1001182c:	00001106 	br	10011874 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10011830:	0001883a 	nop
10011834:	e0bffc17 	ldw	r2,-16(fp)
10011838:	10c00a17 	ldw	r3,40(r2)
1001183c:	e0bff717 	ldw	r2,-36(fp)
10011840:	1880051e 	bne	r3,r2,10011858 <altera_avalon_jtag_uart_read+0x13c>
10011844:	e0bffc17 	ldw	r2,-16(fp)
10011848:	10c00917 	ldw	r3,36(r2)
1001184c:	e0bffc17 	ldw	r2,-16(fp)
10011850:	10800117 	ldw	r2,4(r2)
10011854:	18bff736 	bltu	r3,r2,10011834 <__alt_data_end+0xf8011834>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10011858:	e0bffc17 	ldw	r2,-16(fp)
1001185c:	10c00a17 	ldw	r3,40(r2)
10011860:	e0bff717 	ldw	r2,-36(fp)
10011864:	1880011e 	bne	r3,r2,1001186c <altera_avalon_jtag_uart_read+0x150>
      break;
10011868:	00000206 	br	10011874 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1001186c:	e0bffe17 	ldw	r2,-8(fp)
10011870:	00bfb516 	blt	zero,r2,10011748 <__alt_data_end+0xf8011748>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10011874:	e0fff517 	ldw	r3,-44(fp)
10011878:	e0bffd17 	ldw	r2,-12(fp)
1001187c:	18801826 	beq	r3,r2,100118e0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011880:	0005303a 	rdctl	r2,status
10011884:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011888:	e0fffa17 	ldw	r3,-24(fp)
1001188c:	00bfff84 	movi	r2,-2
10011890:	1884703a 	and	r2,r3,r2
10011894:	1001703a 	wrctl	status,r2
  
  return context;
10011898:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1001189c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100118a0:	e0bffc17 	ldw	r2,-16(fp)
100118a4:	10800817 	ldw	r2,32(r2)
100118a8:	10c00054 	ori	r3,r2,1
100118ac:	e0bffc17 	ldw	r2,-16(fp)
100118b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100118b4:	e0bffc17 	ldw	r2,-16(fp)
100118b8:	10800017 	ldw	r2,0(r2)
100118bc:	10800104 	addi	r2,r2,4
100118c0:	1007883a 	mov	r3,r2
100118c4:	e0bffc17 	ldw	r2,-16(fp)
100118c8:	10800817 	ldw	r2,32(r2)
100118cc:	18800035 	stwio	r2,0(r3)
100118d0:	e0bff917 	ldw	r2,-28(fp)
100118d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100118d8:	e0bffb17 	ldw	r2,-20(fp)
100118dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
100118e0:	e0fff517 	ldw	r3,-44(fp)
100118e4:	e0bffd17 	ldw	r2,-12(fp)
100118e8:	18800426 	beq	r3,r2,100118fc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
100118ec:	e0fff517 	ldw	r3,-44(fp)
100118f0:	e0bffd17 	ldw	r2,-12(fp)
100118f4:	1885c83a 	sub	r2,r3,r2
100118f8:	00000606 	br	10011914 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
100118fc:	e0bfff17 	ldw	r2,-4(fp)
10011900:	1090000c 	andi	r2,r2,16384
10011904:	10000226 	beq	r2,zero,10011910 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
10011908:	00bffd44 	movi	r2,-11
1001190c:	00000106 	br	10011914 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
10011910:	00bffec4 	movi	r2,-5
}
10011914:	e037883a 	mov	sp,fp
10011918:	dfc00117 	ldw	ra,4(sp)
1001191c:	df000017 	ldw	fp,0(sp)
10011920:	dec00204 	addi	sp,sp,8
10011924:	f800283a 	ret

10011928 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10011928:	defff304 	addi	sp,sp,-52
1001192c:	dfc00c15 	stw	ra,48(sp)
10011930:	df000b15 	stw	fp,44(sp)
10011934:	df000b04 	addi	fp,sp,44
10011938:	e13ffc15 	stw	r4,-16(fp)
1001193c:	e17ffd15 	stw	r5,-12(fp)
10011940:	e1bffe15 	stw	r6,-8(fp)
10011944:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10011948:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1001194c:	e0bffd17 	ldw	r2,-12(fp)
10011950:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011954:	00003806 	br	10011a38 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10011958:	e0bffc17 	ldw	r2,-16(fp)
1001195c:	10800c17 	ldw	r2,48(r2)
10011960:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10011964:	e0bffc17 	ldw	r2,-16(fp)
10011968:	10800d17 	ldw	r2,52(r2)
1001196c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10011970:	e0fff817 	ldw	r3,-32(fp)
10011974:	e0bff517 	ldw	r2,-44(fp)
10011978:	1880062e 	bgeu	r3,r2,10011994 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1001197c:	e0fff517 	ldw	r3,-44(fp)
10011980:	e0bff817 	ldw	r2,-32(fp)
10011984:	1885c83a 	sub	r2,r3,r2
10011988:	10bfffc4 	addi	r2,r2,-1
1001198c:	e0bff615 	stw	r2,-40(fp)
10011990:	00000b06 	br	100119c0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10011994:	e0bff517 	ldw	r2,-44(fp)
10011998:	10000526 	beq	r2,zero,100119b0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1001199c:	00c20004 	movi	r3,2048
100119a0:	e0bff817 	ldw	r2,-32(fp)
100119a4:	1885c83a 	sub	r2,r3,r2
100119a8:	e0bff615 	stw	r2,-40(fp)
100119ac:	00000406 	br	100119c0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
100119b0:	00c1ffc4 	movi	r3,2047
100119b4:	e0bff817 	ldw	r2,-32(fp)
100119b8:	1885c83a 	sub	r2,r3,r2
100119bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
100119c0:	e0bff617 	ldw	r2,-40(fp)
100119c4:	1000011e 	bne	r2,zero,100119cc <altera_avalon_jtag_uart_write+0xa4>
        break;
100119c8:	00001d06 	br	10011a40 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
100119cc:	e0fffe17 	ldw	r3,-8(fp)
100119d0:	e0bff617 	ldw	r2,-40(fp)
100119d4:	1880022e 	bgeu	r3,r2,100119e0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
100119d8:	e0bffe17 	ldw	r2,-8(fp)
100119dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
100119e0:	e0bff817 	ldw	r2,-32(fp)
100119e4:	10820e04 	addi	r2,r2,2104
100119e8:	e0fffc17 	ldw	r3,-16(fp)
100119ec:	1885883a 	add	r2,r3,r2
100119f0:	1009883a 	mov	r4,r2
100119f4:	e17ffd17 	ldw	r5,-12(fp)
100119f8:	e1bff617 	ldw	r6,-40(fp)
100119fc:	00095c80 	call	100095c8 <memcpy>
      ptr   += n;
10011a00:	e0fffd17 	ldw	r3,-12(fp)
10011a04:	e0bff617 	ldw	r2,-40(fp)
10011a08:	1885883a 	add	r2,r3,r2
10011a0c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10011a10:	e0fffe17 	ldw	r3,-8(fp)
10011a14:	e0bff617 	ldw	r2,-40(fp)
10011a18:	1885c83a 	sub	r2,r3,r2
10011a1c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10011a20:	e0fff817 	ldw	r3,-32(fp)
10011a24:	e0bff617 	ldw	r2,-40(fp)
10011a28:	1885883a 	add	r2,r3,r2
10011a2c:	10c1ffcc 	andi	r3,r2,2047
10011a30:	e0bffc17 	ldw	r2,-16(fp)
10011a34:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10011a38:	e0bffe17 	ldw	r2,-8(fp)
10011a3c:	00bfc616 	blt	zero,r2,10011958 <__alt_data_end+0xf8011958>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011a40:	0005303a 	rdctl	r2,status
10011a44:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011a48:	e0fffa17 	ldw	r3,-24(fp)
10011a4c:	00bfff84 	movi	r2,-2
10011a50:	1884703a 	and	r2,r3,r2
10011a54:	1001703a 	wrctl	status,r2
  
  return context;
10011a58:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10011a5c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10011a60:	e0bffc17 	ldw	r2,-16(fp)
10011a64:	10800817 	ldw	r2,32(r2)
10011a68:	10c00094 	ori	r3,r2,2
10011a6c:	e0bffc17 	ldw	r2,-16(fp)
10011a70:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10011a74:	e0bffc17 	ldw	r2,-16(fp)
10011a78:	10800017 	ldw	r2,0(r2)
10011a7c:	10800104 	addi	r2,r2,4
10011a80:	1007883a 	mov	r3,r2
10011a84:	e0bffc17 	ldw	r2,-16(fp)
10011a88:	10800817 	ldw	r2,32(r2)
10011a8c:	18800035 	stwio	r2,0(r3)
10011a90:	e0bff917 	ldw	r2,-28(fp)
10011a94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011a98:	e0bffb17 	ldw	r2,-20(fp)
10011a9c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10011aa0:	e0bffe17 	ldw	r2,-8(fp)
10011aa4:	0080120e 	bge	zero,r2,10011af0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10011aa8:	e0bfff17 	ldw	r2,-4(fp)
10011aac:	1090000c 	andi	r2,r2,16384
10011ab0:	10000126 	beq	r2,zero,10011ab8 <altera_avalon_jtag_uart_write+0x190>
        break;
10011ab4:	00001006 	br	10011af8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10011ab8:	0001883a 	nop
10011abc:	e0bffc17 	ldw	r2,-16(fp)
10011ac0:	10c00d17 	ldw	r3,52(r2)
10011ac4:	e0bff517 	ldw	r2,-44(fp)
10011ac8:	1880051e 	bne	r3,r2,10011ae0 <altera_avalon_jtag_uart_write+0x1b8>
10011acc:	e0bffc17 	ldw	r2,-16(fp)
10011ad0:	10c00917 	ldw	r3,36(r2)
10011ad4:	e0bffc17 	ldw	r2,-16(fp)
10011ad8:	10800117 	ldw	r2,4(r2)
10011adc:	18bff736 	bltu	r3,r2,10011abc <__alt_data_end+0xf8011abc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10011ae0:	e0bffc17 	ldw	r2,-16(fp)
10011ae4:	10800917 	ldw	r2,36(r2)
10011ae8:	10000126 	beq	r2,zero,10011af0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
10011aec:	00000206 	br	10011af8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10011af0:	e0bffe17 	ldw	r2,-8(fp)
10011af4:	00bf9716 	blt	zero,r2,10011954 <__alt_data_end+0xf8011954>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10011af8:	e0fffd17 	ldw	r3,-12(fp)
10011afc:	e0bff717 	ldw	r2,-36(fp)
10011b00:	18800426 	beq	r3,r2,10011b14 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10011b04:	e0fffd17 	ldw	r3,-12(fp)
10011b08:	e0bff717 	ldw	r2,-36(fp)
10011b0c:	1885c83a 	sub	r2,r3,r2
10011b10:	00000606 	br	10011b2c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10011b14:	e0bfff17 	ldw	r2,-4(fp)
10011b18:	1090000c 	andi	r2,r2,16384
10011b1c:	10000226 	beq	r2,zero,10011b28 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10011b20:	00bffd44 	movi	r2,-11
10011b24:	00000106 	br	10011b2c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10011b28:	00bffec4 	movi	r2,-5
}
10011b2c:	e037883a 	mov	sp,fp
10011b30:	dfc00117 	ldw	ra,4(sp)
10011b34:	df000017 	ldw	fp,0(sp)
10011b38:	dec00204 	addi	sp,sp,8
10011b3c:	f800283a 	ret

10011b40 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10011b40:	defff504 	addi	sp,sp,-44
10011b44:	df000a15 	stw	fp,40(sp)
10011b48:	df000a04 	addi	fp,sp,40
10011b4c:	e13ffc15 	stw	r4,-16(fp)
10011b50:	e17ffd15 	stw	r5,-12(fp)
10011b54:	e1bffe15 	stw	r6,-8(fp)
10011b58:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10011b5c:	e03ff615 	stw	zero,-40(fp)
10011b60:	008400b4 	movhi	r2,4098
10011b64:	10a31304 	addi	r2,r2,-29620
10011b68:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10011b6c:	10003f26 	beq	r2,zero,10011c6c <alt_alarm_start+0x12c>
  {
    if (alarm)
10011b70:	e0bffc17 	ldw	r2,-16(fp)
10011b74:	10003b26 	beq	r2,zero,10011c64 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10011b78:	e0bffc17 	ldw	r2,-16(fp)
10011b7c:	e0fffe17 	ldw	r3,-8(fp)
10011b80:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10011b84:	e0bffc17 	ldw	r2,-16(fp)
10011b88:	e0ffff17 	ldw	r3,-4(fp)
10011b8c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10011b90:	0005303a 	rdctl	r2,status
10011b94:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10011b98:	e0fff817 	ldw	r3,-32(fp)
10011b9c:	00bfff84 	movi	r2,-2
10011ba0:	1884703a 	and	r2,r3,r2
10011ba4:	1001703a 	wrctl	status,r2
  
  return context;
10011ba8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10011bac:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10011bb0:	008400b4 	movhi	r2,4098
10011bb4:	10a31404 	addi	r2,r2,-29616
10011bb8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10011bbc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10011bc0:	e0fffd17 	ldw	r3,-12(fp)
10011bc4:	e0bff617 	ldw	r2,-40(fp)
10011bc8:	1885883a 	add	r2,r3,r2
10011bcc:	10c00044 	addi	r3,r2,1
10011bd0:	e0bffc17 	ldw	r2,-16(fp)
10011bd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10011bd8:	e0bffc17 	ldw	r2,-16(fp)
10011bdc:	10c00217 	ldw	r3,8(r2)
10011be0:	e0bff617 	ldw	r2,-40(fp)
10011be4:	1880042e 	bgeu	r3,r2,10011bf8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10011be8:	e0bffc17 	ldw	r2,-16(fp)
10011bec:	00c00044 	movi	r3,1
10011bf0:	10c00405 	stb	r3,16(r2)
10011bf4:	00000206 	br	10011c00 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10011bf8:	e0bffc17 	ldw	r2,-16(fp)
10011bfc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10011c00:	e0fffc17 	ldw	r3,-16(fp)
10011c04:	00840074 	movhi	r2,4097
10011c08:	109c3e04 	addi	r2,r2,28920
10011c0c:	e0bff915 	stw	r2,-28(fp)
10011c10:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011c14:	e0bffa17 	ldw	r2,-24(fp)
10011c18:	e0fff917 	ldw	r3,-28(fp)
10011c1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011c20:	e0bff917 	ldw	r2,-28(fp)
10011c24:	10c00017 	ldw	r3,0(r2)
10011c28:	e0bffa17 	ldw	r2,-24(fp)
10011c2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011c30:	e0bff917 	ldw	r2,-28(fp)
10011c34:	10800017 	ldw	r2,0(r2)
10011c38:	e0fffa17 	ldw	r3,-24(fp)
10011c3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011c40:	e0bff917 	ldw	r2,-28(fp)
10011c44:	e0fffa17 	ldw	r3,-24(fp)
10011c48:	10c00015 	stw	r3,0(r2)
10011c4c:	e0bff717 	ldw	r2,-36(fp)
10011c50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10011c54:	e0bffb17 	ldw	r2,-20(fp)
10011c58:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10011c5c:	0005883a 	mov	r2,zero
10011c60:	00000306 	br	10011c70 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10011c64:	00bffa84 	movi	r2,-22
10011c68:	00000106 	br	10011c70 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10011c6c:	00bfde84 	movi	r2,-134
  }
}
10011c70:	e037883a 	mov	sp,fp
10011c74:	df000017 	ldw	fp,0(sp)
10011c78:	dec00104 	addi	sp,sp,4
10011c7c:	f800283a 	ret

10011c80 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10011c80:	defffa04 	addi	sp,sp,-24
10011c84:	dfc00515 	stw	ra,20(sp)
10011c88:	df000415 	stw	fp,16(sp)
10011c8c:	df000404 	addi	fp,sp,16
10011c90:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10011c94:	00800244 	movi	r2,9
10011c98:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10011c9c:	e13ffd17 	ldw	r4,-12(fp)
10011ca0:	014003f4 	movhi	r5,15
10011ca4:	29509004 	addi	r5,r5,16960
10011ca8:	0003c5c0 	call	10003c5c <__mulsi3>
10011cac:	0100bef4 	movhi	r4,763
10011cb0:	213c2004 	addi	r4,r4,-3968
10011cb4:	100b883a 	mov	r5,r2
10011cb8:	0003c4c0 	call	10003c4c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10011cbc:	01200034 	movhi	r4,32768
10011cc0:	213fffc4 	addi	r4,r4,-1
10011cc4:	100b883a 	mov	r5,r2
10011cc8:	0003c4c0 	call	10003c4c <__udivsi3>
10011ccc:	e13fff17 	ldw	r4,-4(fp)
10011cd0:	100b883a 	mov	r5,r2
10011cd4:	0003c4c0 	call	10003c4c <__udivsi3>
10011cd8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10011cdc:	e0bffe17 	ldw	r2,-8(fp)
10011ce0:	10002a26 	beq	r2,zero,10011d8c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10011ce4:	e03ffc15 	stw	zero,-16(fp)
10011ce8:	00001706 	br	10011d48 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10011cec:	00a00034 	movhi	r2,32768
10011cf0:	10bfffc4 	addi	r2,r2,-1
10011cf4:	10bfffc4 	addi	r2,r2,-1
10011cf8:	103ffe1e 	bne	r2,zero,10011cf4 <__alt_data_end+0xf8011cf4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10011cfc:	e13ffd17 	ldw	r4,-12(fp)
10011d00:	014003f4 	movhi	r5,15
10011d04:	29509004 	addi	r5,r5,16960
10011d08:	0003c5c0 	call	10003c5c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10011d0c:	0100bef4 	movhi	r4,763
10011d10:	213c2004 	addi	r4,r4,-3968
10011d14:	100b883a 	mov	r5,r2
10011d18:	0003c4c0 	call	10003c4c <__udivsi3>
10011d1c:	01200034 	movhi	r4,32768
10011d20:	213fffc4 	addi	r4,r4,-1
10011d24:	100b883a 	mov	r5,r2
10011d28:	0003c4c0 	call	10003c4c <__udivsi3>
10011d2c:	1007883a 	mov	r3,r2
10011d30:	e0bfff17 	ldw	r2,-4(fp)
10011d34:	10c5c83a 	sub	r2,r2,r3
10011d38:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10011d3c:	e0bffc17 	ldw	r2,-16(fp)
10011d40:	10800044 	addi	r2,r2,1
10011d44:	e0bffc15 	stw	r2,-16(fp)
10011d48:	e0fffc17 	ldw	r3,-16(fp)
10011d4c:	e0bffe17 	ldw	r2,-8(fp)
10011d50:	18bfe616 	blt	r3,r2,10011cec <__alt_data_end+0xf8011cec>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10011d54:	e13ffd17 	ldw	r4,-12(fp)
10011d58:	014003f4 	movhi	r5,15
10011d5c:	29509004 	addi	r5,r5,16960
10011d60:	0003c5c0 	call	10003c5c <__mulsi3>
10011d64:	0100bef4 	movhi	r4,763
10011d68:	213c2004 	addi	r4,r4,-3968
10011d6c:	100b883a 	mov	r5,r2
10011d70:	0003c4c0 	call	10003c4c <__udivsi3>
10011d74:	1009883a 	mov	r4,r2
10011d78:	e17fff17 	ldw	r5,-4(fp)
10011d7c:	0003c5c0 	call	10003c5c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011d80:	10bfffc4 	addi	r2,r2,-1
10011d84:	103ffe1e 	bne	r2,zero,10011d80 <__alt_data_end+0xf8011d80>
10011d88:	00000d06 	br	10011dc0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10011d8c:	e13ffd17 	ldw	r4,-12(fp)
10011d90:	014003f4 	movhi	r5,15
10011d94:	29509004 	addi	r5,r5,16960
10011d98:	0003c5c0 	call	10003c5c <__mulsi3>
10011d9c:	0100bef4 	movhi	r4,763
10011da0:	213c2004 	addi	r4,r4,-3968
10011da4:	100b883a 	mov	r5,r2
10011da8:	0003c4c0 	call	10003c4c <__udivsi3>
10011dac:	1009883a 	mov	r4,r2
10011db0:	e17fff17 	ldw	r5,-4(fp)
10011db4:	0003c5c0 	call	10003c5c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10011db8:	10bfffc4 	addi	r2,r2,-1
10011dbc:	00bffe16 	blt	zero,r2,10011db8 <__alt_data_end+0xf8011db8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10011dc0:	0005883a 	mov	r2,zero
}
10011dc4:	e037883a 	mov	sp,fp
10011dc8:	dfc00117 	ldw	ra,4(sp)
10011dcc:	df000017 	ldw	fp,0(sp)
10011dd0:	dec00204 	addi	sp,sp,8
10011dd4:	f800283a 	ret

10011dd8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10011dd8:	deffff04 	addi	sp,sp,-4
10011ddc:	df000015 	stw	fp,0(sp)
10011de0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10011de4:	e037883a 	mov	sp,fp
10011de8:	df000017 	ldw	fp,0(sp)
10011dec:	dec00104 	addi	sp,sp,4
10011df0:	f800283a 	ret

10011df4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10011df4:	defffe04 	addi	sp,sp,-8
10011df8:	dfc00115 	stw	ra,4(sp)
10011dfc:	df000015 	stw	fp,0(sp)
10011e00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10011e04:	00840074 	movhi	r2,4097
10011e08:	109c3b04 	addi	r2,r2,28908
10011e0c:	10800017 	ldw	r2,0(r2)
10011e10:	10000526 	beq	r2,zero,10011e28 <alt_get_errno+0x34>
10011e14:	00840074 	movhi	r2,4097
10011e18:	109c3b04 	addi	r2,r2,28908
10011e1c:	10800017 	ldw	r2,0(r2)
10011e20:	103ee83a 	callr	r2
10011e24:	00000206 	br	10011e30 <alt_get_errno+0x3c>
10011e28:	008400b4 	movhi	r2,4098
10011e2c:	10a30e04 	addi	r2,r2,-29640
}
10011e30:	e037883a 	mov	sp,fp
10011e34:	dfc00117 	ldw	ra,4(sp)
10011e38:	df000017 	ldw	fp,0(sp)
10011e3c:	dec00204 	addi	sp,sp,8
10011e40:	f800283a 	ret

10011e44 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10011e44:	defffa04 	addi	sp,sp,-24
10011e48:	dfc00515 	stw	ra,20(sp)
10011e4c:	df000415 	stw	fp,16(sp)
10011e50:	df000404 	addi	fp,sp,16
10011e54:	e13ffe15 	stw	r4,-8(fp)
10011e58:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10011e5c:	e0bffe17 	ldw	r2,-8(fp)
10011e60:	10000326 	beq	r2,zero,10011e70 <alt_dev_llist_insert+0x2c>
10011e64:	e0bffe17 	ldw	r2,-8(fp)
10011e68:	10800217 	ldw	r2,8(r2)
10011e6c:	1000061e 	bne	r2,zero,10011e88 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10011e70:	0011df40 	call	10011df4 <alt_get_errno>
10011e74:	1007883a 	mov	r3,r2
10011e78:	00800584 	movi	r2,22
10011e7c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10011e80:	00bffa84 	movi	r2,-22
10011e84:	00001306 	br	10011ed4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10011e88:	e0bffe17 	ldw	r2,-8(fp)
10011e8c:	e0ffff17 	ldw	r3,-4(fp)
10011e90:	e0fffc15 	stw	r3,-16(fp)
10011e94:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10011e98:	e0bffd17 	ldw	r2,-12(fp)
10011e9c:	e0fffc17 	ldw	r3,-16(fp)
10011ea0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10011ea4:	e0bffc17 	ldw	r2,-16(fp)
10011ea8:	10c00017 	ldw	r3,0(r2)
10011eac:	e0bffd17 	ldw	r2,-12(fp)
10011eb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10011eb4:	e0bffc17 	ldw	r2,-16(fp)
10011eb8:	10800017 	ldw	r2,0(r2)
10011ebc:	e0fffd17 	ldw	r3,-12(fp)
10011ec0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10011ec4:	e0bffc17 	ldw	r2,-16(fp)
10011ec8:	e0fffd17 	ldw	r3,-12(fp)
10011ecc:	10c00015 	stw	r3,0(r2)

  return 0;  
10011ed0:	0005883a 	mov	r2,zero
}
10011ed4:	e037883a 	mov	sp,fp
10011ed8:	dfc00117 	ldw	ra,4(sp)
10011edc:	df000017 	ldw	fp,0(sp)
10011ee0:	dec00204 	addi	sp,sp,8
10011ee4:	f800283a 	ret

10011ee8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10011ee8:	defffd04 	addi	sp,sp,-12
10011eec:	dfc00215 	stw	ra,8(sp)
10011ef0:	df000115 	stw	fp,4(sp)
10011ef4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011ef8:	00840074 	movhi	r2,4097
10011efc:	108b9704 	addi	r2,r2,11868
10011f00:	e0bfff15 	stw	r2,-4(fp)
10011f04:	00000606 	br	10011f20 <_do_ctors+0x38>
        (*ctor) (); 
10011f08:	e0bfff17 	ldw	r2,-4(fp)
10011f0c:	10800017 	ldw	r2,0(r2)
10011f10:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10011f14:	e0bfff17 	ldw	r2,-4(fp)
10011f18:	10bfff04 	addi	r2,r2,-4
10011f1c:	e0bfff15 	stw	r2,-4(fp)
10011f20:	e0ffff17 	ldw	r3,-4(fp)
10011f24:	00840074 	movhi	r2,4097
10011f28:	108b9804 	addi	r2,r2,11872
10011f2c:	18bff62e 	bgeu	r3,r2,10011f08 <__alt_data_end+0xf8011f08>
        (*ctor) (); 
}
10011f30:	e037883a 	mov	sp,fp
10011f34:	dfc00117 	ldw	ra,4(sp)
10011f38:	df000017 	ldw	fp,0(sp)
10011f3c:	dec00204 	addi	sp,sp,8
10011f40:	f800283a 	ret

10011f44 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10011f44:	defffd04 	addi	sp,sp,-12
10011f48:	dfc00215 	stw	ra,8(sp)
10011f4c:	df000115 	stw	fp,4(sp)
10011f50:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011f54:	00840074 	movhi	r2,4097
10011f58:	108b9704 	addi	r2,r2,11868
10011f5c:	e0bfff15 	stw	r2,-4(fp)
10011f60:	00000606 	br	10011f7c <_do_dtors+0x38>
        (*dtor) (); 
10011f64:	e0bfff17 	ldw	r2,-4(fp)
10011f68:	10800017 	ldw	r2,0(r2)
10011f6c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10011f70:	e0bfff17 	ldw	r2,-4(fp)
10011f74:	10bfff04 	addi	r2,r2,-4
10011f78:	e0bfff15 	stw	r2,-4(fp)
10011f7c:	e0ffff17 	ldw	r3,-4(fp)
10011f80:	00840074 	movhi	r2,4097
10011f84:	108b9804 	addi	r2,r2,11872
10011f88:	18bff62e 	bgeu	r3,r2,10011f64 <__alt_data_end+0xf8011f64>
        (*dtor) (); 
}
10011f8c:	e037883a 	mov	sp,fp
10011f90:	dfc00117 	ldw	ra,4(sp)
10011f94:	df000017 	ldw	fp,0(sp)
10011f98:	dec00204 	addi	sp,sp,8
10011f9c:	f800283a 	ret

10011fa0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10011fa0:	deffff04 	addi	sp,sp,-4
10011fa4:	df000015 	stw	fp,0(sp)
10011fa8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10011fac:	e037883a 	mov	sp,fp
10011fb0:	df000017 	ldw	fp,0(sp)
10011fb4:	dec00104 	addi	sp,sp,4
10011fb8:	f800283a 	ret

10011fbc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10011fbc:	defff904 	addi	sp,sp,-28
10011fc0:	dfc00615 	stw	ra,24(sp)
10011fc4:	df000515 	stw	fp,20(sp)
10011fc8:	df000504 	addi	fp,sp,20
10011fcc:	e13ffc15 	stw	r4,-16(fp)
10011fd0:	e17ffd15 	stw	r5,-12(fp)
10011fd4:	e1bffe15 	stw	r6,-8(fp)
10011fd8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10011fdc:	e0800217 	ldw	r2,8(fp)
10011fe0:	d8800015 	stw	r2,0(sp)
10011fe4:	e13ffc17 	ldw	r4,-16(fp)
10011fe8:	e17ffd17 	ldw	r5,-12(fp)
10011fec:	e1bffe17 	ldw	r6,-8(fp)
10011ff0:	e1ffff17 	ldw	r7,-4(fp)
10011ff4:	001219c0 	call	1001219c <alt_iic_isr_register>
}  
10011ff8:	e037883a 	mov	sp,fp
10011ffc:	dfc00117 	ldw	ra,4(sp)
10012000:	df000017 	ldw	fp,0(sp)
10012004:	dec00204 	addi	sp,sp,8
10012008:	f800283a 	ret

1001200c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1001200c:	defff904 	addi	sp,sp,-28
10012010:	df000615 	stw	fp,24(sp)
10012014:	df000604 	addi	fp,sp,24
10012018:	e13ffe15 	stw	r4,-8(fp)
1001201c:	e17fff15 	stw	r5,-4(fp)
10012020:	e0bfff17 	ldw	r2,-4(fp)
10012024:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012028:	0005303a 	rdctl	r2,status
1001202c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10012030:	e0fffb17 	ldw	r3,-20(fp)
10012034:	00bfff84 	movi	r2,-2
10012038:	1884703a 	and	r2,r3,r2
1001203c:	1001703a 	wrctl	status,r2
  
  return context;
10012040:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10012044:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10012048:	e0bffa17 	ldw	r2,-24(fp)
1001204c:	00c00044 	movi	r3,1
10012050:	1884983a 	sll	r2,r3,r2
10012054:	1007883a 	mov	r3,r2
10012058:	008400b4 	movhi	r2,4098
1001205c:	10a31204 	addi	r2,r2,-29624
10012060:	10800017 	ldw	r2,0(r2)
10012064:	1886b03a 	or	r3,r3,r2
10012068:	008400b4 	movhi	r2,4098
1001206c:	10a31204 	addi	r2,r2,-29624
10012070:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10012074:	008400b4 	movhi	r2,4098
10012078:	10a31204 	addi	r2,r2,-29624
1001207c:	10800017 	ldw	r2,0(r2)
10012080:	100170fa 	wrctl	ienable,r2
10012084:	e0bffc17 	ldw	r2,-16(fp)
10012088:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001208c:	e0bffd17 	ldw	r2,-12(fp)
10012090:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10012094:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10012098:	0001883a 	nop
}
1001209c:	e037883a 	mov	sp,fp
100120a0:	df000017 	ldw	fp,0(sp)
100120a4:	dec00104 	addi	sp,sp,4
100120a8:	f800283a 	ret

100120ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100120ac:	defff904 	addi	sp,sp,-28
100120b0:	df000615 	stw	fp,24(sp)
100120b4:	df000604 	addi	fp,sp,24
100120b8:	e13ffe15 	stw	r4,-8(fp)
100120bc:	e17fff15 	stw	r5,-4(fp)
100120c0:	e0bfff17 	ldw	r2,-4(fp)
100120c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100120c8:	0005303a 	rdctl	r2,status
100120cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100120d0:	e0fffb17 	ldw	r3,-20(fp)
100120d4:	00bfff84 	movi	r2,-2
100120d8:	1884703a 	and	r2,r3,r2
100120dc:	1001703a 	wrctl	status,r2
  
  return context;
100120e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100120e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100120e8:	e0bffa17 	ldw	r2,-24(fp)
100120ec:	00c00044 	movi	r3,1
100120f0:	1884983a 	sll	r2,r3,r2
100120f4:	0084303a 	nor	r2,zero,r2
100120f8:	1007883a 	mov	r3,r2
100120fc:	008400b4 	movhi	r2,4098
10012100:	10a31204 	addi	r2,r2,-29624
10012104:	10800017 	ldw	r2,0(r2)
10012108:	1886703a 	and	r3,r3,r2
1001210c:	008400b4 	movhi	r2,4098
10012110:	10a31204 	addi	r2,r2,-29624
10012114:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10012118:	008400b4 	movhi	r2,4098
1001211c:	10a31204 	addi	r2,r2,-29624
10012120:	10800017 	ldw	r2,0(r2)
10012124:	100170fa 	wrctl	ienable,r2
10012128:	e0bffc17 	ldw	r2,-16(fp)
1001212c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012130:	e0bffd17 	ldw	r2,-12(fp)
10012134:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10012138:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1001213c:	0001883a 	nop
}
10012140:	e037883a 	mov	sp,fp
10012144:	df000017 	ldw	fp,0(sp)
10012148:	dec00104 	addi	sp,sp,4
1001214c:	f800283a 	ret

10012150 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10012150:	defffc04 	addi	sp,sp,-16
10012154:	df000315 	stw	fp,12(sp)
10012158:	df000304 	addi	fp,sp,12
1001215c:	e13ffe15 	stw	r4,-8(fp)
10012160:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10012164:	000530fa 	rdctl	r2,ienable
10012168:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1001216c:	e0bfff17 	ldw	r2,-4(fp)
10012170:	00c00044 	movi	r3,1
10012174:	1884983a 	sll	r2,r3,r2
10012178:	1007883a 	mov	r3,r2
1001217c:	e0bffd17 	ldw	r2,-12(fp)
10012180:	1884703a 	and	r2,r3,r2
10012184:	1004c03a 	cmpne	r2,r2,zero
10012188:	10803fcc 	andi	r2,r2,255
}
1001218c:	e037883a 	mov	sp,fp
10012190:	df000017 	ldw	fp,0(sp)
10012194:	dec00104 	addi	sp,sp,4
10012198:	f800283a 	ret

1001219c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001219c:	defff504 	addi	sp,sp,-44
100121a0:	dfc00a15 	stw	ra,40(sp)
100121a4:	df000915 	stw	fp,36(sp)
100121a8:	df000904 	addi	fp,sp,36
100121ac:	e13ffc15 	stw	r4,-16(fp)
100121b0:	e17ffd15 	stw	r5,-12(fp)
100121b4:	e1bffe15 	stw	r6,-8(fp)
100121b8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100121bc:	00bffa84 	movi	r2,-22
100121c0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100121c4:	e0bffd17 	ldw	r2,-12(fp)
100121c8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100121cc:	e0bff817 	ldw	r2,-32(fp)
100121d0:	10800808 	cmpgei	r2,r2,32
100121d4:	1000271e 	bne	r2,zero,10012274 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100121d8:	0005303a 	rdctl	r2,status
100121dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100121e0:	e0fffa17 	ldw	r3,-24(fp)
100121e4:	00bfff84 	movi	r2,-2
100121e8:	1884703a 	and	r2,r3,r2
100121ec:	1001703a 	wrctl	status,r2
  
  return context;
100121f0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100121f4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100121f8:	008400b4 	movhi	r2,4098
100121fc:	10a31f04 	addi	r2,r2,-29572
10012200:	e0fff817 	ldw	r3,-32(fp)
10012204:	180690fa 	slli	r3,r3,3
10012208:	10c5883a 	add	r2,r2,r3
1001220c:	e0fffe17 	ldw	r3,-8(fp)
10012210:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10012214:	008400b4 	movhi	r2,4098
10012218:	10a31f04 	addi	r2,r2,-29572
1001221c:	e0fff817 	ldw	r3,-32(fp)
10012220:	180690fa 	slli	r3,r3,3
10012224:	10c5883a 	add	r2,r2,r3
10012228:	10800104 	addi	r2,r2,4
1001222c:	e0ffff17 	ldw	r3,-4(fp)
10012230:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10012234:	e0bffe17 	ldw	r2,-8(fp)
10012238:	10000526 	beq	r2,zero,10012250 <alt_iic_isr_register+0xb4>
1001223c:	e0bff817 	ldw	r2,-32(fp)
10012240:	e13ffc17 	ldw	r4,-16(fp)
10012244:	100b883a 	mov	r5,r2
10012248:	001200c0 	call	1001200c <alt_ic_irq_enable>
1001224c:	00000406 	br	10012260 <alt_iic_isr_register+0xc4>
10012250:	e0bff817 	ldw	r2,-32(fp)
10012254:	e13ffc17 	ldw	r4,-16(fp)
10012258:	100b883a 	mov	r5,r2
1001225c:	00120ac0 	call	100120ac <alt_ic_irq_disable>
10012260:	e0bff715 	stw	r2,-36(fp)
10012264:	e0bff917 	ldw	r2,-28(fp)
10012268:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001226c:	e0bffb17 	ldw	r2,-20(fp)
10012270:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10012274:	e0bff717 	ldw	r2,-36(fp)
}
10012278:	e037883a 	mov	sp,fp
1001227c:	dfc00117 	ldw	ra,4(sp)
10012280:	df000017 	ldw	fp,0(sp)
10012284:	dec00204 	addi	sp,sp,8
10012288:	f800283a 	ret

1001228c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1001228c:	defff804 	addi	sp,sp,-32
10012290:	dfc00715 	stw	ra,28(sp)
10012294:	df000615 	stw	fp,24(sp)
10012298:	dc000515 	stw	r16,20(sp)
1001229c:	df000604 	addi	fp,sp,24
100122a0:	e13ffb15 	stw	r4,-20(fp)
100122a4:	e17ffc15 	stw	r5,-16(fp)
100122a8:	e1bffd15 	stw	r6,-12(fp)
100122ac:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100122b0:	e13ffc17 	ldw	r4,-16(fp)
100122b4:	e17ffd17 	ldw	r5,-12(fp)
100122b8:	e1bffe17 	ldw	r6,-8(fp)
100122bc:	00125280 	call	10012528 <open>
100122c0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100122c4:	e0bffa17 	ldw	r2,-24(fp)
100122c8:	10002216 	blt	r2,zero,10012354 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100122cc:	04040074 	movhi	r16,4097
100122d0:	8417b404 	addi	r16,r16,24272
100122d4:	e0bffa17 	ldw	r2,-24(fp)
100122d8:	1009883a 	mov	r4,r2
100122dc:	01400304 	movi	r5,12
100122e0:	0003c5c0 	call	10003c5c <__mulsi3>
100122e4:	8085883a 	add	r2,r16,r2
100122e8:	10c00017 	ldw	r3,0(r2)
100122ec:	e0bffb17 	ldw	r2,-20(fp)
100122f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100122f4:	04040074 	movhi	r16,4097
100122f8:	8417b404 	addi	r16,r16,24272
100122fc:	e0bffa17 	ldw	r2,-24(fp)
10012300:	1009883a 	mov	r4,r2
10012304:	01400304 	movi	r5,12
10012308:	0003c5c0 	call	10003c5c <__mulsi3>
1001230c:	8085883a 	add	r2,r16,r2
10012310:	10800104 	addi	r2,r2,4
10012314:	10c00017 	ldw	r3,0(r2)
10012318:	e0bffb17 	ldw	r2,-20(fp)
1001231c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10012320:	04040074 	movhi	r16,4097
10012324:	8417b404 	addi	r16,r16,24272
10012328:	e0bffa17 	ldw	r2,-24(fp)
1001232c:	1009883a 	mov	r4,r2
10012330:	01400304 	movi	r5,12
10012334:	0003c5c0 	call	10003c5c <__mulsi3>
10012338:	8085883a 	add	r2,r16,r2
1001233c:	10800204 	addi	r2,r2,8
10012340:	10c00017 	ldw	r3,0(r2)
10012344:	e0bffb17 	ldw	r2,-20(fp)
10012348:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1001234c:	e13ffa17 	ldw	r4,-24(fp)
10012350:	0010d900 	call	10010d90 <alt_release_fd>
  }
} 
10012354:	e6ffff04 	addi	sp,fp,-4
10012358:	dfc00217 	ldw	ra,8(sp)
1001235c:	df000117 	ldw	fp,4(sp)
10012360:	dc000017 	ldw	r16,0(sp)
10012364:	dec00304 	addi	sp,sp,12
10012368:	f800283a 	ret

1001236c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1001236c:	defffb04 	addi	sp,sp,-20
10012370:	dfc00415 	stw	ra,16(sp)
10012374:	df000315 	stw	fp,12(sp)
10012378:	df000304 	addi	fp,sp,12
1001237c:	e13ffd15 	stw	r4,-12(fp)
10012380:	e17ffe15 	stw	r5,-8(fp)
10012384:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10012388:	01040074 	movhi	r4,4097
1001238c:	2117b704 	addi	r4,r4,24284
10012390:	e17ffd17 	ldw	r5,-12(fp)
10012394:	01800044 	movi	r6,1
10012398:	01c07fc4 	movi	r7,511
1001239c:	001228c0 	call	1001228c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
100123a0:	01040074 	movhi	r4,4097
100123a4:	2117b404 	addi	r4,r4,24272
100123a8:	e17ffe17 	ldw	r5,-8(fp)
100123ac:	000d883a 	mov	r6,zero
100123b0:	01c07fc4 	movi	r7,511
100123b4:	001228c0 	call	1001228c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100123b8:	01040074 	movhi	r4,4097
100123bc:	2117ba04 	addi	r4,r4,24296
100123c0:	e17fff17 	ldw	r5,-4(fp)
100123c4:	01800044 	movi	r6,1
100123c8:	01c07fc4 	movi	r7,511
100123cc:	001228c0 	call	1001228c <alt_open_fd>
}  
100123d0:	e037883a 	mov	sp,fp
100123d4:	dfc00117 	ldw	ra,4(sp)
100123d8:	df000017 	ldw	fp,0(sp)
100123dc:	dec00204 	addi	sp,sp,8
100123e0:	f800283a 	ret

100123e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100123e4:	defffe04 	addi	sp,sp,-8
100123e8:	dfc00115 	stw	ra,4(sp)
100123ec:	df000015 	stw	fp,0(sp)
100123f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100123f4:	00840074 	movhi	r2,4097
100123f8:	109c3b04 	addi	r2,r2,28908
100123fc:	10800017 	ldw	r2,0(r2)
10012400:	10000526 	beq	r2,zero,10012418 <alt_get_errno+0x34>
10012404:	00840074 	movhi	r2,4097
10012408:	109c3b04 	addi	r2,r2,28908
1001240c:	10800017 	ldw	r2,0(r2)
10012410:	103ee83a 	callr	r2
10012414:	00000206 	br	10012420 <alt_get_errno+0x3c>
10012418:	008400b4 	movhi	r2,4098
1001241c:	10a30e04 	addi	r2,r2,-29640
}
10012420:	e037883a 	mov	sp,fp
10012424:	dfc00117 	ldw	ra,4(sp)
10012428:	df000017 	ldw	fp,0(sp)
1001242c:	dec00204 	addi	sp,sp,8
10012430:	f800283a 	ret

10012434 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10012434:	defffb04 	addi	sp,sp,-20
10012438:	dfc00415 	stw	ra,16(sp)
1001243c:	df000315 	stw	fp,12(sp)
10012440:	dc000215 	stw	r16,8(sp)
10012444:	df000304 	addi	fp,sp,12
10012448:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1001244c:	e0bffe17 	ldw	r2,-8(fp)
10012450:	10800217 	ldw	r2,8(r2)
10012454:	10d00034 	orhi	r3,r2,16384
10012458:	e0bffe17 	ldw	r2,-8(fp)
1001245c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10012460:	e03ffd15 	stw	zero,-12(fp)
10012464:	00002306 	br	100124f4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10012468:	04040074 	movhi	r16,4097
1001246c:	8417b404 	addi	r16,r16,24272
10012470:	e0bffd17 	ldw	r2,-12(fp)
10012474:	1009883a 	mov	r4,r2
10012478:	01400304 	movi	r5,12
1001247c:	0003c5c0 	call	10003c5c <__mulsi3>
10012480:	8085883a 	add	r2,r16,r2
10012484:	10c00017 	ldw	r3,0(r2)
10012488:	e0bffe17 	ldw	r2,-8(fp)
1001248c:	10800017 	ldw	r2,0(r2)
10012490:	1880151e 	bne	r3,r2,100124e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10012494:	04040074 	movhi	r16,4097
10012498:	8417b404 	addi	r16,r16,24272
1001249c:	e0bffd17 	ldw	r2,-12(fp)
100124a0:	1009883a 	mov	r4,r2
100124a4:	01400304 	movi	r5,12
100124a8:	0003c5c0 	call	10003c5c <__mulsi3>
100124ac:	8085883a 	add	r2,r16,r2
100124b0:	10800204 	addi	r2,r2,8
100124b4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100124b8:	10000b0e 	bge	r2,zero,100124e8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100124bc:	e13ffd17 	ldw	r4,-12(fp)
100124c0:	01400304 	movi	r5,12
100124c4:	0003c5c0 	call	10003c5c <__mulsi3>
100124c8:	1007883a 	mov	r3,r2
100124cc:	00840074 	movhi	r2,4097
100124d0:	1097b404 	addi	r2,r2,24272
100124d4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100124d8:	e0bffe17 	ldw	r2,-8(fp)
100124dc:	18800226 	beq	r3,r2,100124e8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100124e0:	00bffcc4 	movi	r2,-13
100124e4:	00000a06 	br	10012510 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100124e8:	e0bffd17 	ldw	r2,-12(fp)
100124ec:	10800044 	addi	r2,r2,1
100124f0:	e0bffd15 	stw	r2,-12(fp)
100124f4:	00840074 	movhi	r2,4097
100124f8:	109c3a04 	addi	r2,r2,28904
100124fc:	10800017 	ldw	r2,0(r2)
10012500:	1007883a 	mov	r3,r2
10012504:	e0bffd17 	ldw	r2,-12(fp)
10012508:	18bfd72e 	bgeu	r3,r2,10012468 <__alt_data_end+0xf8012468>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1001250c:	0005883a 	mov	r2,zero
}
10012510:	e6ffff04 	addi	sp,fp,-4
10012514:	dfc00217 	ldw	ra,8(sp)
10012518:	df000117 	ldw	fp,4(sp)
1001251c:	dc000017 	ldw	r16,0(sp)
10012520:	dec00304 	addi	sp,sp,12
10012524:	f800283a 	ret

10012528 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10012528:	defff604 	addi	sp,sp,-40
1001252c:	dfc00915 	stw	ra,36(sp)
10012530:	df000815 	stw	fp,32(sp)
10012534:	df000804 	addi	fp,sp,32
10012538:	e13ffd15 	stw	r4,-12(fp)
1001253c:	e17ffe15 	stw	r5,-8(fp)
10012540:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10012544:	00bfffc4 	movi	r2,-1
10012548:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1001254c:	00bffb44 	movi	r2,-19
10012550:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10012554:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10012558:	e13ffd17 	ldw	r4,-12(fp)
1001255c:	01440074 	movhi	r5,4097
10012560:	295c3804 	addi	r5,r5,28896
10012564:	00128440 	call	10012844 <alt_find_dev>
10012568:	e0bff815 	stw	r2,-32(fp)
1001256c:	e0bff817 	ldw	r2,-32(fp)
10012570:	1000051e 	bne	r2,zero,10012588 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10012574:	e13ffd17 	ldw	r4,-12(fp)
10012578:	00128d40 	call	100128d4 <alt_find_file>
1001257c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10012580:	00800044 	movi	r2,1
10012584:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10012588:	e0bff817 	ldw	r2,-32(fp)
1001258c:	10002b26 	beq	r2,zero,1001263c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10012590:	e13ff817 	ldw	r4,-32(fp)
10012594:	00129e80 	call	100129e8 <alt_get_fd>
10012598:	e0bff915 	stw	r2,-28(fp)
1001259c:	e0bff917 	ldw	r2,-28(fp)
100125a0:	1000030e 	bge	r2,zero,100125b0 <open+0x88>
    {
      status = index;
100125a4:	e0bff917 	ldw	r2,-28(fp)
100125a8:	e0bffa15 	stw	r2,-24(fp)
100125ac:	00002506 	br	10012644 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
100125b0:	e13ff917 	ldw	r4,-28(fp)
100125b4:	01400304 	movi	r5,12
100125b8:	0003c5c0 	call	10003c5c <__mulsi3>
100125bc:	1007883a 	mov	r3,r2
100125c0:	00840074 	movhi	r2,4097
100125c4:	1097b404 	addi	r2,r2,24272
100125c8:	1885883a 	add	r2,r3,r2
100125cc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
100125d0:	e0fffe17 	ldw	r3,-8(fp)
100125d4:	00900034 	movhi	r2,16384
100125d8:	10bfffc4 	addi	r2,r2,-1
100125dc:	1886703a 	and	r3,r3,r2
100125e0:	e0bffc17 	ldw	r2,-16(fp)
100125e4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
100125e8:	e0bffb17 	ldw	r2,-20(fp)
100125ec:	1000051e 	bne	r2,zero,10012604 <open+0xdc>
100125f0:	e13ffc17 	ldw	r4,-16(fp)
100125f4:	00124340 	call	10012434 <alt_file_locked>
100125f8:	e0bffa15 	stw	r2,-24(fp)
100125fc:	e0bffa17 	ldw	r2,-24(fp)
10012600:	10001016 	blt	r2,zero,10012644 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10012604:	e0bff817 	ldw	r2,-32(fp)
10012608:	10800317 	ldw	r2,12(r2)
1001260c:	10000826 	beq	r2,zero,10012630 <open+0x108>
10012610:	e0bff817 	ldw	r2,-32(fp)
10012614:	10800317 	ldw	r2,12(r2)
10012618:	e13ffc17 	ldw	r4,-16(fp)
1001261c:	e17ffd17 	ldw	r5,-12(fp)
10012620:	e1bffe17 	ldw	r6,-8(fp)
10012624:	e1ffff17 	ldw	r7,-4(fp)
10012628:	103ee83a 	callr	r2
1001262c:	00000106 	br	10012634 <open+0x10c>
10012630:	0005883a 	mov	r2,zero
10012634:	e0bffa15 	stw	r2,-24(fp)
10012638:	00000206 	br	10012644 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
1001263c:	00bffb44 	movi	r2,-19
10012640:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10012644:	e0bffa17 	ldw	r2,-24(fp)
10012648:	1000090e 	bge	r2,zero,10012670 <open+0x148>
  {
    alt_release_fd (index);  
1001264c:	e13ff917 	ldw	r4,-28(fp)
10012650:	0010d900 	call	10010d90 <alt_release_fd>
    ALT_ERRNO = -status;
10012654:	00123e40 	call	100123e4 <alt_get_errno>
10012658:	1007883a 	mov	r3,r2
1001265c:	e0bffa17 	ldw	r2,-24(fp)
10012660:	0085c83a 	sub	r2,zero,r2
10012664:	18800015 	stw	r2,0(r3)
    return -1;
10012668:	00bfffc4 	movi	r2,-1
1001266c:	00000106 	br	10012674 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10012670:	e0bff917 	ldw	r2,-28(fp)
}
10012674:	e037883a 	mov	sp,fp
10012678:	dfc00117 	ldw	ra,4(sp)
1001267c:	df000017 	ldw	fp,0(sp)
10012680:	dec00204 	addi	sp,sp,8
10012684:	f800283a 	ret

10012688 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10012688:	defffa04 	addi	sp,sp,-24
1001268c:	df000515 	stw	fp,20(sp)
10012690:	df000504 	addi	fp,sp,20
10012694:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10012698:	0005303a 	rdctl	r2,status
1001269c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100126a0:	e0fffc17 	ldw	r3,-16(fp)
100126a4:	00bfff84 	movi	r2,-2
100126a8:	1884703a 	and	r2,r3,r2
100126ac:	1001703a 	wrctl	status,r2
  
  return context;
100126b0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100126b4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100126b8:	e0bfff17 	ldw	r2,-4(fp)
100126bc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100126c0:	e0bffd17 	ldw	r2,-12(fp)
100126c4:	10800017 	ldw	r2,0(r2)
100126c8:	e0fffd17 	ldw	r3,-12(fp)
100126cc:	18c00117 	ldw	r3,4(r3)
100126d0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100126d4:	e0bffd17 	ldw	r2,-12(fp)
100126d8:	10800117 	ldw	r2,4(r2)
100126dc:	e0fffd17 	ldw	r3,-12(fp)
100126e0:	18c00017 	ldw	r3,0(r3)
100126e4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100126e8:	e0bffd17 	ldw	r2,-12(fp)
100126ec:	e0fffd17 	ldw	r3,-12(fp)
100126f0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100126f4:	e0bffd17 	ldw	r2,-12(fp)
100126f8:	e0fffd17 	ldw	r3,-12(fp)
100126fc:	10c00015 	stw	r3,0(r2)
10012700:	e0bffb17 	ldw	r2,-20(fp)
10012704:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10012708:	e0bffe17 	ldw	r2,-8(fp)
1001270c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10012710:	e037883a 	mov	sp,fp
10012714:	df000017 	ldw	fp,0(sp)
10012718:	dec00104 	addi	sp,sp,4
1001271c:	f800283a 	ret

10012720 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10012720:	defffb04 	addi	sp,sp,-20
10012724:	dfc00415 	stw	ra,16(sp)
10012728:	df000315 	stw	fp,12(sp)
1001272c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10012730:	d0a01217 	ldw	r2,-32696(gp)
10012734:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10012738:	d0a6e817 	ldw	r2,-25696(gp)
1001273c:	10800044 	addi	r2,r2,1
10012740:	d0a6e815 	stw	r2,-25696(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012744:	00002e06 	br	10012800 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10012748:	e0bffd17 	ldw	r2,-12(fp)
1001274c:	10800017 	ldw	r2,0(r2)
10012750:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10012754:	e0bffd17 	ldw	r2,-12(fp)
10012758:	10800403 	ldbu	r2,16(r2)
1001275c:	10803fcc 	andi	r2,r2,255
10012760:	10000426 	beq	r2,zero,10012774 <alt_tick+0x54>
10012764:	d0a6e817 	ldw	r2,-25696(gp)
10012768:	1000021e 	bne	r2,zero,10012774 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1001276c:	e0bffd17 	ldw	r2,-12(fp)
10012770:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10012774:	e0bffd17 	ldw	r2,-12(fp)
10012778:	10800217 	ldw	r2,8(r2)
1001277c:	d0e6e817 	ldw	r3,-25696(gp)
10012780:	18801d36 	bltu	r3,r2,100127f8 <alt_tick+0xd8>
10012784:	e0bffd17 	ldw	r2,-12(fp)
10012788:	10800403 	ldbu	r2,16(r2)
1001278c:	10803fcc 	andi	r2,r2,255
10012790:	1000191e 	bne	r2,zero,100127f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10012794:	e0bffd17 	ldw	r2,-12(fp)
10012798:	10800317 	ldw	r2,12(r2)
1001279c:	e0fffd17 	ldw	r3,-12(fp)
100127a0:	18c00517 	ldw	r3,20(r3)
100127a4:	1809883a 	mov	r4,r3
100127a8:	103ee83a 	callr	r2
100127ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100127b0:	e0bfff17 	ldw	r2,-4(fp)
100127b4:	1000031e 	bne	r2,zero,100127c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100127b8:	e13ffd17 	ldw	r4,-12(fp)
100127bc:	00126880 	call	10012688 <alt_alarm_stop>
100127c0:	00000d06 	br	100127f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100127c4:	e0bffd17 	ldw	r2,-12(fp)
100127c8:	10c00217 	ldw	r3,8(r2)
100127cc:	e0bfff17 	ldw	r2,-4(fp)
100127d0:	1887883a 	add	r3,r3,r2
100127d4:	e0bffd17 	ldw	r2,-12(fp)
100127d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100127dc:	e0bffd17 	ldw	r2,-12(fp)
100127e0:	10c00217 	ldw	r3,8(r2)
100127e4:	d0a6e817 	ldw	r2,-25696(gp)
100127e8:	1880032e 	bgeu	r3,r2,100127f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100127ec:	e0bffd17 	ldw	r2,-12(fp)
100127f0:	00c00044 	movi	r3,1
100127f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100127f8:	e0bffe17 	ldw	r2,-8(fp)
100127fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10012800:	e0fffd17 	ldw	r3,-12(fp)
10012804:	d0a01204 	addi	r2,gp,-32696
10012808:	18bfcf1e 	bne	r3,r2,10012748 <__alt_data_end+0xf8012748>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1001280c:	0001883a 	nop
}
10012810:	e037883a 	mov	sp,fp
10012814:	dfc00117 	ldw	ra,4(sp)
10012818:	df000017 	ldw	fp,0(sp)
1001281c:	dec00204 	addi	sp,sp,8
10012820:	f800283a 	ret

10012824 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
10012824:	deffff04 	addi	sp,sp,-4
10012828:	df000015 	stw	fp,0(sp)
1001282c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10012830:	000170fa 	wrctl	ienable,zero
}
10012834:	e037883a 	mov	sp,fp
10012838:	df000017 	ldw	fp,0(sp)
1001283c:	dec00104 	addi	sp,sp,4
10012840:	f800283a 	ret

10012844 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10012844:	defffa04 	addi	sp,sp,-24
10012848:	dfc00515 	stw	ra,20(sp)
1001284c:	df000415 	stw	fp,16(sp)
10012850:	df000404 	addi	fp,sp,16
10012854:	e13ffe15 	stw	r4,-8(fp)
10012858:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1001285c:	e0bfff17 	ldw	r2,-4(fp)
10012860:	10800017 	ldw	r2,0(r2)
10012864:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10012868:	e13ffe17 	ldw	r4,-8(fp)
1001286c:	0003e340 	call	10003e34 <strlen>
10012870:	10800044 	addi	r2,r2,1
10012874:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10012878:	00000d06 	br	100128b0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1001287c:	e0bffc17 	ldw	r2,-16(fp)
10012880:	10c00217 	ldw	r3,8(r2)
10012884:	e0bffd17 	ldw	r2,-12(fp)
10012888:	1809883a 	mov	r4,r3
1001288c:	e17ffe17 	ldw	r5,-8(fp)
10012890:	100d883a 	mov	r6,r2
10012894:	0012b080 	call	10012b08 <memcmp>
10012898:	1000021e 	bne	r2,zero,100128a4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1001289c:	e0bffc17 	ldw	r2,-16(fp)
100128a0:	00000706 	br	100128c0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100128a4:	e0bffc17 	ldw	r2,-16(fp)
100128a8:	10800017 	ldw	r2,0(r2)
100128ac:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100128b0:	e0fffc17 	ldw	r3,-16(fp)
100128b4:	e0bfff17 	ldw	r2,-4(fp)
100128b8:	18bff01e 	bne	r3,r2,1001287c <__alt_data_end+0xf801287c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100128bc:	0005883a 	mov	r2,zero
}
100128c0:	e037883a 	mov	sp,fp
100128c4:	dfc00117 	ldw	ra,4(sp)
100128c8:	df000017 	ldw	fp,0(sp)
100128cc:	dec00204 	addi	sp,sp,8
100128d0:	f800283a 	ret

100128d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100128d4:	defffb04 	addi	sp,sp,-20
100128d8:	dfc00415 	stw	ra,16(sp)
100128dc:	df000315 	stw	fp,12(sp)
100128e0:	df000304 	addi	fp,sp,12
100128e4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100128e8:	00840074 	movhi	r2,4097
100128ec:	109c3604 	addi	r2,r2,28888
100128f0:	10800017 	ldw	r2,0(r2)
100128f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100128f8:	00003106 	br	100129c0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
100128fc:	e0bffd17 	ldw	r2,-12(fp)
10012900:	10800217 	ldw	r2,8(r2)
10012904:	1009883a 	mov	r4,r2
10012908:	0003e340 	call	10003e34 <strlen>
1001290c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10012910:	e0bffd17 	ldw	r2,-12(fp)
10012914:	10c00217 	ldw	r3,8(r2)
10012918:	e0bffe17 	ldw	r2,-8(fp)
1001291c:	10bfffc4 	addi	r2,r2,-1
10012920:	1885883a 	add	r2,r3,r2
10012924:	10800003 	ldbu	r2,0(r2)
10012928:	10803fcc 	andi	r2,r2,255
1001292c:	1080201c 	xori	r2,r2,128
10012930:	10bfe004 	addi	r2,r2,-128
10012934:	10800bd8 	cmpnei	r2,r2,47
10012938:	1000031e 	bne	r2,zero,10012948 <alt_find_file+0x74>
    {
      len -= 1;
1001293c:	e0bffe17 	ldw	r2,-8(fp)
10012940:	10bfffc4 	addi	r2,r2,-1
10012944:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10012948:	e0bffe17 	ldw	r2,-8(fp)
1001294c:	e0ffff17 	ldw	r3,-4(fp)
10012950:	1885883a 	add	r2,r3,r2
10012954:	10800003 	ldbu	r2,0(r2)
10012958:	10803fcc 	andi	r2,r2,255
1001295c:	1080201c 	xori	r2,r2,128
10012960:	10bfe004 	addi	r2,r2,-128
10012964:	10800be0 	cmpeqi	r2,r2,47
10012968:	1000081e 	bne	r2,zero,1001298c <alt_find_file+0xb8>
1001296c:	e0bffe17 	ldw	r2,-8(fp)
10012970:	e0ffff17 	ldw	r3,-4(fp)
10012974:	1885883a 	add	r2,r3,r2
10012978:	10800003 	ldbu	r2,0(r2)
1001297c:	10803fcc 	andi	r2,r2,255
10012980:	1080201c 	xori	r2,r2,128
10012984:	10bfe004 	addi	r2,r2,-128
10012988:	10000a1e 	bne	r2,zero,100129b4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1001298c:	e0bffd17 	ldw	r2,-12(fp)
10012990:	10c00217 	ldw	r3,8(r2)
10012994:	e0bffe17 	ldw	r2,-8(fp)
10012998:	1809883a 	mov	r4,r3
1001299c:	e17fff17 	ldw	r5,-4(fp)
100129a0:	100d883a 	mov	r6,r2
100129a4:	0012b080 	call	10012b08 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100129a8:	1000021e 	bne	r2,zero,100129b4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
100129ac:	e0bffd17 	ldw	r2,-12(fp)
100129b0:	00000806 	br	100129d4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
100129b4:	e0bffd17 	ldw	r2,-12(fp)
100129b8:	10800017 	ldw	r2,0(r2)
100129bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100129c0:	e0fffd17 	ldw	r3,-12(fp)
100129c4:	00840074 	movhi	r2,4097
100129c8:	109c3604 	addi	r2,r2,28888
100129cc:	18bfcb1e 	bne	r3,r2,100128fc <__alt_data_end+0xf80128fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
100129d0:	0005883a 	mov	r2,zero
}
100129d4:	e037883a 	mov	sp,fp
100129d8:	dfc00117 	ldw	ra,4(sp)
100129dc:	df000017 	ldw	fp,0(sp)
100129e0:	dec00204 	addi	sp,sp,8
100129e4:	f800283a 	ret

100129e8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
100129e8:	defffa04 	addi	sp,sp,-24
100129ec:	dfc00515 	stw	ra,20(sp)
100129f0:	df000415 	stw	fp,16(sp)
100129f4:	dc000315 	stw	r16,12(sp)
100129f8:	df000404 	addi	fp,sp,16
100129fc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10012a00:	00bffa04 	movi	r2,-24
10012a04:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012a08:	e03ffc15 	stw	zero,-16(fp)
10012a0c:	00002106 	br	10012a94 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10012a10:	04040074 	movhi	r16,4097
10012a14:	8417b404 	addi	r16,r16,24272
10012a18:	e0bffc17 	ldw	r2,-16(fp)
10012a1c:	1009883a 	mov	r4,r2
10012a20:	01400304 	movi	r5,12
10012a24:	0003c5c0 	call	10003c5c <__mulsi3>
10012a28:	8085883a 	add	r2,r16,r2
10012a2c:	10800017 	ldw	r2,0(r2)
10012a30:	1000151e 	bne	r2,zero,10012a88 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10012a34:	04040074 	movhi	r16,4097
10012a38:	8417b404 	addi	r16,r16,24272
10012a3c:	e0bffc17 	ldw	r2,-16(fp)
10012a40:	1009883a 	mov	r4,r2
10012a44:	01400304 	movi	r5,12
10012a48:	0003c5c0 	call	10003c5c <__mulsi3>
10012a4c:	8085883a 	add	r2,r16,r2
10012a50:	e0fffe17 	ldw	r3,-8(fp)
10012a54:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10012a58:	00840074 	movhi	r2,4097
10012a5c:	109c3a04 	addi	r2,r2,28904
10012a60:	10c00017 	ldw	r3,0(r2)
10012a64:	e0bffc17 	ldw	r2,-16(fp)
10012a68:	1880040e 	bge	r3,r2,10012a7c <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10012a6c:	00840074 	movhi	r2,4097
10012a70:	109c3a04 	addi	r2,r2,28904
10012a74:	e0fffc17 	ldw	r3,-16(fp)
10012a78:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10012a7c:	e0bffc17 	ldw	r2,-16(fp)
10012a80:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10012a84:	00000606 	br	10012aa0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10012a88:	e0bffc17 	ldw	r2,-16(fp)
10012a8c:	10800044 	addi	r2,r2,1
10012a90:	e0bffc15 	stw	r2,-16(fp)
10012a94:	e0bffc17 	ldw	r2,-16(fp)
10012a98:	10800810 	cmplti	r2,r2,32
10012a9c:	103fdc1e 	bne	r2,zero,10012a10 <__alt_data_end+0xf8012a10>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10012aa0:	e0bffd17 	ldw	r2,-12(fp)
}
10012aa4:	e6ffff04 	addi	sp,fp,-4
10012aa8:	dfc00217 	ldw	ra,8(sp)
10012aac:	df000117 	ldw	fp,4(sp)
10012ab0:	dc000017 	ldw	r16,0(sp)
10012ab4:	dec00304 	addi	sp,sp,12
10012ab8:	f800283a 	ret

10012abc <atexit>:
10012abc:	200b883a 	mov	r5,r4
10012ac0:	000d883a 	mov	r6,zero
10012ac4:	0009883a 	mov	r4,zero
10012ac8:	000f883a 	mov	r7,zero
10012acc:	0012b841 	jmpi	10012b84 <__register_exitproc>

10012ad0 <exit>:
10012ad0:	defffe04 	addi	sp,sp,-8
10012ad4:	000b883a 	mov	r5,zero
10012ad8:	dc000015 	stw	r16,0(sp)
10012adc:	dfc00115 	stw	ra,4(sp)
10012ae0:	2021883a 	mov	r16,r4
10012ae4:	0012c980 	call	10012c98 <__call_exitprocs>
10012ae8:	00840074 	movhi	r2,4097
10012aec:	109c3004 	addi	r2,r2,28864
10012af0:	11000017 	ldw	r4,0(r2)
10012af4:	20800f17 	ldw	r2,60(r4)
10012af8:	10000126 	beq	r2,zero,10012b00 <exit+0x30>
10012afc:	103ee83a 	callr	r2
10012b00:	8009883a 	mov	r4,r16
10012b04:	0012e2c0 	call	10012e2c <_exit>

10012b08 <memcmp>:
10012b08:	01c000c4 	movi	r7,3
10012b0c:	3980192e 	bgeu	r7,r6,10012b74 <memcmp+0x6c>
10012b10:	2144b03a 	or	r2,r4,r5
10012b14:	11c4703a 	and	r2,r2,r7
10012b18:	10000f26 	beq	r2,zero,10012b58 <memcmp+0x50>
10012b1c:	20800003 	ldbu	r2,0(r4)
10012b20:	28c00003 	ldbu	r3,0(r5)
10012b24:	10c0151e 	bne	r2,r3,10012b7c <memcmp+0x74>
10012b28:	31bfff84 	addi	r6,r6,-2
10012b2c:	01ffffc4 	movi	r7,-1
10012b30:	00000406 	br	10012b44 <memcmp+0x3c>
10012b34:	20800003 	ldbu	r2,0(r4)
10012b38:	28c00003 	ldbu	r3,0(r5)
10012b3c:	31bfffc4 	addi	r6,r6,-1
10012b40:	10c00e1e 	bne	r2,r3,10012b7c <memcmp+0x74>
10012b44:	21000044 	addi	r4,r4,1
10012b48:	29400044 	addi	r5,r5,1
10012b4c:	31fff91e 	bne	r6,r7,10012b34 <__alt_data_end+0xf8012b34>
10012b50:	0005883a 	mov	r2,zero
10012b54:	f800283a 	ret
10012b58:	20c00017 	ldw	r3,0(r4)
10012b5c:	28800017 	ldw	r2,0(r5)
10012b60:	1880041e 	bne	r3,r2,10012b74 <memcmp+0x6c>
10012b64:	31bfff04 	addi	r6,r6,-4
10012b68:	21000104 	addi	r4,r4,4
10012b6c:	29400104 	addi	r5,r5,4
10012b70:	39bff936 	bltu	r7,r6,10012b58 <__alt_data_end+0xf8012b58>
10012b74:	303fe91e 	bne	r6,zero,10012b1c <__alt_data_end+0xf8012b1c>
10012b78:	003ff506 	br	10012b50 <__alt_data_end+0xf8012b50>
10012b7c:	10c5c83a 	sub	r2,r2,r3
10012b80:	f800283a 	ret

10012b84 <__register_exitproc>:
10012b84:	00840074 	movhi	r2,4097
10012b88:	defffa04 	addi	sp,sp,-24
10012b8c:	109c3004 	addi	r2,r2,28864
10012b90:	dc000315 	stw	r16,12(sp)
10012b94:	14000017 	ldw	r16,0(r2)
10012b98:	dc400415 	stw	r17,16(sp)
10012b9c:	dfc00515 	stw	ra,20(sp)
10012ba0:	80805217 	ldw	r2,328(r16)
10012ba4:	2023883a 	mov	r17,r4
10012ba8:	10003626 	beq	r2,zero,10012c84 <__register_exitproc+0x100>
10012bac:	10c00117 	ldw	r3,4(r2)
10012bb0:	010007c4 	movi	r4,31
10012bb4:	20c00e16 	blt	r4,r3,10012bf0 <__register_exitproc+0x6c>
10012bb8:	1a400044 	addi	r9,r3,1
10012bbc:	8800211e 	bne	r17,zero,10012c44 <__register_exitproc+0xc0>
10012bc0:	18c00084 	addi	r3,r3,2
10012bc4:	18c7883a 	add	r3,r3,r3
10012bc8:	18c7883a 	add	r3,r3,r3
10012bcc:	12400115 	stw	r9,4(r2)
10012bd0:	10c7883a 	add	r3,r2,r3
10012bd4:	19400015 	stw	r5,0(r3)
10012bd8:	0005883a 	mov	r2,zero
10012bdc:	dfc00517 	ldw	ra,20(sp)
10012be0:	dc400417 	ldw	r17,16(sp)
10012be4:	dc000317 	ldw	r16,12(sp)
10012be8:	dec00604 	addi	sp,sp,24
10012bec:	f800283a 	ret
10012bf0:	00800034 	movhi	r2,0
10012bf4:	10800004 	addi	r2,r2,0
10012bf8:	10002526 	beq	r2,zero,10012c90 <__register_exitproc+0x10c>
10012bfc:	01006404 	movi	r4,400
10012c00:	d9400015 	stw	r5,0(sp)
10012c04:	d9800115 	stw	r6,4(sp)
10012c08:	d9c00215 	stw	r7,8(sp)
10012c0c:	00000000 	call	10000000 <__reset>
10012c10:	d9400017 	ldw	r5,0(sp)
10012c14:	d9800117 	ldw	r6,4(sp)
10012c18:	d9c00217 	ldw	r7,8(sp)
10012c1c:	10001c26 	beq	r2,zero,10012c90 <__register_exitproc+0x10c>
10012c20:	80c05217 	ldw	r3,328(r16)
10012c24:	10000115 	stw	zero,4(r2)
10012c28:	02400044 	movi	r9,1
10012c2c:	10c00015 	stw	r3,0(r2)
10012c30:	80805215 	stw	r2,328(r16)
10012c34:	10006215 	stw	zero,392(r2)
10012c38:	10006315 	stw	zero,396(r2)
10012c3c:	0007883a 	mov	r3,zero
10012c40:	883fdf26 	beq	r17,zero,10012bc0 <__alt_data_end+0xf8012bc0>
10012c44:	18d1883a 	add	r8,r3,r3
10012c48:	4211883a 	add	r8,r8,r8
10012c4c:	1211883a 	add	r8,r2,r8
10012c50:	41802215 	stw	r6,136(r8)
10012c54:	01000044 	movi	r4,1
10012c58:	11806217 	ldw	r6,392(r2)
10012c5c:	20c8983a 	sll	r4,r4,r3
10012c60:	310cb03a 	or	r6,r6,r4
10012c64:	11806215 	stw	r6,392(r2)
10012c68:	41c04215 	stw	r7,264(r8)
10012c6c:	01800084 	movi	r6,2
10012c70:	89bfd31e 	bne	r17,r6,10012bc0 <__alt_data_end+0xf8012bc0>
10012c74:	11806317 	ldw	r6,396(r2)
10012c78:	3108b03a 	or	r4,r6,r4
10012c7c:	11006315 	stw	r4,396(r2)
10012c80:	003fcf06 	br	10012bc0 <__alt_data_end+0xf8012bc0>
10012c84:	80805304 	addi	r2,r16,332
10012c88:	80805215 	stw	r2,328(r16)
10012c8c:	003fc706 	br	10012bac <__alt_data_end+0xf8012bac>
10012c90:	00bfffc4 	movi	r2,-1
10012c94:	003fd106 	br	10012bdc <__alt_data_end+0xf8012bdc>

10012c98 <__call_exitprocs>:
10012c98:	00840074 	movhi	r2,4097
10012c9c:	109c3004 	addi	r2,r2,28864
10012ca0:	10800017 	ldw	r2,0(r2)
10012ca4:	defff404 	addi	sp,sp,-48
10012ca8:	dd800815 	stw	r22,32(sp)
10012cac:	d8800015 	stw	r2,0(sp)
10012cb0:	10805204 	addi	r2,r2,328
10012cb4:	dd000615 	stw	r20,24(sp)
10012cb8:	dc800415 	stw	r18,16(sp)
10012cbc:	dfc00b15 	stw	ra,44(sp)
10012cc0:	df000a15 	stw	fp,40(sp)
10012cc4:	ddc00915 	stw	r23,36(sp)
10012cc8:	dd400715 	stw	r21,28(sp)
10012ccc:	dcc00515 	stw	r19,20(sp)
10012cd0:	dc400315 	stw	r17,12(sp)
10012cd4:	dc000215 	stw	r16,8(sp)
10012cd8:	2025883a 	mov	r18,r4
10012cdc:	2829883a 	mov	r20,r5
10012ce0:	d8800115 	stw	r2,4(sp)
10012ce4:	05bfffc4 	movi	r22,-1
10012ce8:	d8800017 	ldw	r2,0(sp)
10012cec:	14c05217 	ldw	r19,328(r2)
10012cf0:	98001d26 	beq	r19,zero,10012d68 <__call_exitprocs+0xd0>
10012cf4:	dd400117 	ldw	r21,4(sp)
10012cf8:	98800117 	ldw	r2,4(r19)
10012cfc:	173fffc4 	addi	fp,r2,-1
10012d00:	e0000d16 	blt	fp,zero,10012d38 <__call_exitprocs+0xa0>
10012d04:	14000044 	addi	r16,r2,1
10012d08:	8421883a 	add	r16,r16,r16
10012d0c:	8421883a 	add	r16,r16,r16
10012d10:	84402004 	addi	r17,r16,128
10012d14:	9c63883a 	add	r17,r19,r17
10012d18:	9c21883a 	add	r16,r19,r16
10012d1c:	a0001e26 	beq	r20,zero,10012d98 <__call_exitprocs+0x100>
10012d20:	80804017 	ldw	r2,256(r16)
10012d24:	15001c26 	beq	r2,r20,10012d98 <__call_exitprocs+0x100>
10012d28:	e73fffc4 	addi	fp,fp,-1
10012d2c:	843fff04 	addi	r16,r16,-4
10012d30:	8c7fff04 	addi	r17,r17,-4
10012d34:	e5bff91e 	bne	fp,r22,10012d1c <__alt_data_end+0xf8012d1c>
10012d38:	00800034 	movhi	r2,0
10012d3c:	10800004 	addi	r2,r2,0
10012d40:	10000926 	beq	r2,zero,10012d68 <__call_exitprocs+0xd0>
10012d44:	98800117 	ldw	r2,4(r19)
10012d48:	1000311e 	bne	r2,zero,10012e10 <__call_exitprocs+0x178>
10012d4c:	98800017 	ldw	r2,0(r19)
10012d50:	10003426 	beq	r2,zero,10012e24 <__call_exitprocs+0x18c>
10012d54:	9809883a 	mov	r4,r19
10012d58:	a8800015 	stw	r2,0(r21)
10012d5c:	00000000 	call	10000000 <__reset>
10012d60:	acc00017 	ldw	r19,0(r21)
10012d64:	983fe41e 	bne	r19,zero,10012cf8 <__alt_data_end+0xf8012cf8>
10012d68:	dfc00b17 	ldw	ra,44(sp)
10012d6c:	df000a17 	ldw	fp,40(sp)
10012d70:	ddc00917 	ldw	r23,36(sp)
10012d74:	dd800817 	ldw	r22,32(sp)
10012d78:	dd400717 	ldw	r21,28(sp)
10012d7c:	dd000617 	ldw	r20,24(sp)
10012d80:	dcc00517 	ldw	r19,20(sp)
10012d84:	dc800417 	ldw	r18,16(sp)
10012d88:	dc400317 	ldw	r17,12(sp)
10012d8c:	dc000217 	ldw	r16,8(sp)
10012d90:	dec00c04 	addi	sp,sp,48
10012d94:	f800283a 	ret
10012d98:	98800117 	ldw	r2,4(r19)
10012d9c:	80c00017 	ldw	r3,0(r16)
10012da0:	10bfffc4 	addi	r2,r2,-1
10012da4:	17001526 	beq	r2,fp,10012dfc <__call_exitprocs+0x164>
10012da8:	80000015 	stw	zero,0(r16)
10012dac:	183fde26 	beq	r3,zero,10012d28 <__alt_data_end+0xf8012d28>
10012db0:	00800044 	movi	r2,1
10012db4:	1708983a 	sll	r4,r2,fp
10012db8:	98806217 	ldw	r2,392(r19)
10012dbc:	9dc00117 	ldw	r23,4(r19)
10012dc0:	2084703a 	and	r2,r4,r2
10012dc4:	1000061e 	bne	r2,zero,10012de0 <__call_exitprocs+0x148>
10012dc8:	183ee83a 	callr	r3
10012dcc:	98800117 	ldw	r2,4(r19)
10012dd0:	15ffc51e 	bne	r2,r23,10012ce8 <__alt_data_end+0xf8012ce8>
10012dd4:	a8800017 	ldw	r2,0(r21)
10012dd8:	14ffd326 	beq	r2,r19,10012d28 <__alt_data_end+0xf8012d28>
10012ddc:	003fc206 	br	10012ce8 <__alt_data_end+0xf8012ce8>
10012de0:	98806317 	ldw	r2,396(r19)
10012de4:	2084703a 	and	r2,r4,r2
10012de8:	1000061e 	bne	r2,zero,10012e04 <__call_exitprocs+0x16c>
10012dec:	89400017 	ldw	r5,0(r17)
10012df0:	9009883a 	mov	r4,r18
10012df4:	183ee83a 	callr	r3
10012df8:	003ff406 	br	10012dcc <__alt_data_end+0xf8012dcc>
10012dfc:	9f000115 	stw	fp,4(r19)
10012e00:	003fea06 	br	10012dac <__alt_data_end+0xf8012dac>
10012e04:	89000017 	ldw	r4,0(r17)
10012e08:	183ee83a 	callr	r3
10012e0c:	003fef06 	br	10012dcc <__alt_data_end+0xf8012dcc>
10012e10:	98800017 	ldw	r2,0(r19)
10012e14:	982b883a 	mov	r21,r19
10012e18:	1027883a 	mov	r19,r2
10012e1c:	983fb61e 	bne	r19,zero,10012cf8 <__alt_data_end+0xf8012cf8>
10012e20:	003fd106 	br	10012d68 <__alt_data_end+0xf8012d68>
10012e24:	0005883a 	mov	r2,zero
10012e28:	003ffa06 	br	10012e14 <__alt_data_end+0xf8012e14>

10012e2c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10012e2c:	defffd04 	addi	sp,sp,-12
10012e30:	df000215 	stw	fp,8(sp)
10012e34:	df000204 	addi	fp,sp,8
10012e38:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10012e3c:	0001883a 	nop
10012e40:	e0bfff17 	ldw	r2,-4(fp)
10012e44:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10012e48:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10012e4c:	10000226 	beq	r2,zero,10012e58 <_exit+0x2c>
    ALT_SIM_FAIL();
10012e50:	002af070 	cmpltui	zero,zero,43969
10012e54:	00000106 	br	10012e5c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10012e58:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10012e5c:	003fff06 	br	10012e5c <__alt_data_end+0xf8012e5c>
