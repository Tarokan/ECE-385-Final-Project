/************************************************************************
Avalon-MM Interface for AES Decryption IP Core

Dong Kai Wang, Fall 2017

For use with ECE 385 Experiment 9
University of Illinois ECE Department

Register Map:

 0 : Player Coordinates (Top 8: x, Bottom 8: y)
 1	: Player Direction (one hot encoding. 0001 = left, 0010 = right 0100 = up, 1000 = down
 2	: Encounter (Top 8: True/False, Bottom 8: ID)
 3	: Current Pokemon ID
 4	: Health
 5	: 
 
 15: Dialogue text
************************************************************************/

module avalon_interface (
	// Avalon Clock Input
	input logic CLK,
	
	// Avalon Reset Input
	input logic RESET,
	
	// Avalon-MM Slave Signals
	input  logic AVL_READ,					// Avalon-MM Read
	input  logic AVL_WRITE,					// Avalon-MM Write
	input  logic AVL_CS,						// Avalon-MM Chip Select
	input  logic [3:0] AVL_ADDR,			// Avalon-MM Address
	input  logic [15:0] AVL_WRITEDATA,	// Avalon-MM Write Data
	output logic [15:0] AVL_READDATA,	// Avalon-MM Read Data
	
	// Exported Conduit
	output logic [15:0] EXPORT_COORDS,
	output logic [15:0] EXPORT_DIRECT,
	output logic [15:0] EXPORT_ENCOUNT,
	output logic [15:0] EXPORT_CURPOKE,
	output logic [15:0] EXPORT_HEALTH,
);
	logic [15:0] register_file[16];
	
	always_ff @ (posedge CLK) begin
		if(RESET) begin
			for(int i = 0; i< 16; i++) begin
				register_file[i] <= 15'b0;
			end
		end
		else if(AVL_WRITE && AVL_CS) begin
			register_file[AVL_ADDR][15:0] <= AVL_WRITEDATA[15:0];
		end
	end
	
	assign EXPORT_COORDS		= register_file[0][15:0];
	assign EXPORT_DIRECT		= register_file[1][15:0];
	assign EXPORT_ENCOUNT	= register_file[2][15:0];
	assign EXPORT_CURPOKE	= register_file[3][15:0];
	assign EXPORT_HEALTH		= register_file[4][15:0];

endmodule